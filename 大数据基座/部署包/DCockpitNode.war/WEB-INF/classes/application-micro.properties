# ======================================================================================
# 微服务应用子配置文件，这里的配置都是微服务应用模式下特有的
# ======================================================================================

############################# 基础配置(消费者与提供者) #############################
# 应用租户名称
application.tenantName=default
# 应用名称，做为微服务的唯一标识(规则:租户名-应用名，相同名称会构成微服务集群)
spring.application.name=${application.tenantName}-${application.name}

# 应用端口，与外部容器端口务必一致(本地开发调试时在tomcat7插件中通过环境变量设定，此处无需配置)
server.port=8080
# 应用上下文路径，与部署在外部容器时的访问路径务必一致，集群部署时所有节点也务必一致(本地开发调试时在tomcat7插件中通过环境变量设定，此处无需配置)
server.context-path=/epoint-web/rest

# 应用监控安全
management.security.enabled=false
# 应用监控地址前缀，实际访问要结合应用上下文路径，如http://127.0.0.1:8080/epoint-web/rest/actuator/info
management.context-path=/actuator


############################# 微服务应用实例与注册中心相关配置(消费者与提供者) #############################
# 应用实例的IP地址，默认自动获取
# 多网卡环境下请指定实际要用的IP地址，否则注册服务时可能取到其他不相关的IP地址，导致服务连不上
eureka.instance.ip-address=${spring.cloud.client.ipAddress}
# 使用IP地址注册服务
eureka.instance.prefer-ip-address=true
# 应用实例的ID
eureka.instance.instance-id=${eureka.instance.ip-address}:${server.port}
# 自定义应用实例元数据，可以被远程客户端发现=>org.springframework.cloud.client.ServiceInstance#getMetadata()
# 自定义应用监控地址前缀元数据(management.context-path)，用于监控中心远程访问应用监控数据
eureka.instance.metadata-map.management.context-path=${server.context-path}${management.context-path}
# 注册中心地址，集群环境多个地址用逗号,分隔
eureka.client.service-url.defaultZone=http://epoint:Gepoint@127.0.0.1:8761/eureka/


############################# 微服务远程调用框架feign配置(消费者) #############################
# 是否启用feign熔断支持
feign.hystrix.enabled=true
# 是否启用feign底层调用客户端HttpClient
feign.httpclient.enabled=true


############################# 微服务熔断与负载均衡相关配置(消费者) #############################
# 全局熔断参数，也可以将default改成具体服务名分别配置
# 熔断超时时间(毫秒)，配置优先级是具体服务的熔断超时时间 > 默认的熔断超时时间 > 负载超时时间
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=180000
# 熔断触发策略，一段时间(10s)内达到指定的请求数(默认20个)与错误率(默认50%)
hystrix.command.default.circuitBreaker.requestVolumeThreshold=20
hystrix.command.default.circuitBreaker.errorThresholdPercentage=50
# 半开试探休眠时间(默认5000ms)，熔断此时间后会尝试恢复请求
hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds=5000

# 全局负载配置，也可以指定具体服务(前面加一级服务名)配置
# 负载超时时间(毫秒)=(ribbonReadTimeout+ribbonConnectTimeout)*(maxAutoRetries+1)*(maxAutoRetriesNextServer+1)
ribbon.ReadTimeout=60000
ribbon.ConnectTimeout=10000
ribbon.MaxAutoRetries=0
ribbon.MaxAutoRetriesNextServer=1
ribbon.OkToRetryOnAllOperations=false

