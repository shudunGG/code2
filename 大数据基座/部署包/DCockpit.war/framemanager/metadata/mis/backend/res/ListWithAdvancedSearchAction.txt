{@PackageName};

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.web.bind.annotation.RestController;

import com.epoint.basic.controller.BaseController;
import com.epoint.basic.faces.export.ExportModel;
import com.epoint.core.dto.model.DataGridModel;
import com.epoint.database.peisistence.crud.impl.model.PageData;
import {@IServicePackage};
import {@DomainClassPackage};
import com.epoint.frame.service.metadata.mis.util.ListGenerator;

/**
 * {@BeanChineseName}list页面对应的后台
 * 
 * @author {@Author}
 * @version [版本号, {@GenerateDate}]
 */
@RestController("{@ActionName}")
@Scope("request")
public class {@ActionClassName}  extends BaseController
{
	@Autowired
	private {@ServiceClassName} service;  
    
    /**
     * {@BeanChineseName}实体对象
     */
    private {@TableBeanName} dataBean;
  
    /**
     * 表格控件model
     */
    private DataGridModel<{@TableBeanName}> model;
  	
    /**
     * 导出模型
     */
    private ExportModel exportModel;
    
    {@modelParameter}

    public void pageLoad() {
    }

    /**
     * 删除选定
     * 
     */
    public void deleteSelect() {
        List<String> select = getDataGridData().getSelectKeys();
        for (String sel : select) {
             service.deleteByGuid(sel);
        }
        addCallbackParam("msg", "成功删除！");
    }
    
    public DataGridModel<{@TableBeanName}> getDataGridData() {
        // 获得表格对象
        if (model == null) {
            model = new DataGridModel<{@TableBeanName}>()
            {

                @Override
                public List<{@TableBeanName}> fetchData(int first, int pageSize, String sortField, String sortOrder) {
                     // 获取where条件Map集合
                    Map<String, Object> conditionMap = ListGenerator.getSearchMap(getRequestContext().getComponents(),
                            sortField, sortOrder);
                    PageData<{@TableBeanName}> pageData = service.paginatorList(conditionMap, first, pageSize);
                    this.setRowCount(pageData.getRowCount());
                    return pageData.getList();
                }

            };
        }
        return model;
    }

    public {@TableBeanName} getDataBean() {
    	if(dataBean == null){
    		dataBean = new {@TableBeanName}();
    	}
        return dataBean;
    }

    public void setDataBean({@TableBeanName} dataBean) {
        this.dataBean = dataBean;
    }
    
    public ExportModel getExportModel() {
        if (exportModel == null) {
            exportModel = new ExportModel("{@ExportKeys}", "{@ExportValues}");
        }
        return exportModel;
    }
    
	{@GetSetMethodContent}
}
