/**
* jQuery MiniUI v3.0
* 
* Web Site : http://www.miniui.com
*
* Commercial License : http://www.miniui.com/license
*
* Copyright(c) 2012 All Rights Reserved. Shanghai PusSoft Co., Ltd (上海普加软件有限公司) [ services@plusoft.com.cn ]. 
* 
*/

mini = {
    components: {},
    uids: {},
    ux: {},
    doc: document,
    window: window,

    isReady: false,

    createTime: new Date(),

    byClass: function (cls, el) {
        //getElementsByClassName
        if (typeof el == "string") el = mini.byId(el);
        return jQuery("." + cls, el)[0];
    },
    getComponents: function () {
        var cs = [];
        for (var id in mini.components) {
            var c = mini.components[id];
            if (c.isControl) {
                cs.push(c);
            }
        }
        return cs;
    },
    get: function (id) {
        if (!id) return null;
        if (mini.isControl(id)) return id;
        if (typeof id == "string") {
            if (id.charAt(0) == '#') id = id.substr(1);
        }
        if (typeof id == "string") return mini.components[id];
        else {
            var control = mini.uids[id.uid];
            if (control && control.el == id) return control;
        }
        return null;
    },
    getbyUID: function (uid) {
        return mini.uids[uid];
    },
    findControls: function (fn, scope) {
        if (!fn) return [];
        scope = scope || mini;
        var controls = [];
        var uids = mini.uids;
        for (var uid in uids) {
            var control = uids[uid];
            var ret = fn.call(scope, control);
            if (ret === true || ret === 1) {
                controls.push(control);
                if (ret === 1) break;
            }
        }
        return controls;
    },
    getChildControls: function (parent) {
        var pel = parent.el ? parent.el : parent;
        var controls = mini.findControls(function (control) {
            if (!control.el || parent == control) return false;
            if (mini.isAncestor(pel, control.el) && control.within) return true;
            return false;
        });
        return controls;
    },
    emptyFn: function () { },
    //遍历控件内部，将所有子控件，通过this._name的方式映射到控件对象上
    //pre为true，表示首字母大写
    createNameControls: function (obj, pre) {
        if (!obj || !obj.el) return;
        if (!pre) pre = "_";
        var el = obj.el;
        var controls = mini.findControls(function (control) {
            if (!control.el || !control.name) return false;
            if (mini.isAncestor(el, control.el)) return true;
            return false;
        });

        for (var i = 0, l = controls.length; i < l; i++) {
            var c = controls[i];
            var name = pre + c.name;
            if (pre === true) {
                name = c.name[0].toUpperCase() + c.name.substring(1, c.name.length);
            }
            obj[name] = c;
        }

    },

    getsByName: function (name, parentNode) {
        return mini.getsbyName(name, parentNode);
    },

    getsbyName: function (name, parentNode) {
        var isControl = mini.isControl(parentNode);
        var parentControl = parentNode;
        if (parentNode && isControl) {
            parentNode = parentNode.el;
        }
        parentNode = mini.byId(parentNode);
        parentNode = parentNode || document.body;
        var controls = mini.findControls(function (control) {
            if (!control.el) return false;
            if (control.name == name && mini.isAncestor(parentNode, control.el)) return true;
            return false;
        }, this);

        if (isControl && controls.length == 0 && parentControl && parentControl.getbyName) {
            var obj = parentControl.getbyName(name);
            if (obj) controls.push(obj);
        }

        return controls;
    },
    getbyName: function (name, parentNode) {
        return mini.getsbyName(name, parentNode)[0];
    },

    getByName: function (name, parentNode) {
        return mini.getbyName(name, parentNode);
    },

    getParams: function (url) {
        if (!url) url = location.href;
        url = url.split("?")[1];
        var params = {};
        if (url) {
            var us = url.split("&");
            for (var i = 0, l = us.length; i < l; i++) {
                var ps = us[i].split("=");
                //params[ps[0]] = decodeURIComponent(ps[1]);
                try {
                    params[ps[0]] = decodeURIComponent(unescape(ps[1]));
                } catch (ex) {

                }
            }
        }
        return params;
    },

    reg: function (cmp) {
        this.components[cmp.id] = cmp;
        this.uids[cmp.uid] = cmp;
        //cmp.type = cmp.constructor
    },
    unreg: function (cmp) {
        delete mini.components[cmp.id];
        delete mini.uids[cmp.uid];

        //        mini.components[cmp.id] = null;
        //        mini.uids[cmp.uid] = null;
    },

    classes: {},
    uiClasses: {},
    getClass: function (className) {
        if (!className) return null;
        return this.classes[className.toLowerCase()];
    },
    getClassByUICls: function (uiCls) {

        return this.uiClasses[uiCls.toLowerCase()];
    },


    idPre: "mini-",
    idIndex: 1,
    newId: function (idPre) {
        return (idPre || this.idPre) + this.idIndex++;
    },

    copyTo: function (to, from) {
        if (to && from) {
            for (var p in from) {
                to[p] = from[p];
            }
        }
        return to;
    },
    copyIf: function (to, from) {
        if (to && from) {
            for (var p in from) {
                if (mini.isNull(to[p])) {
                    to[p] = from[p];
                }
            }
        }
        return to;
    },
    createDelegate: function (fn, scope) {
        if (!fn) return function () { };
        return function () {
            return fn.apply(scope, arguments);
        }
    },

    isControl: function (obj) {
        return !!(obj && obj.isControl);
    },
    isElement: function (obj) {
        return obj && obj.appendChild;
    },
    isDate: function (value) {
        return !!(value && value.getFullYear);
    },
    isArray: function (value) {
        return !!(value && !!value.unshift);
    },
    isNull: function (value) {
        return value === null || value === undefined;
    },

    isNumber: function (value) {
        return !isNaN(value) && typeof value == 'number';
    },
    isEquals: function (a, b) {
        //null, undefined
        if (a !== 0 && b !== 0) {
            if ((mini.isNull(a) || a == "") && (mini.isNull(b) || b == "")) return true;
        }
        //date
        if (a && b && a.getFullYear && b.getFullYear) return a.getTime() === b.getTime();
        //Object
        if (typeof a == 'object' && typeof b == 'object') {
            return a === b;
        }
        //common
        return String(a) === String(b);
    },
    forEach: function (array, method, scope) {
        var list = array.clone();
        for (var i = 0, l = list.length; i < l; i++) {
            var o = list[i];
            if (method.call(scope, o, i, array) === false) break;
        }
    },
    sort: function (array, fn, scope) {
        scope = scope || array;
        //array.sort(fn);           //chrome sort超过20个数字有bug
        //alert(1);
        // 冒泡排序  

        function sort(array, func) {
            var i = 0, len = array.length,
              j, d;
            for (; i < len; i++) {
                for (j = i; j < len; j++) {
                    var a = array[i], b = array[j];
                    var r = func(a, b);
                    if (r > 0) {

                        //对象排序，保持原始顺序，必须要Insert, remove
                        array.removeAt(j);
                        array.insert(i, b);

                        // 这个适合数字排序
                        //                        d = array[j];
                        //                        array[j] = array[i];
                        //                        array[i] = d;
                    }
                }
            }
            return array;
        }

        sort(array, fn);
    },
    ////////////////////////////



    elWarp: document.createElement("div")
    //    ,        
    //    createElement: function (html) {        
    //        html = html.trim();
    //        this.elWarp.innerHTML = html;
    //        var el = this.elWarp.firstChild;
    //        this.elWarp.removeChild(el);
    //        return el;
    //    }
};


if (typeof mini_debugger == "undefined") {
    mini_debugger = true;
}
if (typeof mini_useShims == "undefined") {
    mini_useShims = false;
}
if (typeof mini_ajaxAsyncInvoke == "undefined") {
    mini_ajaxAsyncInvoke = true;        //ie11下，如果post + data + setTimeout 异步调用，会有诡异问题
}

//mini.getbyDom = function (dom) {
//    var controls = mini.getComponents();
//    for (var i = 0, l = controls.length; i < l; i++) {
//        var c = controls[i];
//        if(e.el && mini.isAn
//    }
//}

mini_regClass = function (clazz, className) {
    className = className.toLowerCase();
    if (!mini.classes[className]) {
        mini.classes[className] = clazz;
        clazz.prototype.type = className;
    }
    var uiCls = clazz.prototype.uiCls;
    if (!mini.isNull(uiCls) && !mini.uiClasses[uiCls]) {
        mini.uiClasses[uiCls] = clazz;
    }
}
mini_extend = function (newClass, sp, overrides) {
    if (typeof sp != 'function') return this;

    var sb = newClass, sbp = sb.prototype, spp = sp.prototype;
    if (sb.superclass == spp) return;
    sb.superclass = spp;
    sb.superclass.constructor = sp;

    for (var p in spp) {
        sbp[p] = spp[p];
    }
    if (overrides) {
        for (var p in overrides) {
            sbp[p] = overrides[p];
        }
    }
    return sb;
}
//mini_extend = function (subClass, superClass, overrides) {

//    var F = function () { };
//    F.prototype = superClass.prototype;
//    var fn = subClass.prototype = new F();

//    if (overrides) {
//        for (var prop in overrides) {
//            fn[prop] = overrides[prop];
//        }
//    }

//    subClass.superclass = superClass.prototype;
//    subClass.superclass.constructor = superClass;

//    return subClass;
//}
mini.copyTo(mini, {
    extend: mini_extend,
    regClass: mini_regClass,
    debug: false
});


mini.namespace = function (names) {
    if (typeof names != "string") return;
    names = names.split(".");
    var parent = window;
    for (var i = 0, l = names.length; i < l; i++) {
        var name = names[i];
        var obj = parent[name];
        if (!obj) {
            obj = parent[name] = {};
        }
        parent = obj;
    }
}

mini._BindCallbacks = [];
mini._BindEvents = function (fn, scope) {
    mini._BindCallbacks.push([fn, scope]);
    if (!mini._EventTimer) {
        mini._EventTimer = setTimeout(function () {
            mini._FireBindEvents();
        }, 50);
    }
}
mini._FireBindEvents = function () {
    for (var i = 0, l = mini._BindCallbacks.length; i < l; i++) {
        var e = mini._BindCallbacks[i];
        e[0].call(e[1]);
    }
    mini._BindCallbacks = [];
    mini._EventTimer = null;
}

mini._getFunctoin = function (fnName) {
    if (typeof fnName != "string") return null;
    var names = fnName.split(".");
    var fn = null;
    for (var i = 0, l = names.length; i < l; i++) {
        var name = names[i];
        if (!fn) fn = window[name];
        else fn = fn[name];
        if (!fn) break;
    }
    return fn;
}

//var _eval = eval;       //window["ev" + "al"]

//计算表达式的值
//function evalFn(fn) {
//    var Fn = Function;  //一个变量指向Function，防止有些前端编译工具报错
//    return new Fn('return ' + fn)();
//}

//var aaeval = eval;

var cacheParts = {};

function createPathParts(path) {
    var parts = cacheParts[path];
    if (!parts) {
        parts = path.split('.');
        for (var i = 0, l = parts.length; i < l; i++) {
            var field = parts[i];
            var index = field.indexOf('[');
            if (index > -1) {
                parts[i] = field.substr(0, index);
                parts.splice(++i, 0, parseInt(field.substr(index + 1)));
            }
        }
        cacheParts[path] = parts;
    }
    return parts;
}

// getBindingValue
function getValueByPath(obj, path) {
    if (!obj || !path) return;

    if (path in obj) return obj[path];

    var parts = createPathParts(path);

    for (var i = 0, l = parts.length; i < l && obj; i++) {
        obj = obj[parts[i]];
    }

    return obj;
}


mini._getMap = function (name, obj) {
    if (!name || !obj) return undefined;
    var v = obj[name];
    if (v !== undefined) return v;

    var index = name.indexOf(".");
    if (index == -1 && name.indexOf("[") == -1) return obj[name];
    if (index == (name.length - 1)) return obj[name];
    var s = "obj." + name;
    try {
        //var v = eval(s);
        var v = getValueByPath(obj, name);
        //var v = _eval(s);

        //        var fn = new Function('return ' + s);
        //        var v = fn();

    } catch (e) {
        return undefined;
    }
    return v;
}
mini._setMap = function (name, value, obj) {
    if (!obj) return;
    if (typeof name != "string") return;

    var names = name.split(".");

    function createArray(obj, name, num, defaultValue) {
        var arr = obj[name];
        if (!arr) {
            arr = obj[name] = [];
        }
        for (var i = 0; i <= num; i++) {
            var arrObj = arr[i];
            if (!arrObj) {
                if (defaultValue === null || defaultValue === undefined) {
                    arrObj = arr[i] = {};
                } else {
                    arrObj = arr[i] = defaultValue;
                }
            }
        }
        return obj[name][num];
    }

    var obj2 = null;
    for (var i = 0, l = names.length; i <= l - 1; i++) {
        var name = names[i];

        if (i == l - 1) {
            if (name.indexOf(']') == -1) {
                obj[name] = value;
            } else {
                //array
                var as = name.split("[");
                var n1 = as[0], n2 = parseInt(as[1]);
                createArray(obj, n1, n2, "");
                obj[n1][n2] = value;
            }

            break;
        }

        if (name.indexOf(']') == -1) {
            //obj
            obj2 = obj[name];
            if (i <= l - 2 && obj2 == null) {
                obj[name] = obj2 = {};
            }
            obj = obj2;
        } else {
            //array
            var as = name.split("[");
            var n1 = as[0], n2 = parseInt(as[1]);
            obj = createArray(obj, n1, n2);
            //var n3 = parseInt(as[2]), n4 = parseInt(as[3]), n5 = parseInt(as[4]);
        }

    }
    return value;
}

//mini._setMap = function (name, value, obj) {
//    if (!obj) return;
//    if (typeof name != "string") return;

//    var names = name.split(".");

//    function createArray(obj, name, num) {
//        var arr = obj[name];
//        if (!arr) {
//            arr = obj[name] = [];
//        }
//        for (var i = 0; i <= num; i++) {
//            var arrObj = arr[i];
//            if (!arrObj) arrObj = arr[i] = {};
//        }
//        return obj[name][num];
//    }

//    var obj2 = null;
//    for (var i = 0, l = names.length; i <= l - 1; i++) {
//        var name = names[i];

//        if (i == l - 1) {
//            obj[name] = value;
//            break;
//        }

//        if (name.indexOf(']') == -1) {
//            //obj
//            obj2 = obj[name];
//            if (i <= l - 2 && obj2 == null) {
//                obj[name] = obj2 = {};
//            }
//            obj = obj2;
//        } else {
//            //array
//            var as = name.split("[");
//            var n1 = as[0], n2 = parseInt(as[1]);
//            obj = createArray(obj, n1, n2);

//            //var n3 = parseInt(as[2]), n4 = parseInt(as[3]), n5 = parseInt(as[4]);
//        }

//    }
//    return value;
//}

mini.getAndCreate = function (id) {
    if (!id) return null;
    if (typeof id == "string") return mini.components[id];

    if (typeof id == "object") {
        if (mini.isControl(id)) {
            return id;
        } else if (mini.isElement(id)) {
            return mini.uids[id.uid];
        } else {
            return mini.create(id);
        }
    }
    return null;
};
mini.create = function (uiConfig) {
    if (!uiConfig) return null;
    if (mini.get(uiConfig.id) === uiConfig) return uiConfig;
    var clazz = this.getClass(uiConfig.type);
    if (!clazz) return null;
    var ui = new clazz();
    ui.set(uiConfig);
    return ui;
}

/* Component 
-----------------------------------------------------------------------------*/
mini.Component = function () {
    this._events = {};

    this.uid = mini.newId(this._idPre);
    this._id = this.uid;
    if (!this.id) {
        this.id = this.uid;
    }
    mini.reg(this);

    //this._doInit();
}
mini.Component.prototype = {
    isControl: true,
    id: null,
    _idPre: "mini-",
    _idSet: false,
    _canFire: true,

    //    inited: false,
    //    _doInit: function () {
    //        if (this.inited == false) {
    //            this.inited = true;
    //            this.fire("init");
    //        }
    //    },

    set: function (kv) {
        if (typeof kv == 'string') {
            return this;
        }
        var _allowLayout = this._allowLayout;
        this._allowLayout = false;

        var renderTo = kv.renderTo || kv.render;
        delete kv.renderTo;
        delete kv.render;
        //bind events
        for (var key in kv) {
            if (key.toLowerCase().indexOf('on') == 0) {
                if (this["_$" + key]) continue;
                var fn = kv[key];
                this.on(key.substring(2, key.length).toLowerCase(), fn);
                delete kv[key];
            }
        }


        //set property
        for (var key in kv) {
            var v = kv[key];
            var n = 'set' + key.charAt(0).toUpperCase() + key.substring(1, key.length);
            var setter = this[n];

            if (setter) {
                setter.call(this, v);
            } else {
                this[key] = v;
            }
        }

        if (renderTo && this.render) {
            this.render(renderTo);
        }

        this._allowLayout = _allowLayout;
        if (this.doLayout) this.doLayout();

        return this;
    },

    fire: function (type, event) {
        if (this._canFire == false) return;
        type = type.toLowerCase();
        var handlers = this._events[type];
        if (handlers) {
            if (!event) event = {};
            if (event && event != this) {
                event.source = event.sender = this;
                if (!event.type) {
                    event.type = type;
                }
            }

            for (var i = 0, l = handlers.length; i < l; i++) {
                var listener = handlers[i];
                if (listener) {
                    listener[0].apply(listener[1], [event]);
                }
            }
        }
    },
    on: function (type, fn, scope) {

        if (typeof fn == "string") {

            var f = mini._getFunctoin(fn);
            if (!f) {
                //eval("fn = function(e){   " + fn + ".call(this,e)}");
                var id = mini.newId("__str_");
                window[id] = fn;

                //window["ev" + "al"].call(window, "fn = function(e){var s = " + id + ";var fn = mini._getFunctoin(s); if(fn) {fn.call(this, e)}else{eval(s);}}");                
                //fn = new Function('e', 'var s = ' + id + ';var fn = mini._getFunctoin(s); if(fn) {fn.call(this, e)}else{window["ev" + "al"](s);}');

                fn = new Function('e', 'var s = ' + id + ';var fn = mini._getFunctoin(s); if(fn) {fn.call(this, e)}else{eval(s);}');
            } else {
                fn = f;
            }
        }

        if (typeof fn != 'function' || !type) return false;
        type = type.toLowerCase();
        var event = this._events[type];
        if (!event) {
            event = this._events[type] = [];
        }
        scope = scope || this;
        if (!this.findListener(type, fn, scope)) {
            event.push([fn, scope]);
        }
        return this;
    },
    un: function (type, fn, scope) {
        //if (typeof fn != 'function') return false;
        type = type.toLowerCase();
        var event = this._events[type];
        if (event) {
            if (fn) {
                scope = scope || this;
                var listener = this.findListener(type, fn, scope);
                if (listener) {
                    event.remove(listener);
                }
            } else {
                delete this._events[type];
            }
        }
        return this;
    },
    findListener: function (type, fn, scope) {
        type = type.toLowerCase();
        scope = scope || this;
        var handlers = this._events[type];
        if (handlers) {
            for (var i = 0, l = handlers.length; i < l; i++) {
                var listener = handlers[i];
                if (listener[0] === fn && listener[1] === scope) return listener;
            }
        }
    },
    //    removeAllListener: function () {
    //        
    //    },
    setId: function (id) {
        if (!id) throw new Error("id not null");
        if (this._idSet) throw new Error("id just set only one");
        mini["unreg"](this);
        this.id = id;
        if (this.el) this.el.id = id;
        if (this._valueEl) this._valueEl.id = id + "$value";
        if (this._textEl) this._textEl.id = id + "$text";
        this._idSet = true;
        mini.reg(this);
    },
    getId: function () {
        return this.id;
    },
    destroy: function () {
        mini["unreg"](this);
        this.fire("destroy");
        //this._events = null;

        this._events = {};
    }
}


/* Control 
-----------------------------------------------------------------------------*/

mini.Control = function (el) {
    //mini.Control.superclass.constructor.apply(this, arguments);
    mini.Control.superclass.constructor.apply(this, arguments);

    this._create();
    this.el.uid = this.uid;

    //this.init();

    this._initEvents();

    //this._doInit(); 

    if (this._clearBorder) {
        this.el.style.borderWidth = "0";
    }
    this.addCls(this.uiCls);
    this.setWidth(this.width);
    this.setHeight(this.height);

    this.el.style.display = this.visible ? this._displayStyle : "none";

    if (el) mini.applyTo.call(this, el);
}
mini.extend(mini.Control, mini.Component, {
    jsName: null,

    width: "",
    height: "",

    visible: true,
    readOnly: false,
    enabled: true,
    //rendered: false,
    tooltip: "",

    _readOnlyCls: "mini-readonly",
    _disabledCls: "mini-disabled",

    _create: function () {
        this.el = document.createElement("div");
    },
    _initEvents: function () {
    },
    //    init: function () {

    //    },
    within: function (e) {

        if (mini.isAncestor(this.el, e.target)) return true;
        return false;
    },

    name: "",
    setName: function (value) {
        this.name = value;
        //if (this._valueEl) mini.setAttr(this._valueEl, "name", this.name);
    },
    getName: function () {
        return this.name;
    },

    isAutoHeight: function () {
        var v = this.el.style.height;
        return v == "auto" || v == "";
        //var minHeight = mini_getStyle(this.el, 'min-height');
        //return v == "auto" || (v == "" && !minHeight);
    },
    isAutoWidth: function () {
        var v = this.el.style.width;
        return v == "auto" || v == "";
    },
    isFixedSize: function () {
        //        var el = this.el;
        //        var width = String(el.style.width);
        //        var height = String(el.style.height);

        var width = this.width;
        var height = this.height;
        if (parseInt(width) + "px" == width && parseInt(height) + "px" == height) return true;
        return false;
    },

    isRender: function (parentNode) {

        return !!(this.el && this.el.parentNode && this.el.parentNode.tagName);
    },
    render: function (parent, position) {
        if (typeof parent === 'string') {
            if (parent == "#body") parent = document.body;
            else parent = mini.byId(parent);
        }
        if (!parent) return;
        if (!position) position = "append";
        position = position.toLowerCase();

        if (position == "before") {
            jQuery(parent).before(this.el);
        } else if (position == "prepend") {
            jQuery(parent).prepend(this.el);
        } else if (position == "after") {
            jQuery(parent).after(this.el);
        } else {
            parent.appendChild(this.el);
        }

        //this.rendered = true;
        this.el.id = this.id;

        this.doLayout();
        this.fire("render");
    },
    //    isTopControl: function () {
    //        var doc = document;
    //        var p = this.el.parentNode;
    //        while (p != doc && p != null) {
    //            var pcontrol = mini.get(p);
    //            if (pcontrol) {
    //                if (mini.isControl(pcontrol)) return true;                
    //            }
    //            p = p.parentNode;
    //        }
    //        return true;
    //    },

    getEl: function () {
        return this.el;
    },
    setJsName: function (value) {
        this.jsName = value;
        window[value] = this;
    },
    getJsName: function () {
        return this.jsName;
    },
    //tooltipPlacement: "bottom",
    setTooltip: function (value) {
        this.tooltip = value;
        this.el.title = value;

        if (this.tooltipPlacement) jQuery(this.el).attr("data-placement", this.tooltipPlacement);

    },
    getTooltip: function () {
        return this.tooltip;
    },
    _sizeChanged: function () {
        this.doLayout();
    },
    setWidth: function (value) {
        if (parseInt(value) == value) value += "px";
        this.width = value;
        this.el.style.width = value;
        this._sizeChanged();
    },
    getWidth: function (content) {
        //var el = this._borderEl || this.el;
        var el = this.el;
        var w = content ? jQuery(el).width() : jQuery(el).outerWidth();
        if (content && this._borderEl) {
            var b2 = mini.getBorders(this._borderEl);
            w = w - b2.left - b2.right;
        }
        return w;
    },
    setHeight: function (value) {
        if (parseInt(value) == value) value += "px";
        this.height = value;
        this.el.style.height = value;
        this._sizeChanged();
    },
    getHeight: function (content) {
        var h = content ? jQuery(this.el).height() : jQuery(this.el).outerHeight();
        //alert(jQuery(this.el).height());
        
        if (content && this._borderEl) {
            var b2 = mini.getBorders(this._borderEl);
            h = h - b2.top - b2.bottom;
        }
        return h;
    },
    getBox: function () {
        return mini.getBox(this.el);
    },
    setBorderStyle: function (value) {
        var el = this._borderEl || this.el;
        mini.setStyle(el, value);
        this.doLayout();
    },
    getBorderStyle: function () {
        return this.borderStyle;
    },
    _clearBorder: true,
    setStyle: function (value) {
        this.style = value;
        mini.setStyle(this.el, value);
        if (this._clearBorder) {
            this.el.style.borderWidth = "0";
            this.el.style.padding = "0px";
        }
        //        this.width = mini.getWidth(this.el);
        //        this.height = mini.getHeight(this.el);
        this.width = this.el.style.width;
        this.height = this.el.style.height;
        this._sizeChanged();
    },
    getStyle: function () {
        return this.style;
    },
    setCls: function (cls) {

        this.addCls(cls);
    },
    getCls: function () {
        return this.cls;
    },
    addCls: function (cls) {
        mini.addClass(this.el, cls);
    },
    removeCls: function (cls) {
        mini.removeClass(this.el, cls);
    },
    _doReadOnly: function () {
        if (this.readOnly) {
            this.addCls(this._readOnlyCls);
        } else {
            this.removeCls(this._readOnlyCls);
        }
    },
    setReadOnly: function (value) {
        this.readOnly = value;
        this._doReadOnly();
    },
    getReadOnly: function () {
        return this.readOnly;
    },
    getParent: function (uiCls) {
        var doc = document;
        var p = this.el.parentNode;
        while (p != doc && p != null) {
            var pcontrol = mini.get(p);
            if (pcontrol) {
                if (!mini.isControl(pcontrol)) return null;
                if (!uiCls || pcontrol.uiCls == uiCls) return pcontrol;
            }
            p = p.parentNode;
        }
        return null;
    },
    isReadOnly: function () {
        if (this.readOnly || !this.enabled) return true;
        var p = this.getParent();
        if (p) return p.isReadOnly();
        return false;
    },
    setEnabled: function (value) {
        this.enabled = value;
        if (this.enabled) {
            this.removeCls(this._disabledCls);
        } else {
            this.addCls(this._disabledCls);
        }
        this._doReadOnly();
    },
    getEnabled: function () {
        return this.enabled;
    },
    enable: function () {
        this.setEnabled(true);
    },
    disable: function () {
        this.setEnabled(false);
    },
    _displayStyle: "",
    setVisible: function (value) {
        this.visible = value;
        if (this.el) {
            this.el.style.display = value ? this._displayStyle : "none";
            this.doLayout();
        }
    },
    getVisible: function () {
        return this.visible;
    },
    show: function () {
        this.setVisible(true);
    },
    hide: function () {
        this.setVisible(false);
    },
    isDisplay: function (ignoresFn) {

        if (mini.WindowVisible == false || !this.el) return false;
        //

        var doc = document.body;
        var p = this.el;
        while (1) {
            if (p == null || !p.style) return false;
            if (p && p.style && p.style.display == "none") {
                //return false;
                if (ignoresFn) {

                    if (ignoresFn(p) !== true) return false;
                }
                else return false;
            }
            if (p == doc) return true;

            p = p.parentNode;

        }
        return true;
    },

    _allowUpdate: true,
    beginUpdate: function () {
        this._allowUpdate = false;
    },
    endUpdate: function () {
        this._allowUpdate = true;
        this.doUpdate();
    },
    doUpdate: function () {

    },
    canLayout: function () {
        //return false;
        if (!mini.enableLayout) return false;
        if (this._allowLayout == false) return false;
        return this.isDisplay();
    },
    doLayout: function () {

    },
    layoutChanged: function () {
        if (this.canLayout() == false) return;
        this.doLayout();
    },
    _destroyChildren: function (removeEl) {
        if (this.el) {
            //            if (!mini.aaa) {
            //                alert(1);
            //                mini.aaa = 1;
            //            }

            var cs = mini.getChildControls(this);
            for (var i = 0, l = cs.length; i < l; i++) {
                var control = cs[i];
                if (control.destroyed !== true) {
                    control.destroy(removeEl);
                }
            }
        }
    },
    destroy: function (removeEl) {

        if (this.destroyed !== true) {
            if (!mini._destroying) {
                this._destroyChildren(removeEl);
            }
        }

        if (this.el) {

            var el = this.el;
            el.onclick = el.ondblclick = el.onmousedown = el.onmouseup = el.onmousemove = el.onmouseover = el.onmouseout = el.onkeydown = el.onkeyup = el.oncontextmenu = null;

            mini.clearEvent(el);

            if (removeEl !== false) {
                //alert(2);
                mini.removeNode(el);
                //                var p = this.el.parentNode;
                //                if (p) p.removeChild(this.el);
            }


            //                var p = this.el.parentNode;
            //                if (p) p.removeChild(this.el);
        }
        this._borderEl = this._contentEl = this._valueEl = this._textEl = this._errorIconEl = null;
        this.el = null;
        mini["unreg"](this);
        this.destroyed = true;
        this.fire("destroy");
    },

    focus: function () {
        try {
            var me = this;
            //setTimeout(function () {
            me.el.focus();
            //}, 1);
        } catch (e) { };
    },
    blur: function () {
        try {
            var me = this;
            //setTimeout(function () {
            me.el.blur();
            //}, 1);
        } catch (e) { };
    },

    allowAnim: true,
    setAllowAnim: function (value) {
        this.allowAnim = value;
    },
    getAllowAnim: function () {
        return this.allowAnim;
    },
    //////////////////////
    /////////////////////////////////////////////////////////////////////////
    _getMaskWrapEl: function () {
        return this.el;
    },
    mask: function (options) {

        if (typeof options == "string") options = { html: options };
        options = options || {};
        options.el = this._getMaskWrapEl();
        if (!options.cls) options.cls = this._maskCls;

        mini.mask(options);

    },
    unmask: function () {
        mini.unmask(this._getMaskWrapEl());

        this.isLoading = false;
    },
    _maskCls: "mini-mask-loading",
    loadingMsg: "Loading...",
    loading: function (msg) {
        //this.isLoading = true;
        this.mask(msg || this.loadingMsg);
    },
    setLoadingMsg: function (value) {
        this.loadingMsg = value;
    },
    getLoadingMsg: function () {
        return this.loadingMsg;
    },
    //////////////////////
    _getContextMenu: function (value) {
        var ui = value;
        if (typeof value == "string") {
            ui = mini.get(value);
            if (!ui) {
                mini.parse(value);
                ui = mini.get(value);
            }
        } else if (mini.isArray(value)) {
            ui = {
                type: "menu",
                items: value
            };
        } else if (!mini.isControl(value)) {
            ui = mini.create(value);
        }
        return ui;
    },
    __OnHtmlContextMenu: function (e) {
        var ev = {
            popupEl: this.el,
            htmlEvent: e,
            cancel: false
        };
        this.contextMenu.fire("BeforeOpen", ev);
        if (ev.cancel == true) return;
        this.contextMenu.fire("opening", ev);
        if (ev.cancel == true) return;

        this.contextMenu.showAtPos(e.pageX, e.pageY);
        this.contextMenu.fire("Open", ev);
        return false;
    },
    contextMenu: null,
    setContextMenu: function (value) {
        var ui = this._getContextMenu(value);
        if (!ui) return;
        if (this.contextMenu !== ui) {
            this.contextMenu = ui;
            mini.addClass(ui.el, "mini-menu-open");
            this.contextMenu.owner = this;
            mini.on(this.el, "contextmenu", this.__OnHtmlContextMenu, this);
        }
    },
    getContextMenu: function () {
        return this.contextMenu;
    },
    setDefaultValue: function (value) {
        this.defaultValue = value;
    },
    getDefaultValue: function () {
        return this.defaultValue;
    },
    setValue: function (value) {
        this.value = value;
    },
    getValue: function () {
        return this.value;
    },
    //////////////////////
    ajaxData: null,
    ajaxType: "",
    ajaxOptions: null,
    setAjaxOptions: function (value) {
        this.ajaxOptions = value;
    },
    getAjaxOptions: function () {
        return this.ajaxOptions;
    },
    setAjaxData: function (value) {
        this.ajaxData = value;
    },
    getAjaxData: function () {
        return this.ajaxData;
    },
    setAjaxType: function (value) {
        this.ajaxType = value;
    },
    getAjaxType: function () {
        return this.ajaxType;
    },
    //    setApplyTo: function (el) {
    //        this.applyTo(el);
    //    },

    _afterApply: function (el) {
        //        var cs = mini.getChildNodes(el, true);
        //        for (var i = 0, l = cs.length; i < l; i++) {
        //            var nodeEl = cs[i];
        //            this._contentEl.appendChild(nodeEl);
        //        }
    },
    //_tagName: "",
    dataField: "",
    setDataField: function (value) {
        this.dataField = value;
    },
    getDataField: function () {
        return this.dataField;
    },
    tabIndex: 0,
    setTabIndex: function (value) {
        var el = this._textEl || this.el;
        el.tabIndex = value;
        this.tabIndex = value;
    },
    getTabIndex: function () {
        return this.tabIndex;
    },
    getAttrs: function (el) {
        //        if (el.tagName.toLowerCase() != this._tagName) {
        //            throw new Error(this.type + " must be Tag \"" + this._tagName+"\"");
        //        }

        var attrs = {};

        var cls = el.className;
        if (cls) attrs.cls = cls;

        if (el.value) attrs.value = el.value;
        mini._ParseString(el, attrs,
            ["id", "name", "width", "height", "borderStyle", "value", "defaultValue", "tabIndex",
            "contextMenu", "tooltip", "ondestroy", "data-options", "ajaxData", "ajaxType", "dataField"
            , "ajaxOptions", "data-placement"

             ]
        );
        if (attrs["data-placement"]) this.tooltipPlacement = attrs["data-placement"];

        //        if (this.type == "textbox") {
        //            alert(attrs.height);
        //        }

        mini._ParseBool(el, attrs,
            ["visible", "enabled", "readOnly"
             ]
        );

        if (el.readOnly && el.readOnly != "false") attrs.readOnly = true;

        var style = el.style.cssText;
        if (style) {
            attrs.style = style;
        }
        //ie9 background bug
        if (isIE9) {
            var bg = el.style.background;
            if (bg) {
                if (!attrs.style) attrs.style = "";
                attrs.style += ";background:" + bg;
            }
        }
        if (this.style) {
            if (attrs.style) attrs.style = this.style + ";" + attrs.style;
            else attrs.style = this.style;
        }
        if (this.borderStyle) {
            if (attrs.borderStyle) attrs.borderStyle = this.borderStyle + ";" + attrs.borderStyle;
            else attrs.borderStyle = this.borderStyle;
        }

        if (typeof attrs.ajaxOptions == "string") {

            attrs.ajaxOptions = window["ev" + "al"]('(' + attrs.ajaxOptions + ')');
        }

        //if (this.type == "menu") debugger
        //if(attrs.id == "folderTree") debugger

        //用户自定义标签参数
        var ts = mini._attrs;
        if (ts) {
            for (var i = 0, l = ts.length; i < l; i++) {
                var t = ts[i];
                var name = t[0];
                var type = t[1];
                if (!type) type = "string";
                if (type == "string") mini._ParseString(el, attrs, [name]);
                else if (type == "bool") mini._ParseBool(el, attrs, [name]);
                else if (type == "int") mini._ParseInt(el, attrs, [name]);
            }
        }

        //data-options
        var options = attrs["data-options"];
        if (options) {
            options = window["ev" + "al"]("(" + options + ")");
            if (options) {
                //attrs["data-options"] = options;
                mini.copyTo(attrs, options);
            }
        }



        return attrs;
    }
});

mini._attrs = null;
mini.regHtmlAttr = function (attr, type) {
    if (!attr) return;
    if (!type) type = "string";
    if (!mini._attrs) mini._attrs = [];
    mini._attrs.push([attr, type]);
}




/* Container
-----------------------------------------------------------------------------*/

__mini_setControls = function (controls, contentEl, scope) {

    contentEl = contentEl || this._contentEl;
    scope = scope || this;
    if (!controls) controls = [];
    if (!mini.isArray(controls)) controls = [controls];
    //controls = controls.clone();        

    for (var i = 0, l = controls.length; i < l; i++) {
        var c = controls[i];
        if (typeof c == "string") {                     //string
            if (c.indexOf("#") == 0) c = mini.byId(c);
        } else if (mini.isElement(c)) {                 //dom
        } else {                                        //object
            c = mini.getAndCreate(c);
            c = c.el;
        }
        if (!c) continue;
        //mini.innerHTML
        mini.append(contentEl, c);


    }
    
    
    mini.parse(contentEl);
    scope.doLayout();
    return scope;
}

mini.Container = function () {
    mini.Container.superclass.constructor.apply(this, arguments);
    if(!this._contentEl) this._contentEl = this.el;
}
mini.extend(mini.Container, mini.Control, {

//    destroy: function(){
//    },
    
    setControls: __mini_setControls,
    getContentEl: function () {
        return this._contentEl;
    },
    getBodyEl: function () {
        return this._contentEl;
    },
    within: function (e) {
        if (mini.isAncestor(this.el, e.target)) return true;
        var controls = mini.getChildControls(this);

        //if (this.id == 'gridPanel') debugger

        for (var i = 0, l = controls.length; i < l; i++) {
            var c = controls[i];
            //if (mini.isAncestor(c.el, e.target)) return true;
            if (c.within(e)) return true;
        }

        return false;
    }
});



/* ValidatorBase 
-----------------------------------------------------------------------------*/

mini.ValidatorBase = function () {
    mini.ValidatorBase.superclass.constructor.apply(this, arguments);    
}
mini.extend(mini.ValidatorBase, mini.Control, {
    required: false,
    requiredErrorText: "This field is required.",
    _requiredCls: "mini-required",

    errorText: "",
    _errorCls: "mini-error",
    _invalidCls: "mini-invalid", //当none时，加上_errorCls，比如红色边框，黄色背景

    errorMode: "icon",      //icon、border、none
    validateOnChanged: true,  //值改变时验证
    validateOnLeave: true,  //离开失去焦点时验证
    _IsValid: true,

    forceValidate: false,
    setForceValidate: function (value) {
        this.forceValidate = value;
    },
    getForceValidate: function () {
        return this.forceValidate;
    },

    keyNavEnabled: true,
    setKeyNavEnabled: function (value) {
        this.keyNavEnabled = value;
    },
    getKeyNavEnabled: function () {
        return this.keyNavEnabled;
    },

    indentSpace: false,  //  错误缩进
    _indentCls: "mini-indent",

    setIndentSpace: function (value) {
        if (value) {
            this.addCls(this._indentCls)
        } else {
            this.removeCls(this._indentCls)
        }
        this.indentSpace = value;
    },
    getIndentSpace: function () {
        return this.indentSpace;
    },

    isEditable: function () {
        if (this.readOnly || !this.allowInput || !this.enabled) return false;
        return true;
    },

    _tryValidate: function () {

        if (this._tryValidateTimer) clearTimeout(this._tryValidateTimer);
        var me = this;
        this._tryValidateTimer = setTimeout(function () {
            me.validate();
        }, 30);
    },
    validate: function () {
        //if (this.isReadOnly() || this.enabled == false) return true;
        //        if (this.enabled == false) {
        //            this.setIsValid(true);
        //            return true;
        //        }

        var e = {
            value: this.getValue(),
            errorText: "",
            isValid: true
        };

        if (this.required) {
            if (mini.isNull(e.value) || String(e.value).trim() === "") {
                e.isValid = false;
                e.errorText = this.requiredErrorText;
            }
        }

        this.fire("validation", e);

        this.errorText = e.errorText;
        this.setIsValid(e.isValid);
        return this.isValid();
    },
    isValid: function () {
        return this._IsValid;
    },
    setIsValid: function (value) {
        //if (this._IsValid != value) {
        this._IsValid = value;
        this.doUpdateValid();
        //}
    },
    getIsValid: function () {
        return this._IsValid;
    },
    setValidateOnChanged: function (value) {
        this.validateOnChanged = value;
    },
    getValidateOnChanged: function (value) {
        return this.validateOnChanged;
    },
    setValidateOnLeave: function (value) {
        this.validateOnLeave = value;
    },
    getValidateOnLeave: function (value) {
        return this.validateOnLeave;
    },

    setErrorMode: function (value) {
        if (!value) value = "none";
        this.errorMode = value.toLowerCase();
        if (this._IsValid == false) this.doUpdateValid();
    },
    getErrorMode: function () {
        return this.errorMode;
    },
    setErrorText: function (value) {
        this.errorText = value;
        if (this._IsValid == false) this.doUpdateValid();
    },
    getErrorText: function () {
        return this.errorText;
    },
    setRequired: function (value) {
        this.required = value;
        if (this.required) {
            this.addCls(this._requiredCls);
        } else {
            this.removeCls(this._requiredCls);
        }
    },
    getRequired: function () {
        return this.required;
    },
    setRequiredErrorText: function (value) {
        this.requiredErrorText = value;
    },
    getRequiredErrorText: function () {
        return this.requiredErrorText;
    },
    errorIconEl: null,
    getErrorIconEl: function () {
        return this._errorIconEl;
    },
    _RemoveErrorIcon: function () {

    },
    doUpdateValid: function () {
        var me = this;
        me.__doUpdateValid();
        //        if (this._IsValid) {
        //            me.__doUpdateValid();
        //        } else {
        //            this._doUpdateValidTimer = setTimeout(function () {
        //                me.__doUpdateValid();
        //            }, 1);
        //        }
    },
    errorTooltipPlacement: 'right',
    __doUpdateValid: function () {
        if (!this.el) return;
        this.removeCls(this._errorCls);
        this.removeCls(this._invalidCls);

        if (this.errorMode == "border") {
            this.el.title = "";
        }

        if (this._IsValid == false) {
            switch (this.errorMode) {
                case "icon":
                    this.addCls(this._errorCls);
                    var icon = this.getErrorIconEl();
                    if (icon) {
                        icon.title = this.errorText;
                        jQuery(icon).attr("data-placement", this.errorTooltipPlacement);
                    }
                    break;
                case "border":
                    this.addCls(this._invalidCls);
                    this.el.title = this.errorText;
                default:
                    this._RemoveErrorIcon();
                    break;
            }
        } else {
            this._RemoveErrorIcon();
        }
        this.doLayout();
    },
    doValueChanged: function () {
        this._OnValueChanged();
    },
    _OnValueChanged: function () {
        if (this.validateOnChanged) {
            this._tryValidate();
        }
        this.fire("valuechanged", { value: this.getValue(), oldValue: this._oldValue });

        this._oldValue = this.getValue();
    },
    onValueChanged: function (fn, scope) {
        this.on("valuechanged", fn, scope);
    },
    onValidation: function (fn, scope) {
        this.on("validation", fn, scope);
    },
    getAttrs: function (el) {
        var attrs = mini.ValidatorBase.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["onvaluechanged", "onvalidation", "label", "labelStyle",
            "requiredErrorText", "errorMode", "errorTooltipPlacement"
             ]
        );

        mini._ParseBool(el, attrs,
            ["validateOnChanged", "validateOnLeave", "labelField", "indentSpace", "keyNavEnabled", "forceValidate"
             ]
        );

        var required = el.getAttribute("required");
        if (!required) required = el.required;
        if (!required) {
            var o = el.attributes["required"];
            if (o) {//fix ie10
                required = o.value == 'null' ? null : 'true';
            }
        }
        if (required) {
            attrs.required = required != "false" ? true : false;
        }

        return attrs;
    },

    /////////////////////////////////////////////////////////////////
    _labelLayout: function () {
        var border = this._borderEl;
        if (!border) return;

        this._labelLayouted = true;
        if (this.labelField) {
            var w = this._labelEl.offsetWidth;
            border.style["marginLeft"] = w + "px";
            this._doLabelLayout = w === 0;
        } else {
            border.style["marginLeft"] = 0;
        }
    },
    _labelFieldCls: 'mini-labelfield',
    labelField: false,
    label: '',
    labelStyle: '',
    setLabelField: function (value) {
        if (this.labelField != value) {
            this.labelField = value;
            if (!this._borderEl) return;
            if (!this._labelEl) {
                this._labelEl = mini.append(this.el, '<label class="mini-labelfield-label"></label>');
                this._labelEl.innerHTML = this.label;
                mini.setStyle(this._labelEl, this.labelStyle);
            }
            this._labelEl.style.display = value ? 'block' : 'none';
            if (value) {
                mini.addClass(this.el, this._labelFieldCls);
            } else {
                mini.removeClass(this.el, this._labelFieldCls);
            }
            this._labelLayout();
            //this.doLayout();
        }
    },
    getLabelField: function () {
        this.labelField;
    },
    setLabel: function (value) {
        if (this.label != value) {
            this.label = value;
            if (this._labelEl) this._labelEl.innerHTML = value;
            this._labelLayout();
        }
    },
    getLabel: function () {
        this.label;
    },
    setLabelStyle: function (value) {
        if (this.labelStyle != value) {
            this.labelStyle = value;
            if (this._labelEl) mini.setStyle(this._labelEl, value);
            this._labelLayout();
        }
    },
    getLabelStyle: function () {
        this.labelStyle;
    }
});


/* ListControl 
-----------------------------------------------------------------------------*/


mini.ListControl = function (el) {
    this.data = [];
    this._selecteds = [];
    mini.ListControl.superclass.constructor.call(this, null);
    this.doUpdate();

    if (el) mini.applyTo.call(this, el);
}
mini.ListControl.ajaxType = "get";
mini.extend(mini.ListControl, mini.ValidatorBase, {
    defaultValue: '',
    value: '',
    valueField: "id",
    textField: "text",
    dataField: "",
    delimiter: ',',

    setDelimiter: function (value) {
        this.delimiter = value;
    },
    getDelimiter: function () {
        return this.delimiter;
    },

    data: null,
    url: "",

    valueInCheckOrder: true,
    setValueInCheckOrder: function (value) {
        this.valueInCheckOrder = value;
    },
    getValueInCheckOrder: function () {
        return this.valueInCheckOrder;
    },

    _itemCls: "mini-list-item",
    _itemHoverCls: "mini-list-item-hover",
    _itemSelectedCls: "mini-list-item-selected",

    doLayout: function () {
        if (this._doLabelLayout) {
            this._labelLayout();
        }
    },


    set: function (kv) {
        if (typeof kv == 'string') {
            return this;
        }

        var value = kv.value;
        delete kv.value;
        var url = kv.url;
        delete kv.url;
        var data = kv.data;
        delete kv.data;

        mini.ListControl.superclass.set.call(this, kv);

        if (!mini.isNull(data)) {
            this.setData(data);
        }
        if (!mini.isNull(url)) {
            this.setUrl(url);
        }
        if (!mini.isNull(value)) {
            this.setValue(value);
        }

        return this;
    },

    uiCls: "mini-list",
    _create: function () {

    },
    _initEvents: function () {
        mini._BindEvents(function () {
            mini_onOne(this.el, 'click', this.__OnClick, this);
            mini_onOne(this.el, 'dblclick', this.__OnDblClick, this);

            mini_onOne(this.el, 'mousedown', this.__OnMouseDown, this);
            mini_onOne(this.el, 'mouseup', this.__OnMouseUp, this);
            mini_onOne(this.el, 'mousemove', this.__OnMouseMove, this);
            mini_onOne(this.el, 'mouseover', this.__OnMouseOver, this);
            mini_onOne(this.el, 'mouseout', this.__OnMouseOut, this);

            mini_onOne(this.el, 'keydown', this.__OnKeyDown, this);
            mini_onOne(this.el, 'keyup', this.__OnKeyUp, this);

            mini_onOne(this.el, 'contextmenu', this.__OnContextMenu, this);

            //            mini.on(this.el, 'click', this.__OnClick, this);
            //            mini.on(this.el, 'dblclick', this.__OnDblClick, this);

            //            mini.on(this.el, 'mousedown', this.__OnMouseDown, this);
            //            mini.on(this.el, 'mouseup', this.__OnMouseUp, this);
            //            mini.on(this.el, 'mousemove', this.__OnMouseMove, this);
            //            mini.on(this.el, 'mouseover', this.__OnMouseOver, this);
            //            mini.on(this.el, 'mouseout', this.__OnMouseOut, this);

            //            mini.on(this.el, 'keydown', this.__OnKeyDown, this);
            //            mini.on(this.el, 'keyup', this.__OnKeyUp, this);

            //            mini.on(this.el, 'contextmenu', this.__OnContextMenu, this);
        }, this);
    },
    destroy: function (removeEl) {

        mini.ListControl.superclass.destroy.call(this, removeEl);
    },

    name: "",
    setName: function (value) {
        this.name = value;
        if (this._valueEl) mini.setAttr(this._valueEl, "name", this.name);
    },

    getItemByEvent: function (event) {
        var domItem = mini.findParent(event.target, this._itemCls);
        if (domItem) {

            var index = parseInt(mini.getAttr(domItem, "index"));

            return this.data[index];
        }
    },
    addItemCls: function (item, cls) {
        var itemEl = this.getItemEl(item);
        if (itemEl) mini.addClass(itemEl, cls);
    },
    removeItemCls: function (item, cls) {
        var itemEl = this.getItemEl(item);
        if (itemEl) mini.removeClass(itemEl, cls);
    },
    getItemEl: function (item) {
        item = this.getItem(item);
        var index = this.data.indexOf(item);
        var id = this._createItemId(index);
        return document.getElementById(id);
    },
    _focusItem: function (item, view) {

        item = this.getItem(item);
        if (!item) return;
        var dom = this.getItemEl(item);
        if (view && dom) {
            this.scrollIntoView(item);
        }
        if (this._focusedItem == item) {
            if (dom) mini.addClass(dom, this._itemHoverCls);
            return;
        }
        this._blurItem();
        this._focusedItem = item;
        if (dom) mini.addClass(dom, this._itemHoverCls);
    },
    _blurItem: function () {
        if (!this._focusedItem) return;

        var dom = this.getItemEl(this._focusedItem);
        if (dom) {
            mini.removeClass(dom, this._itemHoverCls);
        }
        this._focusedItem = null;
    },
    getFocusedItem: function () {
        var row = this._focusedItem;
        return this.indexOf(row) == -1 ? null : row;
    },
    getFocusedIndex: function () {
        return this.data.indexOf(this._focusedItem);
    },
    _scrollViewEl: null,
    scrollIntoView: function (item) {
        try {
            var itemEl = this.getItemEl(item);
            var _scrollViewEl = this._scrollViewEl || this.el;
            mini.scrollIntoView(itemEl, _scrollViewEl, false);
        } catch (e) { }
    },
    ////////////////////////////////////////////
    getItem: function (item) {
        if (typeof item == "object") return item;
        if (typeof item == "number") return this.data[item];
        return this.findItems(item)[0];
    },
    getCount: function () {
        return this.data.length;
    },
    indexOf: function (item) {
        return this.data.indexOf(item);
    },
    getAt: function (index) {
        return this.data[index];
    },
    updateItem: function (item, options) {
        item = this.getItem(item);
        if (!item) return;
        mini.copyTo(item, options);
        this.doUpdate();
    },
    load: function (data) {
        if (typeof data == "string") this.setUrl(data);
        else this.setData(data);
    },
    loadData: function (data) {
        this.setData(data);
    },
    setData: function (data) {
        if (typeof data == "string") {
            data = window["ev" + "al"](data);
        }
        if (!mini.isArray(data)) data = [];
        this.data = data;




        //        this._checkSelecteds();

        this.doUpdate();

        if (this.value != "") {
            this.deselectAll();
            var records = this.findItems(this.value);
            this.selects(records);
        }
    },
    getData: function () {
        return this.data.clone();
    },
    setUrl: function (url) {
        //if (this.url != url) {
        this.url = url;
        this._doLoad({});
        //}
    },
    getUrl: function () {
        return this.url;
    },


    ajaxData: null,
    _doLoad: function (params) {

        try {
            var url = window["ev" + "al"](this.url);
            if (url != undefined) {
                this.url = url;
            }
        } catch (e) { }
        var url = this.url;

        var ajaxMethod = mini.ListControl.ajaxType;
        if (url) {
            if (url.indexOf(".txt") != -1 || url.indexOf(".json") != -1) {
                ajaxMethod = "get";
            }
        }

        var obj = mini._evalAjaxData(this.ajaxData, this);
        mini.copyTo(params, obj);

        var e = {
            url: this.url,
            async: false,
            type: this.ajaxType ? this.ajaxType : ajaxMethod,
            data: params,
            params: params,
            cache: false,
            cancel: false
        };

        //alert(this.ajaxOptions);
        jQuery.extend(true, e, this.ajaxOptions);

        this.fire("beforeload", e);
        if (e.data != e.params && e.params != params) {
            e.data = e.params;
        }
        if (e.cancel == true) return;

        var sf = me = this;
        var url = e.url;
        mini.copyTo(e, {
            success: function (text, textStatus, xhr) {
                delete e.params;
                var obj = { text: text, result: null, sender: me, options: e, xhr: xhr };
                var result = null;
                try {
                    mini_doload(obj);
                    result = obj.result;
                    if (!result) {
                        result = mini.decode(text);
                    }
                } catch (ex) {
                    if (mini_debugger == true) {
                        alert(url + "\njson is error.");
                    }
                }
                if (mini.isArray(result)) result = { data: result };
                if (sf.dataField) {
                    result.data = mini._getMap(sf.dataField, result);
                }
                if (!result.data) result.data = [];

                var ex = { data: result.data, cancel: false, result: result }
                sf.fire("preload", ex);
                if (ex.cancel == true) return;

                sf.setData(ex.data);

                delete ex.cancel;
                sf.fire("load", ex);

                setTimeout(function () {
                    sf.doLayout();
                }, 100);

            },
            error: function (xhr, textStatus, errorThrown) {
                var e = {
                    xhr: xhr,
                    text: xhr.responseText,
                    textStatus: textStatus,
                    errorMsg: xhr.responseText,
                    errorCode: xhr.status
                };
                if (mini_debugger == true) {
                    alert(url + "\n" + e.errorCode + "\n" + e.errorMsg);
                }
                sf.fire("loaderror", e);
            }
        });

        this._ajaxer = mini.ajax(e);
    },
    setValue: function (value) {
        if (mini.isNull(value)) value = "";
        //if (this.value !== value) {
        //var records = this.findItems(this.value);
        this.deselectAll();

        this.value = value;
        if (this._valueEl) this._valueEl.value = value;

        var records = this.findItems(this.value);
        this.selects(records);

        this.setSelected(records[0]);
        //}
    },
    getValue: function () {
        return this.value;
    },
    getFormValue: function () {
        return this.value;
    },
    setValueField: function (valueField) {
        this.valueField = valueField;
    },
    getValueField: function () {
        return this.valueField;
    },
    setTextField: function (value) {
        this.textField = value;
    },
    getTextField: function () {
        return this.textField;
    },

    ////////////////////////////////////////////////////////
    getItemValue: function (item) {
        return String(mini._getMap(this.valueField, item));
    },
    getItemText: function (item) {
        var t = mini._getMap(this.textField, item);
        return mini.isNull(t) ? '' : String(t);
    },
    getValueAndText: function (records) {
        if (mini.isNull(records)) records = [];
        if (!mini.isArray(records)) {
            records = this.findItems(records);
        }

        //按序号排序
        if (this.valueInCheckOrder) {
            var data = this.getData();
            mini.sort(records, function (a, b) {
                var index1 = data.indexOf(a);
                var index2 = data.indexOf(b);
                if (index1 > index2) return 1;
                if (index1 < index2) return -1;
                return 0;
            });
        }

        var values = [];
        var texts = [];
        for (var i = 0, l = records.length; i < l; i++) {
            var record = records[i];
            if (record) {
                values.push(this.getItemValue(record));
                texts.push(this.getItemText(record));
            }
        }
        return [values.join(this.delimiter), texts.join(this.delimiter)];
    },
    findItems: function (value) {
        if (mini.isNull(value) || value === "") return [];
        if (typeof value == 'function') {
            var fn = value;
            var items = [];
            var data = this.data;
            for (var j = 0, k = data.length; j < k; j++) {
                var record = data[j];
                if (fn(record, j) === true) {
                    items.push(record);
                }
            }
            return items;
        }

        var values = String(value).split(this.delimiter);

        var data = this.data;
        var valueRecords = {};
        for (var j = 0, k = data.length; j < k; j++) {
            var record = data[j];
            //var v = record[this.valueField];
            var v = mini._getMap(this.valueField, record);
            valueRecords[v] = record;
        }

        var records = [];
        for (var i = 0, l = values.length; i < l; i++) {
            var v = values[i];
            var record = valueRecords[v];
            if (record) {
                records.push(record);
            }
        }




        return records;
    },

    /////////////////////////////////////////////
    removeAll: function () {
        var items = this.getData();
        this.removeItems(items);
    },
    addItems: function (items, index) {
        if (!mini.isArray(items)) return;
        if (mini.isNull(index)) index = this.data.length;
        this.data.insertRange(index, items);
        this.doUpdate();
    },
    addItem: function (item, index) {
        if (!item) return;
        if (this.data.indexOf(item) != -1) return;
        if (mini.isNull(index)) index = this.data.length;
        this.data.insert(index, item);
        this.doUpdate();
    },
    removeItems: function (items) {
        if (!mini.isArray(items)) return;
        this.data.removeRange(items);

        this._checkSelecteds();
        this.doUpdate();
    },
    removeItem: function (item) {
        var index = this.data.indexOf(item);
        if (index != -1) {
            this.data.removeAt(index);
            this._checkSelecteds();
            this.doUpdate();
        }
    },
    moveItem: function (item, index) {
        if (!item || !mini.isNumber(index)) return;
        //        var target = this.data[index];
        //        if (target == item) return;
        if (index < 0) index = 0;
        if (index > this.data.length) index = this.data.length;
        this.data.remove(item);
        //index = this.data.indexOf(target);
        this.data.insert(index, item);
        this.doUpdate();
    },
    ///////////////////////////////////////////// 

    _isSelectedAll: function () {
        var me = this,
            data = this.getData();
        //for(var 

        for (var i = 0, l = data.length; i < l; i++) {
            var item = data[i];
            if (item.enabled !== false) {
                if (!me.isSelected(item)) return false;
            }
        }
        return true;
    },

    _selected: null,
    _selecteds: [],
    multiSelect: false,
    _checkSelecteds: function () {
        for (var i = this._selecteds.length - 1; i >= 0; i--) {
            var record = this._selecteds[i];
            if (this.data.indexOf(record) == -1) {
                this._selecteds.removeAt(i);
            }
        }

        if (this._selected && this.data.indexOf(this._selected) == -1) this._selected = null;

        var vts = this.getValueAndText(this._selecteds);
        this.value = vts[0];
        if (this._valueEl) this._valueEl.value = this.value;
    },
    setMultiSelect: function (value) {
        this.multiSelect = value;
    },
    getMultiSelect: function () {
        return this.multiSelect;
    },
    isSelected: function (record) {
        if (!record) return false;
        return this._selecteds.indexOf(record) != -1;
    },
    getSelecteds: function () {
        var arr = this._selecteds.clone();
        var me = this;


        //按序号排序
        if (this.valueInCheckOrder) {
            mini.sort(arr, function (a, b) {
                var index1 = me.indexOf(a);
                var index2 = me.indexOf(b);
                if (index1 > index2) return 1;
                if (index1 < index2) return -1;
                return 0;
            });
        }

        //        mini.sort(arr, function (a, b) {
        //            var index1 = me.indexOf(a);
        //            var index2 = me.indexOf(b);
        //            if (index1 < index2) return 1;
        //            //if (index1 < index2) return -1;
        //            return 0;
        //        });
        return arr;
    },
    setSelected: function (record) {
        if (record) {
            this._selected = record;
            this.select(record);
        }
    },
    getSelected: function () {
        return this._selected;
    },
    select: function (record) {
        record = this.getItem(record);
        if (!record) return;
        if (this.isSelected(record)) return;
        this._selected = record;
        this.selects([record]);
    },
    deselect: function (record) {
        record = this.getItem(record);
        if (!record) return;
        if (!this.isSelected(record)) return;
        this.deselects([record]);
    },
    selectAll: function () {
        var data = this.data.clone();
        this.selects(data);
    },
    deselectAll: function () {
        this.deselects(this._selecteds);
    },
    clearSelect: function () {
        this.deselectAll();
    },
    selects: function (records) {
        if (!records || records.length == 0) return;
        records = records.clone();
        if (this.multiSelect == false && records.length > 1) {
            records.length = 1;
        }
        for (var i = 0, l = records.length; i < l; i++) {
            var record = records[i];
            //if (record.enabled === false) continue;
            if (!this.isSelected(record)) {
                this._selecteds.push(record);
            }
        }
        var me = this;
        //setTimeout(function () {
        me._doSelects();
        //}, 1);
    },
    deselects: function (records) {
        if (!records || records.length == 0) return;
        records = records.clone();
        for (var i = records.length - 1; i >= 0; i--) {
            var record = records[i];
            if (this.isSelected(record)) {
                this._selecteds.remove(record);
            }
        }

        var me = this;
        //setTimeout(function () {
        me._doSelects();
        //}, 1);
    },
    _doSelects: function () {
        var vts = this.getValueAndText(this._selecteds);
        this.value = vts[0];
        if (this._valueEl) this._valueEl.value = this.value;

        for (var i = 0, l = this.data.length; i < l; i++) {
            var record = this.data[i];
            var select = this.isSelected(record);
            if (select) {
                this.addItemCls(record, this._itemSelectedCls);
            } else {
                this.removeItemCls(record, this._itemSelectedCls);
            }

            var index = this.data.indexOf(record);
            var id = this._createCheckId(index);
            //var checkbox = document.getElementById(id);
            var checkbox = mini.byId(id, this.el);
            if (checkbox) checkbox.checked = !!select;
        }
    },
    _OnSelectionChanged: function (records, select) {
        var vts = this.getValueAndText(this._selecteds);
        this.value = vts[0];
        if (this._valueEl) this._valueEl.value = this.value;

        var e = {
            selecteds: this.getSelecteds(),
            selected: this.getSelected(),
            value: this.getValue()
        };
        this.fire("SelectionChanged", e);

        //if (this._doCheckState) this._doCheckState();
    },
    _createCheckId: function (index) {
        return this.uid + "$ck$" + index;
    },
    _createItemId: function (index) {
        return this.uid + "$" + index;
    },

    /////////////////////////////////////////////
    __OnClick: function (e) {
        if (this._clickTime) {
            if (new Date() - this._clickTime < 100) return;
        }
        this._clickTime = new Date();

        this._fireEvent(e, 'Click');
    },
    __OnDblClick: function (e) {
        this._fireEvent(e, 'Dblclick');
    },
    __OnMouseDown: function (e) {
        this._fireEvent(e, 'MouseDown');
    },
    __OnMouseUp: function (e) {
        this._fireEvent(e, 'MouseUp');
    },
    __OnMouseMove: function (e) {
        this._fireEvent(e, 'MouseMove');
    },
    __OnMouseOver: function (e) {
        this._fireEvent(e, 'MouseOver');
    },
    __OnMouseOut: function (e) {
        this._fireEvent(e, 'MouseOut');
    },
    __OnKeyDown: function (e) {
        this._fireEvent(e, 'KeyDown');
    },
    __OnKeyUp: function (e) {
        this._fireEvent(e, 'KeyUp');
    },
    __OnContextMenu: function (e) {
        this._fireEvent(e, 'ContextMenu');
    },
    _fireEvent: function (e, name) {
        if (!this.enabled) return;
        //this.focus();

        var item = this.getItemByEvent(e);
        if (!item) return;
        var fn = this['_OnItem' + name];
        if (fn) {
            fn.call(this, item, e);
        } else {
            var eve = {
                item: item,
                htmlEvent: e
            };
            this.fire("item" + name, eve);
        }
    },

    allowDeselect: false,
    setAllowDeselect: function (value) {
        this.allowDeselect = value;
    },
    getAllowDeselect: function () {
        return this.allowDeselect;
    },

    _OnItemClick: function (item, e) {

        if (this.isReadOnly() || this.enabled == false || item.enabled === false) {
            e.preventDefault();
            return;
        }

        var value = this.getValue();

        var ev = {
            item: item,
            htmlEvent: e,
            cancel: false
        };

        this.fire("beforeselect", ev);

        var e = {
            item: item,
            htmlEvent: e,
            cancel: false
        };
        this.fire("beforeitemclick", e);
        if (e.cancel) return;

        if (ev.cancel == false) {

            this._oldValue = value; 

            if (this.multiSelect) {
                if (this.isSelected(item)) {
                    this.deselect(item);
                    if (this._selected == item) {
                        this._selected = null;
                    }
                } else {
                    this.select(item);
                    this._selected = item;
                }

                if (item.__NullItem) {
                    this.deselectAll();
                    this._selected = null;
                }

                this._OnSelectionChanged();
            } else {
                //                if (!this.isSelected(item)) {
                //                    this.deselectAll();
                //                    this.select(item);
                //                    this._selected = item;
                //                    this._OnSelectionChanged();
                //                }


                if (!this.isSelected(item)) {
                    this.deselectAll();
                    this.select(item);
                    this._selected = item;
                    this._OnSelectionChanged();
                } else {
                    if (this.allowDeselect && this.multiSelect == false) {
                        this.deselectAll();
                        this._OnSelectionChanged();
                    }
                }

            }

            if (value != this.getValue()) {
                this._OnValueChanged();
            }

        }

        var e = {
            item: item,
            htmlEvent: e
        };
        this.fire("itemclick", e);
    },
    _blurOnOut: true,
    _OnItemMouseOut: function (item, e) {
        //mini.repaint(this.el);
        if (!this.enabled) return;
        if (this._blurOnOut) {
            this._blurItem();
        }
        var e = {
            item: item,
            htmlEvent: e
        };
        this.fire("itemmouseout", e);
    },
    _OnItemMouseMove: function (item, e) {
        //mini.repaint(this.el);
        if (!this.enabled || item.enabled === false) return;

        this._focusItem(item);
        var e = {
            item: item,
            htmlEvent: e
        };
        this.fire("itemmousemove", e);
    },
    onItemClick: function (fn, scope) {
        this.on("itemclick", fn, scope);
    },
    onItemMouseDown: function (fn, scope) {
        this.on("itemmousedown", fn, scope);
    },
    onBeforeLoad: function (fn, scope) {
        this.on("beforeload", fn, scope);
    },
    onLoad: function (fn, scope) {
        this.on("load", fn, scope);
    },
    onLoadError: function (fn, scope) {
        this.on("loaderror", fn, scope);
    },
    onPreLoad: function (fn, scope) {
        this.on("preload", fn, scope);
    },

    getText: function () {
        var selecteds = this.getSelecteds();
        if (selecteds.length == 0) return "";
        var text = [];
        for (var i = 0, l = selecteds.length; i < l; i++) {
            var item = selecteds[i];
            var textField = this.getTextField();
            text.push(item[textField]);
        }
        return text.join(",")
    },

    ////////////////////////////////////
    getAttrs: function (el) {
        var attrs = mini.ListControl.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["url", "data", "value", "textField", "valueField",
            "onitemclick", "onitemmousemove", "onselectionchanged", "onitemdblclick",
            "onbeforeload", "onload", "onloaderror", "ondataload", "onbeforeselect", "delimiter"
             ]
        );
        mini._ParseBool(el, attrs,
            ["multiSelect", "valueInCheckOrder", "allowDeselect"
             ]
        );

        var valueField = attrs.valueField || this.valueField;
        var textField = attrs.textField || this.textField;
        if (el.nodeName.toLowerCase() == "select") {
            var data = [];
            for (var i = 0, l = el.length; i < l; i++) {
                var op = el.options[i];
                var o = {};
                o[textField] = op.text;
                o[valueField] = op.value;

                data.push(o);
            }
            if (data.length > 0) {
                attrs.data = data;
            }
        }

        return attrs;
    }
});

//__getText = function () {
//    var selecteds = this.getSelecteds();
//    if (selecteds.length == 0) return "";
//    var text = [];
//    for (var i = 0, l = selecteds.length; i < l; i++) {
//        var item = selecteds[i];
//        var textField = this.getTextField();
//        text.push(item[textField]);
//    }
//    return text.join(",")

//}

//mini.ListControl.prototype.getText = __getText

//mini.ListBox.prototype.getText = __getText

//mini.CheckBoxList.prototype.getText = __getText

//mini.RadioButtonList.prototype.getText = __getText 

////////////////////////////////////////////////////////////////////////////////////////////////////
mini._Layouts = {};
mini.layout = function (el, mustLayout) {
    if (!mini.enableLayout) return;

    //if (!el || el == document || el == document.body) alert("layout");


    if (!document.body) return;

    //return;

    function doLayout(el) {
        if (!el) return;
        var control = mini.get(el);
        if (control) {

            //判断control的width和height，是否是绝对值。如果都是绝对值，则不doLayout
            if (control.doLayout) {
                if (!mini._Layouts[control.uid]) {
                    mini._Layouts[control.uid] = control;

                    //                    var el = control.getEl();
                    //                    var width = String(el.style.width);
                    //                    var height = String(el.style.height);
                    //                    if (!mini.isNumber(width) || !mini.isNumber(height)) {
                    //                        control.doLayout(false);
                    //                    }                    
                    if (mustLayout !== false || control.isFixedSize() == false) {
                        control.doLayout(false);
                    }

                    delete mini._Layouts[control.uid];
                }
            }
        } else {
            var cs = el.childNodes;
            if (cs) {
                for (var i = 0, l = cs.length; i < l; i++) {
                    var cel = cs[i];

                    //fix NPObject
                    try {
                        cel.toString();
                    } catch (ex) {
                        continue;
                    }

                    doLayout(cel);
                }
            }
        }
    }

    if (!el) el = document.body;

    //    if (el == document.body) {
    //        
    //        alert("layout");
    //    }

    doLayout(el);

    if (el == document.body) {
        mini.layoutIFrames();

        //alert("layout");

    }


}

////////////////////////////////////////////////////////////////////////
//mini.applyTo = function (el) {
//    el = mini.byId(el);
//    if (!el) return this;
//    if (mini.get(el)) throw new Error("not applyTo a mini control");
//    //mini.setAttr(el, "parse", 1);


//    var temp = null;
//    if (el && el != this.el) {
//        temp = document.createTextNode("");
//        jQuery(el).before(temp).remove();
//    }

//    var config = this.getAttrs(el);
//    delete config._applyTo;

//    if (mini.isNull(config.defaultValue) && !mini.isNull(config.value)) {
//        config.defaultValue = config.value;
//    }

//    if (mini.isNull(config.defaultText) && !mini.isNull(config.text)) {
//        config.defaultText = config.text;
//    }

//    if (temp) {
//        jQuery(temp).before(this.el).remove();
//    }
//    //    var p = el.parentNode;
//    //    if (p && this.el != el) {    //
//    //        //            var script1 = document.getElementById("script1");
//    //        //            alert(script1);
//    //        //            document.body.appendChild(script1);

//    //        p.replaceChild(this.el, el);

//    //        //                        p.insertBefore(this.el, el);
//    //        //                        p.removeChild(el);

//    //    }

//    this.set(config);


//    //this.doLayout();

//    this._afterApply(el);

//    return this;
//}

//_mini_set = function (config, control) {
//    
//}

mini.applyTo = function (el) {
    el = mini.byId(el);
    if (!el) return this;
    if (mini.get(el)) throw new Error("not applyTo a mini control");
    //mini.setAttr(el, "parse", 1);


    var config = this.getAttrs(el);
    delete config._applyTo;

    if (mini.isNull(config.defaultValue) && !mini.isNull(config.value)) {
        config.defaultValue = config.value;
    }

    if (mini.isNull(config.defaultText) && !mini.isNull(config.text)) {
        config.defaultText = config.text;
    }

    var p = el.parentNode;
    if (p && this.el != el) {    //
        //            var script1 = document.getElementById("script1");
        //            alert(script1);
        //            document.body.appendChild(script1);

        p.replaceChild(this.el, el);

        //                        p.insertBefore(this.el, el);
        //                        p.removeChild(el);

    }

    if (window._mini_set) _mini_set(config, this);    //预处理属性设置

    this.set(config);


    //this.doLayout();

    this._afterApply(el);

    return this;
}
mini._doParse = function (el) {
    if (!el) return;

    //if (el == document.body) alert("parse");

    var nodeName = el.nodeName.toLowerCase();
    if (!nodeName) return;

    if (jQuery(el).attr("noparser") != null) return;

    //if(el.id == "twin_constrainttype") debugger
    var className = String(el.className);
    if (className) {
        var control = mini.get(el);
        if (!control) {
            var classes = className.split(" ");
            for (var i = 0, l = classes.length; i < l; i++) {
                var cls = classes[i];
                var clazz = mini.getClassByUICls(cls);
                if (clazz) {
                    mini.removeClass(el, cls);
                    var ui = new clazz();

                    mini.applyTo.call(ui, el);
                    el = ui.el;
                    break;
                }
            }
        }
    }

    if (nodeName == "select"
            || mini.hasClass(el, "mini-menu")
            || mini.hasClass(el, "mini-datagrid")
            || mini.hasClass(el, "mini-treegrid")
            || mini.hasClass(el, "mini-tree")
            || mini.hasClass(el, "mini-button")
            || mini.hasClass(el, "mini-textbox")
            || mini.hasClass(el, "mini-buttonedit")
        ) {
        return;
    }

    var children = mini.getChildNodes(el, true);
    for (var i = 0, l = children.length; i < l; i++) {
        var node = children[i];
        if (node.nodeType == 1) {
            if (node.parentNode == el) {
                mini._doParse(node);
            }
        }
    }
}
mini._Removes = [];
mini._firstParse = true;
//mini._rootParsing = false;


mini.parse = function (el, layout) {
    //if (el == document.body) alert("parse");

    mini.parsed = true;

    //    if (mini._rootParsing) return;
    //    if (!el || el == document || el == document.body) mini._rootParsing = true;
    if (mini._firstParse) {

        mini._firstParse = false;
        //alert(2);
        var _doms = document.getElementsByTagName("iframe");
        var doms = [];
        for (var i = 0, l = _doms.length; i < l; i++) {
            var d = _doms[i];
            doms.push(d);
        }

        for (var i = 0, l = doms.length; i < l; i++) {
            var d = doms[i];
            var src = jQuery(d).attr("src");
            if (!src) continue;
            //jQuery(d).unbind("load");
            //d.parentNode.removeChild(d);

            //alert(jQuery(d).attr("src"));

            d.loaded = false;

            d._onload = d.onload;
            d._src = src;
            d.onload = function () { };
            d.src = "";

            //d.style.display = "none";
            //            var t = document.createElement("div");
            //            t.innerHTML = 't';
            //            jQuery(d).before(t);

            //d._t = t;
            //d.src = "about:blank";
            //d.src = false;
        }
        setTimeout(function () {

            for (var i = 0, l = doms.length; i < l; i++) {
                var d = doms[i];

                if (d._src && jQuery(d).attr("src") == "") {
                    d.loaded = true;
                    d.onload = d._onload;
                    d.src = d._src;
                    d._src = d._onload = null;

                    //jQuery(d._t).before(d);               
                    //d._t.parentNode.replaceChild(d, d._t);
                }
            }
        }, 20);

        setTimeout(function () {

            for (var i = 0, l = doms.length; i < l; i++) {
                var d = doms[i];
                var src = jQuery(d).attr("data-src");
                if (src) {
                    d.src = src;
                }
            }
        }, 30);

    }
    //document.body.style.display = "block";
    if (typeof el == "string") {
        var id = el;
        el = mini.byId(id);
        if (!el) el = document.body;
        //        if (!el) {
        //            var context = mini._getParseContext();
        //            if (context && context != document.body) {
        //                el = jQuery("#" + id, context)[0];
        //            }
        //            if (!el) return;
        //        }
    }
    if (el && !mini.isElement(el)) el = el.el;
    if (!el) el = document.body;
    //if (!context) context = el;

    var visible = mini.WindowVisible;
    if (isIE) {
        mini.WindowVisible = false;
    }

    //var sss = new Date();


    mini._doParse(el);
    //  alert(new Date() - sss);
    mini.WindowVisible = visible;

    //    for (var i = mini._Removes.length - 1; i >= 0; i--) {
    //        var el = mini._Removes[i];
    //        var p = el.parentNode;
    //        if (p) p.removeChild(el);
    //        mini._Removes.removeAt(i);
    //    }
    if (layout !== false) {
        mini.layout(el);
        //alert(1);
    }

    //    mini._rootParsing = false;
}

mini._ParseString = function (el, config, attrs) {
    for (var i = 0, l = attrs.length; i < l; i++) {
        var property = attrs[i];
        //if(property == "onclick") debugger
        var value = mini.getAttr(el, property);
        if (value) {
            config[property] = value;
        }
    }
}
mini._ParseBool = function (el, config, attrs) {
    for (var i = 0, l = attrs.length; i < l; i++) {
        var property = attrs[i];
        var value = mini.getAttr(el, property);
        if (value) {
            config[property] = value == "true" ? true : false;
        }
    }
}
mini._ParseInt = function (el, config, attrs) {    
    for (var i = 0, l = attrs.length; i < l; i++) {
        var property = attrs[i];
        //if(property == "maxLength") debugger
        var value = parseInt(mini.getAttr(el, property));
        if (!isNaN(value)) {
            config[property] = value;
        }
    }
}

//暂时不特殊处理IE：在IE7下，width/height/style等属性需要特殊处理。这个也节省不了多少时间。
//轻易不要修改，关联影响的东西挺多的
//if (jQuery.browser.msie) {
//    //getAttribute 方法确实提高了一些. IE专用
//    mini._ParseString = function (el, config, attrs) {
//        for (var i = 0, l = attrs.length; i < l; i++) {
//            var property = attrs[i];
//            var value = null;
//            var a = el.attributes[property];
//            if (a) value = a.value;     
//            //if(       
//            if (value) {
//                config[property] = value;
//            }
//        }
//    }
//    mini._ParseBool = function (el, config, attrs) {
//        for (var i = 0, l = attrs.length; i < l; i++) {
//            var property = attrs[i];
//            var value = null;
//            var a = el.attributes[property];
//            if (a) value = a.value;
//            if (value) {
//                config[property] = value == "true" ? true : false;
//            }
//        }
//    }
//    mini._ParseInt = function (el, config, attrs) {
//        for (var i = 0, l = attrs.length; i < l; i++) {
//            var property = attrs[i];
//            var value = null;
//            var a = el.attributes[property];
//            if (a) value = a.value;
//            value = parseInt(value);
//            if (!isNaN(value)) {
//                config[property] = value;
//            }
//        }
//    }
//}
mini._ParseColumns = function (el) {
    var columns = [];
    var cs = mini.getChildNodes(el);
    for (var i = 0, l = cs.length; i < l; i++) {
        var node = cs[i];
        //var jq = jQuery(node);

        var column = {};

        var editor = null, filter = null;

        //sub columns
        var subCs = mini.getChildNodes(node);
        if (subCs) {
            for (var ii = 0, li = subCs.length; ii < li; ii++) {
                var subNode = subCs[ii];
                //var property = jQuery(subNode).attr("property");
                var property = mini.getAttr(subNode, "property");
                if (!property) continue;
                property = property.toLowerCase();
                if (property == "columns") {
                    column.columns = mini._ParseColumns(subNode);
                    //jQuery(subNode).remove();
                    if (subNode.parentNode) subNode.parentNode.removeChild(subNode);
                }
                if (property == "editor" || property == "filter") {
                    
                    var className = subNode.className;
                    var classes = className.split(" ");
                    for (var i3 = 0, l3 = classes.length; i3 < l3; i3++) {
                        var cls = classes[i3];
                        var clazz = mini.getClassByUICls(cls);
                        if (clazz) {
                            var ui = new clazz();

                            if (property == "filter") {
                                filter = ui.getAttrs(subNode);
                                filter.type = ui.type;
                            } else {
                                editor = ui.getAttrs(subNode);
                                editor.type = ui.type;
                            }
                            break;
                        }
                    }

                    //jQuery(subNode).remove();
                    if (subNode.parentNode) subNode.parentNode.removeChild(subNode);
                }
            }
        }

        column.header = node.innerHTML;

        //if (column.header == "资源名称") debugger

        mini._ParseString(node, column,
            ["name", "header", "field", "editor", "filter", "renderer", "width", "type", "renderer",
                "headerAlign", "align", "headerCls", "cellCls", "headerStyle", "cellStyle"
                , "displayField"
                , "dateFormat", "listFormat", "mapFormat", "numberFormat",
                'trueValue', "falseValue", "dataType", 'vtype', "currencyUnit",
                "summaryType", "summaryRenderer", "groupSummaryType", "groupSummaryRenderer",
                "defaultValue", "defaultText", "decimalPlaces", "data-options", "sortField", "sortType"
             ]
        );
        mini._ParseBool(node, column,
            ["allowCellWrap", "visible", "readOnly", "allowSort", "allowResize", "allowMove", "allowDrag", "autoShowPopup",
            "unique", "autoEscape", "enabled", "hideable", "showCellTip", "valueFromSelect", "navUpdown"
             ]
        );
        mini._ParseInt(node, column,
            ["minWidth"
             ]
        );
        //if(column.field == "loginname") debugger
        if (editor) column.editor = editor;
        if (filter) column.filter = filter;

        if (typeof (column.editor) == "string") {
            try {
                column.editor = window["ev" + "al"]("(" + column.editor + ")");
            } catch (e) { }
        }

        if (column.dataType) column.dataType = column.dataType.toLowerCase();

        if (column.defaultValue === "true") column.defaultValue = true;
        if (column.defaultValue === "false") column.defaultValue = false;

        columns.push(column);

        //data-options
        var options = column["data-options"];
        if (options) {
            options = window["ev" + "al"]("(" + options + ")");
            if (options) {
                //attrs["data-options"] = options;
                mini.copyTo(column, options);
            }
        }
    }

    return columns;
}


/* Grid Columns
-----------------------------------------------------------------------------*/

mini._Columns = {};
mini._getColumn = function (columnType) {
    var columnFn = mini._Columns[columnType.toLowerCase()];
    if (!columnFn) return {};
    return columnFn();
}

//IndexColumn
mini.IndexColumn = function (config) {
    return mini.copyTo({ ignoreCollapseIndex: false, width: 30, cellCls: "", align: "center", draggable: false, allowDrag: true, hideable: true,
        init: function (grid) {
            grid.on("addrow", this.__OnIndexChanged, this);
            grid.on("removerow", this.__OnIndexChanged, this);
            grid.on("moverow", this.__OnIndexChanged, this);


            //treegrid
            if (grid.isTree) {

                grid.on("addnode", this.__OnIndexChanged, this);
                grid.on("removenode", this.__OnIndexChanged, this);
                grid.on("movenode", this.__OnIndexChanged, this);


                grid.on("loadnode", this.__OnIndexChanged, this);
                this._gridUID = grid.uid;
                this._rowIdField = "_id";
            }
        },
        getNumberId: function (record) {
            return this._gridUID + "$number$" + record[this._rowIdField];
        },
        createNumber: function (grid, rowIndex) {
            if (mini.isNull(grid.pageIndex)) {
                return rowIndex + 1;
            }
            else return (grid.pageIndex * grid.pageSize) + rowIndex + 1;
        },
        renderer: function (e) {

            var grid = e.sender;
            if (this.draggable) {
                if (!e.cellStyle) e.cellStyle = "";
                e.cellStyle += ";cursor:move;";
            }
            var s = '<div id="' + this.getNumberId(e.record) + '">';
            var rowIndex = e.rowIndex;

            if (this.ignoreCollapseIndex) {
                //rowIndex = 
            }

            if (mini.isNull(grid.getPageIndex)) s += rowIndex + 1;
            else s += (grid.getPageIndex() * grid.getPageSize()) + rowIndex + 1;

            s += '</div>';
            return s;
        },

        __updateRowNumbers: function (grid) {
            var records = grid.getDataView();

            for (var i = 0, l = records.length; i < l; i++) {
                var record = records[i];
                var id = this.getNumberId(record);
                var ck = document.getElementById(id);
                if (ck) ck.innerHTML = this.createNumber(grid, i);
            }
            //alert(1);
        },
        __OnIndexChanged: function (e) {
            var grid = e.sender;

            //            this.__updateRowNumbers(grid);
            //            return;
            var me = this;
            if (me._toIndex) return;
            me._toIndex = setTimeout(function () {
                me._toIndex = null;
                me.__updateRowNumbers(grid);
            }, 10);
        }
    }, config);
}
mini._Columns["indexcolumn"] = mini.IndexColumn;

//CheckColumn
mini.CheckColumn = function (config) {
    return mini.copyTo(
        { width: 30, cellCls: "mini-checkcolumn", headerCls: "mini-checkcolumn", hideable: true,
            _multiRowSelect: true,   //
            header: function (column) {
                //if(this.multiSelect == false) debugger
                //                var id = this.uid + "checkall";
                //                var s = '<input type="checkbox" id="' + id + '" ' + (column._checkedAll ? 'checked' : '') + '/>';
                //                if (this.multiSelect == false) s = "";
                //                return s;

                var id = this.uid + "checkall";
                var cls = column._checkedAll ? "mini-grid-checkbox-checked" : "";
                var s = '<span class="mini-grid-checkbox mini-icon ' + cls + '" id="' + id + '"></span>';
                if (this.multiSelect == false) s = "";
                return s;
            },
            getCheckId: function (record, column) {
                return this._gridUID + "$checkcolumn$" + record[this._rowIdField] + "$" + column._id;
            },
            init: function (grid) {

                grid.on("_selectchange", this.__OnSelectionChanged, this);
                grid.on("HeaderCellClick", this.__OnHeaderCellClick, this);

                var me = this;
                grid.on("removerow", function () {
                    if (grid.data && grid.data.length == 0) {
                        me._doCheckState(grid);
                    }
                });

                var me = this;
                grid.on("load", function () {
                    var id = grid.uid + "checkall";
                    //$("#" + id).removeClass('mini-grid-checkbox-checked');
                    me._doCheckState(grid);
                }, this);
            },
            renderer: function (e) {
                var id = this.getCheckId(e.record, e.column);
                var selected = e.sender.isSelected ? e.sender.isSelected(e.record) : false;

                var type = "checkbox";

                //                var grid = e.sender;
                //                if (grid.getMultiSelect() == false) type = "radio";

                //                var html = '<input type="' + type + '" id="' + id + '" ' + (selected ? "checked" : "") + ' hidefocus style="outline:none;" onclick="return false"/>';
                //                html += '<div class="mini-grid-radio-mask"></div>';
                //                return html;                


                var grid = e.sender;
                var html = '<span class="mini-grid-' + (grid.getMultiSelect() ? 'checkbox' : 'radio') + ' mini-icon" id="' + id + '"></span>';
                return html;

            },
            __OnHeaderCellClick: function (e) {
                var grid = e.sender;
                if (e.column != this) return;
                var id = grid.uid + "checkall";
                var ck = document.getElementById(id);
                if (ck) {

                    var checkedCls = 'mini-grid-checkbox-checked';
                    var checked = !mini.hasClass(ck, checkedCls);
                    this._checkedAll = checked;

                    if (grid.getMultiSelect()) {
                        if (checked) {
                            var list = grid.getDataView();
                            grid.selects(list);
                            mini.addClass(ck, checkedCls);
                            setTimeout(function () {
                                mini.addClass(ck, checkedCls);
                            }, 30);
                        } else {
                            var list = grid.getDataView();
                            grid.deselects(list);
                            mini.removeClass(ck, checkedCls);
                        }
                    } else {
                        grid.deselectAll();
                        if (checked) {
                            grid.select(0);
                            mini.addClass(ck, checkedCls);
                            
                        }
                    }
                    grid.fire("checkall");
                }
            },
            __OnSelectionChanged: function (e) {


                var grid = e.sender;
                var records = grid.toArray();
                var me = this;


                var virtual = grid.isVirtualScroll(),
                    region = grid._viewRegion,
                    start = (virtual && region) ? region.start : -1,
                    end = region ? region.end : -1,
                    map = {};

                if (start != -1) {
                    var data = grid.getVisibleRows();
                    for (var i = start, l = end; i < l; i++) {
                        var row = data[i];
                        if (row) map[row._id] = true;
                    }
                }


                for (var i = 0, l = records.length; i < l; i++) {
                    var record = records[i];

                    //continue;
                    if (start != -1) {
                        if (!map[record._id]) continue;
                    }

                    //                    var select = grid.isSelected(record);
                    //                    var id = me.getCheckId(record, me); //grid.uid + "$checkcolumn$" + record[grid._rowIdField];
                    //                    var ck = document.getElementById(id);

                    //                    if (ck) ck.checked = select;
                }

                if (!this._timer) {
                    this._timer = setTimeout(function () {
                        me._doCheckState(grid);
                        me._timer = null;
                    }, 10);
                }
            },
            _doCheckState: function (grid) {

                //处理顶部的checkbox
                var id = grid.uid + "checkall";
                var ck = document.getElementById(id);

                if (ck) {
                    var sels = grid.getSelecteds();
                    //if (sels.length == grid.getData().length) {

                    var len = grid.isTree ? grid.getList().length : grid.getData().length;

                    if (sels.length == len && len != 0) {
                        //if (sels.length == len){
                        //ck.checked = true;
                        jQuery(ck).addClass('mini-grid-checkbox-checked');
                    } else {
                        //ck.checked = false;
                        jQuery(ck).removeClass('mini-grid-checkbox-checked');
                    }
                }

                //                if (ck && grid._getSelectAllCheckState) {

                //                    var state = grid._getSelectAllCheckState();
                //                    if (state == "has") {
                //                        ck.indeterminate = true;
                //                        ck.checked = true;
                //                    } else {
                //                        ck.indeterminate = false;
                //                        ck.checked = state;
                //                    }
                //                }
            }
        }, config);
};
mini._Columns["checkcolumn"] = mini.CheckColumn;

//ExpandColumn
mini.ExpandColumn = function (config) {
    return mini.copyTo({ width: 30, headerAlign: "center", align: "center", draggable: false, cellStyle: "padding:0", cellCls: "mini-grid-expandCell",
        hideable: true,
        renderer: function (e) {
            return '<a class="mini-grid-ecIcon mini-icon" href="javascript:#" onclick="return false"></a>';
        },
        init: function (grid) {
            grid.on("cellclick", this.__OnCellClick, this);
        },
        __OnCellClick: function (e) {
            var grid = e.sender;
            if (e.column == this && grid.isShowRowDetail) {
                if (mini.findParent(e.htmlEvent.target, "mini-grid-ecIcon")) {
                    var isShow = grid.isShowRowDetail(e.record);

                    if (!isShow) {
                        e.cancel = false;
                        grid.fire("beforeshowrowdetail", e);
                        if (e.cancel === true) return;
                    } else {
                        e.cancel = false;
                        grid.fire("beforehiderowdetail", e);
                        if (e.cancel === true) return;
                    }

                    if (grid.autoHideRowDetail) {
                        grid.hideAllRowDetail();
                    }
                    if (isShow) {
                        grid.hideRowDetail(e.record);
                    } else {
                        grid.showRowDetail(e.record);
                    }
                }
            }
        }
    }, config);
}
mini._Columns["expandcolumn"] = mini.ExpandColumn;

//checkboxcolumn
mini.CheckBoxColumn = function (config) {
    return mini.copyTo({
        _type: "checkboxcolumn", editMode: "inline",    //inlineEdit: true?
        header: "", headerAlign: "center",
        //cellCls: "mini-checkcolumn", 
        trueValue: true, falseValue: false,
        readOnly: false,
        getCheckId: function (record, column) {
            return this._gridUID + "$checkbox$" + record[this._rowIdField] + "$" + column._id;
        },
        getCheckBoxEl: function (record, column) {
            return document.getElementById(this.getCheckId(record, column));
        },
        isChecked: function (record, column) {
            var ck = this.getCheckBoxEl(record, column);
            return jQuery(ck).hasClass('mini-grid-checkbox-checked');
        },
        renderer: function (e) {
            var id = this.getCheckId(e.record, e.column);
            //var v = e.record[e.field];
            var v = mini._getMap(e.field, e.record);
            var checked = v == this.trueValue ? true : false;
            //var type = "checkbox";

            //if (this.grid.multiSelect == false) type = "radio";
            //return '<input type="' + type + '" id="' + id + '" ' + (checked ? "checked" : "") + ' hidefocus style="outline:none;" onclick="return false;"/>';

            return '<span  id="' + id + '" class="mini-grid-checkbox mini-icon ' + (checked ? "mini-grid-checkbox-checked" : "") + '"></span>';
        },
        //        __getValue: function (v) {
        //            var value = v == this.trueValue ? this.falseValue : this.trueValue;
        //            return value;
        //        },
        init: function (grid) {
            this.grid = grid;
            function oneditchange(e) {
                if (grid.isReadOnly() || this.readOnly) return;
                e.value = mini._getMap(e.field, e.record); //e.record[e.field];
                grid.fire("cellbeginedit", e);

                if (e.cancel !== true) {

                    //                    var v = mini._getMap(e.column.field, e.record);
                    //                    var value = v == this.trueValue ? this.falseValue : this.trueValue;
                    //alert(value);
                    var v = mini._getMap(e.column.field, e.record);
                    var value = v == this.trueValue ? this.falseValue : this.trueValue;

                    if (grid._OnCellCommitEdit) {
                        grid._OnCellCommitEdit(e.record, e.column, value);
                        grid._OnCellEndEdit(e.record, e.column);
                        //                                var checked = value == this.trueValue;
                        //                                setTimeout(function () {
                        //                                    ck.checked = checked;
                        //                                    alert(checked);
                        //                                }, 1);
                    }
                }
            }
            function onEdit(e) {

                if (e.column == this) {
                    var id = this.getCheckId(e.record, e.column);
                    var ck = e.htmlEvent.target;
                    if (ck.id == id) {
                        if (grid.allowCellEdit) {
                            e.cancel = false;
                            oneditchange.call(this, e);
                        } else {
                            if (this.readOnly) return;
                            e.value = mini._getMap(e.column.field, e.record); //e.record[e.field];
                            grid.fire("cellbeginedit", e);
                            if (e.cancel == true) return;
                            if (grid.isEditingRow && grid.isEditingRow(e.record)) {
                                setTimeout(function () {
                                    //ck.checked = !ck.checked;

                                    jQuery(ck).toggleClass('mini-grid-checkbox-checked');

                                }, 1);
                            }
                        }
                    }
                }
            }
            grid.on("cellclick", onEdit, this);
            mini.on(this.grid.el, "keydown", function (e) {

                if (e.keyCode == 32 && grid.allowCellEdit) {
                    var currentCell = grid.getCurrentCell();
                    if (!currentCell) return;
                    if (currentCell[1] != this) return;

                    var ex = { record: currentCell[0], column: currentCell[1] };
                    ex.field = ex.column.field;

                    oneditchange.call(this, ex);
                    e.preventDefault();
                }
            }, this);


            var tv = parseInt(this.trueValue), fv = parseInt(this.falseValue);
            if (!isNaN(tv)) this.trueValue = tv;
            if (!isNaN(fv)) this.falseValue = fv;

            if (this.trueValue == "true") this.trueValue = true;
            if (this.falseValue == "false") this.falseValue = false;
        }
    }, config);
};
mini._Columns["checkboxcolumn"] = mini.CheckBoxColumn;


//radiobuttoncolumn
mini.RadioButtonColumn = function (config) {
    return mini.copyTo({
        _type: "radiobuttoncolumn", editMode: "inline",
        header: "", headerAlign: "center",
        //cellCls: "mini-checkcolumn", 
        trueValue: true, falseValue: false,
        readOnly: false,
        getCheckId: function (record, column) {
            return this._gridUID + "$radio$" + record[this._rowIdField] + "$" + column._id;
        },
        getCheckBoxEl: function (record, column) {
            return document.getElementById(this.getCheckId(record, column));
        },
        renderer: function (e) {
            var grid = e.sender;
            var id = this.getCheckId(e.record, e.column);
            var v = mini._getMap(e.field, e.record);
            var checked = v == this.trueValue ? true : false;
            var type = "radio";
            var name = grid._id + e.column.field;

            var disabled = '';
            //            if (!grid.allowCellEdit) {
            //                disabled = ' disabled ';
            //            }
//            var s = '<div style="position:relative;">';
//            s += '<input name="' + name + '" type="' + type + '" id="' + id + '" ' + (checked ? "checked" : "") + ' hidefocus style="outline:none;" onclick="return false;" style="position:relative;z-index:1;"/>';
//            if (!grid.allowCellEdit) {
//                if (!grid.isEditingRow(e.record)) {
//                    s += '<div class="mini-grid-radio-mask"></div>';
//                }
//            }
//            s += '</div>';
//            return s;

            return '<span id="' + id + '" class="mini-grid-radio ' + (checked ? "mini-grid-radio-checked" : "") + '"></span>';

            
        },
        //        __getValue: function (v) {
        //            var value = v == this.trueValue ? this.falseValue : this.trueValue;
        //            return value;
        //        },
        init: function (grid) {
            this.grid = grid;

            function oneditchange(e) {
                if (grid.isReadOnly() || this.readOnly) return;
                e.value = mini._getMap(e.field, e.record); //e.record[e.field];
                grid.fire("cellbeginedit", e);

                if (e.cancel !== true) {
                    var v = mini._getMap(e.column.field, e.record);
                    if (v == this.trueValue) return;
                    var value = v == this.trueValue ? this.falseValue : this.trueValue;

                    //将其他行设置false
                    var data = grid.getData();

                    for (var i = 0, l = data.length; i < l; i++) {
                        var row = data[i];
                        if (row == e.record) continue;
                        var v = mini._getMap(e.column.field, row);
                        if (v != this.falseValue) {

                            //var o = {};
                            //mini._setMap(e.column.field, this.falseValue, o);

                            grid.updateRow(row, e.column.field, this.falseValue);
                        }
                    }

                    if (grid._OnCellCommitEdit) {
                        grid._OnCellCommitEdit(e.record, e.column, value);

                        grid._OnCellEndEdit(e.record, e.column);
                    }
                }
            }
            function onEdit(e) {
                if (e.column == this) {
                    
                    var id = this.getCheckId(e.record, e.column);
                    var ck = e.htmlEvent.target;
                    if (ck.id == id) {
                        if (grid.allowCellEdit) {
                            e.cancel = false;
                            oneditchange.call(this, e);
                        } else {
                            

                            if (grid.isEditingRow && grid.isEditingRow(e.record)) {
                                var that = this;
                                setTimeout(function () {
                                    ck.checked = true;

                                    //将其他行设置false
                                    var data = grid.getData();
                                    for (var i = 0, l = data.length; i < l; i++) {
                                        var row = data[i];
                                        if (row == e.record) continue;
                                        var field = e.column.field;
                                        var v = mini._getMap(field, row);
                                        if (v != that.falseValue) {
                                            if (row != e.record) {
                                                if (grid._dataSource) {
                                                    mini._setMap(e.column.field, that.falseValue, row);
                                                    grid._dataSource._setModified(row, field, v);
                                                } else {
                                                    var o = {};
                                                    mini._setMap(field, that.falseValue, o);
                                                    grid._doUpdateRow(row, o);
                                                }
                                            }
                                        }
                                    }


                                }, 1);
                            }
                        }
                    }
                }
            }
            grid.on("cellclick", onEdit, this);

            mini.on(this.grid.el, "keydown", function (e) {
                if (e.keyCode == 32 && grid.allowCellEdit) {
                    var currentCell = grid.getCurrentCell();
                    if (!currentCell) return;
                    if (currentCell[1] != this) return;
                    var ex = { record: currentCell[0], column: currentCell[1] };
                    ex.field = ex.column.field;
                    oneditchange.call(this, ex);
                    e.preventDefault();
                }
            }, this);


            var tv = parseInt(this.trueValue), fv = parseInt(this.falseValue);
            if (!isNaN(tv)) this.trueValue = tv;
            if (!isNaN(fv)) this.falseValue = fv;
        }
    }, config);
};
mini._Columns["radiobuttoncolumn"] = mini.RadioButtonColumn;

function listColumnRenderer(e) {
    var column = e.column;
    var value = !mini.isNull(e.value) ? String(e.value) : "";
    var values = value.split(",");

    var valueField = "id", textField = "text";
    var valueMaps = {};

    var editor = column.editor;
    var _editor = column.__editor;

    if (editor) {
        // var _editor = this.__editor;
        
        // debugger
        if (!_editor && (editor.type == "combobox" || editor.type == "treeselect")) {
            
            if (mini.isControl(editor)) {
                _editor = editor;
            } else {
                editor = mini.clone(editor);
                _editor = mini.create(editor);          //如果没有editor控件对象，则马上创建，并同步加载数据
            }
            e.column.__editor = _editor;
        }

        valueField = _editor.getValueField();
        textField = _editor.getTextField();

        var data = _editor.getData();

        valueMaps = column._valueMaps;
        if (!valueMaps || data !== column._data) {
            
            var list = _editor.getList ? _editor.getList() : data;      //如果是tree则用list生成valueMaps

            valueMaps = {};
            for (var i = 0, l = list.length; i < l; i++) {
                var o = list[i];
                valueMaps[o[valueField]] = o;
            }

            column._valueMaps = valueMaps;
            column._data = data;
        }
    }

    var texts = [];
    for (var i = 0, l = values.length; i < l; i++) {
        var id = values[i];
        var o = valueMaps[id];
        if (o) {
            var text = o[textField];
            if (text === null || text === undefined) {
                text = "";
            }
            texts.push(text);
        }
    }
    //if (texts.length == 0) debugger
     if (texts.length == 0 && column.valueFromSelect === false) {
        return value;
    }
    return texts.join(',');
}

//ComboBoxColumn
mini.ComboBoxColumn = function (config) {
    return mini.copyTo(
        {
            renderer: listColumnRenderer
        }, config);
};
mini._Columns["comboboxcolumn"] = mini.ComboBoxColumn;

///////////////treeselectColumn/////////////////////////////////////////////////////////////
mini.TreeSelectColumn = function (config) {
    return mini.copyTo(
        {
            renderer: listColumnRenderer

        }, config);
};
mini._Columns["treeselectcolumn"] = mini.TreeSelectColumn;

////ComboBoxColumn
//mini.ComboBoxColumn = function (config) {
//    return mini.copyTo(
//        {
//            renderer: function (e) {
//                var value = !mini.isNull(e.value) ? String(e.value) : "";
//                var values = value.split(",");

//                var valueField = "id", textField = "text";
//                var valueMaps = {};

//                var editor = e.column.editor;
//                if (editor && editor.type == "combobox") {
//                    var combo = this.__editor;
//                    if (!combo) {

//                        if (mini.isControl(editor)) {
//                            combo = editor;
//                        } else {
//                            editor = mini.clone(editor);
//                            combo = mini.create(editor); //必须同步加载combobox
//                        }
//                        this.__editor = combo;
//                    }

//                    valueField = combo.getValueField();
//                    textField = combo.getTextField();

//                    var data = combo.getData();
//                    valueMaps = this._valueMaps;
//                    if (!valueMaps || data !== this._data) {
//                        
//                        valueMaps = {};                        
//                        for (var i = 0, l = data.length; i < l; i++) {
//                            var o = data[i];
//                            valueMaps[o[valueField]] = o;
//                        }
//                        this._valueMaps = valueMaps;
//                        this._data = data;
//                    }
//                }

//                var texts = [];
//                for (var i = 0, l = values.length; i < l; i++) {
//                    var id = values[i];
//                    var o = valueMaps[id];
//                    if (o) {
//                        var text = o[textField];
//                        if (text === null || text === undefined) {
//                            text = "";
//                        }
//                        texts.push(text);
//                    }
//                }
//                return texts.join(',');
//            }
//        }, config);
//};
//mini._Columns["comboboxcolumn"] = mini.ComboBoxColumn;



/* Resizer
-----------------------------------------------------------------------------*/
mini._Resizer = function (grid) {
    this.owner = grid;
    mini.on(this.owner.el, "mousedown", this.__OnMouseDown, this);
}
mini._Resizer.prototype = {
    __OnMouseDown: function (e) {

        var has = mini.hasClass(e.target, "mini-resizer-trigger");
        if (has && this.owner.allowResize) {
            var drag = this._getResizeDrag();
            drag.start(e);
        }
    },
    _getResizeDrag: function () {
        if (!this._resizeDragger) {
            this._resizeDragger = new mini.Drag({
                capture: true,
                onStart: mini.createDelegate(this._OnDragStart, this),
                onMove: mini.createDelegate(this._OnDragMove, this),
                onStop: mini.createDelegate(this._OnDragStop, this)
            });
        }
        return this._resizeDragger;
    },
    _OnDragStart: function (drag) {

        this.mask = mini.append(document.body, '<div class="mini-resizer-mask mini-fixed"></div>');

        this.proxy = mini.append(document.body, '<div class="mini-resizer-proxy"></div>');
        this.proxy.style.cursor = "se-resize";

        var el = this.owner.el;
        el.offsetWidth; //reflow

        this.elBox = mini.getBox(el);
        mini.setBox(this.proxy, this.elBox);
    },
    _OnDragMove: function (drag) {
        var grid = this.owner;
        var xOffset = drag.now[0] - drag.init[0];
        var yOffset = drag.now[1] - drag.init[1];

        var w = this.elBox.width + xOffset;
        var h = this.elBox.height + yOffset;
        if (w < grid.minWidth) w = grid.minWidth;
        if (h < grid.minHeight) h = grid.minHeight;
        if (w > grid.maxWidth) w = grid.maxWidth;
        if (h > grid.maxHeight) h = grid.maxHeight;

        mini.setSize(this.proxy, w, h);
    },
    _OnDragStop: function (drag, success) {
        if (!this.proxy) return;
        var box = mini.getBox(this.proxy);

        jQuery(this.mask).remove();
        jQuery(this.proxy).remove();
        this.proxy = null;
        this.elBox = null;

        if (success) {
            this.owner.setWidth(box.width);
            this.owner.setHeight(box.height);
            this.owner.fire("resize");
        }
    }
};


/////////////////////////////////////////
//function __UnLoadIFrame() {
//    
//}
mini._topWindow = null;
mini._getTopWindow = function (hasMini) {
    if (mini._topWindow) return mini._topWindow;
    var ps = [];
    function getParents(me) {
        try {
            me["___try"] = 1;                   //chrome下设置不会异常
            if (me["___try"] == 1) ps.push(me); //取值时会有异常（这个技术是客户反馈的）
        } catch (ex) {
        }
        if (me.parent && me.parent != me) {
            getParents(me.parent);
        }
    }
    getParents(window);
    mini._topWindow = ps[ps.length - 1];
    return mini._topWindow;
}

var __ps = mini.getParams();

if (__ps._winid) {
    try {
        window.Owner = mini._getTopWindow()[__ps._winid];
    } catch (ex) {
    }
}

//if (window.Owner) {
//    setTimeout(function () {
//        alert(window.Owner.location);
//    }, 100);
//}

mini._WindowID = "w" + Math.floor(Math.random() * 10000);
mini._getTopWindow()[mini._WindowID] = window;

mini.iframeParams = {};         //mini.iframeParams.MenuNo=52;

mini.createIFrame = function (url, onIFrameLoad, cache, method, params) {
    //alert(method + ":" + params);

    /*var iframe = document.createElement('iframe');
    iframe.src = url;
        
    function onload () {
    alert("aaa111");
    }

    if (iframe.attachEvent) {
    iframe.attachEvent('onload', onload);
    } else {
    iframe.onload = onload;
    }
    return iframe;*/


    if (!url) url = "";
    var urls = url.split("#");
    url = urls[0];


    //修改url
    var t = "";
    if (cache !== true) {
        //_t
        t = '_t=' + Math.floor(Math.random() * 1000000); // "&_winid=" + mini._WindowID;

        if (url.indexOf("?") == -1) {
            url += "?" + t;
        } else {
            url += "&" + t;
        }
    }

    //_winid
    if (url && url.indexOf("_winid") == -1) {
        var t = "_winid=" + mini._WindowID;
        if (url.indexOf("?") == -1) {
            url += "?" + t;
        } else {
            url += "&" + t;
        }
    }

    if (mini.iframeParams) {
        for (var name in mini.iframeParams) {
            url += '&' + name + '=' + mini.iframeParams[name];
        }
    }


    if (urls[1]) {
        url = url + "#" + urls[1];
    }

    var isMHT = url.indexOf(".mht") != -1;
    var src = isMHT ? url : '';

    var iframeName = mini.newId('mini-iframe-');

    //window server版本下，是否用js绑定onload事件会比较好
    var s = '<iframe name="' + iframeName + '" src="' + (method == 'post' ? '' : src) + '" style="width:100%;height:100%;"  frameborder="0"></iframe>';
    //alert(method == 'post');

    var div = document.createElement("div");
    var iframe = mini.append(div, s);
    //iframe.src = "";
    var canFireLoad = false;
    if (isMHT) {
        canFireLoad = true;
    } else {
        setTimeout(function () {
            if (iframe) {
                if (method != 'post') {
                    iframe.src = url;
                }
                canFireLoad = true;
            }
        }, 5);
    }

    //iframe.onload = __OnLoad;                 
    if (iframe.attachEvent) {
        iframe.attachEvent('onload', __OnLoad);
    } else {
        iframe.onload = __OnLoad;
    }

    var destroyed = false;

    //load
    var firstLoad = true;
    function __OnLoad() {

        if (canFireLoad == false || destroyed) return;
        //alert("onload");
        setTimeout(function () {

            if (onIFrameLoad) onIFrameLoad(iframe, firstLoad);
            firstLoad = false;
            //onload = null;
            //iframe.onload = null;
            //
        }, 1);
    }

    //destroy
    iframe._ondestroy = function () {

        //window[fnName] = mini.emptyFn;
        destroyed = true;

        iframe.src = "";
        if (mini.isIE) {
            try {
                iframe.contentWindow.document.write("");
                iframe.contentWindow.document.close();
            } catch (ex) { }
        }
        iframe._ondestroy = null;
        iframe = null;

    }

    //////////////////////////////////////////////////////////////////////

    var form;
    if (method == "post") {

        function createForm() {
            return jQuery("<form />")
                    .attr({
                        method: "post",
                        action: url,
                        enctype: "multipart/form-data",
                        target: iframe.name
                    })
				.hide()
				.appendTo("body");
        }

        form = createForm();

        setTimeout(function () {
            form.submit();
        }, 10);


    }


    return iframe;
}

//mini.__IFrameCreateCount = 1;
//mini.createIFrame = function (url, onIFrameLoad, cache) {
//    //    var iframe = document.createElement('iframe');
//    //    iframe.src = '1.mht';
//    //    //document.body.appendChild(iframe);
//    //    return iframe;
//    //    return;

//    var fnName = "__iframe_onload" + mini.__IFrameCreateCount++;
//    window[fnName] = __OnLoad;

//    if (!url) url = "";
//    var urls = url.split("#");
//    url = urls[0];


//    //修改url
//    var t = "";
//    if (cache !== true) {
//        //_t
//        t = '_t=' + Math.floor(Math.random() * 1000000); // "&_winid=" + mini._WindowID;

//        if (url.indexOf("?") == -1) {
//            url += "?" + t;
//        } else {
//            url += "&" + t;
//        }
//    }

//    //_winid
//    if (url && url.indexOf("_winid") == -1) {
//        var t = "_winid=" + mini._WindowID;
//        if (url.indexOf("?") == -1) {
//            url += "?" + t;
//        } else {
//            url += "&" + t;
//        }
//    }


//    if (urls[1]) {
//        url = url + "#" + urls[1];
//    }

//    var isMHT = url.indexOf(".mht") != -1;
//    var src = isMHT ? url : '';

//    //window server版本下，是否用js绑定onload事件会比较好
//    var s = '<iframe src="' + src + '" style="width:100%;height:100%;" onload="' + fnName + '()"  frameborder="0"></iframe>';

//    var div = document.createElement("div");
//    var iframe = mini.append(div, s);
//    //iframe.src = "";
//    var canFireLoad = false;
//    if (isMHT) {
//        canFireLoad = true;
//    } else {
//        setTimeout(function () {
//            if (iframe) {
//                iframe.src = url;
//                canFireLoad = true;
//            }
//        }, 5);
//    }

//    //load
//    var firstLoad = true;
//    function __OnLoad() {

//        if (canFireLoad == false) return;

//        setTimeout(function () {
//            if (onIFrameLoad) onIFrameLoad(iframe, firstLoad);
//            firstLoad = false;
//            //onload = null;
//            //iframe.onload = null;
//            //
//        }, 1);
//    }

//    //destroy
//    iframe._ondestroy = function () {

//        window[fnName] = mini.emptyFn;

//        iframe.src = "";
//        try {
//            iframe.contentWindow.document.write("");
//            iframe.contentWindow.document.close();
//        } catch (ex) { }
//        iframe._ondestroy = null;
//        iframe = null;

//    }


//    //    iframe.onunload = function () {

//    //        if (ondestroy) ondestroy(iframe);
//    //        iframe.src = "";
//    //        iframe = null;
//    //        iframe.onunload = null;
//    //    }
//    //    iframe._ondestroy = function () {
//    //        var ret = true;
//    //        if (ondestroy) ret = ondestroy(iframe);

//    //        if (ret !== false) {
//    //            window[fnName] = mini.emptyFn;

//    //            iframe.src = "";
//    //            iframe._ondestroy = null;
//    //            iframe = null;
//    //        }
//    //        return ret;
//    //    }

//    return iframe;
//}




mini._doOpen = function (options) {
    if (typeof options == "string") {
        options = { url: options };
    }

    options = mini.copyTo({
        width: 700,
        height: 400,
        allowResize: true,
        allowModal: true,
        closeAction: "destroy",

        title: "",
        titleIcon: "",
        iconCls: "",
        iconStyle: "",
        bodyStyle: "padding: 0",

        url: "",

        showCloseButton: true,
        showFooter: false
    }, options);

    options.closeAction = "destroy";

    var onload = options.onload;
    delete options.onload;
    var ondestroy = options.ondestroy;
    delete options.ondestroy;
    var url = options.url;
    delete options.url;

    var box = mini.getViewportBox();
    if (options.width && String(options.width).indexOf('%') != -1) {
        var w = parseInt(options.width);
        options.width = parseInt(box.width * (w / 100));
    }
    if (options.height && String(options.height).indexOf('%') != -1) {
        var h = parseInt(options.height);
        options.height = parseInt(box.height * (h / 100));
    }

    var win = new mini.Window();
    win.set(options);

    win.load(url,
        onload,
        ondestroy
    );
    win.show();

    if (mini.isIE) {
        setTimeout(function () {
            fixIEFocus();
        }, 100);
    }

    return win;
}

//ie11下，弹出后关闭，主页面会失去焦点，无法选中文本和输入框，需要特殊处理下。
function fixIEFocus() {
    var vbox = mini.getViewportBox();
    var input = document.createElement("input");
    //input.style.cssText = "position:absolute;left:-1000px;top:-1000px;";
    input.style.cssText = "position:absolute;left:" + vbox.left + "px;top:" + vbox.top + "px;";
    document.body.appendChild(input);
    input.focus();
    input.parentNode.removeChild(input);
}

mini.getTopWindow = function () {
    var ps = [];
    function getParents(me) {
        try {
            if (me.mini) ps.push(me);
            if (me.parent && me.parent != me) {
                getParents(me.parent);
            }
        } catch (ex) { }
    }
    getParents(window);

    var win = ps[ps.length - 1];
    return win;
}

mini.open = function (options) {
    if (!options) return;

    var url = options.url;
    if (!url) url = "";
    var urls = url.split("#");
    var url = urls[0];

    if (url && url.indexOf("_winid") == -1) {
        var t = "_winid=" + mini._WindowID;
        if (url.indexOf("?") == -1) {
            url += "?" + t;
        } else {
            url += "&" + t;
        }
        if (urls[1]) {
            url = url + "#" + urls[1];
        }
    }

    options.url = url;

    options.Owner = window;
    var ps = [];
    function getParents(me) {
        try {
            if (me.mini) ps.push(me);
            if (me.parent && me.parent != me) {
                getParents(me.parent);
            }
        } catch (ex) { }
    }
    getParents(window);

    var win = ps[ps.length - 1];
    if (options.targetWindow) win = options.targetWindow;
    return win["mini"]._doOpen(options);
}
mini.openTop = mini.open;

//////////////////////////////

mini._getResult = function (url, params, success, error, type, dataField) {
    var xhr = null;
    var text = mini.getText(url, params, function (text, o) {
        xhr = o;
        if (success) if (success) success(text, o);
    }, error, type);

    var obj = { text: text, result: null, sender: { type: '' }, options: { url: url, data: params, type: type }, xhr: xhr };
    var result = null;
    try {
        mini_doload(obj);
        result = obj.result;
        if (!result) {
            result = mini.decode(text);
        }
    } catch (ex) {
        if (mini_debugger == true) {
            alert(url + "\njson is error");
        }
    }

    if (!mini.isArray(result) && dataField) result = mini._getMap(dataField, result);

    if (mini.isArray(result)) {
        result = { data: result };
    } 

    return result ? result.data : null;
}
mini.getData = function (url, params, success, error, type) {
    var text = mini.getText(url, params, success, error, type);
    var data = mini.decode(text);
    return data;
}
mini.getText = function (url, params, success, error, type) {
    
    var returnText = null;
    mini.ajax({
        url: url,
        data: params,
        async: false,
        type: type ? type : "get",
        cache: false,
        dataType: "text",
        success: function (text, textStatus, xhr) {
            returnText = text;
            if (success) success(text, xhr);
        },
        error: error
    });
    return returnText;
}

////////////////////////////////////
//JSPath, RootPath
if (!window.mini_RootPath) {
    mini_RootPath = "/";
}
mini_CreateJSPath = function (js) {
    var scripts = document.getElementsByTagName("script");
    var path = "";
    for (var i = 0, l = scripts.length; i < l; i++) {
        var src = scripts[i].src;
        if (src.indexOf(js) != -1) {
            var ss = src.split(js);
            path = ss[0];
            break;
        }
    }
    var href = location.href;
    href = href.split("#")[0];
    href = href.split("?")[0];
    var ss = href.split("/");
    ss.length = ss.length - 1;
    href = ss.join("/");

    if (path.indexOf("http:") == -1 && path.indexOf("file:") == -1) {
        path = href + "/" + path;
    }
    return path;
}
if (!window.mini_JSPath) {
    mini_JSPath = mini_CreateJSPath("miniui.js");
}

/////////////////////////////////////
//加载页面片段HTML：是否处理css，javascipt？
//内部，销毁元素内部的所有组件对象，保持低内存。
mini.update = function (options, el) {
    if (typeof options == "string") options = { url: options };
    if (el) options.el = el;
    var html = mini.loadText(options.url);
    mini.innerHTML(options.el, html);
    mini.parse(options.el);
}
//mini.update = function (options, el) {
//    if (typeof options == "string") options = { url: options };
//    if (el) options.el = el;
//    options = mini.copyTo({
//        el: null,
//        url: "",
//        async: false,
//        type: "get",
//        cache: false,
//        dataType: "text",
//        success: function (text) {
//            var el = options.el;
//            if (el) {
//                //处理CSS、js后。。。

//                //el.innerHTML = text;
//                jQuery(el).html(text);
//                mini.parse(el);
//            }
//        },
//        error: function (jqXHR, textStatus, errorThrown) {

//        }
//    }, options);

//    jQuery.ajax(options);
//}


///////////////////////////////////////////////////
mini.createSingle = function (Type) {
    if (typeof Type == "string") {
        Type = mini.getClass(Type);
    }
    if (typeof Type != "function") return;
    var obj = Type.single;
    if (!obj) {
        obj = Type.single = new Type();
    }
    return obj;
}
mini.createTopSingle = function (Type) {
    if (typeof Type != "function") return;
    
    var typeName = Type.prototype.type;
    if (top && top != window && top.mini && top.mini.getClass(typeName)) {
        return top.mini.createSingle(typeName);
    } else {
        return mini.createSingle(Type);
    }
}


////////////////////////////////////////////////////////
mini.sortTypes = {
//    "chinese": function (s) {
//        
//    },
    "string": function (s) {
        return String(s).toUpperCase();
    },
    "date": function (s) {
        if (!s) {
            return 0;
        }
        if (mini.isDate(s)) {
            return s.getTime();
        }
        return mini.parseDate(String(s));
    },
    "float": function (s) {
        var val = parseFloat(String(s).replace(/,/g, ""));
        return isNaN(val) ? 0 : val;
    },
    "int": function (s) {
        var val = parseInt(String(s).replace(/,/g, ""), 10);
        return isNaN(val) ? 0 : val;
    },
    "currency": function (s) {
        var val = parseFloat(String(s).replace(/,/g, ""));
        return isNaN(val) ? 0 : val;
    }
};

////////////////////////////////////////////////
mini._ValidateVType = function (vtype, value, e, scope) {
    var vtypes = vtype.split(";");
    
    for (var i = 0, l = vtypes.length; i < l; i++) {
        var vtype = vtypes[i].trim();
        var vv = vtype.split(":");
        var vt = vv[0];
        
        var args = vtype.substr(vt.length+1, 1000); //vv[1];
        if (args) args = args.split(",");
        else args = [];

        var fn = mini.VTypes[vt];
        if (fn) {
            var isValid = fn(value, args);
            if (isValid !== true) {
                e.isValid = false;
                var vtext = vv[0] + "ErrorText";
                e.errorText = scope[vtext] || mini.VTypes[vtext] || "";
                e.errorText = String.format(e.errorText, args[0], args[1], args[2], args[3], args[4]);
                break;
            }
        }
    }
}
mini._getErrorText = function (obj, field) {
    if(obj && obj[field]){
        return  obj[field];
    }else{
        return mini.VTypes[field]
    }
    
}
mini.VTypes = {
    minDateErrorText: 'Date can not be less than {0}',
    maxDateErrorText: 'Date can not be greater than {0}',

    uniqueErrorText: "This field is unique.",
    requiredErrorText: "This field is required.",
    emailErrorText: "Please enter a valid email address.",
    urlErrorText: "Please enter a valid URL.",
    floatErrorText: "Please enter a valid number.",
    intErrorText: "Please enter only digits",
    dateErrorText: "Please enter a valid date. Date format is {0}",
    maxLengthErrorText: "Please enter no more than {0} characters.",
    minLengthErrorText: "Please enter at least {0} characters.",
    maxErrorText: "Please enter a value less than or equal to {0}.",
    minErrorText: "Please enter a value greater than or equal to {0}.",
    rangeLengthErrorText: "Please enter a value between {0} and {1} characters long.",
    rangeCharErrorText: "Please enter a value between {0} and {1} characters long.",
    rangeErrorText: "Please enter a value between {0} and {1}.",

    required: function (v, args) {
        if (mini.isNull(v) || v === "") return false;
        return true;
    },
    email: function (v, args) {
        if (mini.isNull(v) || v === "") return true;
        if (v.search(/^\w+((-\w+)|(\.\w+))*\@[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.[A-Za-z0-9]+$/) != -1)
            return true;
        else
            return false;
    },
    url: function (v, args) {

        //http://a.aaa.com:90
        //129.1.1.1:89

        if (mini.isNull(v) || v === "") return true;
        function IsURL(str_url) {
            str_url = str_url.toLowerCase().split("?")[0];

            //            var re = new RegExp("[0-9a-z]{1,100}");
            //            if (re.test(str_url)) return false;

            var strRegex = "^((https|http|ftp|rtsp|mms)?:\/\/)?"
            //+ "(([0-9a-z_!~*'().&=+$%-]+: )?[0-9a-z_!~*'().&=+$%-]+@)?" //ftp的user@   
                        + "(([0-9]{1,3}\.){3}[0-9]{1,3}" // IP形式的URL- 199.194.52.184   
                        + "|" // 允许IP和DOMAIN（域名）  
                        + "([0-9a-z_!~*'()-]+\.)*" // 域名- www.   
                        + "([0-9a-z][0-9a-z-]{0,61})?[0-9a-z]\." // 二级域名   
                        + "[a-z]{2,6})" // first level domain- .com or .museum   
                        + "(:[0-9]{1,5})?" // 端口- :80
                        + "((/?)|" // a slash isn't required if there is no file name   
                        + "(/[0-9a-z_!~*'().;?:@&=+$,%#-]+)+/?)$";
            var re = new RegExp(strRegex);

            if (re.test(str_url)) {
                return (true);
            } else {
                return (false);
            }
        }
        return IsURL(v);
    },
    "int": function (v, args) {
        if (mini.isNull(v) || v === "") return true;
        //if (String(v).indexOf(0) == 0) return false;
        function isInteger(s) {
            if (s < 0) {
                s = -s;
            }
            var n = String(s);
            return n.length > 0 && !(/[^0-9]/).test(n);
        }
        return isInteger(v);
        //        var v2 = parseInt(v);
        //        if (isNaN(v2)) return false;
        //        return typeof v2 == 'number' && String(v) == String(v2);
    },
    "float": function (v, args) {

        if (mini.isNull(v) || v === "") return true;
        //if (v.indexOf(0) == 0) return false;
        function isFloat(s) {
            //debugger

            //            if (typeof s == 'string') {
            //                
            //                return;
            //            }

            //            if (typeof s == 'number') {
            //                if (s < 0) {
            //                    s = -s;
            //                }
            //            }
            var n = String(s);

            //if (n == '-') return false;
            if (n.indexOf("-") != -1 && n.indexOf("-") != 0) return false;

            n = n.replace('-', '');

            if (n.split(".").length > 2) return false;
            //return n.length > 0 && !(/[^0-9.]/).test(n); // && (/\.\d/).test(n);


            return n.length > 0 && !(/[^0-9.]/).test(n) && !(n.charAt(n.length - 1) == ".");
        }
        return isFloat(v);
        //        var v2 = parseFloat(v);
        //        if (isNaN(v2)) return false;
        //        return typeof v2 == 'number' && v == v2;
    },
    "date": function (v, args) {

        if (mini.isNull(v) || v === "") return true;
        if (!v) return false;
        var d = null;
        var format = args[0];

        if (format) {
            d = mini.parseDate(v, format);
            if (d && d.getFullYear) {
                if (mini.formatDate(d, format) == v) return true;
            }
        } else {
            d = mini.parseDate(v, "yyyy-MM-dd");
            if (!d) d = mini.parseDate(v, "yyyy/MM/dd");
            if (!d) d = mini.parseDate(v, "MM/dd/yyyy");
            if (d && d.getFullYear) return true;
        }

        return false;
    },
    maxLength: function (v, args) {
        if (mini.isNull(v) || v === "") return true;
        var n = parseInt(args);
        if (!v || isNaN(n)) return true;
        if (v.length <= n) return true;
        else return false;
    },
    minLength: function (v, args) {
        if (mini.isNull(v) || v === "") return true;
        var n = parseInt(args);
        if (isNaN(n)) return true;
        if (v.length >= n) return true;
        else return false;
    },
    rangeLength: function (v, args) {
        if (mini.isNull(v) || v === "") return true;
        if (!v) return false;
        var min = parseFloat(args[0]), max = parseFloat(args[1]);
        if (isNaN(min) || isNaN(max)) return true;
        if (min <= v.length && v.length <= max) return true;
        return false;
    },
    rangeChar: function (v, args) {
        if (mini.isNull(v) || v === "") return true;
        //if (!v) return false;
        var min = parseFloat(args[0]), max = parseFloat(args[1]);
        if (isNaN(min) || isNaN(max)) return true;

        function isChinese(v) {
            var re = new RegExp("^[\u4e00-\u9fa5]+$");
            if (re.test(v)) return true;
            return false;
        }

        var len = 0;
        var ss = String(v).split("");
        for (var i = 0, l = ss.length; i < l; i++) {
            if (isChinese(ss[i])) {
                len += 2;
            } else {
                len += 1;
            }
        }

        if (min <= len && len <= max) return true;
        return false;
    },
    range: function (v, args) {
        if (mini.VTypes["float"](v, args) == false) return false;
        if (mini.isNull(v) || v === "") return true;
        v = parseFloat(v);
        if (isNaN(v)) return false;
        var min = parseFloat(args[0]), max = parseFloat(args[1]);
        if (isNaN(min) || isNaN(max)) return true;
        if (min <= v && v <= max) return true;
        return false;
    },
    min: function (v, args) {
        if (mini.VTypes["float"](v, args) == false) return false;
        if (mini.isNull(v) || v === "") return true;
        v = parseFloat(v);
        if (isNaN(v)) return false;
        var min = parseFloat(args[0]);
        if (isNaN(min)) return true;
        if (min <= v) return true;
        return false;
    },
    max: function (v, args) {
        if (mini.VTypes["float"](v, args) == false) return false;
        if (mini.isNull(v) || v === "") return true;
        v = parseFloat(v);
        if (isNaN(v)) return false;
        var max = parseFloat(args[0]);
        if (isNaN(max)) return true;
        if (v <= max) return true;
        return false;
    }
};


mini.summaryTypes = {
    "count": function (data) {
        if (!data) data = [];
        return data.length;
    },
    "max": function (data, field) {
        if (!data) data = [];
        var max = null;
        for (var i = 0, l = data.length; i < l; i++) {
            var o = data[i];
            //var value = parseFloat(o[field]);
            var value = parseFloat(mini._getMap(field, o));
            if (value === null || value === undefined || isNaN(value)) continue;
            if (max == null || max < value) {
                max = value;
            }
        }
        return max;
    },
    "min": function (data, field) {
        if (!data) data = [];
        var min = null;
        for (var i = 0, l = data.length; i < l; i++) {
            var o = data[i];
            //var value = parseFloat(o[field]);
            var value = parseFloat(mini._getMap(field, o));
            if (value === null || value === undefined || isNaN(value)) continue;
            if (min == null || min > value) {
                min = value;
            }
        }
        return min;
    },
    "avg": function (data, field) {
        if (!data) data = [];
        if (data.length == 0) return 0;
        var total = 0;
        for (var i = 0, l = data.length; i < l; i++) {
            var o = data[i];
            //var value = parseFloat(o[field]);
            var value = parseFloat(mini._getMap(field, o));
            if (value === null || value === undefined || isNaN(value)) continue;
            total += value;
        }
        var v = total / data.length;
        return v;
    },
    "sum": function (data, field) {
        if (!data) data = [];
        var total = 0;
        for (var i = 0, l = data.length; i < l; i++) {
            var o = data[i];
            //var value = parseFloat(o[field]);
            var value = parseFloat(mini._getMap(field, o));
            if (value === null || value === undefined || isNaN(value)) continue;
            total += value;
        }
        return total;
    }
};


mini.formatCurrency = function (num, prefix) {
    if (num === null || num === undefined) null == "";
    num = String(num).replace(/\$|\,/g, '');
    if (isNaN(num)) {
        num = "0";
    }
    sign = (num == (num = Math.abs(num)));
    num = Math.floor(num * 100 + 0.50000000001);
    cents = num % 100;
    num = Math.floor(num / 100).toString();
    if (cents < 10) {
        cents = "0" + cents;
    }
    for (var i = 0; i < Math.floor((num.length - (1 + i)) / 3); i++) {
        num = num.substring(0, num.length - (4 * i + 3)) + ',' + num.substring(num.length - (4 * i + 3));
    }
    prefix = prefix || '';
    return prefix + (((sign) ? '' : '-') + num + '.' + cents);
}

//var num = 9988812345.123;
//alert(formatCurrency(num, "￥"));


mini.getByUid = mini.getbyUID;
/**
* jQuery MiniUI v3.0
* 
* Web Site : http://www.miniui.com
*
* Commercial License : http://www.miniui.com/license
*
* Copyright(c) 2012 All Rights Reserved. Shanghai PusSoft Co., Ltd (上海普加软件有限公司) [ services@plusoft.com.cn ]. 
* 
*/

/**
拖拽基类
    mouse.init:     初始鼠标点击坐标
    mouse.now:      当前鼠标坐标
    events: onStart, onMove, onStop    
*/
mini.emptyFn = function () { };
mini.Drag = function (options) {
    mini.copyTo(this, options);
};
mini.Drag.prototype = {
    onStart: mini.emptyFn,
    onMove: mini.emptyFn,
    onStop: mini.emptyFn,
    capture: false,
    fps: 20,
    event: null,
    delay: 80,

    //调用start的时候,鼠标已经按下去了.	
    start: function (e) {
        
        e.preventDefault();
        if (e) this.event = e;

        this.now = this.init = [this.event.pageX, this.event.pageY];  //初始时的mouse坐标	    

        var bd = document;
        mini.on(bd, 'mousemove', this.move, this);
        mini.on(bd, 'mouseup', this.stop, this);
        mini.on(bd, 'contextmenu', this.contextmenu, this);
        if (this.context) mini.on(this.context, 'contextmenu', this.contextmenu, this);

        this.trigger = e.target; //e.trigger;
        mini.selectable(this.trigger, false);
        mini.selectable(bd.body, false);

        if (this.capture) {//ie下,为true的时候,鼠标指针不能得到界面上的do元素
            if (isIE) this.trigger.setCapture(true);
            else if (document.captureEvents) document.captureEvents(Event.MOUSEMOVE | Event.MOUSEUP | Event.MOUSEDOWN);
        }
        this.started = false;

        //定制一个延迟事件
        this.startTime = new Date();
    },
    contextmenu: function (e) {
        if (this.context) mini.un(this.context, 'contextmenu', this.contextmenu, this);
        mini.un(document, 'contextmenu', this.contextmenu, this);
        e.preventDefault();
        e.stopPropagation();
    },
    move: function (e) {
        if (this.delay) { //如果有延迟配置,则判断当前是否超过了延迟时间
            if (new Date() - this.startTime < this.delay) return;
        }

        //2)


        //处理!!!        

        var sf = this;

        if (!this.timer) {
            this.timer = setTimeout(function () {

                if (!sf.started) {
                    sf.started = true;
                    sf.onStart(sf);             //在第一次move的时候,才开始onStart	        
                }


                sf.now = [e.pageX, e.pageY]//e.xy.clone();             //移动中的鼠标坐标	  
                sf.event = e;
                sf.onMove(sf);
                sf.timer = null;
            }, 5);
        }
    },
    stop: function (e) {
        
        this.now = [e.pageX, e.pageY]//e.xy.clone();             //移动中的鼠标坐标
        this.event = e;

        if (this.timer) {
            clearTimeout(this.timer);
            this.timer = null;
        }
        var bd = document;

        mini.selectable(this.trigger, true);
        mini.selectable(bd.body, true);

        if (isIE) {
            this.trigger.setCapture(false);
            this.trigger.releaseCapture();
        }
        //        if (this.capture) {
        //            if (isIE) this.trigger.releaseCapture();
        //            else if (document.captureEvents) document.releaseEvents(Event.MOUSEMOVE | Event.MOUSEUP | Event.MOUSEDOWN);
        //        }

        var success = mini.MouseButton.Right != e.button;
        if (success == false) {
            e.preventDefault();

        }

        //if (this.capture == false) {   
        //if (isIE) this.trigger.setCapture(false);            
        //}

        mini.un(bd, 'mousemove', this.move, this);
        mini.un(bd, 'mouseup', this.stop, this);
        var sf = this;
        setTimeout(function () {
            mini.un(document, 'contextmenu', sf.contextmenu, sf);
            if (sf.context) mini.un(sf.context, 'contextmenu', sf.contextmenu, sf);
        }, 1);

        //if (this.started || isIE9) this.onStop(this, success);
        if (this.started) this.onStop(this, success);
    }
};

/**
* jQuery MiniUI v3.0
* 
* Web Site : http://www.miniui.com
*
* Commercial License : http://www.miniui.com/license
*
* Copyright(c) 2012 All Rights Reserved. Shanghai PusSoft Co., Ltd (上海普加软件有限公司) [ services@plusoft.com.cn ]. 
* 
*/

mini.JSON = new (function () {
    var sb = [];
    var _dateFormat = null;
    var useHasOwn = !!{}.hasOwnProperty,
        replaceString = function (a, b) {

            var c = m[b];
            if (c) {

                //sb[sb.length] = c;
                return c;
            }
            c = b.charCodeAt();
            return "\\u00" + Math.floor(c / 16).toString(16) + (c % 16).toString(16);

        },
        doEncode = function (o, field) {

            if (o === null) {
                sb[sb.length] = "null";
                return;
            }
            var t = typeof o;
            if (t == "undefined") {
                sb[sb.length] = "null";
                return;
            } else if (o.push) {    //array

                sb[sb.length] = '[';
                var b, i, l = o.length, v;
                for (i = 0; i < l; i += 1) {
                    v = o[i];
                    t = typeof v;
                    if (t == "undefined" || t == "function" || t == "unknown") {
                    } else {
                        if (b) {
                            sb[sb.length] = ',';
                        }
                        doEncode(v);

                        b = true;
                    }
                }
                sb[sb.length] = ']';
                return;
            } else if (o.getFullYear) {
                if (_dateFormat) {
                    sb[sb.length] = '"';
                    if (typeof _dateFormat == 'function') {
                        sb[sb.length] = _dateFormat(o, field);
                    } else {
                        sb[sb.length] = mini.formatDate(o, _dateFormat);
                    }
                    sb[sb.length] = '"';
                } else {
                    var n;
                    sb[sb.length] = '"';
                    sb[sb.length] = o.getFullYear();
                    sb[sb.length] = "-";
                    n = o.getMonth() + 1;
                    sb[sb.length] = n < 10 ? "0" + n : n;
                    sb[sb.length] = "-";
                    n = o.getDate();
                    sb[sb.length] = n < 10 ? "0" + n : n;
                    sb[sb.length] = "T"
                    n = o.getHours();
                    sb[sb.length] = n < 10 ? "0" + n : n;
                    sb[sb.length] = ":"
                    n = o.getMinutes();
                    sb[sb.length] = n < 10 ? "0" + n : n;
                    sb[sb.length] = ":"
                    n = o.getSeconds();
                    sb[sb.length] = n < 10 ? "0" + n : n;
                    sb[sb.length] = '"';
                }
                return;
            } else if (t == "string") {
                if (strReg1.test(o)) {
                    sb[sb.length] = '"';

                    sb[sb.length] = o.replace(strReg2, replaceString);
                    sb[sb.length] = '"';
                    return;
                }
                sb[sb.length] = '"' + o + '"';
                return;
            } else if (t == "number") {
                sb[sb.length] = o;
                return;
            } else if (t == "boolean") {
                sb[sb.length] = String(o);
                return;
            } else {    //object
                sb[sb.length] = "{";
                var b, i, v;
                for (i in o) {
                    //if (!useHasOwn || (o.hasOwnProperty && o.hasOwnProperty(i))) {
                    if (!useHasOwn || Object.prototype.hasOwnProperty.call(o, i)) {

                        v = o[i];
                        t = typeof v;
                        if (t == "undefined" || t == "function" || t == "unknown") {
                        } else {
                            if (b) {
                                sb[sb.length] = ',';
                            }
                            doEncode(i);
                            sb[sb.length] = ":";
                            doEncode(v, i)

                            b = true;
                        }
                    }
                }
                sb[sb.length] = "}";
                return;
            }
        },
        m = {
            "\b": '\\b',
            "\t": '\\t',
            "\n": '\\n',
            "\f": '\\f',
            "\r": '\\r',
            '"': '\\"',
            "\\": '\\\\'
        },
        strReg1 = /["\\\x00-\x1f]/,
        strReg2 = /([\x00-\x1f\\"])/g;

    this.encode = function () {

        var ec;
        return function (o, dateFormat) {
            sb = [];

            _dateFormat = dateFormat;
            doEncode(o);

            _dateFormat = null;

            return sb.join("");
        };
    } ();
    this.decode = function () {

        //        var dateRe1 = /(\d{4})-(\d{2})-(\d{2})[T ](\d{2}):(\d{2}):(\d{2})/g;
        //        var dateRe2 = new RegExp('\/Date\\(([0-9]+)\\)\/', 'g');
        //var dateRe2 = new RegExp('\/Date\((\d+)\)\/', 'g');


        //"2000-11-12 11:22:33", "2000-05-12 11:22:33", "2008-01-11T12:22:00", "2008-01-11T12:22:00.111Z"


        var dateRe1 = /^(\d{4})-(\d{2})-(\d{2})[T ](\d{2}):(\d{2}):(\d{2}(?:\.*\d*)?)Z*$/;
        //"\/Date(1382101422005)\/", "//Date(1034000000000)//", "/Date(1034000000000+0800)/"
        var dateRe2 = new RegExp('^\/+Date\\((-?[0-9]+)\.*\\)\/+$', 'g');

        var re = /[\"\'](\d{4})-(\d{1,2})-(\d{1,2})[T ](\d{1,2}):(\d{1,2}):(\d{1,2})(\.*\d*)[\"\']/g;

        return function (json, parseDate) {
            if (json === "" || json === null || json === undefined) return json;

            if (typeof json == 'object') {  //不应该序列化，应该遍历处理日期字符串
                json = this.encode(json);
            }

            function evalParse(json) {
                if (parseDate !== false) {

                    //json = json.replace(__js_dateRegEx, "$1new Date($2)");

                    json = json.replace(__js_dateRegEx, "$1new Date($2)");
                    json = json.replace(re, "new Date($1,$2-1,$3,$4,$5,$6)");
                    json = json.replace(__js_dateRegEx2, "new Date($1)");
                }
                return window["ev" + "al"]('(' + json + ')');
            }


            var data = null;


            if (window.JSON && window.JSON.parse) {
                
                var dateReviver = function (key, value) {
                    if (typeof value === 'string' && parseDate !== false) {
                        //dateRe1
                        dateRe1.lastIndex = 0;
                        var a = dateRe1.exec(value);
                        if (a) {
                            value = new Date(a[1], a[2] - 1, a[3], a[4], a[5], a[6]);

                            return value;
                        }
                        //dateRe2
                        dateRe2.lastIndex = 0;
                        var a = dateRe2.exec(value);
                        if (a) {
                            value = new Date(parseInt(a[1]));

                            return value;
                        }
                    }
                    return value;
                };

                try {
                    var json2 = json.replace(__js_dateRegEx, "$1\"\/Date($2)\/\"");
                    data = window.JSON.parse(json2, dateReviver);
                } catch (ex) {
                    data = evalParse(json);
                }

            } else {

                data = evalParse(json);
            }
            return data;
        };

    } ();

})();
__js_dateRegEx = new RegExp('(^|[^\\\\])\\"\\\\/Date\\((-?[0-9]+)(?:[a-zA-Z]|(?:\\+|-)[0-9]{4})?\\)\\\\/\\"', "g");
__js_dateRegEx2 = new RegExp('[\"\']\/Date\\(([0-9]+)\\)\/[\"\']', 'g');
mini.encode = mini.JSON.encode;
mini.decode = mini.JSON.decode;

mini.clone = function (o, _clear) {
    if (o === null || o === undefined) return o;
    var json = mini.encode(o);
    var obj = mini.decode(json);

    function clearProp(arr) {
        for (var i = 0, l = arr.length; i < l; i++) {
            var o = arr[i];
            delete o._state;
            delete o._id;
            delete o._pid;
            delete o._uid;
            for (var p in o) {
                var v = o[p];
                if (v instanceof Array) clearProp(v);
            }
        }
    }
    if (_clear !== false) {
        clearProp(obj instanceof Array ? obj : [obj]);
    }

    return obj;
}



/* Date
-----------------------------------------------------------------------------*/

var DAY_MS = 86400000,
	HOUR_MS = 3600000,
	MINUTE_MS = 60000;

mini.copyTo(mini, {
    clearTime: function (date) {
        if (!date) return null;
        return new Date(date.getFullYear(), date.getMonth(), date.getDate());
    },
    maxTime: function (date) {
        if (!date) return null;
        return new Date(date.getFullYear(), date.getMonth(), date.getDate(), 23, 59, 59);
    },
    cloneDate: function (date) {
        if (!date) return null;
        return new Date(date.getTime());
    },
    addDate: function (date, num, type) {
        if (!type) type = "D";
        date = new Date(date.getTime());
        switch (type.toUpperCase()) {
            case "Y":
                date.setFullYear(date.getFullYear() + num);
                break;
            case "MO":
                date.setMonth(date.getMonth() + num);
                break;
            case "D":
                date.setDate(date.getDate() + num);
                break;
            case "H":
                date.setHours(date.getHours() + num);
                break;
            case "M":
                date.setMinutes(date.getMinutes() + num);
                break;
            case "S":
                date.setSeconds(date.getSeconds() + num);
                break;
            case "MS":
                date.setMilliseconds(date.getMilliseconds() + num);
                break;
        }
        return date;
    },
    getWeek: function (year, month, day) {
        //month += 1; //use 1-12            //结果不对，代码注释掉了

        var a = Math.floor((14 - (month)) / 12);
        var y = year + 4800 - a;
        var m = (month) + (12 * a) - 3;
        var jd = day + Math.floor(((153 * m) + 2) / 5) +
                     (365 * y) + Math.floor(y / 4) - Math.floor(y / 100) +
                     Math.floor(y / 400) - 32045;

        var d4 = (jd + 31741 - (jd % 7)) % 146097 % 36524 % 1461;
        var L = Math.floor(d4 / 1460);
        var d1 = ((d4 - L) % 365) + L;
        NumberOfWeek = Math.floor(d1 / 7) + 1;
        return NumberOfWeek;
    },
    //获得日期本周第一天的日期
    getWeekStartDate: function (date, weekStartDay) {
        if (!weekStartDay) weekStartDay = 0;
        if (weekStartDay > 6 || weekStartDay < 0) throw new Error("out of weekday");
        var day = date.getDay();
        var num = weekStartDay - day;
        if (day < weekStartDay) {
            num -= 7;
        }
        var d = new Date(date.getFullYear(), date.getMonth(), date.getDate() + num);
        return d;
    },
    getShortWeek: function (week) {
        var weeks = this.dateInfo.daysShort;
        return weeks[week];
    },
    getLongWeek: function (week) {
        var weeks = this.dateInfo.daysLong;
        return weeks[week];
    },
    getShortMonth: function (month) {
        var months = this.dateInfo.monthsShort;
        return months[month];
    },
    getLongMonth: function (month) {
        var months = this.dateInfo.monthsLong;
        return months[month];
    },
    dateInfo: {
        monthsLong: ["January", "Febraury", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
        monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        daysLong: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
        daysShort: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
        quarterLong: ['Q1', 'Q2', 'Q3', 'Q4'],
        quarterShort: ['Q1', 'Q2', 'Q3', 'Q4'],
        halfYearLong: ['first half', 'second half'],
        patterns: {
            "d": "M/d/yyyy",
            "D": "dddd, MMMM dd, yyyy",
            "f": "dddd, MMMM dd, yyyy H:mm tt",
            "F": "dddd, MMMM dd, yyyy H:mm:ss tt",
            "g": "M/d/yyyy H:mm tt",
            "G": "M/d/yyyy H:mm:ss tt",
            "m": "MMMM dd",
            "o": "yyyy-MM-ddTHH:mm:ss.fff",
            "s": "yyyy-MM-ddTHH:mm:ss",
            "t": "H:mm tt",
            "T": "H:mm:ss tt",
            "U": "dddd, MMMM dd, yyyy HH:mm:ss tt",
            "y": "MMM, yyyy"
        },
        tt: {
            "AM": "AM",
            "PM": "PM"
        },
        ten: {
            "Early": "Early",
            "Mid": "Mid",
            "Late": "Late"
        },
        today: 'Today',
        clockType: 24
    }
});
Date.prototype.getHalfYear = function () {
    if (!this.getMonth) return null;
    var m = this.getMonth();
    if (m < 6) return 0;
    return 1;
}
Date.prototype.getQuarter = function () {
    if (!this.getMonth) return null;
    var m = this.getMonth();
    if (m < 3) return 0;
    if (m < 6) return 1;
    if (m < 9) return 2;
    return 3;
}


/* Date Format
-----------------------------------------------------------------------------*/


mini.formatDate = function (date, format, locale) {
    if (!date || !date.getFullYear || isNaN(date)) return "";
    var fd = date.toString();

    var dateFormat = mini.dateInfo;
    if (!dateFormat) dateFormat = mini.dateInfo;

    if (typeof (dateFormat) !== "undefined") {
        var pattern = typeof (dateFormat.patterns[format]) !== "undefined" ? dateFormat.patterns[format] : format;

        var year = date.getFullYear();
        var month = date.getMonth();
        var day = date.getDate();

        if (format == "yyyy-MM-dd") { //yyyy-MM-dd
            month = month + 1 < 10 ? "0" + (month + 1) : month + 1;
            day = day < 10 ? "0" + day : day;
            return year + "-" + month + "-" + day;
        }
        if (format == "MM/dd/yyyy") { //MM/dd/yyyy
            month = month + 1 < 10 ? "0" + (month + 1) : month + 1;
            day = day < 10 ? "0" + day : day;
            return month + "/" + day + "/" + year;
        }



        fd = pattern.replace(/yyyy/g, year);
        fd = fd.replace(/yy/g, (year + "").substring(2));

        //
        var halfyear = date.getHalfYear();
        fd = fd.replace(/hy/g, dateFormat.halfYearLong[halfyear]);

        //
        var quarter = date.getQuarter();
        fd = fd.replace(/Q/g, dateFormat.quarterLong[quarter]);
        fd = fd.replace(/q/g, dateFormat.quarterShort[quarter]);


        fd = fd.replace(/MMMM/g, dateFormat.monthsLong[month].escapeDateTimeTokens());
        fd = fd.replace(/MMM/g, dateFormat.monthsShort[month].escapeDateTimeTokens());
        fd = fd.replace(/MM/g, month + 1 < 10 ? "0" + (month + 1) : month + 1);
        fd = fd.replace(/(\\)?M/g, function ($0, $1) { return $1 ? $0 : month + 1; });

        var dayOfWeek = date.getDay();
        fd = fd.replace(/dddd/g, dateFormat.daysLong[dayOfWeek].escapeDateTimeTokens());
        fd = fd.replace(/ddd/g, dateFormat.daysShort[dayOfWeek].escapeDateTimeTokens());


        fd = fd.replace(/dd/g, day < 10 ? "0" + day : day);
        fd = fd.replace(/(\\)?d/g, function ($0, $1) { return $1 ? $0 : day; });

        var hour = date.getHours();
        var halfHour = hour > 12 ? hour - 12 : hour;
        if (dateFormat.clockType == 12) {
            if (hour > 12) {
                hour -= 12;
            }
        }

        //HH
        fd = fd.replace(/HH/g, hour < 10 ? "0" + hour : hour);
        fd = fd.replace(/(\\)?H/g, function ($0, $1) { return $1 ? $0 : hour; });

        //hh        
        fd = fd.replace(/hh/g, halfHour < 10 ? "0" + halfHour : halfHour);
        fd = fd.replace(/(\\)?h/g, function ($0, $1) { return $1 ? $0 : halfHour; });

        var minutes = date.getMinutes();
        fd = fd.replace(/mm/g, minutes < 10 ? "0" + minutes : minutes);
        fd = fd.replace(/(\\)?m/g, function ($0, $1) { return $1 ? $0 : minutes; });

        var seconds = date.getSeconds();
        fd = fd.replace(/ss/g, seconds < 10 ? "0" + seconds : seconds);
        fd = fd.replace(/(\\)?s/g, function ($0, $1) { return $1 ? $0 : seconds; });

        fd = fd.replace(/fff/g, date.getMilliseconds());

        fd = fd.replace(/tt/g, date.getHours() > 12 || date.getHours() == 0 ? dateFormat.tt["PM"] : dateFormat.tt["AM"]);

        //
        var date = date.getDate();
        var tenF = '';
        if (date <= 10) tenF = dateFormat.ten['Early'];
        else if (date <= 20) tenF = dateFormat.ten['Mid'];
        else tenF = dateFormat.ten['Late'];
        fd = fd.replace(/ten/g, tenF);
    }

    return fd.replace(/\\/g, "");
}
String.prototype.escapeDateTimeTokens = function () {
    return this.replace(/([dMyHmsft])/g, "\\$1");
}

/* Date Parsing
-----------------------------------------------------------------------------*/

mini.fixDate = function (d, check) { // force d to be on check's YMD, for daylight savings purposes
    if (+d) { // prevent infinite looping on invalid dates
        while (d.getDate() != check.getDate()) {
            d.setTime(+d + (d < check ? 1 : -1) * HOUR_MS);
        }
    }
}

/*
examples:
2000/12/22 23:23:59
2000/12/22T23:23:59
2000-12-22 23:23:59
2000-12-22T23:23:59
2000-12-22
2000/12/22
12-22-2000
12/22/2000
2010.11.12  
*/



mini.parseDate = function (s, ignoreTimezone) {

    
    try {
        var d = window["ev" + "al"](s);
        if (d && d.getFullYear) return d;
    } catch (ex) {
    }
    //if (isNaN(s)) return null; 
    if (typeof s == 'object') { // already a Date object    
        return isNaN(s) ? null : s;
    }
    if (typeof s == 'number') { // a UNIX timestamp
        //if (new Date(1970, 0, 1).getTime() > parseInt(s)) return null;
        var d = new Date(s * 1000);
        if (d.getTime() != s) return null;
        return isNaN(d) ? null : d;
    }
    if (typeof s == 'string') {
        //20101112, 201011

        m = s.match(/^([0-9]{4})([0-9]{2})([0-9]{0,2})$/);
        if (m) {
            var date = new Date(parseInt(m[1], 10), parseInt(m[2], 10) - 1);
            if (m[3]) date.setDate(m[3]);
            return date;
        }
        
        //2010.11
        m = s.match(/^([0-9]{4}).([0-9]*)$/);
        if (m) {
            var date = new Date(m[1], m[2] - 1);
            return date;
        }

        if (s.match(/^\d+(\.\d+)?$/)) { // a UNIX timestamp
            var d = new Date(parseFloat(s) * 1000);
            if (d.getTime() != s) return null;
            else return d;
        }
        if (ignoreTimezone === undefined) {
            ignoreTimezone = true;
        }
        var d = mini.parseISO8601(s, ignoreTimezone) || (s ? new Date(s) : null);
        return isNaN(d) ? null : d;
    }
    // TODO: never return invalid dates (like from new Date(<string>)), return null instead
    return null;
}
mini.parseISO8601 = function (s, ignoreTimezone) { // ignoreTimezone defaults to false
    // derived from http://delete.me.uk/2005/03/iso8601.html
    // TODO: for a know glitch/feature, read tests/issue_206_parseDate_dst.html
    //var m = s.match(/^([0-9]{4})(-([0-9]{2})(-([0-9]{2})([T ]([0-9]{2}):([0-9]{2})(:([0-9]{2})(\.([0-9]+))?)?(Z|(([-+])([0-9]{2})(:?([0-9]{2}))?))?)?)?)?$/);
    var m = s.match(/^([0-9]{4})([-\/]([0-9]{1,2})([-\/]([0-9]{1,2})([T ]([0-9]{1,2}):([0-9]{1,2})(:([0-9]{1,2})(\.([0-9]+))?)?(Z|(([-+])([0-9]{2})(:?([0-9]{2}))?))?)?)?)?$/);
    if (!m) {
        //2010-11-22 9  小时额外处理下
        m = s.match(/^([0-9]{4})[-\/]([0-9]{2})[-\/]([0-9]{2})[T ]([0-9]{1,2})/);
        if (m) {
            var date = new Date(m[1], m[2] - 1, m[3], m[4]);
            return date;
        }

        //2010.11
        m = s.match(/^([0-9]{4}).([0-9]*)$/);
        if (m) {
            var date = new Date(m[1], m[2] - 1);
            return date;
        }

        //2010.11.22
        m = s.match(/^([0-9]{4}).([0-9]*).([0-9]*)/);
        if (m) {
            var date = new Date(m[1], m[2] - 1, m[3]);
            return date;
        }

        //ff "12-22-2000"
        m = s.match(/^([0-9]{2})-([0-9]{2})-([0-9]{4})$/);
        if (!m) return null;
        else {
            var date = new Date(m[3], m[1] - 1, m[2]);
            return date;
        }
    }
    var date = new Date(m[1], 0, 1);
    if (ignoreTimezone || !m[14]) {
        var check = new Date(m[1], 0, 1, 9, 0);
        if (m[3]) {
            date.setMonth(m[3] - 1);
            check.setMonth(m[3] - 1);
        }
        if (m[5]) {
            date.setDate(m[5]);
            check.setDate(m[5]);
        }
        mini.fixDate(date, check);
        if (m[7]) {
            date.setHours(m[7]);
        }
        if (m[8]) {
            date.setMinutes(m[8]);
        }
        if (m[10]) {
            date.setSeconds(m[10]);
        }
        if (m[12]) {
            date.setMilliseconds(Number("0." + m[12]) * 1000);
        }
        mini.fixDate(date, check);
    } else {
        date.setUTCFullYear(
			m[1],
			m[3] ? m[3] - 1 : 0,
			m[5] || 1
		);
        date.setUTCHours(
			m[7] || 0,
			m[8] || 0,
			m[10] || 0,
			m[12] ? Number("0." + m[12]) * 1000 : 0
		);
        var offset = Number(m[16]) * 60 + (m[18] ? Number(m[18]) : 0);
        offset *= m[15] == '-' ? 1 : -1;
        date = new Date(+date + (offset * 60 * 1000));
    }
    return date;
}


mini.parseTime = function (s, format) {
    if (!s) return null;
    var n = parseInt(s);

    if (n == s && format) {
        d = new Date(0);

        var ch = format.charAt(0);

        if (ch == "H") {
            d.setHours(n);
        } else if (ch == "m") {
            d.setMinutes(n);
        } else if (ch == "s") {
            d.setSeconds(n);
        }
        if (isNaN(d)) d = null;
        return d;
    }

    var d = mini.parseDate(s);
    if (!d) {
        var ss = s.split(":");
        var t1 = parseInt(parseFloat(ss[0]));
        var t2 = parseInt(parseFloat(ss[1]));
        var t3 = parseInt(parseFloat(ss[2]));
        if (!isNaN(t1) && !isNaN(t2) && !isNaN(t3)) {
            d = new Date(0);
            d.setHours(t1);
            d.setMinutes(t2);
            d.setSeconds(t3);
        }
        if (!isNaN(t1) && (format == "H" || format == "HH")) {
            d = new Date(0);
            d.setHours(t1);
        } else if (!isNaN(t1) && !isNaN(t2) && (format == "H:mm" || format == "HH:mm")) {
            d = new Date(0);
            d.setHours(t1);
            d.setMinutes(t2);
        } else if (!isNaN(t1) && !isNaN(t2) && format == "mm:ss") {
            d = new Date(0);
            d.setMinutes(t1);
            d.setSeconds(t2);
        }
    }
    return d;
}



/*
下表列出了可被合并以构造自定义模式的模式
========================================
这些模式是区分大小写的；例如，识别“MM”，但不识别“mm”。如果自定义模式包含空白字符或用单引号括起来的字符，则输出字符串页也将包含这些字符。未定义为格式模式的一部分或未定义为格式字符的字符按其原义复制。

格式模式 说明 ：
d 月中的某一天。一位数的日期没有前导零。
dd 月中的某一天。一位数的日期有一个前导零。
ddd 周中某天的缩写名称，在 AbbreviatedDayNames 中定义。
dddd 周中某天的完整名称，在 DayNames 中定义。
M 月份数字。一位数的月份没有前导零。
MM 月份数字。一位数的月份有一个前导零。
MMM 月份的缩写名称，在 AbbreviatedMonthNames 中定义。
MMMM 月份的完整名称，在 MonthNames 中定义。
y 不包含纪元的年份。如果不包含纪元的年份小于 10，则显示不具有前导零的年份。
yy 不包含纪元的年份。如果不包含纪元的年份小于 10，则显示具有前导零的年份。
yyyy 包括纪元的四位数的年份。
gg 时期或纪元。如果要设置格式的日期不具有关联的时期或纪元字符串，则忽略该模式。
h 12 小时制的小时。一位数的小时数没有前导零。
hh 12 小时制的小时。一位数的小时数有前导零。
H 24 小时制的小时。一位数的小时数没有前导零。
HH 24 小时制的小时。一位数的小时数有前导零。
m 分钟。一位数的分钟数没有前导零。
mm 分钟。一位数的分钟数有一个前导零。
s 秒。一位数的秒数没有前导零。
ss 秒。一位数的秒数有一个前导零。
f 秒的小数精度为一位。其余数字被截断。
ff 秒的小数精度为两位。其余数字被截断。
fff 秒的小数精度为三位。其余数字被截断。
ffff 秒的小数精度为四位。其余数字被截断。
fffff 秒的小数精度为五位。其余数字被截断。
ffffff 秒的小数精度为六位。其余数字被截断。
fffffff 秒的小数精度为七位。其余数字被截断。
t 在 AMDesignator 或 PMDesignator 中定义的 AM/PM 指示项的第一个字符（如果存在）。
tt 在 AMDesignator 或 PMDesignator 中定义的 AM/PM 指示项（如果存在）。
z 时区偏移量（“+”或“-”后面仅跟小时）。一位数的小时数没有前导零。例如，太平洋标准时间是“-8”。
zz 时区偏移量（“+”或“-”后面仅跟小时）。一位数的小时数有前导零。例如，太平洋标准时间是“-08”。
zzz 完整时区偏移量（“+”或“-”后面跟有小时和分钟）。一位数的小时数和分钟数有前导零。例如，太平洋标准时间是“-08:00”。
: 在 TimeSeparator 中定义的默认时间分隔符。
/ 在 DateSeparator 中定义的默认日期分隔符。
% c 其中 c 是格式模式（如果单独使用）。如果格式模式与原义字符或其他格式模式合并，则可以省略“%”字符。
\ c 其中 c 是任意字符。照原义显示字符。若要显示反斜杠字符，请使用“\\”。

只有上面第二个表中列出的格式模式才能用于创建自定义模式；在第一个表中列出的标准格式字符不能用于创建自定义模式。自定义模式的长度至少为两个字符；例如，

DateTime.ToString( "d") 返回 DateTime 值；“d”是标准短日期模式。
DateTime.ToString( "%d") 返回月中的某天；“%d”是自定义模式。
DateTime.ToString( "d ") 返回后面跟有一个空白字符的月中的某天；“d”是自定义模式。

比较方便的是,上面的参数可以随意组合,并且不会出错,多试试,肯定会找到你要的时间格式
如要得到2005年06月 这样格式的时间
可以这样写:
date.ToString("yyyy年MM月", DateTimeFormatInfo.InvariantInfo)
或者
date.ToString("yyyy年MM月")
如此类推.

*/

mini.dateInfo = {
    monthsLong: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
    monthsShort: ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"],
    daysLong: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
    daysShort: ["日", "一", "二", "三", "四", "五", "六"],
    quarterLong: ['一季度', '二季度', '三季度', '四季度'],
    quarterShort: ['Q1', 'Q2', 'Q2', 'Q4'],
    halfYearLong: ['上半年', '下半年'],
    patterns: {
        "d": "yyyy-M-d",
        "D": "yyyy年M月d日",
        "f": "yyyy年M月d日 H:mm",
        "F": "yyyy年M月d日 H:mm:ss",
        "g": "yyyy-M-d H:mm",
        "G": "yyyy-M-d H:mm:ss",
        "m": "MMMd日",
        "o": "yyyy-MM-ddTHH:mm:ss.fff",
        "s": "yyyy-MM-ddTHH:mm:ss",
        "t": "H:mm",
        "T": "H:mm:ss",
        "U": "yyyy年M月d日 HH:mm:ss",
        "y": "yyyy年MM月"
    },
    tt: {
        "AM": "上午",
        "PM": "下午"
    },
    ten: {
        "Early": "上旬",
        "Mid": "中旬",
        "Late": "下旬"
    },
    today: '今天',
    clockType: 24
};
//var s = "2000.1.2";
//alert(mini.parseDate(s));
(function (window) {

    var mini = window.mini;
    if (!mini) mini = window.mini = {};


    /////////////////////////////////////////////////////////
    // Culture
    ////////////////////////////////////////////////////////

    var cultures = mini.cultures = {},
        cultureName = "en";

    mini.cultures[cultureName] = {
        name: cultureName,
        numberFormat: {
            number: {
                pattern: ["n", "-n"],
                decimals: 2,
                decimalsSeparator: ".",
                groupSeparator: ",",
                groupSize: [3]
            },
            percent: {
                pattern: ["n %", "-n %"],
                decimals: 2,
                decimalsSeparator: ".",
                groupSeparator: ",",
                groupSize: [3],
                symbol: "%"
            },
            currency: {
                pattern: ["$n", "($n)"],
                decimals: 2,
                decimalsSeparator: ".",
                groupSeparator: ",",
                groupSize: [3],
                symbol: "$"
            }
        }
    };

    function findCulture(cultureName) {
        return mini.cultures[cultureName];
    }

    function getCulture(cultureName) {
        if (cultureName && cultureName.name) return cultureName;
        return findCulture(cultureName) || mini.cultures.current;
    }

    mini.getCulture = getCulture;

    mini.culture = function (cultureName) {
        if (cultureName !== undefined) {
            mini.cultures.current = findCulture(cultureName);
        } else {
            return cultures.current;
        }
    };

    mini.culture(cultureName);



    /////////////////////////////////////////////////////////
    // Number
    ////////////////////////////////////////////////////////
    var STRING = "string",
        NUMBER = "number",
        isArray = function (val) {
            return val && !!val.unshift;
        },
        numberRegExp = {
            2: /^\d{1,2}/,
            4: /^\d{4}/
        };

    function pad(number, digits, end) {
        number = number + "";
        digits = typeof digits == NUMBER ? digits : 2;

        var n = digits - number.length;
        if (n > 0) {
            var zeros = repeat(n, "0");
            return end ? number + zeros : zeros + number;
        }

        return number;
    }
    function repeat(n, c) {
        var s = "";
        while (n) {
            n -= 1;
            s += c;
        }
        return s;
    }

    var numberFormatRegExp = /^(n|c|p)(\d*)$/i,
        eRegExp = /^(e)(\d*)$/i,
        clearRegExp = /[^0#]/g,
        exponentRegExp = /[eE][\-+]?[0-9]+/;


    function doFormatNumber(number, format, options) {   //0,0.0%           0.00
        number = Math.abs(number);



        var isGroup = format.indexOf(",") != -1,
            formats = format.split("."),
            format0 = (formats[0] || "").replace(clearRegExp, ""),
            format1 = (formats[1] || "").replace(clearRegExp, ""),
//            values = String(number).split("."),
//            value0 = values[0],
//            value1 = values[1] || "",
            value = "",
            groupSize = options.groupSize[0],
            decimalsSeparator = options.decimalsSeparator,
            groupSeparator = options.groupSeparator;


        //format0 = format0.substr(format0.indexOf("0")) || "0";

        var index = format0.indexOf("0");
        format0 = index == -1 ? "0" : (format0.substr(index) || "0");


        var decimals = format1.length;                                              //保留小数位
        var decimalPlaces = format1.substr(0, format1.lastIndexOf("0") + 1).length; //补0小数位
        //format1 = format1.substr(0, format1.lastIndexOf("0") + 1);

        //alert(number);

        //先处理小数的四舍五入
        function round2(number, fractionDigits) {
            with (Math) {
                return round(number * pow(10, fractionDigits)) / pow(10, fractionDigits);
            }
        }
        number = round2(number, decimals);

        var values = String(number).split(".");
        value0 = values[0];
        value1 = values[1] || "";

        //alert(decimals + ":" + decimalPlaces);

        //整数
        if (value0) {
            value0 = pad(value0, format0.length);

            if (isGroup) {
                for (var i = 0; i < Math.floor((value0.length - (1 + i)) / 3); i++) {
                    value0 = value0.substring(0, value0.length - (4 * i + 3)) + groupSeparator + value0.substring(value0.length - (4 * i + 3));
                }
            }

            value += value0;
        }

        //小数
        if (decimals > 0) {
            value += decimalsSeparator;

//            var n = parseInt(value1.charAt(decimals));
//            if (!isNaN(n) && n > 4) {
//                var v1s = value1.split("");
//                v1s[decimals - 1] = parseInt(v1s[decimals - 1]) + 1;
//                value1 = v1s.join('');
//            }

            value += pad(value1.substr(0, decimals), decimalPlaces, true);
        }

        return value;
    }

    function transformFormat(format, value, culture, formats) {

        var options = culture.numberFormat.number;

        var map = numberFormatRegExp.exec(format);
        if (map != null) {              //n,c,p     标准设置，替换n,%,$
            var f1 = map[1], f2 = map[2];

            if (f1 == "p") {
                options = culture.numberFormat.percent;
            } else if (f1 == "c") {
                options = culture.numberFormat.currency;
            }

            var decimals = f2 ? parseInt(f2) : options.decimals;
            var pattern = options.pattern[value < 0 ? 1 : 0];
            pattern = pattern.replace("n", "#,#" + (decimals > 0 ? "." + repeat(decimals, "0") : ""));

            format = format.replace(f1 + f2, pattern)
                            .replace("$", culture.numberFormat.currency.symbol)
                            .replace("%", culture.numberFormat.percent.symbol);

        } else {
            if (isNumberFormat(format)) {
                if (value < 0 && !formats[1]) format = "-" + format;
            }
        }

        return format;
    }

    function isNumberFormat(format) {
        return format.indexOf("0") != -1 || format.indexOf("#") != -1;
    }

    function getNumberFormat(format) {  //从"￥#,#.00000 元"中提取"#,#.00000"
        if (!format) return null;
        function getIndexs(format) {
            var begin = format.indexOf("0");
            var begin2 = format.indexOf("#");
            if (begin == -1 || (begin2 != -1 && begin2 < begin)) begin = begin2;

            var end = format.lastIndexOf("0");
            var end2 = format.lastIndexOf("#");
            if (end == -1 || (end2 != -1 && end2 > end)) end = end2;

            return [begin, end];
        }

        var indexs = getIndexs(format);
        var begin = indexs[0], end = indexs[1];


        return begin > -1 ? { begin: begin, end: end, format: format.substring(begin, end + 1)} : null;
    }

    function formatNumber(number, format, culture) {
        if (typeof number != NUMBER) return "";
        if (!format) return String(number);

        var formats = format.split(";");
        format = formats[0];
        if (number < 0 && formats.length >= 2) format = formats[1];
        if (number == 0 && formats.length >= 3) format = formats[2];

        var culture = getCulture(culture),
            numberFormat = culture.numberFormat.number,
            percentFormat = culture.numberFormat.percent,
            currencyFormat = culture.numberFormat.currency,
            format = transformFormat(format, number, culture, formats),
            isCurrency = format.indexOf(currencyFormat.symbol) != -1,
            isPercent = format.indexOf(percentFormat.symbol) != -1,
            isDecimals = format.indexOf(".") != -1,
            isFormat = isNumberFormat(format),
            options = isCurrency ? currencyFormat : (isPercent ? currencyFormat : numberFormat),
            number = isPercent ? number * 100 : number;


        //e,e2,...
        var ms = eRegExp.exec(format);
        if (ms) {
            var decimals = parseInt(ms[2]);
            return isNaN(decimals) ? number.toExponential() : number.toExponential(decimals);
        }

        if (!isFormat) return format;


        var value = "", nf = getNumberFormat(format);
        if (nf != null) {
            value = doFormatNumber(number, nf.format, options);
            value = format.substr(0, nf.begin) + value + format.substr(nf.end + 1);
        } else {
            value = format;
        }

        return value;
    }

    mini.parseInt = function (value, culture, format) {
        var result = mini.parseFloat(value, culture, format);
        if (result) {
            result = result | 0;
        }
        return result;
    }

    mini.parseFloat = function (value, culture, format) {

        if (!value && value !== 0) {
            return null;
        }

        if (typeof value === NUMBER) {
            return value;
        }

        if (format && format.split(";")[2] == value) return 0;

        //handle exponential number
        if (exponentRegExp.test(value)) {
            value = parseFloat(value);
            if (isNaN(value)) {
                value = null;
            }
            return value;
        }

        value = value.toString();
        culture = mini.getCulture(culture);

        var numberFormat = culture.numberFormat,
            number = numberFormat.number,
            percent = numberFormat.percent,
            currency = numberFormat.currency,
            isPercent = value.indexOf(percent.symbol) != -1,
            isCurrency = value.indexOf(currency.symbol) != -1,
            number = isCurrency ? currency : (isPercent ? percent : number),
            pattern = number.pattern[1],
            decimals = number.decimals,
            decimalsSeparator = number.decimalsSeparator,
            groupSeparator = number.groupSeparator,
            negative = value.indexOf("-") > -1;


        function getValue(value, format, _negative) {
            var nf = getNumberFormat(format);
            if (nf) {
                var f1 = format.substr(0, nf.begin), f2 = format.substr(nf.end + 1);
                if (value.indexOf(f1) == 0 && value.indexOf(f2) > -1) {
                    value = value.replace(f1, "").replace(f2, "");
                    negative = _negative;
                }
            }
            return value;
        }

        if (!format) {
            if (negative == false) {
                format = pattern.replace("n", "#,#" + (decimals > 0 ? "." + repeat(decimals, "0") : ""))
                                .replace("$", currency.symbol)
                                .replace("%", percent.symbol);
                value = getValue(value, format, true);
            }
        } else {
            //negative = false;
            var formats = format.split(";");
            if (formats[1]) {
                format = formats[1];
                value = getValue(value, format, true);
            } else {

                format = formats[0];
                var temp = value;
                value = getValue(temp, format, false);
                if (temp == value) {
                    value = getValue(temp, "-" + format, true);
                }
            }


        }


        value = value.split(groupSeparator).join("")
                     .replace(decimalsSeparator, ".");

        var ms = value.match(/([0-9,.]+)/g);
        if (ms == null) return null;
        value = ms[0];


        value = parseFloat(value);

        if (isNaN(value)) {
            value = null;
        } else if (negative) {
            value *= -1;
        }

        if (value && isPercent) {
            value /= 100;
        }

        return value;
    }

    mini.formatNumber = formatNumber;

})(this);

/**
* jQuery MiniUI v3.0
* 
* Web Site : http://www.miniui.com
*
* Commercial License : http://www.miniui.com/license
*
* Copyright(c) 2012 All Rights Reserved. Shanghai PusSoft Co., Ltd (上海普加软件有限公司) [ services@plusoft.com.cn ]. 
* 
*/

var inBrowser = typeof window !== 'undefined';
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = UA && UA.indexOf('android') > 0;
var isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);
var isMobile = isAndroid || isIOS;
mini.isAndroid = isAndroid;
mini.isIOS = isIOS;
mini.isMobile = isMobile;

//mini.borderBox = $('body').css('box-sizing');
//setTimeout(function () {
//    alert($('div').css('box-sizing'));
//}, 1);

//    //把json格式转化成url的编码方式  
//    // e.g. Ext.urlEncode({foo: 1, bar: 2}); would return "foo=1&bar=2"  
//    urlEncode: function(o, pre){//o为json对象,pre为前缀  
//                var undef, buf = [], key, e = encodeURIComponent;  
//      
//                for(key in o){  
//                    undef = !Ext.isDefined(o[key]);  
//                    Ext.each(undef ? key : o[key], function(val, i){  
//                        buf.push("&", e(key), "=", (val != key || !undef) ? e(val) : "");  
//                    });  
//                }  
//                if(!pre){  
//                    buf.shift();  
//                    pre = "";  
//                }  
//                return pre + buf.join('');  
//            },  
//    //把URL字符串编码转化成json对象  
//    //Ext.urlDecode("foo=1&bar=2"); // returns {foo: "1", bar: "2"}  
//    //Ext.urlDecode("foo=1&bar=2&bar=3&bar=4", false); // returns {foo: "1", bar: ["2", "3", "4"]}  
//      
//    urlDecode : function(string, overwrite){//string URL参数,overwrite针对同一参数的多个值是否覆盖,false为不覆盖,那就返回这个参数的数组  
//                var obj = {},  
//                    pairs = string.split('&'),  
//                    d = decodeURIComponent,  
//                    name,  
//                    value;  
//                Ext.each(pairs, function(pair) {  
//                    pair = pair.split('=');  
//                    name = d(pair[0]);  
//                    value = d(pair[1]);  
//                    obj[name] = overwrite || !obj[name] ? value :  
//                                [].concat(obj[name]).concat(value);  
//                });  
//                return obj;  
//            }  


//key
mini.Keyboard = {
    Left: 37,
    Top: 38,
    Right: 39,
    Bottom: 40,

    PageUp: 33,
    PageDown: 34,
    End: 35,
    Home: 36,

    Enter: 13,
    ESC: 27,
    Space: 32,
    Tab: 9,
    Del: 46,

    F1: 112,
    F2: 113,
    F3: 114,
    F4: 115,
    F5: 116,
    F6: 117,
    F7: 118,
    F8: 119,
    F9: 120,
    F10: 121,
    F11: 122,
    F12: 123
};

var ua = navigator.userAgent.toLowerCase(),
    check = function (regex) {
        return regex.test(ua);
    },
    DOC = document,
    isStrict = document.compatMode == "CSS1Compat",
    version = function (is, regex) {
        var m;
        return (is && (m = regex.exec(ua))) ? parseFloat(m[1]) : 0;
    },
    docMode = document.documentMode,
    isOpera = check(/opera/),
    isOpera10_5 = isOpera && check(/version\/10\.5/),
    isChrome = check(/\bchrome\b/),
    isWebKit = check(/webkit/),
    isSafari = !isChrome && check(/safari/),
    isSafari2 = isSafari && check(/applewebkit\/4/),
    isSafari3 = isSafari && check(/version\/3/),
    isSafari4 = isSafari && check(/version\/4/),
    isSafari5_0 = isSafari && check(/version\/5\.0/),
    isSafari5 = isSafari && check(/version\/5/),
    isIE = !isOpera && check(/msie/),
    isIE7 = isIE && ((check(/msie 7/) && docMode != 8 && docMode != 9 && docMode != 10) || docMode == 7),
    isIE8 = isIE && ((check(/msie 8/) && docMode != 7 && docMode != 9 && docMode != 10) || docMode == 8),
    isIE9 = isIE && ((check(/msie 9/) && docMode != 7 && docMode != 8 && docMode != 10) || docMode == 9),
    isIE10 = isIE && ((check(/msie 10/) && docMode != 7 && docMode != 8 && docMode != 9) || docMode == 10),
    isIE6 = isIE && !isIE7 && !isIE8 && !isIE9 && !isIE10,
    isIE11 = (ua.indexOf("trident") > -1 && ua.indexOf("rv") > -1),
    isIE = isIE || isIE11,
//IE_V = isIE ? parseInt(jQuery.browser.version) : -1,    
    isFirefox = navigator.userAgent.indexOf("Firefox") > 0,
    isGecko = !isWebKit && check(/gecko/),
    isGecko3 = isGecko && check(/rv:1\.9/),
    isGecko4 = isGecko && check(/rv:2\.0/),
    isGecko5 = isGecko && check(/rv:5\./),
    isGecko10 = isGecko && check(/rv:10\./),
    isFF3_0 = isGecko3 && check(/rv:1\.9\.0/),
    isFF3_5 = isGecko3 && check(/rv:1\.9\.1/),
    isFF3_6 = isGecko3 && check(/rv:1\.9\.2/),
    isWindows = check(/windows|win32/),
    isMac = check(/macintosh|mac os x/),
    isAir = check(/adobeair/),
    isLinux = check(/linux/),
    scrollbarSize = null,
    chromeVersion = version(true, /\bchrome\/(\d+\.\d+)/),
    firefoxVersion = version(true, /\bfirefox\/(\d+\.\d+)/),
    ieVersion = version(isIE, /msie (\d+\.\d+)/),
    IE_V = isIE ? parseInt(ieVersion) : -1,
    operaVersion = version(isOpera, /version\/(\d+\.\d+)/),
    safariVersion = version(isSafari, /version\/(\d+\.\d+)/),
    webKitVersion = version(isWebKit, /webkit\/(\d+\.\d+)/),
    isSecure = /^https/i.test(window.location.protocol),
    isBorderBox = isIE && !isStrict;

//alert(ieVersion + ":" + IE_V);
//var ua = navigator.userAgent.toLowerCase(),
//    check = function (r) {
//        return r.test(ua);
//    },
//    DOC = document,
//    isStrict = DOC.compatMode == "CSS1Compat",
//    isOpera = Object.prototype.toString.call(window.opera) == '[object Opera]',
//    isChrome = check(/chrome/),
//    isWebKit = check(/webkit/),
//    isSafari = !isChrome && check(/safari/),
//    isSafari2 = isSafari && check(/applewebkit\/4/), // unique to Safari 2
//    isSafari3 = isSafari && check(/version\/3/),
//    isSafari4 = isSafari && check(/version\/4/),
//    isIE = !!window.attachEvent && !isOpera,
//    isIE7 = isIE && check(/msie 7/),
//    isIE8 = isIE && check(/msie 8/),
//    isIE9 = isIE && check(/msie 9/),
//    isIE10 = isIE && document.documentMode == 10,
//    isIE6 = isIE && !isIE7 && !isIE8 && !isIE9 && !isIE10,
//    isFirefox = navigator.userAgent.indexOf("Firefox") > 0,
//    isGecko = !isWebKit && check(/gecko/),
//    isGecko2 = isGecko && check(/rv:1\.8/),
//    isGecko3 = isGecko && check(/rv:1\.9/),
//    isBorderBox = isIE && !isStrict,
//    isWindows = check(/windows|win32/),
//    isMac = check(/macintosh|mac os x/),
//    isAir = check(/adobeair/),
//    isLinux = check(/linux/),
//    isSecure = /^https/i.test(window.location.protocol);

if (isIE6) {
    try {
        DOC.execCommand("BackgroundImageCache", false, true);
    } catch (e) { }
}
mini.boxModel = !isBorderBox;
mini.isIE = isIE;
mini.isIE6 = isIE6;
mini.isIE7 = isIE7;
mini.isIE8 = isIE8;
mini.isIE9 = isIE9;
mini.isIE10 = isIE10;
mini.isIE11 = isIE11;
mini.IE_V = isIE11 ? 11 : IE_V;
mini.isFirefox = isFirefox;
mini.isOpera = isOpera;
mini.isSafari = isSafari;
mini.isChrome = isChrome;

if (isIE) {
    jQuery(document.documentElement).addClass("ie ie" + mini.IE_V);
}

if (jQuery) jQuery.boxModel = mini.boxModel;


//alert(isFirefox + ":" + isChrome + ":" + isSafari+":"+isOpera);
//alert(isIE6 + ":" + isIE7 + ":" + isIE8 + ":" + isIE9 + ":" + isIE10);

mini.noBorderBox = false;
if (jQuery.boxModel == false && isIE && isIE9 == false) mini.noBorderBox = true;

mini.MouseButton = {
    Left: 0,
    Middle: 1,
    Right: 2
}
if (isIE && !isIE9 && !isIE10) {
    mini.MouseButton = {
        Left: 1,
        Middle: 4,
        Right: 2
    }
}

////////////////////////////////////////////////////////////////////////////////

mini.append = function (to, html) {
    to = mini.byId(to);
    if (!html || !to) return;
    if (typeof html == "string") {
        if (html.charAt(0) == '#') {
            html = mini.byId(html);
            if (!html) return;
            to.appendChild(html);
            return html;
        } else {
            if (html.indexOf("<tr") == 0) {
                return jQuery(to).append(html)[0].lastChild;
                return;
            }

            var d = document.createElement("div");
            d.innerHTML = html;
            html = d.firstChild;
            while (d.firstChild) {
                to.appendChild(d.firstChild);
            }
            return html;
        }
    } else {
        to.appendChild(html);
        return html;
    }

    //return jQuery(to).append(html)[0].lastChild;
}
mini.prepend = function (to, html) {
    if (typeof html == "string") {
        if (html.charAt(0) == '#') {
            html = mini.byId(html);
        } else {
            var d = document.createElement("div");
            d.innerHTML = html;
            html = d.firstChild;
        }
    }
    return jQuery(to).prepend(html)[0].firstChild;
}
mini.after = function (to, html) {
    if (typeof html == "string") {
        if (html.charAt(0) == '#') {
            html = mini.byId(html);
        } else {
            var d = document.createElement("div");
            d.innerHTML = html;
            html = d.firstChild;
        }
    }
    if (!html || !to) return;
    to.nextSibling ? to.parentNode.insertBefore(html, to.nextSibling) : to.parentNode.appendChild(html);
    return html;
}
mini.before = function (to, html) {
    if (typeof html == "string") {
        if (html.charAt(0) == '#') {
            html = mini.byId(html);
        } else {
            var d = document.createElement("div");
            d.innerHTML = html;
            html = d.firstChild;
        }
    }
    if (!html || !to) return;
    to.parentNode.insertBefore(html, to);
    //jQuery(to).before(html);
    return html;
}

mini.__wrap = document.createElement('div');
mini.createElements = function (html) {
    mini.removeChilds(mini.__wrap);
    var isTr = html.indexOf("<tr") == 0;
    if (isTr) {
        html = '<table>' + html + '</table>';
    }
    mini.__wrap.innerHTML = html;
    return isTr ? mini.__wrap.firstChild.rows : mini.__wrap.childNodes;
}

mini_byId = function (id, context) {
    if (typeof id == "string") {
        if (id.charAt(0) == '#') id = id.substr(1);
        var el = document.getElementById(id);
        if (el) return el;
        if (context && !mini.isAncestor(document.body, context)) {
            //return jQuery("#" + id, context)[0];

            var els = context.getElementsByTagName("*");
            for (var i = 0, l = els.length; i < l; i++) {
                var el = els[i];
                if (el.id == id) return el;
            }
            el = null;
        }
        return el;
    } else {
        return id;
    }
}
mini_hasClass = function (el, className) {
    el = mini.byId(el);
    if (!el) return;
    if (!el.className) return false;
    var clss = String(el.className).split(" ");
    return clss.indexOf(className) != -1;
}
mini_addClass = function (el, className) {
    if (!className) return;
    if (mini.hasClass(el, className) == false) {
        jQuery(el).addClass(className);
    }
}
mini_removeClass = function (el, className) {
    if (!className) return;
    jQuery(el).removeClass(className);
    //        el = mini.byId(el);
    //        if (!el) return;
    //        el.className = el.className.replace(className, "");
}

var _ceil = function (n) {
    return Math.ceil(parseFloat(n));
}

mini_getMargins = function (el) {
    el = mini.byId(el);
    var jq = jQuery(el);
    return {
        top: _ceil(jq.css("margin-top"), 10) || 0,
        left: _ceil(jq.css("margin-left"), 10) || 0,
        bottom: _ceil(jq.css("margin-bottom"), 10) || 0,
        right: _ceil(jq.css("margin-right"), 10) || 0
    };
}
mini_getBorders = function (el) {
    el = mini.byId(el);
    var jq = jQuery(el);
    return {
        top: _ceil(jq.css("border-top-width"), 10) || 0,
        left: _ceil(jq.css("border-left-width"), 10) || 0,
        bottom: _ceil(jq.css("border-bottom-width"), 10) || 0,
        right: _ceil(jq.css("border-right-width"), 10) || 0
    };
}

mini_getPaddings = function (el) {
    el = mini.byId(el);
    var jq = jQuery(el);
    return {
        top: _ceil(jq.css("padding-top"), 10) || 0,
        left: _ceil(jq.css("padding-left"), 10) || 0,
        bottom: _ceil(jq.css("padding-bottom"), 10) || 0,
        right: _ceil(jq.css("padding-right"), 10) || 0
    };
}
//var ___count = 0;
mini_setWidth = function (el, width) {
    el = mini.byId(el);
    width = parseInt(width);
    if (isNaN(width) || !el) return;
    if (jQuery.boxModel) {
        var p = mini.getPaddings(el);
        var b = mini.getBorders(el);
        width = width - p.left - p.right - b.left - b.right;

        
    }
    //    var m = mini.getMargins(el);
    //    width = width - m.left - m.right;
    if (width < 0) width = 0;
    el.style.width = width + "px";
}
mini_setHeight = function (el, height) {
    el = mini.byId(el);
    height = parseInt(height);
    if (isNaN(height) || !el) return;
    if (jQuery.boxModel) {
        var p = mini.getPaddings(el);
        var b = mini.getBorders(el);
        height = height - p.top - p.bottom - b.top - b.bottom;
        //document.title = ___count++;
        
    }
    //    var m = mini.getMargins(el);
    //    height = height - m.top - m.bottom;
    if (height < 0) height = 0;
    el.style.height = height + "px";
}
mini_getWidth = function (el, content) {
    el = mini.byId(el);
    if (el.style.display == "none" || el.type == "text/javascript") return 0;
    return content ? jQuery(el).width() : jQuery(el).outerWidth();
}
mini_getHeight = function (el, content) {
    el = mini.byId(el);
    if (el.style.display == "none" || el.type == "text/javascript") return 0;
    return content ? jQuery(el).height() : jQuery(el).outerHeight();
}
mini_setBox = function (el, x, y, width, height) {
    if (y === undefined) {
        y = x.y;
        width = x.width;
        height = x.height;
        x = x.x;
    }
    mini.setXY(el, x, y);
    mini.setWidth(el, width);
    mini.setHeight(el, height);
}
mini_getBox = function (el) {
    var xy = mini.getXY(el);
    var box = {
        x: xy[0],
        y: xy[1],
        width: mini.getWidth(el),
        height: mini.getHeight(el)
    };
    box.left = box.x;
    box.top = box.y;
    box.right = box.x + box.width;
    box.bottom = box.y + box.height;
    return box;
}
mini_setStyle = function (el, style) {
    el = mini.byId(el);
    if (!el || typeof style != "string") return;

    var jq = jQuery(el);
    var styles = style.toLowerCase().split(";");
    for (var i = 0, l = styles.length; i < l; i++) {
        var s = styles[i];
        var ss = s.split(":");
        if (ss.length > 1) {
            if (ss.length > 2) {
                var s1 = ss[0].trim();
                ss.removeAt(0);
                var s2 = ss.join(":").trim();
                jq.css(s1, s2);
            } else {
                jq.css(ss[0].trim(), ss[1].trim());
            }
        }
    }
}

mini_getStyle = function () {
    var f = document.defaultView;
    return new Function('el', 'style', [
        "style.indexOf('-')>-1 && (style=style.replace(/-(\\w)/g,function(m,a){return a.toUpperCase()}));",
        "style=='float' && (style='",
        f ? 'cssFloat' : 'styleFloat',
        "');return el.style[style] || ",
        f ? 'window.getComputedStyle(el, null)[style]' : 'el.currentStyle[style]',
        ' || null;'].join(''));
} ();
mini_isAncestor = function (p, c) {
    var ret = false;
    p = mini.byId(p);
    c = mini.byId(c);
    if (p === c) return true;
    if (p && c) {
        if (p.contains) {
            try {
                return p.contains(c);
            } catch (e) {
                return false;
            }
        } else
            if (p.compareDocumentPosition) {
                return !!(p.compareDocumentPosition(c) & 16);
            } else {
                while (c = c.parentNode) {
                    ret = c == p || ret;
                }
            }
    }
    return ret;
}
mini_findParent = function (p, cls, maxDepth) {
    p = mini.byId(p);
    var b = document.body, depth = 0, stopEl;
    maxDepth = maxDepth || 50;
    if (typeof maxDepth != "number") {
        stopEl = mini.byId(maxDepth);
        maxDepth = 10;
    }
    while (p && p.nodeType == 1 && depth < maxDepth && p != b && p != stopEl) {
        if (mini.hasClass(p, cls)) {
            return p;
        }
        depth++;
        p = p.parentNode;
    }
    return null;
}
mini.copyTo(mini, {
    byId: mini_byId,
    hasClass: mini_hasClass,
    addClass: mini_addClass,
    removeClass: mini_removeClass,

    getMargins: mini_getMargins,
    getBorders: mini_getBorders,
    getPaddings: mini_getPaddings,
    setWidth: mini_setWidth,
    setHeight: mini_setHeight,
    getWidth: mini_getWidth,
    getHeight: mini_getHeight,
    setBox: mini_setBox,
    getBox: mini_getBox,

    setStyle: mini_setStyle,
    getStyle: mini_getStyle,

    repaint: function (el) {
        if (!el) el = document.body;
        mini.addClass(el, "mini-repaint");
        setTimeout(function () {
            mini.removeClass(el, "mini-repaint");
        }, 1);
    },

    getSize: function (el, content) {
        return {
            width: mini.getWidth(el, content),
            height: mini.getHeight(el, content)
        };
    },
    setSize: function (el, width, height) {
        mini.setWidth(el, width);
        mini.setHeight(el, height);
    },
    setX: function (el, x) {
        x = parseInt(x);
        var xy = jQuery(el).offset();
        //var y = xy.top;
        var y = parseInt(xy.top);
        if (y === undefined) y = xy[1];
        mini.setXY(el, x, y);
    },
    setY: function (el, y) {
        y = parseInt(y);
        var xy = jQuery(el).offset();
        var x = parseInt(xy.left);
        if (x === undefined) x = xy[0];
        mini.setXY(el, x, y);
    },
    setXY: function (el, x, y) {

        var xy = {
            left: parseInt(x),
            top: parseInt(y)
        };
        jQuery(el).offset(xy);


        //jQuery(el).offset(xy);      //jquery 1.4 bug

        //        if (jQuery.fn.jquery == "1.4") {
        //            jQuery(el).offset(xy);      //jquery 1.4 bug
        //        }

        if (jQuery.fn.jquery && jQuery.fn.jquery.indexOf("1.4") != -1) {
            jQuery(el).offset(xy);      //jquery 1.4 bug
        }
    },
    getXY: function (el) {

        var xy = jQuery(el).offset();
        //if (!xy) xy = { left: 0, top: 0 };
        return [parseInt(xy.left), parseInt(xy.top)];
    },
    getViewportBox: function () {
        //debugger
        //  var top = jQuery(window).scrollTop();
        var w = jQuery(window).width(), h = jQuery(window).height();
        var x = jQuery(document).scrollLeft(), y = jQuery(document.body).scrollTop();
        if (y == 0 && document.documentElement) y = document.documentElement.scrollTop;

        return {
            x: x, y: y, top: y, left: x, width: w, height: h, right: x + w, bottom: y + h
        };
    },
    showAt: function (options) {
        var $ = jQuery;
        //{ el, left, top, animation, fixed, offset }            
        options = jQuery.extend({
            el: null,
            //container: null,      //没用，自动匹配父元素尺寸定位
            x: 'center',         //left|center|right
            y: 'center',          //top|center|bottom
            offset: [0, 0],
            fixed: false,           //相对于页面整体，而非父元素
            zindex: mini.getMaxZIndex(),
            timeout: 0,
            timeoutHandler: null,
            constrain: false,
            animation: false
        }, options);
        var el = jQuery(options.el)[0],
            x = options.x,
            y = options.y,
            offsetx = options.offset[0],
            offsety = options.offset[1],
            zindex = options.zindex,
            fixed = options.fixed,
            animation = options.animation;
        if (!el) return;

        if (options.timeout) {
            setTimeout(function () {
                if (options.timeoutHandler) options.timeoutHandler();
                //else el.style.display = 'none';
            }, options.timeout);
        }



        var s = ';position:absolute;display:block;left:auto;top:auto;right:auto;bottom:auto;margin:0;z-index:' + zindex + ';';
        mini.setStyle(el, s);
        var s = "";

        if (options && mini.isNumber(x) && mini.isNumber(y)) {
            if (options.fixed && !mini.isIE6) {
                s += ";position:fixed;";
            }
            mini.setStyle(el, s);

            if (options.constrain) {
                var width = jQuery(window).width(),
                    height = jQuery(window).height(),
                    size = mini.getSize(el);

                if (x + size.width > width) x = width - size.width;
                if (x < 0) x = 0;
                if (y + size.height > height) y = height - size.height;
                if (y < 0) y = 0;

            }

            mini.setXY(el, x, y);


            return;
        }


        //x
        if (x == 'left') {
            s += 'left:' + offsetx + 'px;';
        } else if (x == 'right') {
            s += 'right:' + offsetx + 'px;';
        } else {
            var size = mini.getSize(el);
            s += 'left:50%;margin-left:' + (-size.width * 0.5) + 'px;';
        }
        //y
        if (y == 'top') {
            s += 'top:' + offsety + 'px;';
        } else if (y == 'bottom') {
            s += 'bottom:' + offsety + 'px;';
        } else {
            var size = mini.getSize(el);
            s += 'top:50%;margin-top:' + (-size.height * 0.5) + 'px;';
        }

        if (fixed && !mini.isIE6) {
            s += 'position:fixed';
        }



        mini.setStyle(el, s);

    },
    getChildNodes: function (el, all) {
        el = mini.byId(el);
        if (!el) return;
        var nodes = el.childNodes;
        var cs = [];
        for (var i = 0, l = nodes.length; i < l; i++) {
            var c = nodes[i];
            if (c.nodeType == 1 || all === true) {
                cs.push(c);
            }
        }
        return cs;
    },
    //    getChildNodes: function (el, all) {
    //        el = mini.byId(el);
    //        if (!el) return [];
    //        var node = el.firstChild;
    //        if (!node) return [];
    //        var arr = [];
    //        while (node) {
    //            if (node.nodeType == 1 || all == true) {
    //                arr.push(node);
    //            }
    //            node = node.nextSibling;
    //        }
    //        return arr;   
    //    },

    //ie需要特殊处理才能正确删除元素，防止内存泄漏
    removeNode: isIE ? function () {
        var d;
        return function (n) {
            if (n && n.tagName != 'BODY') {
                d = d || document.createElement('div');
                d.appendChild(n);
                d.innerHTML = '';
            }
        }
    } () : function (n) {
        if (n && n.parentNode && n.tagName != 'BODY') {
            n.parentNode.removeChild(n);
        }
    },

    //    removeNode: function (el) {
    //        jQuery(el).remove();
    //    },

    removeChilds: function (el, butEl) {
        el = mini.byId(el);
        if (!el) return;
        var cs = mini.getChildNodes(el, true);
        for (var i = 0, l = cs.length; i < l; i++) {
            var c = cs[i];
            if (butEl && c == butEl) {
            } else {
                el.removeChild(cs[i]);
            }
        }
    },
    isAncestor: mini_isAncestor,
    findParent: mini_findParent,
    findChild: function (el, cls) {
        el = mini.byId(el);
        var els = el.getElementsByTagName('*');
        for (var i = 0, l = els.length; i < l; i++) {
            var el = els[i];
            if (mini.hasClass(el, cls)) return el;
        }
    },
    isAncestor: function (p, c) {
        var ret = false;
        p = mini.byId(p);
        c = mini.byId(c);
        if (p === c) return true;
        if (p && c) {
            if (p.contains) {
                try {
                    return p.contains(c);
                } catch (e) { return false }
            } else
                if (p.compareDocumentPosition) {
                    return !!(p.compareDocumentPosition(c) & 16);
                } else {
                    while (c = c.parentNode) {
                        ret = c == p || ret;
                    }
                }
        }
        return ret;
    },
    getOffsetsTo: function (el, target) {
        var o = this.getXY(el), e = this.getXY(target);
        return [o[0] - e[0], o[1] - e[1]];
    },
    scrollIntoView: function (el, container, hscroll, vscroll) {
        var c = mini.byId(container) || document.body,
        	o = this.getOffsetsTo(el, c),
            l = o[0] + c.scrollLeft,
            t = o[1] + c.scrollTop,
            b = t + el.offsetHeight,
            r = l + el.offsetWidth,
        	ch = c.clientHeight,
        	ct = parseInt(c.scrollTop, 10),
        	cl = parseInt(c.scrollLeft, 10),
        	cb = ct + ch,
        	cr = cl + c.clientWidth;

        if (vscroll !== false) {
            if (el.offsetHeight > ch || t < ct) {
                c.scrollTop = t;
            } else if (b > cb) {
                c.scrollTop = b - ch;
            }
            c.scrollTop = c.scrollTop; // corrects IE, other browsers will ignore
        }

        if (hscroll !== false) {
            if (el.offsetWidth > c.clientWidth || l < cl) {
                c.scrollLeft = l;
            } else if (r > cr) {
                c.scrollLeft = r - c.clientWidth;
            }
            c.scrollLeft = c.scrollLeft;
        }
        return this;
    },
    getScrollOffset: function () {
        if (!mini._scrollOffset) {
            var el = document.createElement('div');
            //el.style.cssText = 'width:100px;background:#eee;height:50px;overflow:scroll;padding:1px;position:absolute;left:-1000px;top:0;';
            el.style.cssText = 'width:100px;background:#eee;height:50px;overflow:scroll;padding:1px;position:absolute;left:-1000px;top:0;box-sizing:content-box;-moz-box-sizing: content-box;';

            document.body.appendChild(el);

            mini._scrollOffset = el.offsetWidth - el.clientWidth;

            el.parentNode.removeChild(el);
        }
        return mini._scrollOffset;
    },
    setOpacity: function (el, opacity) {
        jQuery(el).css({
            "opacity": opacity
        });
    },
    selectable: function (el, selected) {
        el = mini.byId(el);
        if (!!selected) {
            jQuery(el).removeClass('mini-unselectable');
            if (isIE) el.unselectable = "off";
            else {
                el.style.MozUserSelect = '';
                el.style.KhtmlUserSelect = '';
                el.style.UserSelect = '';

            }
        } else {
            jQuery(el).addClass('mini-unselectable');
            if (isIE) el.unselectable = 'on';
            else {
                el.style.MozUserSelect = 'none';
                el.style.UserSelect = 'none';
                el.style.KhtmlUserSelect = 'none';
            }
        }
    },
    selectRange: function (el, iStart, iEnd) {
        if (el.createTextRange) {
            var oRange = el.createTextRange();
            oRange.moveStart("character", iStart);
            oRange.moveEnd("character", iEnd - el.value.length);
            oRange.select();
        } else {
            if (el.setSelectionRange) {
                el.setSelectionRange(iStart, iEnd);
            }
        }
        try {
            el.focus();
        } catch (e) {
        }
    },
    getSelectRange: function (el) {
        el = mini.byId(el);
        if (!el) return;
        try {
            el.focus();
        } catch (e) {
        }
        var start = 0, end = 0;
        if (el.createTextRange && document.selection) {
            //start
            var r = document.selection.createRange().duplicate();
            r.moveEnd('character', el.value.length);
            if (r.text === '') {
                start = el.value.length;
            }
            else {
                start = el.value.lastIndexOf(r.text);
            }

            //end
            var r = document.selection.createRange().duplicate();
            r.moveStart('character', -el.value.length);
            end = r.text.length;

        } else {
            start = el.selectionStart;
            end = el.selectionEnd;
        }

        return [start, end];
    }
    //    setAttr: function (el, attr, value) {
    //        //jQuery(el).attr(attr, value);

    //    },
    //    getAttr: function (el, attr) {
    //        return jQuery(el).attr(attr);
    //    },
    //    removeAttr: function (el, attr) {
    //        jQuery(el).removeAttr(attr, value);
    //    }

});
(function () {
    var fixAttr = {
        tabindex: 'tabIndex',
        readonly: 'readOnly',
        'for': 'htmlFor',
        'class': 'className',
        maxlength: 'maxLength',
        cellspacing: 'cellSpacing',
        cellpadding: 'cellPadding',
        rowspan: 'rowSpan',
        colspan: 'colSpan',
        usemap: 'useMap',
        frameborder: 'frameBorder',
        contenteditable: 'contentEditable'
    };

    var div = document.createElement('div');
    div.setAttribute('class', 't');
    var supportSetAttr = div.className === 't';

    mini.setAttr = function (el, name, val) {
        el.setAttribute(supportSetAttr ? name : (fixAttr[name] || name), val);
    }

    mini.getAttr = function (el, name) {
        if(name == "height") return jQuery(el).attr("height");

        if(name == "value" && (isIE6 || isIE7)){
            var a = el.attributes[name]
            return a ? a.value : null;
        }

        if(!el.getAttribute) return null;

        var v = el.getAttribute(supportSetAttr ? name : (fixAttr[name] || name));
        
        if(typeof v == "function" || name == "maxLength"){
            var o = el.attributes[name];
            if(o) v = o.value;
        }

        //onload
        if(!v && name == "onload"){        
            var node = el.getAttributeNode ? el.getAttributeNode(name) : null;
            if(node){
                v = node.nodeValue;
            }
        }

        return v;
    }
//    mini.getAttr = function (el, name) {
//        if (name == "value" && (isIE6 || isIE7)) {
//            var a = el.attributes[name]
//            return a ? a.value : null;
//        }

//        var v = el.getAttribute(supportSetAttr ? name : (fixAttr[name] || name));

//        if (typeof v == "function") {
//            v = el.attributes[name].value;
//        }

//        return v;
//    }

})()


/* Html Event 
-----------------------------------------------------------------------------*/

//mini_createOneDelegate = function (fn, scope) {
//    if (!fn) return function () { };
//    return function (e) {
//        e = e || window.event;
//        e.target = e.target || e.srcElement;
//        var ret =  fn.apply(scope, arguments);
//        if(ret === false) return false;
//    }
//}


mini_preventDefault = function () {
    if (window.event) {
        window.event.returnValue = false;
    }
}
mini_stopPropogation = function () {
    if (window.event) {
        window.event.cancelBubble = true;
    }
}
mini_onOne = function (el, type, fn, scope) {
    //    mini_on(el, type, fn, scope);
    //    return;
    if (!el) return;
    var name = "on" + type.toLowerCase();
    //el[name] = mini_createOneDelegate(fn, scope);
    el[name] = function (e) {
        e = e || window.event;
        if (!e.target) {
            e.target = e.srcElement;
        }
        if (!e.preventDefault) {
            e.preventDefault = mini_preventDefault;
        }
        if (!e.stopPropogation) {
            e.stopPropogation = mini_stopPropogation;
        }
        var ret = fn.call(scope, e);
        if (ret === false) return false;
    }
}



mini_on = function (el, type, fn, scope) {
    el = mini.byId(el);
    scope = scope || el;
    if (!el || !type || !fn || !scope) return false
    var listener = mini.findListener(el, type, fn, scope);
    if (listener) return false;
    var method = mini.createDelegate(fn, scope);
    mini.listeners.push([el, type, fn, scope, method]);
    if (mini.isFirefox && type == 'mousewheel') type = 'DOMMouseScroll';
    jQuery(el).bind(type, method);
};
mini_un = function (el, type, fn, scope) {
    el = mini.byId(el);
    scope = scope || el;
    if (!el || !type || !fn || !scope) return false
    var listener = mini.findListener(el, type, fn, scope);
    if (!listener) return false;
    if (!mini._destroying) {
        mini.listeners.remove(listener);
    }
    if (mini.isFirefox && type == 'mousewheel') type = 'DOMMouseScroll';
    jQuery(el).unbind(type, listener[4]);
};
mini.copyTo(mini, {
    listeners: [], //[el, type, fn, scope]    
    on: mini_on,
    un: mini_un,
    _getListeners: function () {
        var listeners = mini.listeners;
        //        for (var i = listeners.length - 1; i >= 0; i--) {
        //            var listener = listeners[i];
        //            try {
        //                if (listener[0] == 1
        //                    && listener[1] == 1
        //                    && listener[2] == 1
        //                    && listener[3] == 1
        //                ) {
        //                    var m = 1;
        //                }
        //            } catch (ex) {
        //                //跨iframe的事件绑定后，当iframe销毁，访问就出错
        //                listeners.removeAt(i);
        //            }
        //        }
        return listeners;
    },
    findListener: function (el, type, fn, scope) {
        el = mini.byId(el);
        scope = scope || el;
        if (!el || !type || !fn || !scope) return false
        var listeners = mini._getListeners();

        for (var i = listeners.length - 1; i >= 0; i--) {
            var listener = listeners[i];
            try {
                if (listener[0] == el
                && listener[1] == type
                && listener[2] == fn
                && listener[3] == scope
            ) {
                    return listener;
                }
            } catch (ex) { }

        }
    },
    clearEvent: function (el, type) {
        el = mini.byId(el);
        if (!el) return false;

        if (mini._destroying) {
            jQuery(el).unbind();
            return;
        }

        var listeners = mini._getListeners();
        for (var i = listeners.length - 1; i >= 0; i--) {
            var listener = listeners[i];
            //try {
            if (listener[0] == el) {
                if (!type || type == listener[1]) {
                    mini.un(el, listener[1], listener[2], listener[3]);
                }
            }
            //} catch (ex) { debugger }
        }
        el.onmouseover = el.onmousedown = null;
    }
    //    ,
    //    fireEvent: function (el, type) {
    //        
    //    }
});


//window resize
mini.__windowResizes = [];
mini.onWindowResize = function (fn, scope) {
    mini.__windowResizes.push([fn, scope]);
}
mini.on(window, "resize", function (e) {
    var events = mini.__windowResizes;
    for (var i = 0, l = events.length; i < l; i++) {
        var event = events[i];
        event[0].call(event[1], e);
    }
});


mini.htmlEncode = function (str) {
    if (typeof str !== "string") return str;
    var s = "";
    if (str.length == 0) return "";
    s = str;
    s = s.replace(/&/g, "&amp;");
    s = s.replace(/</g, "&lt;");
    s = s.replace(/>/g, "&gt;");
    s = s.replace(/ /g, "&nbsp;");
    s = s.replace(/\'/g, "&#39;");
    s = s.replace(/\"/g, "&quot;");
    //s = s.replace(/\n/g, "<br>");
    return s;
}

mini.htmlDecode = function (str) {
    if (typeof str !== "string") return str;
    var s = "";
    if (str.length == 0) return "";
    s = str.replace(/&gt;/g, "&");
    s = s.replace(/&lt;/g, "<");
    s = s.replace(/&gt;/g, ">");
    s = s.replace(/&nbsp;/g, " ");
    s = s.replace(/&#39;/g, "\'");
    s = s.replace(/&quot;/g, "\"");
    //s = s.replace(/<br>/g, "\n");
    return s;
}

/* Array 
-----------------------------------------------------------------------------*/

mini.copyTo(Array.prototype, {
    add: Array.prototype.enqueue = function (item) {
        this[this.length] = item;
        return this;
    },
    getRange: function (start, end) {
        var arr = [];
        for (var i = start; i <= end; i++) {
            var o = this[i];
            if (o) {
                arr[arr.length] = o;
            }
        }
        return arr;
    },
    addRange: function (array) {
        for (var i = 0, j = array.length; i < j; i++) this[this.length] = array[i];
        return this;
    },
    clear: function () {
        this.length = 0;
        return this;
    },
    clone: function () {
        if (this.length === 1) {
            return [this[0]];
        }
        else {
            return Array.apply(null, this);
        }
    },
    contains: function (item) {
        return (this.indexOf(item) >= 0);
    },
    indexOf: function (item, from) {
        var len = this.length;
        for (var i = (from < 0) ? Math.max(0, len + from) : from || 0; i < len; i++) {
            if (this[i] === item) return i;
        }
        return -1;
    },
    dequeue: function () {
        return this.shift();
    },
    insert: function (index, item) {
        this.splice(index, 0, item);
        return this;
    },
    insertRange: function (index, items) {
        for (var i = items.length - 1; i >= 0; i--) {
            var item = items[i];
            this.splice(index, 0, item);

        }
        return this;
    },
    remove: function (item) {
        var index = this.indexOf(item);
        if (index >= 0) {
            this.splice(index, 1);
        }
        return (index >= 0);
    },
    removeAt: function (index) {
        var ritem = this[index];
        this.splice(index, 1);
        return ritem;
    },
    removeRange: function (items) {
        items = items.clone();
        for (var i = 0, l = items.length; i < l; i++) {
            this.remove(items[i]);
        }
    }
});



//////////////////////////////////////////////////////////

mini.isShowBackdrop = !(mini.isIE && mini.IE_V <= 8);

//if (mini.isIE && (window.navigator.userProfile + '') == 'null') {
//    mini.is360 = true;
//}



//alert(mini.is360);


//Mask
//mini.LoadingText = "Loading...";
mini._MaskID = 1;
mini._MaskObjects = {};
mini.mask = function (options) {
    //{html, cls, style, opacity, background}

    var el = mini.byId(options);
    if (mini.isElement(el)) options = { el: el };
    else if (typeof options == "string") options = { html: options };

    options = mini.copyTo({
        html: "",
        cls: "",
        style: "",
        //opacity: .3,
        backStyle: ""
    }, options);
    options.el = mini.byId(options.el);
    if (!options.el) options.el = document.body;
    var el = options.el;

    mini["unmask"](options.el);
    el._maskid = mini._MaskID++;
    mini._MaskObjects[el._maskid] = options;

    var maskEl = mini.append(el, '<div class="mini-mask">' +
        '<div class="mini-mask-background" style="' + options.backStyle + '"></div>' +
                        '<div class="mini-mask-msg ' + options.cls + '" style="' + options.style + '">' + options.html + '</div>'
        + '</div>');
    if (el == document.body) mini.addClass(maskEl, 'mini-fixed');

    //if (!mini.isShowBackdrop) {
        //$(maskEl).find('.mini-mask-background').css("display", "none");
    //}

    options.maskEl = maskEl;
    if (!mini.isNull(options.opacity)) {
        mini.setOpacity(maskEl.firstChild, options.opacity);
    }

    function center() {
        msgEl.style.display = "block";
        var size = mini.getSize(msgEl);
        msgEl.style.marginLeft = -size.width / 2 + "px";
        msgEl.style.marginTop = -size.height / 2 + "px";
        msgEl.style.zIndex = mini.getMaxZIndex();
    }
    var msgEl = maskEl.lastChild;
    msgEl.style.display = "none";
    //center();
    setTimeout(function () {
        center();
    }, 0);

    //    if (el == document.body) {
    //        var vbox = mini.getViewportBox();
    //        maskEl.style.height = vbox.height + "px";
    //    }
}

mini["unmask"] = function (el) {
    el = mini.byId(el);
    if (!el) el = document.body;
    var options = mini._MaskObjects[el._maskid];
    if (!options) return;
    delete mini._MaskObjects[el._maskid];
    var maskEl = options.maskEl;
    options.maskEl = null;
    if (maskEl && maskEl.parentNode) {
        maskEl.parentNode.removeChild(maskEl);
    }
}

mini.showMaskLoading = function (options) {
    options = $.extend({
        el: document.body,
        cls: 'mini-mask-loading',
        html: mini.Control.prototype.loadingMsg || 'Loading...'
    }, options);
    return mini.mask(options);
}

//mini.showMaskLoading();

//setTimeout(function () {
//    mini.unmask(document.body);
//}, 2000);

//////////////////////////////////////////
mini.Cookie = {
    get: function (sName) {
        var aCookie = document.cookie.split("; ");
        var lastMatch = null;
        for (var i = 0; i < aCookie.length; i++) {
            var aCrumb = aCookie[i].split("=");
            if (sName == aCrumb[0]) {
                lastMatch = aCrumb;
            }
        }
        if (lastMatch) {
            var v = lastMatch[1];
            if (v === undefined) return v;
            return unescape(v);
        }
        return null;
    },
    set: function (name, value, expires, domain) {
        var LargeExpDate = new Date();
        if (expires != null) {
            //LargeExpDate.setTime(LargeExpDate.getTime() + (expires*1000*3600*24));         

            LargeExpDate = new Date(LargeExpDate.getTime() + (expires * 1000 * 3600 * 24)); //expires天数            
        }

        document.cookie = name + "=" + escape(value) + ((expires == null) ? "" : ("; expires=" + LargeExpDate.toGMTString())) + ";path=/" + (domain ? "; domain=" + domain : "");
    },
    del: function (name, domain) {
        this.set(name, null, -100, domain);
    }
};

//////////////////////////////////////////
mini.copyTo(mini, {
    /*
    var array = TreeToArray(dataTree.Root.Nodes, 'Nodes');
    var array = TreeToArray(dataTree.Root.Nodes, 'Nodes', 'Id', 'ParentId', -1);
    */
    treeToArray: function (nodes, nodesField, idField, parentIdField, parentId) {
        if (!nodesField) nodesField = 'children';
        var array = [];
        for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];
            array[array.length] = node;

            if (parentIdField) node[parentIdField] = parentId;

            var childrenNodes = node[nodesField];
            if (childrenNodes && childrenNodes.length > 0) {
                var id = node[idField];
                var childrenArray = this.treeToArray(childrenNodes, nodesField, idField, parentIdField, id);
                array.addRange(childrenArray);
            }
        }
        return array;
    },
    /*
    数组转树形
    ArrayToTree(array, 'Nodes', '_Id', '_ParentId');
    */
    arrayToTree: function (data, nodesField, idField, parentIdField) {
        if (!nodesField) nodesField = 'children';
        idField = idField || '_id';
        parentIdField = parentIdField || '_pid';

        var nodes = [];

        //建立快速索引
        var idHash = {};
        for (var i = 0, l = data.length; i < l; i++) {
            var o = data[i];
            if (!o) continue;
            //var id = o[idField];
            var id = mini._getMap(idField, o);
            if (id !== null && id !== undefined) {
                idHash[id] = o;
            }
            delete o[nodesField];
        }

        //数组转树形
        for (var i = 0, l = data.length; i < l; i++) {
            var o = data[i];
            var pid = mini._getMap(parentIdField, o);
            var p = idHash[pid];
            if (!p) {
                nodes.push(o);
                continue;
            }
            if (!p[nodesField]) {
                p[nodesField] = [];
            }
            p[nodesField].push(o);
        }
        return nodes;
    }

});
mini.treeToList = mini.treeToArray;
mini.listToTree = mini.arrayToTree;

function UUID() {
    var s = [], itoh = '0123456789ABCDEF'.split('');
    for (var i = 0; i < 36; i++) s[i] = Math.floor(Math.random() * 0x10);
    s[14] = 4;
    s[19] = (s[19] & 0x3) | 0x8;
    for (var i = 0; i < 36; i++) s[i] = itoh[s[i]];
    s[8] = s[13] = s[18] = s[23] = '-';
    return s.join('');
}


String.format = function (format) {
    var args = Array.prototype.slice.call(arguments, 1);
    format = format || "";
    return format.replace(/\{(\d+)\}/g, function (m, i) {
        return args[i];
    });
}
String.prototype.trim = function () {
    var re = /^\s+|\s+$/g;
    return function () { return this.replace(re, ""); };
} ();



//////////////////////////////////////////
mini.copyTo(mini, {
    measureText: function (el, text, style) {
        if (!this.measureEl) {
            this.measureEl = mini.append(document.body, '<div></div>');
        }

        this.measureEl.style.cssText = "position:absolute;left:-1000px;top:-1000px;visibility:hidden;";
        if (typeof el == "string") {
            this.measureEl.className = el;

        } else {
            this.measureEl.className = "";

            var j1 = jQuery(el);
            var j2 = jQuery(this.measureEl);
            var csses = ['font-size', 'font-style', 'font-weight', 'font-family', 'line-height', 'text-transform', 'letter-spacing'];
            for (var i = 0, l = csses.length; i < l; i++) {
                var css = csses[i];
                j2.css(css, j1.css(css));
            }
        }
        if (style) mini.setStyle(this.measureEl, style);
        this.measureEl.innerHTML = text;
        return mini.getSize(this.measureEl);
    }
});


//////////////////////////////////////////////////////////
if (typeof mini_layoutOnParse == 'undefined') mini_layoutOnParse = true;

mini.enableLayout = true;

mini.autoParse = true;

jQuery(function () {

    mini.updateDevice();

    if (mini.autoParse) {
        
        //fix: requiredjs
        setTimeout(function () {

            //alert(new Date() -sss);
            //判断：如果是ie6/7,把body自动修改overflow:visible    
            //        if ((mini.getStyle(document.body, "overflow") == "hidden" || mini.getStyle(document.documentElement, "overflow") == "hidden")
            //        && (isIE6 || isIE7)) {
            //            //document.body.style.overFlow = "visible";
            //            //document.documentElement.style.overFlow = "visible";
            //            jQuery(document.body).css("overflow", "visible");
            //            jQuery(document.documentElement).css("overflow", "visible");

            //            //document.body.scroll = "no";

            //            //alert(1);
            //            //        jQuery(document.body).css("overflow", "hidden");
            //            //        jQuery(document.documentElement).css("overflow", "hidden");
            //        }

            //判断：如果是ie6/7,把body自动修改overflow:visible   
            var docEl = document.documentElement;
            if ((isIE6 || isIE7) &&
            (mini.getStyle(document.body, "overflow") == "hidden" || (docEl && mini.getStyle(docEl, "overflow") == "hidden"))
        ) {
                jQuery(document.body).css("overflow", "visible");
                if (docEl) jQuery(docEl).css("overflow", "visible");

            }


            mini.__LastWindowWidth = document.documentElement.clientWidth;
            mini.__LastWindowHeight = document.documentElement.clientHeight;

            var sss = new Date();
            mini.isReady = true;
            mini.parse(null, mini_layoutOnParse);
            mini._FireBindEvents();

            //    mini.enableLayout = true;
            //    mini.layout();

            //    mini.enableLayout = true;
            //    mini.layout(null);
        }, 1);

    }
});
mini_onload = function (e) {
    //alert(mini_layoutOnParse ? false : true);

    mini.on(window, "resize", mini_onresize);
    //mini.repaint(document.body);    //

    //mini.layout(null);
}
mini.on(window, "load", mini_onload);

mini.__LastWindowWidth = document.documentElement.clientWidth;
mini.__LastWindowHeight = document.documentElement.clientHeight;
mini.doWindowResizeTimer = null;

mini.allowLayout = true;



//var count = 0;
mini_onresize = function (e) {

    mini.updateDevice();

    //document.title = count++;
    if (mini.doWindowResizeTimer) {
        clearTimeout(mini.doWindowResizeTimer);
    }
    mini.WindowVisible = mini.isWindowDisplay();
    if (mini.WindowVisible == false || mini.allowLayout == false) return;

    if (typeof Ext != "undefined") {
        mini.doWindowResizeTimer = setTimeout(function () {
            var __LastWindowWidth = document.documentElement.clientWidth;
            var __LastWindowHeight = document.documentElement.clientHeight;
            if (mini.__LastWindowWidth == __LastWindowWidth && mini.__LastWindowHeight == __LastWindowHeight) {
            } else {

                mini.__LastWindowWidth = __LastWindowWidth;
                mini.__LastWindowHeight = __LastWindowHeight;

                
                mini.layout(null, false);
            }
            mini.doWindowResizeTimer = null;
        }, 300);
    } else {
        var deferTime = 100;
        try {
            if (parent && parent != window && parent.mini) {
                deferTime = 0;
            }
        } catch (ex) {
        }
        mini.doWindowResizeTimer = setTimeout(function () {
            var __LastWindowWidth = document.documentElement.clientWidth;
            var __LastWindowHeight = document.documentElement.clientHeight;
            //            if (__LastWindowHeight == 0 || __LastWindowHeight == 0) {
            //                mini.doWindowResizeTimer = null;
            //                return;
            //            }
            if (mini.__LastWindowWidth == __LastWindowWidth && mini.__LastWindowHeight == __LastWindowHeight) {
            } else {

                mini.__LastWindowWidth = __LastWindowWidth;
                mini.__LastWindowHeight = __LastWindowHeight;

                
                mini.layout(null, false);
            }
            mini.doWindowResizeTimer = null;
        }, deferTime);
    }
}



//////////////////////////////////////////////////
mini.isDisplay = function (p, body) {
    var doc = body || document.body;
    while (1) {
        if (p == null || !p.style) return false;
        if (p && p.style && p.style.display == "none") return false;
        if (p == doc) return true;

        p = p.parentNode;

    }
    return true;
};


mini.isWindowDisplay = function () {
    try {
        var parentWindow = window.parent;
        var isIFrame = parentWindow != window;

        if (isIFrame) {
            var _iframes = parentWindow.document.getElementsByTagName("iframe");
            var _frames = parentWindow.document.getElementsByTagName("frame");
            var iframes = [];
            for (var i = 0, l = _iframes.length; i < l; i++) {
                iframes.push(_iframes[i]);
            }
            for (var i = 0, l = _frames.length; i < l; i++) {
                iframes.push(_frames[i]);
            }

            var iframe = null;
            for (var i = 0, l = iframes.length; i < l; i++) {
                var el = iframes[i];
                if (el.contentWindow == window) {
                    iframe = el;
                    break;
                }
            }
            if (!iframe) return false;

            return mini.isDisplay(iframe, parentWindow.document.body);


        } else {
            return true;
        }
    } catch (e) {
        return true;
    }
};
/////////////////////////////////////////////////////

mini.WindowVisible = mini.isWindowDisplay();

//var __MiniWindowTimer = setInterval(function () {
//    var visible = mini.isWindowDisplay();    
//    if (visible == true) {
//        mini.WindowVisible = true;
//        clearInterval(__MiniWindowTimer);
//        if (visible != mini.WindowVisible) {
//            mini.layout();
//        }
//    }
//}, 150);

/*
是否跟mini加一个定时判断。
判断iframe什么时候被隐藏，再次显示的时候，就layout一下？

是否定义一个方法，专门用来调用iframe的layout，以达到自适应尺寸的目的？
mini.layout();
mini.layoutIFrames();

*/
//以后去除的话，提供一个全局变量
mini.layoutIFrames = function (parentNode) {

    

    if (!document.body) return;
    if (!parentNode) parentNode = document.body;
    var iframes = parentNode.getElementsByTagName("iframe");

    //alert(iframes.length);

    setTimeout(function () {
        for (var i = 0, l = iframes.length; i < l; i++) {
            var el = iframes[i];
            try {
                if (mini.isDisplay(el) && mini.isAncestor(parentNode, el)) {
                    if (el.contentWindow.mini) {
                        if (el.contentWindow.mini.WindowVisible == false) {
                            el.contentWindow.mini.WindowVisible = el.contentWindow.mini.isWindowDisplay();
                            el.contentWindow.mini.layout();
                        } else {
                            el.contentWindow.mini.layout(null, false);
                        }
                    }
                    el.contentWindow.mini.layoutIFrames();
                }
            } catch (ex) { }
        }
    }, 30);
}


jQuery.ajaxSetup({
    cache: false
})

/////////////
if (isIE) {
    setInterval(function () {     //尝试去掉
        //CollectGarbage();
    }, 20000);
}

//__fixFlash = function () {
//    var found = window["__flash__removeCallback"];
//    if (found) {
//        clearInterval(__fixFlash_timer);
//        window["__flash__removeCallback"] = function (instance, name) {
//            try {
//                if (instance) {
//                    instance[name] = null;
//                }
//            } catch (flashEx) {
//            }
//        }
//    }
//}
//__fixFlash_timer = setInterval(__fixFlash, 100);



mini_unload = function (e) {
    //var sss = new Date();

    //alert("unload");
    //debugger


    //alert("unload");

    try {
        var win = mini._getTopWindow();
        win[mini._WindowID] = '';
        delete win[mini._WindowID];
    } catch (ex) {

    }

    //iframe
    var iframes = document.body.getElementsByTagName("iframe");
    if (iframes.length > 0) {

        var IFrames = [];
        for (var i = 0, l = iframes.length; i < l; i++) {
            IFrames.push(iframes[i]);
        }

        for (var i = 0, l = IFrames.length; i < l; i++) {
            try {
                var iframe = IFrames[i];
                iframe._ondestroy = null;
                iframe.onload = function () { };
                jQuery(iframe).unbind("load");
                iframe.src = "";
                if (mini.isIE) {
                    try {
                        iframe.contentWindow.document.write("");
                        iframe.contentWindow.document.close();
                    } catch (ex) { }
                }
                if (iframe.parentNode) iframe.parentNode.removeChild(iframe);
            } catch (e) { }
        }
    }

    //========================================================

    mini._destroying = true;

    //    var count = 0;
    //    
    //    var map = {
    //        'textbox': 1,
    //        'buttonedit': 1,
    //        'combobox': 1,
    //        'autocomplete': 1,
    //        'datepicker': 1,
    //        'calendar': 1,
    //        'panel': 1,
    //        'tabs': 1,
    //        'spinner': 1,
    //        'hidden': 1,
    //        'textarea': 1,
    //        'button': 1,
    //        'datagrid': 1,
    //        'window': 1,
    //        'toolbar': 1,
    //        'listbox': 1,
    //        'popup': 1,
    //        'timespinner': 1,
    //        'fileupload': 1,
    //        'menu': 1,
    //        'fit': 1,

    //        'datagrid': 1,

    //        'pager': 1
    //    };

    var cs = mini.getComponents().clone();
    for (var i = 0, l = cs.length; i < l; i++) {
        var control = cs[i];
        if (control.destroyed !== true) {
           
            control.destroy(false);
         
        }
    }



    cs.length = 0;
    cs = null;

    //mini.components = mini.uids = mini.classes = mini.uiClasses = null;

    mini.clearEvent(window);
    mini.clearEvent(document);

    mini.un(window, "unload", mini_unload);
    mini.un(window, "load", mini_onload);
    mini.un(window, "resize", mini_onresize);

    mini.components = {};
    mini.classes = {};
    mini.uiClasses = {};
    mini.uids = {};
    mini.listeners.length = 0;

    mini._topWindow = null;
    window.mini = null;
    window.Owner = null;
    window.CloseOwnerWindow = null;

    //    try {
    //        //CollectGarbage();
    //    } catch (e) { }

    //alert(new Date() - sss);

    //会造成小的内存泄漏
    //window.onerror = function () { return true; };


    //parent.document.title = "unload" + new Date().getTime();
}
mini.on(window, "unload", mini_unload);




////监听出路滚轮事件，处理popupedit
//mini.on(document, "mousewheel", function (e) {
//    var popups = mini.findControls(function (c) {
//        if (c.isShowPopup && c.isShowPopup() && !c.within(e)) {
//            //c.hidePopup();
//        }
//    });
//    //document.title = new Date().getTime();
//});

///////////////////////////
//iframe mousedown/click
//function __OnIFrameMouseDown() {
//    
//    jQuery(document).trigger("mousedown");
//}
function __BindIFrames() {

    //if (mini.isIE10) return;

//    function bind(win, doc) {
//        jQuery(doc).bind("mousedown.mini", __OnIFrameMouseDown);
//        jQuery(win).bind("unload.mini", function () {
//            try {
//                jQuery(win).off(".mini");
//                jQuery(doc).off(".mini");
//            } catch (e) { }
//        });
//    }

//    var iframes = document.getElementsByTagName("iframe");
//    for (var i = 0, l = iframes.length; i < l; i++) {
//        var iframe = iframes[i];

//        try {
//            var win = iframe.contentWindow,
//                doc = iframe.contentWindow.document;

//            if (win && doc && !win.__mousedownbinded) {
//                win.__mousedownbinded = true;

//                bind(win, doc);
//                
//            }
//        } catch (e) {
//            
//         }

//    }
}
//setInterval(function () {
//    __BindIFrames();
//}, 1500);


mini.zIndex = 1000;
mini.zindex = mini.getMaxZIndex = function () {
    return mini.zIndex++;
}

/////////////////////////
function js_isTouchDevice() {
    try {
        document.createEvent("TouchEvent");
        return true;
    } catch (e) {
        return false;
    }
}
function js_touchScroll(id) {
    if (js_isTouchDevice()) { //if touch events exist...
        var el = typeof id == "string" ? document.getElementById(id) : id;
        var scrollStartPos = 0;

        el.addEventListener("touchstart", function (event) {
            scrollStartPos = this.scrollTop + event.touches[0].pageY;
            event.preventDefault();
        }, false);

        el.addEventListener("touchmove", function (event) {
            this.scrollTop = scrollStartPos - event.touches[0].pageY;
            event.preventDefault();
        }, false);
    }
}



///////////////////////////////////////////////////////////
/* position 
-----------------------------------------------------------------------------*/
//mini.showAtEl = function (options) {
//    var c = {
//        atCls: "",

//        el: null,
//        atEl: null,
//        xAlign: "left",         //outleft,left,center,right,outright
//        yAlign: "below",        //above, top, middle, bottom, below
//        xOffset: 0,
//        yOffset: 0,
//        renderBody: true,
//        onbeforeopen: function () { },
//        onopen: function () { },
//        onoutclick: function (htmlEvent) { },

//        width: "",          //auto的时候，才measure
//        height: "",         //auto的时候，才measure
//        minWidth: 0,        //只有当width|height为auto的时候生效
//        minHeight: 0,
//        maxWidth: 2000,
//        maxHeight: 2000
//    };
//    mini.copyTo(c, options);

//    var el = mini.byId(c.el);
//    var atEl = mini.byId(c.atEl);
//    if (!atEl || !el) return;

//    if (c.onbeforeopen() === false) return;

//    //popupCls
//    mini.addClass(atEl, c.atCls);

//    //render
//    if (!mini.isRendered(el) || (c.renderBody && el.parentNode != document.body)) {
//        document.body.appendChild(el);
//    }

//    //do show    
//    el.style.display = "block";
//    el.style.position = "absolute";
//    el.style.zIndex = __js_getMaxZIndex();

//    //size
//    mini.measureSize(c);

//    //xy

//    var vbox = mini.getBox(el.parentNode);
//    var box = mini.getBox(el);
//    var pbox = mini.getBox(atEl);

//    var h = c.xAlign, v = c.yAlign;

//    switch (c.xAlign) {
//        case "outleft":
//            x = pbox.x - box.width;
//            break;
//        case "left":
//            x = pbox.x;
//            break;
//        case "center":
//            x = pbox.x + pbox.width / 2 - box.width / 2;
//            break;
//        case "right":
//            x = pbox.right - box.width;
//            break;
//        case "outright":
//            x = pbox.right;
//            break;
//        default:

//            break;
//    }

//    switch (c.yAlign) {
//        case "above":
//            y = pbox.y - box.height;
//            break;
//        case "top":
//            y = pbox.y;
//            break;
//        case "middle":
//            y = pbox.y + pbox.height / 2 - box.height / 2;
//            break;
//        case "bottom":
//            y = pbox.bottom - box.height;
//            break;
//        case "below":
//            y = pbox.bottom;
//            break;
//        default:

//            break;
//    }

//    //out xAlign
//    if (c.xAlign == "outright") {   //一般用于menu
//        if (x + box.width > vbox.right) {
//            var left = pbox.x - vbox.x;
//            var right = vbox.right - pbox.right;
//            if (left > right) {
//                x = pbox.x - box.width;
//            }
//        }
//    }
//    //out xAlign
//    if (c.xAlign == "left") {
//        if (x + box.width > vbox.right) {
//            var left = pbox.x - vbox.x;
//            var right = vbox.right - pbox.right;
//            if (left > right) {
//                x = pbox.right - box.width;
//            }
//        }
//    }

//    //out yAlign
//    if (c.yAlign == "below") {   //一般用于combobox/datepicker            
//        if (y + box.height > vbox.bottom) {
//            var top = pbox.y - vbox.y;
//            var bottom = vbox.bottom - pbox.bottom;
//            if (top > bottom) {
//                y = pbox.y - box.height;
//            }
//        }
//    }
//    //out yAlign
//    if (c.yAlign == "top") {
//        if (y + box.height > vbox.bottom) {
//            var top = pbox.y - vbox.y;
//            var bottom = vbox.bottom - pbox.bottom;
//            if (top > bottom) {
//                y = pbox.bottom - box.height;
//            }
//        }
//    }

//    x = parseInt(x);
//    y = parseInt(y);

//    mini.setXY(el, x, y);

//    __js_addShowOptions(c);

//    mini.layout(c.el);

//    c.onopen();
//    return c;
//}
//mini.showAtPos = function (options) {
//    var c = {
//        el: null,
//        x: "center",            //outleft,left,center,right,outright
//        y: "middle",            //above, top, middle, bottom, below
//        xOffset: 0,
//        yOffset: 0,
//        renderBody: false,
//        onbeforeopen: function () { },
//        onopen: function () { },
//        onoutclick: function (htmlEvent) { },

//        width: "",          //auto的时候，才measure
//        height: "",         //auto的时候，才measure
//        minWidth: 0,        //只有当width|height为auto的时候生效
//        minHeight: 0,
//        maxWidth: 2000,
//        maxHeight: 2000,

//        fixed: false,

//        animate: false
//    };
//    mini.copyTo(c, options);

//    var el = mini.byId(c.el);
//    if (!el) return;

//    if (c.onbeforeopen() === false) return;

//    //render
//    var renderBody = c.renderBody || c.fixed;
//    if (!mini.isRendered(el) || (renderBody && el.parentNode != document.body)) {
//        document.body.appendChild(el);
//    }

//    //do show
//    el.style.display = "block";
//    el.style.position = "absolute";
//    el.style.zIndex = __js_getMaxZIndex();

//    //size
//    mini.measureSize(c);

//    //x, y

//    var vbox = mini.getBox(el.parentNode);
//    var box = mini.getBox(el);

//    var x = c.x;
//    var y = c.y;
//    if (!x) x = "center";
//    if (!y) y = "middle";

//    if (!c.fixed || mini.isIE6) {
//        if (x == "left") x = vbox.x + c.xOffset;
//        if (x == 'center') x = vbox.x + vbox.width / 2 - box.width / 2;
//        if (x == "right") x = vbox.right - box.width - c.xOffset;

//        if (y == "top") y = vbox.y + c.yOffset;
//        if (y == "middle") y = vbox.y + vbox.height / 2 - box.height / 2;
//        if (y == "bottom") y = vbox.bottom - box.height - c.yOffset;

//        if (x + box.width > vbox.right) x = vbox.right - box.width;
//        if (y + box.height > vbox.bottom) y = vbox.bottom - box.height;

//        mini.setXY(el, x, y);
//    } else {
//        //fixed
//        var s = el.style;
//        s.margin = 0;
//        s.position = "fixed";
//        s.left = s.top = s.right = s.bottom = "auto";
//        s["margin-top"] = s["margin-left"] = "0px";
//        //x
//        if (mini.isNumber(x)) s.left = x + "px";
//        if (x == "left") {
//            s.left = c.xOffset + "px";
//        }
//        if (x == "center") {
//            s.left = "50%";
//            s["margin-left"] = (-box.width / 2) + "px";
//        }
//        if (x == "right") {
//            s.right = c.xOffset + "px";
//        }
//        //y
//        if (mini.isNumber(y)) s.top = y + "px";
//        if (y == "top") {
//            s.top = c.yOffset + "px";
//        }
//        if (y == "middle") {
//            s.top = "50%";
//            s["margin-top"] = (-box.height / 2) + "px";
//        }
//        if (y == "bottom") {
//            s.bottom = c.yOffset + "px";
//        }
//    }
//    __js_addShowOptions(c);

//    mini.layout(c.el);

//    c.onopen();

//    //__js_pos_animate(c);

//    return c;
//}
//mini.measureSize = function (options) {
//    var c = {
//        el: null,
//        width: "",          //auto的时候，才measure
//        height: "",         //auto的时候，才measure
//        minWidth: 0,        //只有当width|height为auto的时候生效
//        minHeight: 0,
//        maxWidth: 2000,
//        maxHeight: 2000
//    };
//    mini.copyTo(c, options);
//    var el = mini.byId(c.el);
//    if (!el || mini.isDisplay(el) == false) return;

//    //min, max
//    if (c.width == "auto") {
//        el.style.width = "auto";
//        var size = mini.getSize(el);
//        if (size.width > c.maxWidth) {
//            mini.setWidth(el, c.maxWidth);
//            size = mini.getSize(el);
//        }
//        if (size.width < c.minWidth) {
//            mini.setWidth(el, c.minWidth);
//            box = mini.getSize(el);
//        }
//    }
//    if (c.height == "auto") {
//        el.style.height = "auto";
//        var size = mini.getSize(el);
//        if (size.height > c.maxHeight) {
//            mini.setHeight(el, c.maxHeight);
//            box = mini.getSize(el);
//        }
//        if (size.height < c.minHeight) {
//            mini.setHeight(el, c.minHeight);
//        }
//    }
//}

//__js__showOptions = [];
//__js_addShowOptions = function (op) {
//    for (var i = __js__showOptions.length - 1; i >= 0; i--) {
//        var o = __js__showOptions[i];
//        if (o.el == op.el) {
//            __js__showOptions.removeAt(i);
//        }
//    }
//    __js__showOptions.push(op);
//}
//mini.on(document, "mousedown", function (e) {

//    function within(e, el) {
//        if (mini.isAncestor(el, e.target)) return true;
//        var controls = mini.getChildControls(el);
//        for (var i = 0, l = controls.length; i < l; i++) {
//            var c = controls[i];
//            if (c.within(e)) return true;
//        }
//        return false;
//    }

//    for (var i = __js__showOptions.length - 1; i >= 0; i--) {
//        var o = __js__showOptions[i];
//        var el = o.el;
//        if (mini.isDisplay(el) == false) continue;
//        var atEl = o.atEl;
//        var ret1 = within(e, el);
//        var ret2 = within(e, atEl);
//        if (ret1 || ret2) {
//        } else {
//            var ret = o.onoutclick(e);
//            if (ret !== false) {
//                if (atEl) mini.removeClass(atEl, o.atCls);
//            }
//        }
//    }

//});


/////////////////////////////////////
mini._placeholder = function (el) {
    el = mini.byId(el);
    if (!el || !isIE || isIE10 || isIE11) {
        //var text = el.placeholder;
        //el.placeholder = text.replace(/<br(\/)*>/g, "\r\n");
        return;
    }

    function doLabel() {
        var label = el._placeholder_label;

        if (!label) return;

        var placeholder = el.getAttribute("placeholder");
        if (!placeholder) placeholder = el.placeholder;
        //if (!el.value && !el.disabled) {
        if (!el.value) {
            label.innerHTML = placeholder;
            label.style.display = "";
        } else {
            label.style.display = "none";
        }
    }

    if (el._placeholder) {
        doLabel();
        return;
    }
    el._placeholder = true;

    var label = document.createElement("label");
    label.className = "mini-placeholder-label";
    el.parentNode.appendChild(label);
    el._placeholder_label = label;

    label.onmousedown = function () {
        
        try {
            el.focus();
        } catch (e) {
        }
    }

    //ie 专用
    el.onpropertychange = function (e) {
        e = e || window.event;
        if (e.propertyName == "value") {

            doLabel();
        }
    }

    doLabel();

    //events
    mini.on(el, "focus", function (e) {
        if (!el.readOnly) {
            label.style.display = "none";
        }
    });
    mini.on(el, "blur", function (e) {
        doLabel();
    });

}


////////////////////////////////////////////////

mini.ajax = function (options) {
    
    if (!options.dataType) {
        options.dataType = "text";
    }
    //    if (!options.contentType) {
    //        options.dataType = "text";
//    }    
    return window.jQuery.ajax(options);
}
////////////////////////////////////////////////
mini._evalAjaxData = function (ajaxData, scope) {
    var obj = ajaxData;
    var t = typeof ajaxData;
    if (t == "string") {
        obj = window["ev"+"al"]("(" + ajaxData + ")");
        if (typeof obj == "function") {
            obj = obj.call(scope);
        }
    }
    return obj;
}


//jquery兼容处理

var hasOn = !!jQuery.fn.on;

if (!jQuery.fn.on) {
    jQuery.fn.on = function (type, selector, data, fn) {
        //return this.live(type, data, fn, selector);
        //if (typeof selector == "string") {
            return this.delegate(selector, type, data, fn);
//        } else {
//            return this.bind(type, data, fn);
//        }
    }
}


//mini.replaceHtml = function(el, html) {
//    var oldEl = typeof el === "string" ? document.getElementById(el) : el;
//    /*@cc_on // Pure innerHTML is slightly faster in IE
//    oldEl.innerHTML = html;
//    return oldEl;
//    @*/
//    var newEl = oldEl.cloneNode(false);
//    newEl.innerHTML = html;
//    oldEl.parentNode.replaceChild(newEl, oldEl);
//    /* Since we just removed the old element from the DOM, return a reference
//    to the new element, which can be used to restore variable references. */
//    return newEl;
//};


//响应式布局

mini._lastDevice;
mini.updateDevice = function () {
    var cls = "mini-xs",
        width = jQuery(window).width(),
        type = "xs";

    if (width > 768) {
        cls += " mini-sm";
        type = "sm";
    }
    if (width > 992) {
        cls += " mini-md";
        type = "md";
    }
    if (width > 1200) {
        cls += " mini-lg";
        type = "lg";
    }

    cls += ' mini-' + type + "-active";

    if (mini._lastDevice == type) return;

    jQuery(document.documentElement)
        .removeClass("mini-xs mini-sm mini-md mini-lg mini-xs-active mini-sm-active mini-md-active mini-lg-active ")
        .addClass(cls);

    if (mini._lastDevice != type) {

        jQuery(window).triggerHandler("devicechange", type);
    }

    mini._lastDevice = type;
}

mini.getClipboard = function (e) {
    var text = '';
    if (window.clipboardData) {
        text = window.clipboardData.getData("Text");
    } else if (e) {
        text = e.clipboardData.getData("text/plain")
    }
    return text;
}
mini.setClipboard = function (text) {
    if (window.clipboardData) {
        window.clipboardData.setData("Text", text);
    } else {
        var node = jQuery('<textarea style="position:absolute;left:0;top:-1000px;width:100px;z-index:1000;"></textarea>').appendTo('body').val(text)[0];
        node.select();
        node.focus();
        document.execCommand('copy');
        
    }
}


mini.getActiveElement = function () {
    try {
        return document.activeElement;
    } catch (ex) {
    }
}



mini.getScrollOffset = function () {
    if (!mini._scrollOffset) {
//        var el = document.createElement('div');
//        //el.style.cssText = 'width:100px;background:#eee;height:50px;overflow:scroll;padding:1px;position:absolute;left:-1000px;top:0;';
//        el.style.cssText = 'width:100px;background:#eee;height:50px;overflow:scroll;padding:1px;position:absolute;left:-1000px;top:0;box-sizing:content-box;-moz-box-sizing: content-box;';
//        el.innerHTML = '<div style="width:200px;height:200px;"></div>';
//        document.body.appendChild(el);

        var el = document.createElement('div');        
        el.style.cssText = 'z-index:1000;width:100px;background:#eee;height:50px;overflow:auto;position:absolute;left:100px;top:100px;';
        el.innerHTML = '<div style="width:50px;height:200px;"></div>';
        document.body.appendChild(el);

        mini._scrollOffset = el.offsetWidth - el.clientWidth;

        el.parentNode.removeChild(el);
    }
    return mini._scrollOffset;
}

//setTimeout(function () {
//    alert(mini.getScrollOffset());

//    var el = document.createElement('div');
//    //el.style.cssText = 'width:100px;background:#eee;height:50px;overflow:scroll;padding:1px;position:absolute;left:-1000px;top:0;';
//    el.style.cssText = 'z-index:1000;width:100px;background:#eee;height:50px;overflow:auto;position:absolute;left:100px;top:100px;';
//    el.innerHTML = '<div style="width:50px;height:200px;"></div>';
//    document.body.appendChild(el);

//    alert(el.offsetWidth - el.clientWidth);

//}, 1000);
/***************************************************
* loadJS v1.0
* 
* How to use : http://www.loadjs.org
*
* License : MIT
*
* Date : 2012/04/01
*
***************************************************/

if (typeof window.rootpath == "undefined") {
    rootpath = "/";
}

mini.loadJS = function (src, callback) {
    if (!src) return;
    if (typeof callback == "function") {
        return mini.loadJS._async(src, callback);
    } else {
        return mini.loadJS._sync(src);
    }
}
mini.loadJS._js = {};
mini.loadJS._async = function (src, callback) {
    var state = mini.loadJS._js[src];
    if (!state) {
        state = mini.loadJS._js[src] = { create: false, loaded: false, callbacks: [] };
    }
    if (state.loaded) {
        setTimeout(function () {
            callback();
        }, 1);
        return;
    } else {
        state.callbacks.push(callback);
        if (state.create) return;
    }

    state.create = true;

    var head = document.getElementsByTagName('head')[0];
    var js = document.createElement('script');
    js.src = src;
    js.type = 'text/javascript';

    function doCallback() {
        for (var i = 0; i < state.callbacks.length; i++) {
            var fn = state.callbacks[i];
            if (fn) fn();
        }
        state.callbacks.length = 0;
    }

    setTimeout(function () {
        if (document.all) {
            js.onreadystatechange = function () {
                if (js.readyState == 'loaded' || js.readyState == 'complete') {
                    doCallback();
                    state.loaded = true;
                }
            }
        } else {
            js.onload = function () {
                doCallback();
                state.loaded = true;
            }
        }
        head.appendChild(js);
    }, 1);
    return js;
}
mini.loadJS._sync = function (src) {
    if (loadJS._js[src]) return;
    loadJS._js[src] = { create: true, loaded: true, callbacks: [] };

    var head = document.getElementsByTagName('head')[0];
    var js = document.createElement('script');
    js.type = 'text/javascript';
    js.text = loadText(src);
    head.appendChild(js);
    return js;
}

mini.loadText = function (url) {
    var text = "";
    var isLocal = document.all && location.protocol == "file:";


    var xmlhttp = null;
    if (isLocal) {
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    } else {
        if (window.XMLHttpRequest) {        // for all new browsers
            xmlhttp = new XMLHttpRequest();
        }
        else if (window.ActiveXObject) {    // for IE5 and IE6
            xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
        }
    }


    xmlhttp.onreadystatechange = state_Change;

    var d = '_t=' + new Date().getTime();
    if (url.indexOf("?") == -1) d = "?" + d;
    else d = "&" + d;
    url += d;

    xmlhttp.open("GET", url, false);
    xmlhttp.send(null);

    function state_Change() {
        if (xmlhttp.readyState == 4) {
            var statusCode = isLocal ? 0 : 200;
            if (xmlhttp.status == statusCode) {
                text = xmlhttp.responseText;
            }
            else {
                //error
            }
        }
    }
    return text;
}

mini.loadJSON = function (url) {
    var text = loadText(url);
    var o = window["ev" + "al"]("(" + text + ")");
    return o;
}


mini.loadCSS = function (src, id) {
    if (!src) return;
    if (loadCSS._css[src]) return;
    var head = document.getElementsByTagName('head')[0];
    var link = document.createElement('link');
    if (id) link.id = id;
    link.href = src;
    link.rel = 'stylesheet';
    link.type = 'text/css';
    head.appendChild(link);
    return link;
}
mini.loadCSS._css = {};

/* innerHTML */
mini.innerHTML = function (el, html) {
    if (typeof el == 'string') el = document.getElementById(el);
    if (!el) return;
    html = '<div style="display:none">&nbsp;</div>' + html;
    el.innerHTML = html;
    mini.__executeScripts(el);
    var d = el.firstChild;
    //d.parentNode.removeChild(d);
}
mini.__executeScripts = function (d) {
    var scripts = d.getElementsByTagName("script")
    for (var i = 0, l = scripts.length; i < l; i++) {
        var sc = scripts[i];
        var src = sc.src;
        if (src) {
            mini.loadJS(src);
        } else {
            var ns = document.createElement('script');
            ns.type = "text/javascript";
            ns.text = sc.text;
            d.appendChild(ns);
        }
    }
    for (var i = scripts.length - 1; i >= 0; i--) {
        var sc = scripts[i];
        sc.parentNode.removeChild(sc);
    }
}
// mini.autoParse = false;
// 是否支持 rem
mini.supportRem = (function() {
    var isSupport = false;
    var s = document.createElement('span');
    try {
        s.style.fontSize = '13rem';
        if (/rem/.test(s.style.fontSize)) {
            isSupport = true;
        }
    } catch (error) {}
    return isSupport;
})();

mini.getFontSizeRatio = function() {
    if (!this._fontSizeRatio) {
        this._fontSizeRatio = mini.Cookie.get('_font_size_ratio_') || parseInt($('html').css('fontSize')) / window.HtmlBaseFontSize;
    }

    return this._fontSizeRatio;
};

mini.setFontSizeRatio = function(ratio) {
    this._fontSizeRatio = ratio;
};

mini.copyTo(mini, {
    overwrite: function(dest, proto) {
        var d;
        if (typeof dest == 'function') {
            d = dest.prototype;
        } else if (typeof dest == 'object') {
            d = dest;
        } else {
            return this;
        }

        for (var c in proto) {
            d[c] = proto[c];
        }
        return dest;
    }
});

if (window._rootPath === undefined) {
    var _rootPath = (function() {
        var path = location.pathname;

        if (path.indexOf('/') === 0) {
            path = path.substring(1);
        }

        return '/' + path.split('/')[0];
    })();
}

// mini.loadJS._sync源码中的方法有问题，这里重新实现这个方法
mini.loadJS._sync = function(src) {
    if (mini.loadJS._js[src]) return;
    mini.loadJS._js[src] = {
        create: true,
        loaded: true,
        callbacks: []
    };

    var head = document.getElementsByTagName('head')[0];
    var js = document.createElement('script');
    js.type = 'text/javascript';
    js.text = mini.loadText(src);
    head.appendChild(js);
    return js;
};

mini.loadCSS = function(src, id) {
    if (!src) return;
    if (mini.loadCSS._css[src]) return;
    var head = document.getElementsByTagName('head')[0];
    var link = document.createElement('link');
    if (id) link.id = id;
    link.href = src;
    link.rel = 'stylesheet';
    link.type = 'text/css';
    head.appendChild(link);

    mini.loadCSS._css[src] = link;

    return link;
};

mini.isDisplay = function(p, body, ignoresFn) {
    if (typeof body === 'function') {
        ignoresFn = body;
        body = undefined;
    }
    var doc = body || document.body;
    while (1) {
        if (p == null || !p.style) return false;
        // 原方法中通过p.style.display 无法获取到通过class设置的值
        // jQuery(p).css('display') 在firefox中也无法获取到class设置的值
        if (p && (jQuery(p).css('display') == 'none' || (mini.isFirefox && p.nodeName == 'IFRAME' && p.getBoundingClientRect().width === 0 && p.getBoundingClientRect().height === 0 && p.getBoundingClientRect().x === 0 && p.getBoundingClientRect().y === 0))) {
            if (ignoresFn) {
                if (ignoresFn(p) !== true) return false;
            } else {
                return false;
            }
        }
        if (p == doc) return true;

        p = p.parentNode;
    }
    return true;
};
mini.loadCSS._css = {};

mini.externalSrc = _rootPath + '/lib/';

mini_useShims = true;

mini_debugger = false;

/*
miniui源码中已加入该处理，下面代码可删掉
// 参照zui，给ie浏览器body加上特殊标识
// if(mini.IE_V > 0) {
//     jQuery(function(){
//         mini.addClass(document.body, 'ie' + mini.IE_V);
//     });
// }
*/

mini.showPageWarning = function(cfg) {
    var $pageWarning = $('#mini-pageWarning');

    if ($pageWarning.length) {
        return;
    }

    $pageWarning = $('<div></div>', {
        id: 'mini-pageWarning',
        style: 'position:fixed;top:30%;left:50%;margin-left:-280px;width:560px;height:40px;color:#dd2727;background:#f2dede;text-align:center;border-radius:3px;line-height:40px;font-size:13px;'
    })
        .html(cfg.html)
        .append(
            // 插入关闭按钮
            $('<span title= "关闭" style= "position: absolute;top:0;right:10px;font-size:18px;line-height:40px;cursor:pointer" onclick= \'$("#mini-pageWarning").remove();\'>×</span>')
        )
        .css('z-index', cfg.zIndex || 9999)
        .appendTo('body');

    setTimeout(function() {
        $pageWarning.remove();
        $pageWarning = null;
    }, cfg.timeout || 15000);
};

var _oGetAttrs = mini.Control.prototype.getAttrs;
mini.overwrite(mini.Control, {
    getAttrs: function(el) {
        var attrs = _oGetAttrs.call(this, el),
            extraAttrs;

        if (this.getExtraAttrs) {
            extraAttrs = this.getExtraAttrs.call(this, el);
            mini.copyTo(attrs, extraAttrs);
        }

        return attrs;
    }
});

// 由于 mini.Container 控件虽然继承于mini.Control，但是它定义中没有重写getAttrs方法，就导致上面 overwrite mini.Control 的 getAttrs 方法不会影响到 mini.Container ，所以需要对其再重写一遍
mini.overwrite(mini.Container, {
    getAttrs: function(el) {
        return mini.Container.superclass.getAttrs.call(this, el);
    }
});

mini.getValidErrorToolTip = function() {
    if (!mini._errorToolTip) {
        mini._errorToolTip = new mini.ToolTip();

        mini._errorToolTip.set({
            selector: '.mini-error[data-tooltip]',
            placement: 'topright',
            trigger: 'focus',
            // cls: 'error-tooltip'
            theme: 'error',
            defaultTheme: 'error'
        });

        $(document).on('mousewheel', function() {
            // 为了防止页面滚动时 tooltip 不随页面一起滚动，所以滚动时隐藏掉 tooltip
            // 现在实现还有问题，用户直接通过拖动滚动条无法隐藏，需要进一步优化
            mini._errorToolTip.close();
        });
    }

    return mini._errorToolTip;
};

// 重写验证效果
mini.overwrite(mini.ValidatorBase, {
    // _errorToolTip: undefined,
    // initErrorToolTip: function() {
    //     if(!this._errorToolTip) {
    //         this._errorToolTip = new mini.ToolTip();

    //         this._errorToolTip.set({
    //             target: this.el,
    //             selector: '[data-tooltip]',
    //             placement: 'topright',
    //             trigger: 'focus',
    //             cls: 'error-tooltip'
    //         });
    //     }
    // },
    __doUpdateValid: function() {
        if (!this.el) return;
        this.removeCls(this._errorCls);
        this.removeCls(this._invalidCls);

        if (this.errorMode == 'border') {
            this.el.title = '';
        }

        if (this._IsValid == false) {
            mini.getValidErrorToolTip();

            jQuery(this.el).attr('data-tooltip', this.errorText);
            switch (this.errorMode) {
                case 'icon':
                    this.addCls(this._errorCls);
                    var icon = this.getErrorIconEl();
                    if (icon) {
                        icon.title = this.errorText;
                        jQuery(icon).attr('data-placement', this.errorTooltipPlacement);
                    }
                    break;
                case 'border':
                    this.addCls(this._invalidCls);
                    this.el.title = this.errorText;
                default:
                    this._RemoveErrorIcon();
                    break;
            }
        } else {
            this._RemoveErrorIcon();
            jQuery(this.el).attr('data-tooltip', '');
        }
        this.doLayout();
    }
});

//CheckColumn
// 源码中_doCheckState方法实现有问题，某些场景下最后又会update下表头，重新生成表头是会根据_checkedAll来决定是否选中，所以必须同时更新下_checkedAll的值
mini.CheckColumn = function(config) {
    return mini.copyTo(
        {
            width: 30,
            cellCls: 'mini-checkcolumn',
            headerCls: 'mini-checkcolumn',
            hideable: true,
            _multiRowSelect: true, //
            header: function(column) {
                //if(this.multiSelect == false) debugger
                //                var id = this.uid + "checkall";
                //                var s = '<input type="checkbox" id="' + id + '" ' + (column._checkedAll ? 'checked' : '') + '/>';
                //                if (this.multiSelect == false) s = "";
                //                return s;

                var id = this.uid + 'checkall';
                var cls = column._checkedAll ? 'mini-grid-checkbox-checked' : '';
                var s = '<span class="mini-grid-checkbox mini-icon ' + cls + '" id="' + id + '"></span>';
                if (this.multiSelect == false) s = '';
                return s;
            },
            getCheckId: function(record, column) {
                return this._gridUID + '$checkcolumn$' + record[this._rowIdField] + '$' + column._id;
            },
            init: function(grid) {
                grid.on('_selectchange', this.__OnSelectionChanged, this);
                grid.on('HeaderCellClick', this.__OnHeaderCellClick, this);

                var me = this;
                grid.on('removerow', function() {
                    if (grid.data && grid.data.length == 0) {
                        me._doCheckState(grid);
                    }
                });

                var me = this;
                grid.on(
                    'load',
                    function() {
                        var id = grid.uid + 'checkall';
                        //$("#" + id).removeClass('mini-grid-checkbox-checked');
                        me._doCheckState(grid);
                    },
                    this
                );
            },
            renderer: function(e) {
                var id = this.getCheckId(e.record, e.column);
                var selected = e.sender.isSelected ? e.sender.isSelected(e.record) : false;

                var type = 'checkbox';

                //                var grid = e.sender;
                //                if (grid.getMultiSelect() == false) type = "radio";

                //                var html = '<input type="' + type + '" id="' + id + '" ' + (selected ? "checked" : "") + ' hidefocus style="outline:none;" onclick="return false"/>';
                //                html += '<div class="mini-grid-radio-mask"></div>';
                //                return html;

                var grid = e.sender;
                var html = '<span class="mini-grid-' + (grid.getMultiSelect() ? 'checkbox' : 'radio') + ' mini-icon" id="' + id + '"></span>';
                return html;
            },
            __OnHeaderCellClick: function(e) {
                var grid = e.sender;
                if (e.column != this) return;
                var id = grid.uid + 'checkall';
                var ck = document.getElementById(id);
                if (ck) {
                    var checkedCls = 'mini-grid-checkbox-checked';
                    var checked = !mini.hasClass(ck, checkedCls);
                    this._checkedAll = checked;

                    if (grid.getMultiSelect()) {
                        if (checked) {
                            var list = grid.getDataView();
                            grid.selects(list);
                            mini.addClass(ck, checkedCls);
                            setTimeout(function() {
                                mini.addClass(ck, checkedCls);
                            }, 30);
                        } else {
                            var list = grid.getDataView();
                            grid.deselects(list);
                            mini.removeClass(ck, checkedCls);
                        }
                    } else {
                        grid.deselectAll();
                        if (checked) {
                            grid.select(0);
                            mini.addClass(ck, checkedCls);
                        }
                    }
                    grid.fire('checkall');
                }
            },
            __OnSelectionChanged: function(e) {
                var grid = e.sender;
                var records = grid.toArray();
                var me = this;

                var virtual = grid.isVirtualScroll(),
                    region = grid._viewRegion,
                    start = virtual && region ? region.start : -1,
                    end = region ? region.end : -1,
                    map = {};

                if (start != -1) {
                    var data = grid.getVisibleRows();
                    for (var i = start, l = end; i < l; i++) {
                        var row = data[i];
                        if (row) map[row._id] = true;
                    }
                }

                for (var i = 0, l = records.length; i < l; i++) {
                    var record = records[i];

                    //continue;
                    if (start != -1) {
                        if (!map[record._id]) continue;
                    }

                    //                    var select = grid.isSelected(record);
                    //                    var id = me.getCheckId(record, me); //grid.uid + "$checkcolumn$" + record[grid._rowIdField];
                    //                    var ck = document.getElementById(id);

                    //                    if (ck) ck.checked = select;
                }

                if (!this._timer) {
                    this._timer = setTimeout(function() {
                        me._doCheckState(grid);
                        me._timer = null;
                    }, 10);
                }
            },
            _doCheckState: function(grid) {
                //处理顶部的checkbox
                var id = grid.uid + 'checkall';
                var ck = document.getElementById(id);

                if (ck) {
                    var sels = grid.getSelecteds();
                    //if (sels.length == grid.getData().length) {

                    var len = grid.isTree ? grid.getList().length : grid.getData().length;

                    if (sels.length == len && len != 0) {
                        //if (sels.length == len){
                        //ck.checked = true;
                        jQuery(ck).addClass('mini-grid-checkbox-checked');
                        // 源码中实现有问题，某些场景下最后又会update下表头，重新生成表头是会根据_checkedAll来决定是否选中，所以必须同时更新下_checkedAll的值
                        this._checkedAll = true;
                    } else {
                        //ck.checked = false;
                        jQuery(ck).removeClass('mini-grid-checkbox-checked');
                        // 源码中实现有问题，某些场景下最后又会update下表头，重新生成表头是会根据_checkedAll来决定是否选中，所以必须同时更新下_checkedAll的值
                        this._checkedAll = false;
                    }
                }

                //                if (ck && grid._getSelectAllCheckState) {

                //                    var state = grid._getSelectAllCheckState();
                //                    if (state == "has") {
                //                        ck.indeterminate = true;
                //                        ck.checked = true;
                //                    } else {
                //                        ck.indeterminate = false;
                //                        ck.checked = state;
                //                    }
                //                }
            }
        },
        config
    );
};
mini._Columns['checkcolumn'] = mini.CheckColumn;

// 重写 ExpandColumn 解决chrome中点击当成锚点了
mini.ExpandColumn = function(config) {
    return mini.copyTo(
        {
            width: 30,
            headerAlign: 'center',
            align: 'center',
            draggable: false,
            cellStyle: 'padding:0',
            cellCls: 'mini-grid-expandCell',
            hideable: true,
            renderer: function(e) {
                // return '<a class="mini-grid-ecIcon mini-icon" href="javascript:#" onclick="return false"></a>';
                // 改成i标签，解决chrome中点击当成锚点了
                return '<i class="mini-grid-ecIcon mini-icon" ></i>';
            },
            init: function(grid) {
                grid.on('cellclick', this.__OnCellClick, this);
            },
            __OnCellClick: function(e) {
                var grid = e.sender;
                if (e.column == this && grid.isShowRowDetail) {
                    if (mini.findParent(e.htmlEvent.target, 'mini-grid-ecIcon')) {
                        var isShow = grid.isShowRowDetail(e.record);

                        if (!isShow) {
                            e.cancel = false;
                            grid.fire('beforeshowrowdetail', e);
                            if (e.cancel === true) return;
                        } else {
                            e.cancel = false;
                            grid.fire('beforehiderowdetail', e);
                            if (e.cancel === true) return;
                        }

                        if (grid.autoHideRowDetail) {
                            grid.hideAllRowDetail();
                        }
                        if (isShow) {
                            grid.hideRowDetail(e.record);
                        } else {
                            grid.showRowDetail(e.record);
                        }
                    }
                }
            }
        },
        config
    );
};
mini._Columns['expandcolumn'] = mini.ExpandColumn;

// miniui 中此方法写错了 误将&gt; 替换为 &
mini.htmlDecode = function(str) {
    if (typeof str !== 'string') return str;
    var s = '';
    if (str.length == 0) return '';
    s = str.replace(/&amp;/g, '&');
    s = s.replace(/&lt;/g, '<');
    s = s.replace(/&gt;/g, '>');
    s = s.replace(/&nbsp;/g, ' ');
    s = s.replace(/&#39;/g, "'");
    s = s.replace(/&quot;/g, '"');
    //s = s.replace(/<br>/g, "\n");
    return s;
};

// 某些场景下需要全屏功能，所以要预先设置iframe允许全屏
mini.createIFrame = function(url, onIFrameLoad, cache, method, params) {
    //alert(method + ":" + params);

    /*var iframe = document.createElement('iframe');
    iframe.src = url;
        
    function onload () {
    alert("aaa111");
    }

    if (iframe.attachEvent) {
    iframe.attachEvent('onload', onload);
    } else {
    iframe.onload = onload;
    }
    return iframe;*/

    if (!url) url = '';
    var urls = url.split('#');
    url = urls[0];

    //修改url
    var t = '';
    if (cache !== true) {
        //_t
        t = '_t=' + Math.floor(Math.random() * 1000000); // "&_winid=" + mini._WindowID;

        if (url.indexOf('?') == -1) {
            url += '?' + t;
        } else {
            url += '&' + t;
        }
    }

    //_winid
    if (url && url.indexOf('_winid') == -1) {
        var t = '_winid=' + mini._WindowID;
        if (url.indexOf('?') == -1) {
            url += '?' + t;
        } else {
            url += '&' + t;
        }
    }

    if (mini.iframeParams) {
        for (var name in mini.iframeParams) {
            url += '&' + name + '=' + mini.iframeParams[name];
        }
    }

    if (urls[1]) {
        url = url + '#' + urls[1];
    }

    var isMHT = url.indexOf('.mht') != -1;
    var src = isMHT ? url : '';

    var iframeName = mini.newId('mini-iframe-');

    //window server版本下，是否用js绑定onload事件会比较好
    // var s = '<iframe name="' + iframeName + '" src="' + (method == 'post' ? '' : src) + '" style="width:100%;height:100%;"  frameborder="0"></iframe>';
    // 添加 allowfullscreen 属性
    var s = '<iframe name="' + iframeName + '" src="' + (method == 'post' ? '' : src) + '" style="width:100%;height:100%;" allowfullscreen="true" frameborder="0"></iframe>';

    //alert(method == 'post');

    var div = document.createElement('div');
    var iframe = mini.append(div, s);
    //iframe.src = "";
    var canFireLoad = false;
    if (isMHT) {
        canFireLoad = true;
    } else {
        setTimeout(function() {
            if (iframe) {
                if (method != 'post') {
                    iframe.src = url;
                }
                canFireLoad = true;
            }
        }, 5);
    }

    //iframe.onload = __OnLoad;
    if (iframe.attachEvent) {
        iframe.attachEvent('onload', __OnLoad);
    } else {
        iframe.onload = __OnLoad;
    }

    var destroyed = false;

    //load
    var firstLoad = true;
    function __OnLoad() {
        if (canFireLoad == false || destroyed) return;
        //alert("onload");
        setTimeout(function() {
            if (onIFrameLoad) onIFrameLoad(iframe, firstLoad);
            firstLoad = false;
            //onload = null;
            //iframe.onload = null;
            //
        }, 1);
    }

    //destroy
    iframe._ondestroy = function() {
        //window[fnName] = mini.emptyFn;
        destroyed = true;

        iframe.src = '';
        if (mini.isIE) {
            try {
                iframe.contentWindow.document.write('');
                iframe.contentWindow.document.close();
            } catch (ex) {}
        }
        iframe._ondestroy = null;
        iframe = null;
    };

    //////////////////////////////////////////////////////////////////////

    var form;
    if (method == 'post') {
        function createForm() {
            return jQuery('<form />')
                .attr({
                    method: 'post',
                    action: url,
                    enctype: 'multipart/form-data',
                    target: iframe.name
                })
                .hide()
                .appendTo('body');
        }

        form = createForm();

        setTimeout(function() {
            form.submit();
        }, 10);
    }

    return iframe;
};

// 获取滚动条宽度
mini.getScrollBarWidth = function getScrollBarWidth() {
    var div = document.createElement('div');
    var p = document.createElement('p');

    div.style.display = p.style.display = 'block';
    p.style.height = '100px';
    div.style.padding = 0;
    div.style.border = 'none';
    div.style.overflow = 'auto';
    div.style.height = '10px';

    div.appendChild(p);
    document.body.appendChild(div);

    var w = div.offsetWidth - div.clientWidth;
    div.parentNode.removeChild(div);
    div = p = null;
    return w;
};
// mini._scrollBarWidth
(function() {
    var _scrollBarWidth;
    if (Object.defineProperty && !mini.isIE8) {
        Object.defineProperty(mini, '_scrollBarWidth', {
            get: function() {
                if (!_scrollBarWidth) {
                    _scrollBarWidth = mini.getScrollBarWidth();
                }
                return _scrollBarWidth;
            }
        });
    } else {
        jQuery(window).on('load', function() {
            mini._scrollBarWidth = mini.getScrollBarWidth();
        });
    }
})();

// 保留一些 dom 上属性，防止控件解析后属性丢失
(function() {
    // 需要保留属性的正则数组
    mini.reservedAttrsReg = [/title/, /data-*/];

    var oldApply = mini.applyTo;
    mini.applyTo = function(el) {
        el = mini.byId(el);
        // 获取属性
        var savedAttrs = getSavedAttrs(el);
        // 原来的 apply 方法
        var returnValue = oldApply.apply(this, arguments);

        // 还原属性 注意需要将属性加到实例的el上去 而非原来的el
        restoreSavedAttrs(this.el, savedAttrs);

        return returnValue;
    };

    function getSavedAttrs(el) {
        if (el && el.hasAttributes && el.hasAttributes()) {
            var attrs = el.attributes;
            var name;
            var savedAttrs = {};
            var hasAttr = false;
            for (var i = 0, len = attrs.length; i < len; i++) {
                name = attrs[i].name;
                if (isMatch(name)) {
                    hasAttr = true;
                    savedAttrs[name] = attrs[i].value;
                }
            }
            return hasAttr ? savedAttrs : null;
        }
    }
    function restoreSavedAttrs(el, attrs) {
        if (!el || !attrs) return;
        jQuery.map(attrs, function(v, k) {
            el.setAttribute(k, v);
        });
    }

    var isMatch = (function() {
        if (Array.prototype.some) {
            return function(name) {
                return (
                    mini.reservedAttrsReg &&
                    mini.reservedAttrsReg.some(function(reg) {
                        return reg.test(name);
                    })
                );
            };
        }
        return function(name) {
            if (!mini.reservedAttrsReg || !mini.reservedAttrsReg.length) return false;

            for (var i = 0, len = mini.reservedAttrsReg.length; i < len; i++) {
                if (mini.reservedAttrsReg[i].test(name)) {
                    return true;
                }
            }
            return false;
        };
    })();
})();

/**
* jQuery MiniUI v3.0
* 
* Web Site : http://www.miniui.com
*
* Commercial License : http://www.miniui.com/license
*
* Copyright(c) 2012 All Rights Reserved. Shanghai PusSoft Co., Ltd (上海普加软件有限公司) [ services@plusoft.com.cn ]. 
* 
*/

mini.Hidden = function () {
    mini.Hidden.superclass.constructor.apply(this, arguments);

}
mini.extend(mini.Hidden, mini.Control, {
    _clearBorder: false,
    formField: true,
    value: "",

    uiCls: "mini-hidden",
    _create: function () {
        this.el = document.createElement("input");
        this.el.type = "hidden";
        this.el.className = "mini-hidden";
    },
    setName: function (value) {

        this.name = value;
        this.el.name = value;
    },
    setValue: function (value) {
        if (value === null || value === undefined) value = "";
        this.value = value;
        if (mini.isDate(value)) {
            var y = value.getFullYear();
            var m = value.getMonth() + 1;
            var d = value.getDate();
            m = m < 10 ? "0" + m : m;
            d = d < 10 ? "0" + d : d;
            this.el.value = y + "-" + m + "-" + d;
        } else {
            this.el.value = value;
        }
    },
    getValue: function () {
        return this.value;
    },
    getFormValue: function () {
        return this.el.value;
    }
});

mini.regClass(mini.Hidden, "hidden");
/**
* jQuery MiniUI v3.0
* 
* Web Site : http://www.miniui.com
*
* Commercial License : http://www.miniui.com/license
*
* Copyright(c) 2012 All Rights Reserved. Shanghai PusSoft Co., Ltd (上海普加软件有限公司) [ services@plusoft.com.cn ]. 
* 
*/

mini.Popup = function () {
    mini.Popup.superclass.constructor.apply(this, arguments);

    this.setVisible(false);
    this.setAllowDrag(this.allowDrag);
    this.setAllowResize(this.allowResize);
}
mini.extend(mini.Popup, mini.Container, {
    _clearBorder: false,

    uiCls: "mini-popup",
    _create: function () {
        var el = this.el = document.createElement("div");
        this.el.className = "mini-popup";
        this._contentEl = this.el;
    },

    _initEvents: function () {
        mini._BindEvents(function () {
            mini_onOne(this.el, "mouseover", this.__OnMouseOver, this);

            //mini.on(this.el, "mouseover", this.__OnMouseOver, this);

        }, this);

    },
    doLayout: function () {
        if (!this.canLayout()) return;
        mini.Popup.superclass.doLayout.call(this);
        this._doShadow();

        //mini.layout(this.el);
        var cs = this.el.childNodes;
        if (cs) {
            for (var i = 0, l = cs.length; i < l; i++) {
                var cel = cs[i];
                mini.layout(cel);
            }
        }
    },
//    destroy: function (removeEl) {
//        if (this.el) {
//            this.el.onmouseover = null;
//        }
//        //mini.removeChilds(this._contentEl);
//        mini.un(document, "mousedown", this.__OnBodyMouseDown, this);
//        mini.un(window, "resize", this.__OnWindowResize, this);
//        if (this._modalEl) {
//            jQuery(this._modalEl).remove();
//            this._modalEl = null;
//        }
//        if (this.shadowEl) {
//            jQuery(this.shadowEl).remove();
//            this.shadowEl = null;
//        }
//        if (this._shimEl) {
//            jQuery(this._shimEl).remove();
//            this._shimEl = null;
//        }
//        mini.Popup.superclass.destroy.call(this, removeEl);
//    },
    destroy: function (removeEl) {
        if (this.el) {
            this.el.onmouseover = null;
        }
        //mini.removeChilds(this._contentEl);

        if (!mini._destroying) {
            mini.un(document, "mousedown", this.__OnBodyMouseDown, this);
            mini.un(window, "resize", this.__OnWindowResize, this);
        }

        if (removeEl !== false) {
            if (this._modalEl) {
                jQuery(this._modalEl).remove();
            }
            if (this.shadowEl) {
                jQuery(this.shadowEl).remove();

            }
            if (this._shimEl) {
                jQuery(this._shimEl).remove();

            }
        }
        this._modalEl = null;
        this.shadowEl = null;
        this._shimEl = null;
        mini.Popup.superclass.destroy.call(this, removeEl);
    },

    setWidth: function (value) {
        if (parseInt(value) == value) value += "px";
        this.width = value;

        if (value.indexOf("px") != -1) {
            mini.setWidth(this.el, value);
        } else {
            this.el.style.width = value;
        }
        this._sizeChanged();
    },
    setHeight: function (value) {
        if (parseInt(value) == value) value += "px";
        this.height = value;
        if (value.indexOf("px") != -1) {
            mini.setHeight(this.el, value);
        } else {
            this.el.style.height = value;
        }
        this._sizeChanged();
    },
    setBody: function (value) {
        if (!value) return;
        if (!mini.isArray(value)) value = [value];
        for (var i = 0, l = value.length; i < l; i++) {
            mini.append(this._contentEl, value[i]);
        }
    },
    getAttrs: function (el) {
        var attrs = mini.Popup.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["popupEl", "popupCls", "showAction", "hideAction", "xAlign", "yAlign", "modalStyle",
            "onbeforeopen", "open", "onbeforeclose", "onclose"
                ]
        );
        mini._ParseBool(el, attrs,
            ["showModal", "showShadow", "allowDrag", "allowResize"
                ]
        );
        mini._ParseInt(el, attrs,
            ["showDelay", "hideDelay", "xOffset", "yOffset",
            "minWidth", "minHeight", "maxWidth", "maxHeight"
                ]
        );
        var cs = mini.getChildNodes(el, true);
        attrs.body = cs;
        return attrs;
    }

});
mini.regClass(mini.Popup, "popup");

///////////////////////////////////////////
mini.Popup_prototype = {
    //_displayStyle: "block",
    isPopup: false, //是否弹出显示

    popupEl: null,
    popupCls: "",

    showAction: "mouseover", //none, leftclick, rightclick, mouseover
    hideAction: "outerclick", //none, outerclick, mouseout
    showDelay: 300,     //针对mouseover
    hideDelay: 500,     //针对mouseout

    xAlign: "left", //none,outleft,left,center,right,outright
    yAlign: "below", //none,above, top, middle, bottom, below
    xOffset: 0,
    yOffset: 0,

    minWidth: 50,
    minHeight: 25,
    maxWidth: 2000,
    maxHeight: 2000,

    showModal: false,
    showShadow: true,

    modalStyle: "opacity:0.2",

    _dragCls: "mini-popup-drag",
    _resizeCls: "mini-popup-resize",
    allowDrag: false,
    allowResize: false,

    _unbindPopupEl: function () {
        if (!this.popupEl) return;
        mini.un(this.popupEl, "click", this.__OnLeftClick, this);
        mini.un(this.popupEl, "contextmenu", this.__OnRightClick, this);
        mini.un(this.popupEl, "mouseover", this.__OnMouseOver, this);

    },
    _bindPopupEl: function () {
        if (!this.popupEl) return;
        mini.on(this.popupEl, "click", this.__OnLeftClick, this);
        mini.on(this.popupEl, "contextmenu", this.__OnRightClick, this);
        mini.on(this.popupEl, "mouseover", this.__OnMouseOver, this);
    },
    doShow: function (e) {
        var ev = {
            popupEl: this.popupEl,
            htmlEvent: e,
            cancel: false
        };

        this.fire("BeforeOpen", ev);
        if (ev.cancel == true) return;

        this.fire("opening", ev);
        if (ev.cancel == true) return;

        if (!this.popupEl) {
            this.show();
        } else {
            var options = {};
            if (e) options.xy = [e.pageX, e.pageY];
            this.showAtEl(this.popupEl, options);
        }
    },
    doHide: function (e) {
        var ev = {
            popupEl: this.popupEl,
            htmlEvent: e,
            cancel: false
        };
        this.fire("BeforeClose", ev);
        if (ev.cancel == true) return;
        this.close();
    },

    show: function (left, top) {

        this.showAtPos(left, top);
    },
    showAtPos: function (x, y) {
        //this._popupEl = null;

        //if (!this.isRender()) {
        this.render(document.body);
        //}
        if (!x && x !== 0) x = "center";
        if (!y && y !== 0) y = "middle";

        this.el.style.position = "absolute";
        this.el.style.left = "-2000px";
        this.el.style.top = "-2000px";
        this.el.style.display = "";

        this._measureSize();

        var vbox = mini.getViewportBox();
        var box = mini.getBox(this.el);


        //x, y的获取        
        if (x == "left") x = 0;
        if (x == 'center') x = vbox.width / 2 - box.width / 2;
        if (x == "right") x = vbox.width - box.width;

        if (y == "top") y = 0;
        if (y == "middle") y = vbox.y + vbox.height / 2 - box.height / 2;
        if (y == "bottom") y = vbox.height - box.height;

        if (x + box.width > vbox.right) x = vbox.right - box.width;
        if (y + box.height > vbox.bottom) y = vbox.bottom - box.height - 2;

        this._Show(x, y);
    },

    _doModal: function () {
        jQuery(this._modalEl).remove();
        if (!this.showModal) return;
        if (this.visible == false) return;

        var dd = document.documentElement;
        var scrollWidth = parseInt(Math.max(document.body.scrollWidth, dd ? dd.scrollWidth : 0));
        var scrollHeight = parseInt(Math.max(document.body.scrollHeight, dd ? dd.scrollHeight : 0));

        var vbox = mini.getViewportBox();
        var height = vbox.height;
        if (height < scrollHeight) height = scrollHeight;

        var width = vbox.width;
        if (width < scrollWidth) width = scrollWidth;

        this._modalEl = mini.append(document.body, '<div class="mini-modal"></div>');
        this._modalEl.style.height = height + "px";
        this._modalEl.style.width = width + "px";
        this._modalEl.style.zIndex = mini.getStyle(this.el, 'zIndex') - 1;
        mini.setStyle(this._modalEl, this.modalStyle);
    },
    _doShim: function () {
        //if (!mini.isIE || !mini_useShims) return;
        if (!mini_useShims) return;
        if (!this._shimEl) {
            var iframe = "<iframe frameborder='0' style='position: absolute; z-index: -1; width: 0; height: 0; top: 0;left:0;scrolling:no;'></iframe>";
            this._shimEl = mini.append(document.body, iframe);
        }
        function doShim() {
            this._shimEl.style.display = "";
            var box = mini.getBox(this.el);
            var s = this._shimEl.style;
            s.width = box.width + "px";
            s.height = box.height + "px";
            s.left = box.x + "px";
            s.top = box.y + "px";

            var zindex = mini.getStyle(this.el, 'zIndex');
            if (!isNaN(zindex)) {
                this._shimEl.style.zIndex = zindex - 3;
            }
        }
        this._shimEl.style.display = "none";
        if (this._doShimTimer) {
            clearTimeout(this._doShimTimer);
            this._doShimTimer = null;
        }
        var me = this;
        this._doShimTimer = setTimeout(function () {
            me._doShimTimer = null;
            doShim.call(me);
        }, 20);
    },
    _doShadow: function () {
        if (!this.shadowEl) {
            this.shadowEl = mini.append(document.body, '<div class="mini-shadow"></div>');
        }

        this.shadowEl.style.display = this.showShadow ? "" : "none";
        this.shadowEl.style.display = "none";
        //        if (this.showShadow) {
        //            function doShadow() {
        //                this.shadowEl.style.display = "";
        //                var box = mini.getBox(this.el);
        //                var s = this.shadowEl.style;
        //                s.width = box.width + "px";
        //                s.height = box.height + "px";
        //                s.left = box.x + "px";
        //                s.top = box.y + "px";

        //                var zindex = mini.getStyle(this.el, 'zIndex');
        //                if (!isNaN(zindex)) {
        //                    this.shadowEl.style.zIndex = zindex - 2;
        //                }
        //            }
        //            this.shadowEl.style.display = "none";
        //            if (this._doShadowTimer) {
        //                clearTimeout(this._doShadowTimer);
        //                this._doShadowTimer = null;
        //            }
        //            var me = this;
        //            //doShadow.call(me);
        //            this._doShadowTimer = setTimeout(function () {
        //                me._doShadowTimer = null;
        //                doShadow.call(me);
        //            }, 20);
        //        }
    },
    _measureSize: function () {
        this.el.style.display = "";
        var box = mini.getBox(this.el);
        //min, max
        if (box.width > this.maxWidth) {
            mini.setWidth(this.el, this.maxWidth);
            box = mini.getBox(this.el);
        }
        if (box.height > this.maxHeight) {
            mini.setHeight(this.el, this.maxHeight);
            box = mini.getBox(this.el);
        }
        if (box.width < this.minWidth) {
            mini.setWidth(this.el, this.minWidth);
            box = mini.getBox(this.el);
        }
        if (box.height < this.minHeight) {
            mini.setHeight(this.el, this.minHeight);
            box = mini.getBox(this.el);
        }
    },
    _getWindowOffset: function (options) {
        return [0, 0];
    },
    showAtEl: function (el, options) {
        
        el = mini.byId(el);
        if (!el) return;
        if (!this.isRender() || this.el.parentNode != document.body) {
            this.render(document.body);
        }

        var c = {
            atEl: el,
            popupEl: this.el,
            xAlign: this.xAlign,
            yAlign: this.yAlign,
            xOffset: this.xOffset,
            yOffset: this.yOffset,
            popupCls: this.popupCls
            //outXAlign
            //outYAlign
        };
        mini.copyTo(c, options);

        mini.addClass(el, c.popupCls);
        el.popupCls = c.popupCls;
        this._popupEl = el;
        
        this.el.style.position = "absolute";
        this.el.style.left = "-2000px";
        this.el.style.top = "-2000px";
        this.el.style.display = "";

        this.doLayout();
        this._measureSize();

        var vbox = mini.getViewportBox();
        var box = mini.getBox(this.el);
        var pbox = mini.getBox(el);
        var xy = c.xy;
        var h = c.xAlign, v = c.yAlign;

        var x = vbox.width / 2 - box.width / 2, y = 0;
        if (xy) {
            x = xy[0];
            y = xy[1];
        }

        switch (c.xAlign) {
            case "outleft":
                x = pbox.x - box.width;
                break;
            case "left":
                x = pbox.x;
                break;
            case "center":
                x = pbox.x + pbox.width / 2 - box.width / 2;
                break;
            case "right":
                x = pbox.right - box.width;
                break;
            case "outright":
                x = pbox.right;
                break;
            default:

                break;
        }

        switch (c.yAlign) {
            case "above":
                y = pbox.y - box.height;
                break;
            case "top":
                y = pbox.y;
                break;
            case "middle":
                y = pbox.y + pbox.height / 2 - box.height / 2;
                break;
            case "bottom":
                y = pbox.bottom - box.height;
                break;
            case "below":
                y = pbox.bottom;
                break;
            default:

                break;
        }
        x = parseInt(x);
        y = parseInt(y);

        var winOffset = this._getWindowOffset(options);

        if (c.outYAlign || c.outXAlign) {
            if (c.outYAlign == "above") {
                if (y + box.height > vbox.bottom) {
                    var top = pbox.y - vbox.y;
                    var bottom = vbox.bottom - pbox.bottom;
                    if (top > bottom) {
                        y = pbox.y - box.height;
                    }
                }
            }

            if (c.outYAlign == "below") {
                if (y + box.height > vbox.bottom) {
                    var top = pbox.y - vbox.y;
                    var bottom = vbox.bottom - pbox.bottom;
                    if (top > bottom) {

                        //y = pbox.y + pbox.height - box.height;        //old
                        y = pbox.y - box.height;                       //fkq fixed!
                    }
                }

            }
            if (c.outXAlign == "outleft") {
                if (x + box.width > vbox.right) {
                    var left = pbox.x - vbox.x;
                    var right = vbox.right - pbox.right;
                    if (left > right) {
                        x = pbox.x - box.width;
                    }
                }
            }
            if (c.outXAlign == "right") {
                if (x + box.width > vbox.right) {
                    x = pbox.right - box.width;
                    //                    var right = vbox.right - pbox.right;
                    //                    if (left > right) {
                    //                        x = pbox.x - box.width;
                    //                    }
                }
            }

            if (c.alwaysView) {

                if (y < 0) y = 0;

                if (y + box.height > vbox.bottom) y = vbox.bottom - box.height;

                if (x < 0) x = 0;

                if (x + box.width > vbox.right) x = vbox.right - box.width;
            }

            this._Show(x + winOffset[0], y + winOffset[1]);
        } else {
            this.showAtPos(x + c.xOffset + winOffset[0], y + c.yOffset + winOffset[1]);
        }
    },
    _Show: function (x, y) {
        this.el.style.display = "";
        this.el.style.zIndex = mini.getMaxZIndex();
        mini.setX(this.el, x);
        mini.setY(this.el, y);

        this.setVisible(true);

        if (this.hideAction == "mouseout") {
            mini.on(document, "mousemove", this.__OnBodyMouseMove, this);
        }
        var sf = this;
        this._doShadow();

        this._doModal();

        //_shim
        this._doShim();

        mini.layoutIFrames(this.el);
        //mini.repaint(this.el);
        this.isPopup = true;

        //mini.on(document, "topmousedown", this.__OnBodyMouseDown, this);

        mini.on(document, "mousedown", this.__OnBodyMouseDown, this);
        //mini.on(document, "mousewheel", this.__OnBodyMouseWheel, this);
        mini.on(window, "resize", this.__OnWindowResize, this);

        this.fire("Open");
    },
    open: function () {
        this.show();
    },
    close: function () {
        this.hide();
    },
    hide: function () {

        if (!this.el) return;
        if (this.popupEl) mini.removeClass(this.popupEl, this.popupEl.popupCls);
        if (this._popupEl) mini.removeClass(this._popupEl, this._popupEl.popupCls);
        this._popupEl = null;
        jQuery(this._modalEl).remove();
        //jQuery(this.shadowEl).remove();
        if (this.shadowEl) this.shadowEl.style.display = "none";
        if (this._shimEl) this._shimEl.style.display = "none";
        mini.un(document, "mousemove", this.__OnBodyMouseMove, this);
        mini.un(document, "mousedown", this.__OnBodyMouseDown, this);
        //mini.un(document, "topmousedown", this.__OnBodyMouseDown, this);
        mini.un(window, "resize", this.__OnWindowResize, this);

        this.setVisible(false);

        this.isPopup = false;


        this.fire("Close");
    },

    setPopupEl: function (el) {
        el = mini.byId(el);
        if (!el) return;
        this._unbindPopupEl();
        this.popupEl = el;
        this._bindPopupEl();
    },

    setPopupCls: function (value) {
        this.popupCls = value;
    },
    setShowAction: function (value) {
        this.showAction = value;
    },
    setHideAction: function (value) {
        this.hideAction = value;
    },
    setShowDelay: function (value) {
        this.showDelay = value;
    },
    setHideDelay: function (value) {
        this.hideDelay = value;
    },

    setXAlign: function (value) {
        this.xAlign = value;
    },
    setYAlign: function (value) {
        this.yAlign = value;
    },
    setxOffset: function (value) {
        value = parseInt(value);
        if (isNaN(value)) value = 0;
        this.xOffset = value;
    },
    setyOffset: function (value) {
        value = parseInt(value);
        if (isNaN(value)) value = 0;
        this.yOffset = value;
    },

    setShowModal: function (value) {
        this.showModal = value;
    },
    setShowShadow: function (value) {

        this.showShadow = value;
    },

    setMinWidth: function (value) {
        if (isNaN(value)) return;
        this.minWidth = value;
    },
    setMinHeight: function (value) {
        if (isNaN(value)) return;
        this.minHeight = value;
    },
    setMaxWidth: function (value) {
        if (isNaN(value)) return;
        this.maxWidth = value;
    },
    setMaxHeight: function (value) {
        if (isNaN(value)) return;
        this.maxHeight = value;
    },

    setAllowDrag: function (value) {
        this.allowDrag = value;
        mini.removeClass(this.el, this._dragCls);
        if (value) {
            mini.addClass(this.el, this._dragCls);
        }
    },
    setAllowResize: function (value) {
        this.allowResize = value;
        mini.removeClass(this.el, this._resizeCls);
        if (value) {
            mini.addClass(this.el, this._resizeCls);
        }
    },
    /////////////////////////////////

    __OnLeftClick: function (e) {
        if (this._inAniming) return;
        if (this.showAction != "leftclick") return;
        var allowPopup = jQuery(this.popupEl).attr("allowPopup");
        if (String(allowPopup) == "false") return;
        this.doShow(e);
    },
    __OnRightClick: function (e) {
        if (this._inAniming) return;
        if (this.showAction != "rightclick") return;
        var allowPopup = jQuery(this.popupEl).attr("allowPopup");
        if (String(allowPopup) == "false") return;

        e.preventDefault();
        this.doShow(e);

    },
    __OnMouseOver: function (e) {
        if (this._inAniming) return;
        if (this.showAction != "mouseover") return;
        var allowPopup = jQuery(this.popupEl).attr("allowPopup");
        if (String(allowPopup) == "false") return;

        clearTimeout(this._hideTimer);
        this._hideTimer = null;


        if (this.isPopup) return;


        var sf = this;
        this._showTimer = setTimeout(function () {
            sf.doShow(e);
        }, this.showDelay);
    },
    __OnBodyMouseMove: function (e) {
        if (this.hideAction != "mouseout") return;
        this._tryHide(e);
    },

    __OnBodyMouseDown: function (e) {
        if (this.hideAction != "outerclick") return;
        if (!this.isPopup) return;

        //return;
        if (jQuery(e.target).closest('.mini-popup')[0]) return;

        if (this.within(e)
        //if (mini.isAncestor(this.el, e.target)
            || (this.popupEl && mini.isAncestor(this.popupEl, e.target))
        ) {
        } else {
            this.doHide(e);
        }
    },
    _tryHide: function (e) {
        if (mini.isAncestor(this.el, e.target)
            || (this.popupEl && mini.isAncestor(this.popupEl, e.target))
        ) {
        } else {
            clearTimeout(this._showTimer);
            this._showTimer = null;
            if (this._hideTimer) return;

            var sf = this;
            this._hideTimer = setTimeout(function () {
                sf.doHide(e);
            }, this.hideDelay);

        }
    },
    __OnWindowResize: function (e) {
        if (this.isDisplay() && !mini.isIE6) {
            this._doModal();
        }
    },
    within: function (e) {
        if (mini.isAncestor(this.el, e.target)) return true;
        var controls = mini.getChildControls(this);

        for (var i = 0, l = controls.length; i < l; i++) {
            var c = controls[i];
            //if (mini.isAncestor(c.el, e.target)) return true;
            if (c.within(e)) return true;
        }

        return false;
    }
};

mini.copyTo(mini.Popup.prototype, mini.Popup_prototype);


/////////////////////////////////////////////////////////////////////////////////////////////////////

//function hideAllPopup() {
//    var jq = $(".mini-popup, .mini-menu");
//    jq.each(function () {
//    
//        var popup = mini.get(this);
//        if (popup && popup.visible) popup.hide();
//    });
//}

//if (hasOn) {
//    var topWin = mini.getTopWindow();
//    if (topWin) {
//        jQuery(topWin.document).on("topmousedown", function (event, doc) {

//            ///if(location.href.indexOf("menubar.html") != -1) alert(123)

//            //if(location.href.indexOf("menubar") != -1) debugger
//            //hideAllPopup();

//            if (doc == document) {
//                //if (location.href.indexOf("menubar.html") != -1) alert(123)
//            } else {
//                //if (location.href.indexOf("menubar.html") != -1) alert(222)
//                jQuery(document).trigger("mousedown");
//            }
//        });
//        jQuery(document).on("mousedown", function (event) {
//            //try{
//            var $ = topWin.jQuery;
//            if ($) {
//                $(topWin.document).trigger("topmousedown", [document]);
//            }
//        });
//    }

//}

(function () {
if (hasOn) {
    var topWin = mini.getTopWindow();
    if (topWin) {
        function _topmousedown(event, doc) {
            if (doc == document) {
            } else {
                jQuery(document).trigger("mousedown");
            }
        }
        jQuery(topWin.document).on("topmousedown", _topmousedown);

        function _mousedown(event) {
            var $ = topWin.jQuery;
            if ($) {
                $(topWin.document).trigger("topmousedown", [document]);
            }
        }
        jQuery(document).on("mousedown", _mousedown);


        jQuery(window).on("unload", function () {
            jQuery(topWin.document).off("topmousedown", _topmousedown);
            jQuery(document).off("mousedown", _mousedown);
        });
    }
}

})();

/**
* jQuery MiniUI v3.0
* 
* Web Site : http://www.miniui.com
*
* Commercial License : http://www.miniui.com/license
*
* Copyright(c) 2012 All Rights Reserved. Shanghai PusSoft Co., Ltd (上海普加软件有限公司) [ services@plusoft.com.cn ]. 
* 
*/

//mini.Button = mini.Control.extend({
//    type: 'button',
//    tag: '',
//    init: function () {
//        
//    }
//});

mini.Button = function () {
    
    mini.Button.superclass.constructor.apply(this, arguments);

}

mini.extend(mini.Button, mini.Control, {
    //_tagName: "a",

    text: "",
    iconCls: "",
    iconStyle: "",
    plain: false,

    checkOnClick: false,
    checked: false,
    groupName: "",

    img: "",

    _plainCls: "mini-button-plain",
    _hoverCls: "mini-button-hover",
    _pressedCls: "mini-button-pressed",
    _checkedCls: "mini-button-checked",
    _disabledCls: "mini-button-disabled",

    allowCls: "",

    _clearBorder: false,

    set: function (kv) {
        if (typeof kv == 'string') {
            return this;
        }

        this._allowUpdate = kv.text || kv.iconStyle || kv.iconCls || kv.iconPosition;

        mini.Button.superclass.set.call(this, kv);

        if (this._allowUpdate === false) {
            this._allowUpdate = true;
            this.doUpdate();
        }

        return this;
    },
    uiCls: "mini-button",
    _create: function () {
        this.el = document.createElement("a");

        this.el.className = "mini-button mini-state-default mini-corner-all";
        this.el.hideFocus = true;
        this.el.href = "javascript:void(0)";
        //this.el.onclick = function () { return false; };

        this.doUpdate();
    },
    _initEvents: function () {
        mini._BindEvents(function () {
            mini_onOne(this.el, "mousedown", this.__OnMouseDown, this);
            mini_onOne(this.el, "click", this.__OnClick, this);

            //            mini.on(this.el, "mousedown", this.__OnMouseDown, this);
            //            mini.on(this.el, "click", this.__OnClick, this);

            //            var jq = jQuery(this.el);
            //            jq.hover(function () {
            //                jq.addClass("mini-state-hover");
            //            },
            //            function () {
            //                jq.addClass("mini-state-hover");
            //            });
        }, this);
    },

    //    init: function () {
    //        var me = this;
    //        if (me.plain) me.setPlain(true);
    //    },

    destroy: function (removeEl) {
        if (this.el) {
            this.el.onclick = null;
            this.el.onmousedown = null;
        }
        if (this.menu) this.menu.owner = null;
        this.menu = null;

        //$(this.el).off();
        //$(this.el).remove();
        //this.el = null;
        //        this.destroyed = true;

        mini.Button.superclass.destroy.call(this, removeEl);
    },

    doUpdate: function () {
        if (this._allowUpdate === false) return;
        //var jq = jQuery(this.el);

        var cls = "", text = this.text;
        var hasIcon = this.iconStyle || this.iconCls || this.img;

        if (hasIcon && text) {
            cls = " mini-button-icon-text ";
        } else if (hasIcon && text === "") {
            cls = " mini-button-icon-only ";
            text = "&nbsp;";
        } else {
            if (text == "") text = "&nbsp;";
        }

        var iconStyle = this.iconStyle || "";
        if (!iconStyle && this.img) iconStyle = 'background-image:url(' + this.img + ')';

        //icon作为独立span加入到mini-button-text内
        var iconHtml = '';
        if (hasIcon) {
            iconHtml = '<span class="mini-button-icon mini-icon mini-iconfont ' + this.iconCls + '" style="' + iconStyle + '"></span>';
        }

        //iconHtml = "";

        text = '<span class="mini-button-text">' + text + '</span>';
        var s = '<span class="mini-button-inner ' + cls + '">' + iconHtml + text + '</span>';
        //var s = '<span class="mini-button-text ' + cls + '">' + text + '</span>' + iconHtml;

        if (this.allowCls) {
            s = s + '<span class="mini-button-allow mini-icon ' + this.allowCls + '"></span>';
        }
        //this.el.innerHTML = '<i></i>' + s;
        this.el.innerHTML = s;

    },
    href: "",
    setHref: function (value) {
        this.href = value;
        this.el.href = value;
        var el = this.el;
        setTimeout(function () {
            el.onclick = null;
        }, 100);
    },
    getHref: function () {
        return this.href;
    },
    target: "",
    setTarget: function (value) {
        this.target = value;
        this.el.target = value;
    },
    getTarget: function () {
        return this.target;
    },
    setText: function (value) {
        if (this.text != value) {
            this.text = value;
            this.doUpdate();
        }
    },
    getText: function () {
        return this.text;
    },
    setIconCls: function (value) {
        this.iconCls = value;
        this.doUpdate();
    },
    getIconCls: function () {
        return this.iconCls;
    },
    setIconStyle: function (value) {
        this.iconStyle = value;
        this.doUpdate();
    },
    getIconStyle: function () {
        return this.iconStyle;
    },

    setImg: function (value) {
        this.img = value;
        this.doUpdate();
    },
    getImg: function () {
        return this.img;
    },
    setIconPosition: function (value) {
        this.iconPosition = "left";
        this.doUpdate();
    },
    getIconPosition: function () {
        return this.iconPosition;
    },

    setPlain: function (value) {
        this.plain = value;
        if (value) this.addCls(this._plainCls);
        else this.removeCls(this._plainCls);
    },
    getPlain: function () {
        return this.plain;
    },
    setGroupName: function (value) {
        this.groupName = value;
    },
    getGroupName: function () {
        return this.groupName;
    },
    setCheckOnClick: function (value) {
        this.checkOnClick = value;
    },
    getCheckOnClick: function () {
        return this.checkOnClick;
    },
    setChecked: function (value) {

        var fire = this.checked != value;
        this.checked = value;
        if (value) this.addCls(this._checkedCls);
        else this.removeCls(this._checkedCls);
        if (fire) {
            this.fire("CheckedChanged");
        }
    },
    getChecked: function () {
        return this.checked;
    },
    doClick: function () {
        this.__OnClick(null);
    },
    /////////////////////////
    __OnClick: function (e) {
        if (!this.href && e) {
            e.preventDefault();
        }
        if (this.readOnly || this.enabled == false) return;
        this.focus();
        if (this.checkOnClick) {
            if (this.groupName) {
                var groupName = this.groupName;
                var buttons = mini.findControls(function (control) {
                    if (control.type == "button" && control.groupName == groupName) return true;
                });
                if (buttons.length > 0) {
                    for (var i = 0, l = buttons.length; i < l; i++) {
                        var button = buttons[i];
                        if (button != this) button.setChecked(false);
                    }
                    this.setChecked(true);
                } else {
                    this.setChecked(!this.checked);
                }
            } else {
                this.setChecked(!this.checked);
            }
        }

        this.fire("click", {
            htmlEvent: e
        });
        //return false;
    },
    __OnMouseDown: function (e) {
        if (this.isReadOnly()) return;

        this.addCls(this._pressedCls);
        mini.on(document, "mouseup", this.__OnDocMouseUp, this);
    },
    __OnDocMouseUp: function (e) {
        this.removeCls(this._pressedCls);
        mini.un(document, "mouseup", this.__OnDocMouseUp, this);
    },
    onClick: function (fn, scope) {
        this.on("click", fn, scope);
    },
    ////////////////////////////////
    getAttrs: function (el) {
        var attrs = mini.Button.superclass.getAttrs.call(this, el);
        //return attrs;
        attrs.text = el.innerHTML;
        mini._ParseString(el, attrs,
            ["text", "href", "iconCls", "iconStyle", "iconPosition", "groupName", "menu",
                "onclick", "oncheckedchanged", "target", "img"
             ]
        );
        mini._ParseBool(el, attrs,
            ["plain", "checkOnClick", "checked"
             ]
        );
        return attrs;
    }
});
mini.regClass(mini.Button, "button");

/* MenuButton 
-----------------------------------------------------------------------------*/

mini.MenuButton = function () {

    mini.MenuButton.superclass.constructor.apply(this, arguments);
}
mini.extend(mini.MenuButton, mini.Button, {
    uiCls: "mini-menubutton",
    allowCls: "mini-button-menu",
    setMenu: function (value) {

        if (mini.isArray(value)) {
            value = {
                type: "menu",
                items: value
            };
        }
        if (typeof value == "string") {
            var el = mini.byId(value);
            if (!el) return;

            mini.parse(value);
            value = mini.get(value);
        }

        if (this.menu !== value) {
            this.menu = mini.getAndCreate(value);
            this.menu.setPopupEl(this.el);
            this.menu.setPopupCls("mini-button-popup");
            this.menu.setShowAction("leftclick");
            this.menu.setHideAction("outerclick");
            this.menu.setXAlign("left");
            this.menu.setYAlign("below");

            this.menu.hide();
            this.menu.owner = this;

            this.menu.addCls("mini-menu-open");

            var me = this;
            this.menu.on("BeforeOpen", function (e) {     
                       
                if (me.split && !jQuery(e.htmlEvent.target).closest('.mini-button-split')[0]) {
                    e.cancel = true;
                }
            });
        }
    },
    setEnabled: function (value) {
        this.enabled = value;
        if (value) {
            this.removeCls(this._disabledCls);
        } else {
            this.addCls(this._disabledCls);
        }
        //this.el.allowPopup = !!value;
        jQuery(this.el).attr("allowPopup", !!value)
    }
});
mini.regClass(mini.MenuButton, "menubutton");

/* SplitButton 
-----------------------------------------------------------------------------*/

mini.SplitButton = function () {
    mini.SplitButton.superclass.constructor.apply(this, arguments);
}
mini.extend(mini.SplitButton, mini.MenuButton, {
    split: true,
    uiCls: "mini-splitbutton",
    allowCls: "mini-button-split",

    __OnClick: function (e) {
        var me = this;
        if (me.split && jQuery(e.target).closest('.mini-button-split')[0]) {
            return;
        }
        mini.SplitButton.superclass.__OnClick.call(this, e);
    }
});
mini.regClass(mini.SplitButton, "splitbutton");
/**
* jQuery MiniUI v3.0
* 
* Web Site : http://www.miniui.com
*
* Commercial License : http://www.miniui.com/license
*
* Copyright(c) 2012 All Rights Reserved. Shanghai PusSoft Co., Ltd (上海普加软件有限公司) [ services@plusoft.com.cn ]. 
* 
*/

mini.CheckBox = function () {
    mini.CheckBox.superclass.constructor.apply(this, arguments);

}
mini.extend(mini.CheckBox, mini.Control, {
    formField: true,
    _clearText: false, //form.reset/clear的时候，是否自动清除文本

    text: "",
    checked: false,
    defaultValue: false,

    trueValue: true,
    falseValue: false,

    checkedCls: "mini-checkbox-checked",

    set: function (kv) {
        if (typeof kv == 'string') {
            return this;
        }
        var me = this;

        if (!mini.isNull(kv.trueValue)) {
            me.setTrueValue(kv.trueValue);
            delete kv.trueValue;
        }
        if (!mini.isNull(kv.falseValue)) {
            me.setFalseValue(kv.falseValue);
            delete kv.falseValue;
        }

        mini.CheckBox.superclass.set.call(this, kv);


        return this;
    },

    uiCls: "mini-checkbox",
    _create: function () {
        var ckid = this.uid + "$check";
        this.el = document.createElement("span");
        //this.el.tabIndex = 0;
        this.el.className = "mini-checkbox";
        this.el.innerHTML = '<input id="' + ckid + '" name="' + this.id + '" type="checkbox" class="mini-checkbox-check"><span class="mini-checkbox-icon mini-icon" tabIndex="0"></span><label for="' + ckid + '" onclick="return false;">' + this.text + '</label>';

        this._checkEl = this.el.firstChild;
        this._labelEl = this.el.lastChild;
        //this._iconEl = this.el.childNodes[1];
    },
    destroy: function (removeEl) {
        if (this._checkEl) {
            this._checkEl.onmouseup = null;
            this._checkEl.onclick = null;
            this._checkEl = null;
        }
        mini.CheckBox.superclass.destroy.call(this, removeEl);
    },
    _initEvents: function () {
        mini._BindEvents(function () {
            mini.on(this.el, "click", this.__onClick, this);

            var me = this;
            mini.on(this.el, "keyup", function (event) {
                if (event.keyCode == 32) {
                    jQuery(event.target).click();
                }
            });

            this._checkEl.onmouseup = function () { return false; }
            var sf = this;
            this._checkEl.onclick = function () { if (sf.isReadOnly()) return false }

            this._checkEl.checked = this.checked;

        }, this);

    },
    setName: function (value) {
        this.name = value;
        mini.setAttr(this._checkEl, "name", this.name);
    },
    setText: function (value) {
        if (this.text !== value) {
            this.text = value;

            this._labelEl.innerHTML = value;
        }
    },
    getText: function () {
        return this.text;
    },
    setChecked: function (value) {
        if (value === true) value = true;
        //else if (value === this.trueValue) value = true;
        else if (String(value) == String(this.trueValue)) value = true;
        else if (value == "true") value = true;
        else if (value == "True") value = true;
        else if (String(value) === "1") value = true;
        else if (value == "Y") value = true;
        else value = false;

        if (this.checked !== value) {
            this.checked = !!value;
            this._checkEl.checked = this.checked;

            this.value = this.getValue();
        }

        var el = jQuery(this.el);
        if (this.checked) {
            el.addClass(this.checkedCls);
        } else {
            el.removeClass(this.checkedCls);
        }

    },
    getChecked: function () {
        return this.checked;
    },
    setValue: function (value) {

        if (this.checked !== value) {
            this.setChecked(value);
            this.value = this.getValue();
        }
    },
    getValue: function () {
        return String(this.checked == true ? this.trueValue : this.falseValue);
    },
    getFormValue: function () {
        return this.getValue();
    },
    setTrueValue: function (value) {
        this._checkEl.value = value;
        this.trueValue = value;
    },
    getTrueValue: function () {
        return this.trueValue;
    },
    setFalseValue: function (value) {
        this.falseValue = value;
    },
    getFalseValue: function () {
        return this.falseValue;
    },
    /////////////////////////////
    __onClick: function (e) {

        if (this.isReadOnly()) return;

        this.setChecked(!this.checked);

        this.fire("checkedchanged", { checked: this.checked });
        this.fire("valuechanged", { value: this.getValue() });

        this.fire("click", e, this);

    },
    ////////////////////////////////
    getAttrs: function (el) {
        var attrs = mini.CheckBox.superclass.getAttrs.call(this, el);
        var jq = jQuery(el);

        attrs.text = el.innerHTML;
        mini._ParseString(el, attrs,
            ["text", "oncheckedchanged", "onclick", "onvaluechanged"
             ]
        );

        mini._ParseBool(el, attrs,
            ["enabled"
             ]
        );

        var checked = mini.getAttr(el, "checked");

        if (checked) {
            attrs.checked = (checked == "true" || checked == "checked") ? true : false;
        }

        var trueValue = jq.attr("trueValue");
        if (trueValue) {
            attrs.trueValue = trueValue;
            trueValue = parseInt(trueValue);
            if (!isNaN(trueValue)) {
                attrs.trueValue = trueValue;
            }
        }
        var falseValue = jq.attr("falseValue");
        if (falseValue) {
            attrs.falseValue = falseValue;
            falseValue = parseInt(falseValue);
            if (!isNaN(falseValue)) {
                attrs.falseValue = falseValue;
            }
        }

        return attrs;
    }
});

mini.regClass(mini.CheckBox, "checkbox");
/**
* jQuery MiniUI v3.0
* 
* Web Site : http://www.miniui.com
*
* Commercial License : http://www.miniui.com/license
*
* Copyright(c) 2012 All Rights Reserved. Shanghai PusSoft Co., Ltd (上海普加软件有限公司) [ services@plusoft.com.cn ]. 
* 
*/

//fix： 360 用户名、密码打开页面时重置BUG
jQuery(function () {
    setTimeout(function () {
        var comps = mini.getComponents();
        for (var i = 0, l = comps.length; i < l; i++) {
            var comp = comps[i];
            if (comp instanceof mini.TextBox) {
                var val = comp.getTextEl().value;
                if (comp.value !== val) {
                    comp.value = val;
                }
            }
        }
    }, 300);
});

mini.TextBox = function () {
    mini.TextBox.superclass.constructor.apply(this, arguments);

    //this._textEl.maxLenght = this.maxLength;
}
mini.extend(mini.TextBox, mini.ValidatorBase, {
    name: "",
    formField: true,

    selectOnFocus: false,

    allowInput: true,

    minWidth: 10,
    minHeight: 15,

    maxLength: 5000,

    emptyText: "",

    text: "",
    value: "",
    defaultValue: "",

    //width: 125,
    height: 21,

    _emptyCls: "mini-textbox-empty",
    _focusCls: "mini-textbox-focus",
    _disabledCls: "mini-textbox-disabled",

    uiCls: "mini-textbox",
    _InputType: "text",
    _create: function () {
        var html = '<input  type="' + this._InputType + '" class="mini-textbox-input" autocomplete="off"/>';
        if (this._InputType == "textarea") {
            html = '<textarea  class="mini-textbox-input" autocomplete="off"/></textarea>';
        }
        html = '<span class="mini-textbox-border mini-corner-all">' + html + '</span>';
        html += '<input type="hidden"/>';

        this.el = document.createElement("span");
        this.el.className = "mini-textbox";
        this.el.innerHTML = html;


        this._borderEl = this.el.firstChild;
        this._textEl = this._borderEl.firstChild;
        this._valueEl = this._borderEl.lastChild;

        //        var me = this;
        //        //alert(me._textEl.value);
        //        setTimeout(function () {
        //            alert(me._textEl.value);
        //        }, 1);

        //        me._textEl.value = "";
        this._doEmpty();

        //        $(this.el).on("click", function () {
        //            this.fire("aaa");
        //        });

        //        $(this.el).find(".mini-textbox-input").on("blur", function (event) {
        //            this.value = this.value.replace(/[0-9]+/g, '');
        //        });
    },
    _initEvents: function () {

        mini._BindEvents(function () {

            mini_onOne(this._textEl, "drop", this.__OnDropText, this);
            mini_onOne(this._textEl, "change", this.__OnInputTextChanged, this);
            mini_onOne(this._textEl, "focus", this.__OnFocus, this);
            mini_onOne(this.el, "mousedown", this.__OnMouseDown, this);

            //                        mini.on(this._textEl, "drop", this.__OnDropText, this);
            //                        mini.on(this._textEl, "change", this.__OnInputTextChanged, this);
            //                        mini.on(this._textEl, "focus", this.__OnFocus, this);
            //                        mini.on(this.el, "mousedown", this.__OnMouseDown, this);

            var v = this.value;
            this.value = null;
            if (this.el) {
                this.setValue(v);
            }


        }, this);
        this.on("validation", this.__OnValidation, this); //一定要放这里
    },
    _inputEventsInited: false,
    _initInputEvents: function () {
        if (this._inputEventsInited) return;
        this._inputEventsInited = true;

        //出于优化考虑：将blur, change, keydown, keyup, keypress等时间，在focus的时候，才进行绑定
        //在_initEvents的时候，只绑定focus就可以了
        mini.on(this._textEl, "blur", this.__OnBlur, this);
        mini.on(this._textEl, "keydown", this.__OnInputKeyDown, this);
        mini.on(this._textEl, "keyup", this.__OnInputKeyUp, this);
        mini.on(this._textEl, "keypress", this.__OnInputKeyPress, this);

        mini_onOne(this.el, "click", this.__OnClick, this);
    },
    destroy: function (removeEl) {
        if (this.el) {

            this.el.onmousedown = null;
        }
        if (this._textEl) {
            var textEl = this._textEl;

            if (textEl._placeholder_label) {
                textEl._placeholder_label.onmousedown = null;
                textEl._placeholder_label = null;
            }

            textEl.onpropertychange = textEl.ondrop = textEl.onchange = textEl.onfocus = null;
            mini.clearEvent(textEl);
            this._textEl = null;
        }
        if (this._valueEl) {
            mini.clearEvent(this._valueEl);
            this._valueEl = null;
        }
        mini.TextBox.superclass.destroy.call(this, removeEl);
    },

    doLayout: function () {
        if (this._doLabelLayout) {
            this._labelLayout();
        }
    },

    setHeight: function (value) {
        if (parseInt(value) == value) value += "px";
        this.height = value;
        if (this._InputType == "textarea") {
            this.el.style.height = value;
            this.doLayout();
        }
    },

    setName: function (value) {
        if (this.name != value) {
            this.name = value;
            //this._valueEl.name = value;
            if (this._valueEl) mini.setAttr(this._valueEl, "name", this.name);
        }
    },
    setValue: function (value) {
        if (value === null || value === undefined) value = "";
        value = String(value);
        if (value.length > this.maxLength) {
            value = value.substring(0, this.maxLength);
        }
        //if (this.value !== value) {
        this.value = value;
        this._valueEl.value = this._textEl.value = value;
        this._doEmpty();
        //}
        //        else {
        //            this._textEl.value = value;
        //        }
    },
    getValue: function () {
        //return this._textEl.value;
        return this.value;
    },
    setText: function (val) {
        if (mini.isNull(val)) val = "";
        this._textEl.value = val;
    },
    getText: function () {
        return this._textEl.value;
    },
    getFormValue: function () {
        var value = this.value;
        if (value === null || value === undefined) value = "";
        return String(value);
    },
    setAllowInput: function (value) {
        if (this.allowInput != value) {
            this.allowInput = value;
            this.doUpdate();
        }
    },
    getAllowInput: function () {
        return this.allowInput;
    },
    _placeholdered: false,
    _doEmpty: function () {
        this._textEl.placeholder = this.emptyText;
        if (this.emptyText) {
            mini._placeholder(this._textEl);
        }

        //        if (this._focused) return;
        //        if (this.value == "" && this.emptyText) {
        //            this._textEl.value = this.emptyText;
        //            mini.addClass(this.el, this._emptyCls);
        //        } else {
        //            mini.removeClass(this.el, this._emptyCls);
        //        }
    },
    setEmptyText: function (value) {
        if (this.emptyText != value) {
            this.emptyText = value;
            this._doEmpty();
        }
    },
    getEmptyText: function () {
        return this.emptyText;
    },
    setMaxLength: function (value) {

        this.maxLength = value;
        //
        mini.setAttr(this._textEl, "maxLength", value);

        if (this._InputType == "textarea" && mini.isIE) {
            mini.on(this._textEl, "keyup", this.__OnMaxLengthKeyUp, this);
            mini.on(this._textEl, "keypress", this.__OnMaxLengthKeyUp, this);
            mini.on(this._textEl, "paste", this.__OnPaste, this);
        }
    },
    __OnPaste: function (e) {
        var sf = this;

        setTimeout(function () {

            var value = sf._textEl.value;
            if (value.length > sf.maxLength) {
                sf._textEl.value = value.substring(0, sf.maxLength);

            }
            //sf._OnValueChanged();

            sf.__OnInputTextChanged();

        }, 0)
    },
    __OnMaxLengthKeyUp: function (e) {

        if (this._textEl.value.length >= this.maxLength) {

            this.__OnPaste(e);
            e.preventDefault();

        }
    },
    getMaxLength: function () {
        return this.maxLength;
    },
    setReadOnly: function (value) {
        if (this.readOnly != value) {
            this.readOnly = value;
            this.doUpdate();
        }
    },
    setEnabled: function (value) {
        if (this.enabled != value) {
            this.enabled = value;
            this.doUpdate();
            //this._tryValidate();
        }
    },
    doUpdate: function () {
        if (this.enabled) {
            this.removeCls(this._disabledCls);
        } else {
            this.addCls(this._disabledCls);
        }
        if (this.isReadOnly() || this.allowInput == false) {
            this._textEl.readOnly = true;
            mini.addClass(this.el, "mini-textbox-readOnly");
        } else {

            this._textEl.readOnly = false;
            mini.removeClass(this.el, "mini-textbox-readOnly");
        }
        if (this.required) {
            this.addCls(this._requiredCls);
        } else {
            this.removeCls(this._requiredCls);
        }

        if (this.enabled) {
            this._textEl.disabled = false;
        } else {
            this._textEl.disabled = true;
        }
    },
    focus: function () {

        var that = this;
        setTimeout(function () {
            try {
                that._textEl.focus();

                if (mini.isIE) {
                    var o = that._textEl.createTextRange();
                    o.collapse(false);
                    o.select();
                }
            } catch (e) {
            }
        }, 10);
    },
    blur: function () {
        try {
            this._textEl.blur();
        } catch (e) {
        }
    },
    selectText: function () {

        var me = this;
        function doSelect() {
            try {
                me._textEl.select();
            } catch (ex) { }
        }
        doSelect();
        //        setTimeout(function () {
        //            doSelect();
        //        }, 30);
    },
    getTextEl: function () {
        return this._textEl;
    },
    getInputText: function () {
        return this._textEl.value;
    },
    setSelectOnFocus: function (value) {
        this.selectOnFocus = value;
    },
    getSelectOnFocus: function (value) {
        return this.selectOnFocus;
    },
    ///////////////////////////////////////////////
    _errorIconEl: null,
    getErrorIconEl: function () {
        if (!this._errorIconEl) {
            this._errorIconEl = mini.append(this.el, '<span class="mini-errorIcon"></span>');
        }
        return this._errorIconEl;
    },
    _RemoveErrorIcon: function () {
        if (this._errorIconEl) {
            var el = this._errorIconEl;
            jQuery(el).remove();
        }
        this._errorIconEl = null;
    },
    ///////////////////////////////////////////////
    __OnClick: function (e) {
        if (!this.enabled) return;
        this.fire("click", { htmlEvent: e });
    },
    __OnMouseDown: function (e) {

        var sf = this;

        //加这行代码
        if (this._InputType == "textarea") return;

        if (!mini.isAncestor(this._textEl, e.target)) {
            setTimeout(function () {
                sf.focus();
                mini.selectRange(sf._textEl, 10000, 10000);
            }, 1);
        } else {
            setTimeout(function () {
                try {
                    sf._textEl.focus();
                } catch (ex) { }
            }, 1);
        }
    },
    __OnInputTextChanged: function (e, valid) {
        //this._inputChangedTime = new Date();

        var value = this.value;
        this._oldValue = value;
        this.setValue(this._textEl.value);

        if (value !== this.getValue() || valid === true) {
            this._OnValueChanged();
        }
    },
    __OnDropText: function (e) {
        var me = this;
        setTimeout(function () {
            me.__OnInputTextChanged(e);
        }, 0);
    },
    __OnInputKeyDown: function (e) {
        var ex = { htmlEvent: e };
        this.fire("keydown", ex);

        if (e.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) {
            return false;
        }
        if (e.keyCode == 27 || e.keyCode == 13 || e.keyCode == 9) {
            //if (e.keyCode == 13 || e.keyCode == 9) {
            if (this._InputType == "textarea" && e.keyCode == 13) {    //不影响textarea换行
            }
            else {
                //this.__OnInputTextChanged(null, true);
                this.__OnInputTextChanged(null);

                this._textEl.blur();
                this._textEl.focus();

                if (e.keyCode == 13) {
                    //e.preventDefault();

                    var me = this;
                    //setTimeout(function () {
                    me.fire("enter", ex);
                    //}, 10);
                }
            }

        }
        if (e.keyCode == 27) {
            e.preventDefault();
        }
        //        if (e.keyCode == 13 && this._InputType == "textarea") {
        //            if (e.ctrlKey == false) {
        //                e.stopPropagation();
        //            } else {
        //                this.__OnInputTextChanged();
        //            }
        //        }
    },
    __OnInputKeyUp: function (e) {

        this.fire("keyup", { htmlEvent: e });
    },
    __OnInputKeyPress: function (e) {
        this.fire("keypress", { htmlEvent: e });
    },
    __OnFocus: function (e) {
        //e.preventDefault();
        this.doUpdate();
        //if (this.isReadOnly() || this.allowInput == false) return;        
        if (this.isReadOnly()) {
            return;
        }
        this._focused = true;
        this.addCls(this._focusCls);
        this._initInputEvents();

        //        mini.removeClass(this.el, this._emptyCls);
        //        if (this.emptyText && this._textEl.value == this.emptyText) {
        //            this._textEl.value = "";
        //            this._textEl.select();
        //        }

        if (this.selectOnFocus) {
            var me = this;
            setTimeout(function () {
                me.selectText();
            }, 1);
        }

        this.fire("focus", { htmlEvent: e });
    },
    __OnBlur: function (e) {
        this._focused = false;
        var sf = this;
        setTimeout(function () {
            if (sf._focused == false) {
                sf.removeCls(sf._focusCls);
            }
        }, 2);

        //        if (this.emptyText && this._textEl.value == "") {
        //            this._textEl.value = this.emptyText;
        //            mini.addClass(this.el, this._emptyCls);
        //        }

        //        if (!this._inputChangedTime || new Date() - this._inputChangedTime < 50) {
        //            this.__OnInputTextChanged();
        //        }
        //        this._inputChangedTime = null;

        this.fire("blur", { htmlEvent: e });


        if (this.validateOnLeave && this.isEditable()) {
            this._tryValidate();
        }
    },
    inputStyle: "",
    setInputStyle: function (value) {
        this.inputStyle = value;
        mini.setStyle(this._textEl, value);
    },
    ///////////////////////////////////////////////
    getAttrs: function (el) {
        var attrs = mini.TextBox.superclass.getAttrs.call(this, el);
        var jq = jQuery(el);

        mini._ParseString(el, attrs,
            ["value", "text", "emptyText", "inputStyle",
            "onenter", "onkeydown", "onkeyup", "onkeypress", "onclick",
            "maxLengthErrorText", "minLengthErrorText", "onfocus", "onblur",

            "vtype",
            "emailErrorText", "urlErrorText", "floatErrorText", "intErrorText", "dateErrorText",
            "minErrorText", "maxErrorText", "rangeLengthErrorText", "rangeErrorText", "rangeCharErrorText"
             ]
        );
        mini._ParseBool(el, attrs,
            ["allowInput", "selectOnFocus"
             ]
        );
        mini._ParseInt(el, attrs,
            ["maxLength", "minLength", "minHeight", "minWidth"
             ]
        );

        //alert(attrs.maxLength);



        return attrs;
    },
    ///////////////////////////////////////
    vtype: "",  //email;url;float;int;date:yyyy-MM-dd;max:20,min:10,maxLength:100,minLength:5;rangeLength:0,5;range:0,5
    setVtype: function (value) {
        this.vtype = value;
    },
    getVtype: function () {
        return this.vtype;
    },
    __OnValidation: function (e) {

        if (e.isValid == false) return;

        mini._ValidateVType(this.vtype, e.value, e, this);
        //        var vtypes = this.vtype.split(";");
        //        for (var i = 0, l = vtypes.length; i < l; i++) {
        //            var vtype = vtypes[i].trim();
        //            var vv = vtype.split(":");
        //            var vt = vv[0];
        //            var args = vv[1];
        //            if (args) args = args.split(",");
        //            else args = [];

        //            var fn = mini.VTypes[vt]; //this["__" + vt];
        //            if (fn) {
        //                var isValid = fn(e.value, args);
        //                if (isValid !== true) {
        //                    e.isValid = false;
        //                    var vtext = vv[0] + "ErrorText";
        //                    e.errorText = this[vtext] || mini.VTypes[vtext] || "";
        //                    e.errorText = String.format(e.errorText, args[0], args[1], args[2], args[3], args[4]);
        //                    break;
        //                }
        //            }
        //        }
    },
    setEmailErrorText: function (value) {
        this.emailErrorText = value;
    },
    getEmailErrorText: function () {
        return this.emailErrorText;
    },
    setUrlErrorText: function (value) {
        this.urlErrorText = value;
    },
    getUrlErrorText: function () {
        return this.urlErrorText;
    },
    setFloatErrorText: function (value) {
        this.floatErrorText = value;
    },
    getFloatErrorText: function () {
        return this.floatErrorText;
    },
    setIntErrorText: function (value) {
        this.intErrorText = value;
    },
    getIntErrorText: function () {
        return this.intErrorText;
    },
    setDateErrorText: function (value) {
        this.dateErrorText = value;
    },
    getDateErrorText: function () {
        return this.dateErrorText;
    },
    setMaxLengthErrorText: function (value) {
        this.maxLengthErrorText = value;
    },
    getMaxLengthErrorText: function () {
        return this.maxLengthErrorText;
    },
    setMinLengthErrorText: function (value) {
        this.minLengthErrorText = value;
    },
    getMinLengthErrorText: function () {
        return this.minLengthErrorText;
    },
    setMaxErrorText: function (value) {
        this.maxErrorText = value;
    },
    getMaxErrorText: function () {
        return this.maxErrorText;
    },
    setMinErrorText: function (value) {
        this.minErrorText = value;
    },
    getMinErrorText: function () {
        return this.minErrorText;
    },
    setRangeLengthErrorText: function (value) {
        this.rangeLengthErrorText = value;
    },
    getRangeLengthErrorText: function () {
        return this.rangeLengthErrorText;
    },
    setRangeCharErrorText: function (value) {
        this.rangeCharErrorText = value;
    },
    getRangeCharErrorText: function () {
        return this.rangeCharErrorText;
    },
    setRangeErrorText: function (value) {
        this.rangeErrorText = value;
    },
    getRangeErrorText: function () {
        return this.rangeErrorText;
    }

});

mini.regClass(mini.TextBox, 'textbox');


mini.Password = function () {
    mini.Password.superclass.constructor.apply(this, arguments);
}
mini.extend(mini.Password, mini.TextBox, {
    uiCls: "mini-password",
    _InputType: "password",
//    setEmptyText: function (value) {
//        this.emptyText = "";
//    },
    getValue: function () {
        return this._textEl.value;
    }
});
mini.regClass(mini.Password, 'password');


mini.TextArea = function () {
    mini.TextArea.superclass.constructor.apply(this, arguments);
}
mini.extend(mini.TextArea, mini.TextBox, {
    maxLength: 10000000,

    //width: 180,
    //height: 50,
    height: '',
    minHeight: 50,
    _InputType: "textarea",
    uiCls: "mini-textarea",
    doLayout: function () {
        if (!this.canLayout()) return;
        mini.TextArea.superclass.doLayout.call(this);

        var h = mini.getHeight(this.el);

        //if (mini.isIE6 || mini.isIE) {
        if (mini.isIE6) {
            mini.setHeight(this._borderEl, h);
        }
        h -= 2;
        if (h < 0) h = 0;
        this._textEl.style.height = h + "px";
    }
});
mini.regClass(mini.TextArea, 'textarea');


/**
* jQuery MiniUI v3.0
* 
* Web Site : http://www.miniui.com
*
* Commercial License : http://www.miniui.com/license
*
* Copyright(c) 2012 All Rights Reserved. Shanghai PusSoft Co., Ltd (上海普加软件有限公司) [ services@plusoft.com.cn ]. 
* 
*/

mini.ButtonEdit = function () {
    
    mini.ButtonEdit.superclass.constructor.apply(this, arguments);
    //this.addCls("mini-buttonedit");

    var isReadOnly = this.isReadOnly();
    if (isReadOnly || this.allowInput == false) {
        this._textEl.readOnly = true;
    }
    if (this.enabled == false) {
        this.addCls(this._disabledCls);
    }
    if (isReadOnly) {
        this.addCls(this._readOnlyCls);
    }
    if (this.required) {
        this.addCls(this._requiredCls);
    }
}
mini.extend(mini.ButtonEdit, mini.ValidatorBase, {
    name: "",
    formField: true,

    selectOnFocus: false,

    showButton: true,

    buttonToolTip: "",
    closeToolTip: "",

    showClose: false,

    emptyText: "",

    defaultValue: "",
    defaultText: "",
    value: "",
    text: "",

    maxLength: 1000,
    minLength: 0,

    //width: 125,
    height: 21,

    inputAsValue: true,    //输入内容作为value

    allowInput: true,   //区别于readOnly
    _noInputCls: "mini-buttonedit-noInput",
    _readOnlyCls: "mini-buttonedit-readOnly",
    _disabledCls: "mini-buttonedit-disabled",

    _emptyCls: "mini-buttonedit-empty",
    _focusCls: "mini-buttonedit-focus",

    //_buttonDisabledCls: "mini-buttonedit-button-disabled",
    _buttonCls: "mini-buttonedit-button",
    _buttonHoverCls: "mini-buttonedit-button-hover",
    _buttonPressedCls: "mini-buttonedit-button-pressed",

    _closeCls: "mini-buttonedit-close",

    set: function (kv) {
        if (typeof kv == 'string') {
            return this;
        }

        var value = kv.value;
        delete kv.value;
        var text = kv.text;
        delete kv.text;

        this._allowUpdate = !(kv.enabled == false || kv.allowInput == false || kv.readOnly);

        mini.ButtonEdit.superclass.set.call(this, kv);

        if (this._allowUpdate === false) {
            this._allowUpdate = true;
            this.doUpdate();
        }

        if (!mini.isNull(text)) {
            this.setText(text);
        }
        if (!mini.isNull(value)) {
            this.setValue(value);
        }
        return this;
    },
    uiCls: "mini-buttonedit",

    //    addButton: function (button) {
    //        
    //    },

    //    removeButton: function (button) {
    //        
    //    },

    setButtons: function (val) {
        var me = this;

        jQuery(".mini-buttonedit-button:not(.mini-buttonedit-trigger)", this.el).remove();

        me.buttons = val || [];

        var html = '';

        function createButton(button) {
            html += me._createButtonHtml(button.name, button.iconCls, button.tooltip);
        }

        for (var i = 0, l = me.buttons.length; i < l; i++) {
            var button = me.buttons[i];
            if (!button.name) button.name = "button" + i;
            createButton(button);
        }

        mini.append(me._buttonsEl, html);

        me._doInputLayout(false);

    },

    getButtons: function () {
        return this.buttons || [];
    },

    getButtonByName: function (name) {
        var buttons = this.getButtons();
        for (var i = 0, l = buttons.length; i < l; i++) {
            var o = buttons[i];
            if (o.name && o.name == name) return o;
        }
        return null;
    },

    _createButtonHtml: function (name, iconCls, tooltip) {
        name = name || "";
        iconCls = iconCls || "";
        tooltip = tooltip || '';
        var hover = 'onmouseover="mini.addClass(this, \'' + this._buttonHoverCls + '\');" '
                        + 'onmouseout="mini.removeClass(this, \'' + this._buttonHoverCls + '\');"';
        return '<span title="' + tooltip + '" name="' + name + '" class="mini-buttonedit-button mini-buttonedit-' + name + '" ' + hover + '><span class="mini-buttonedit-icon mini-icon mini-iconfont ' + iconCls + '"></span></span>';
    },

    _getButtonsHTML: function () {

        var s = '<span class="mini-buttonedit-close mini-icon" name="close"></span>' + this._getButtonHtml('trigger', '', this.buttonToolTip);
        return '<span class="mini-buttonedit-buttons">' + s + '</span>';
    },

    _getButtonHtml: function (name, iconCls, tooltip) {
        return this._createButtonHtml(name, iconCls, tooltip);
    },

    _create: function () {
        this.el = document.createElement("span");
        this.el.className = "mini-buttonedit";

        var s = this._getButtonsHTML();
        this.el.innerHTML = '<span class="mini-buttonedit-border mini-corner-all"><input type="text" class="mini-buttonedit-input" autocomplete="off"/>'
                            + s + '</span><input name="' + this.name + '" type="hidden"/>'

        this._borderEl = this.el.firstChild;
        this._textEl = this._borderEl.firstChild;
        this._valueEl = this.el.lastChild;

        this._buttonsEl = this._borderEl.lastChild;
        this._buttonEl = this._buttonsEl.lastChild;
        this._closeEl = this._buttonEl.previousSibling;

        this._doEmpty();
    },
    destroy: function (removeEl) {

        if (this._textEl) {
            this._textEl.onchange = this._textEl.onfocus = null;
            mini.clearEvent(this._textEl);
            //jQuery(this._textEl).remove();
            this._textEl = null;
        }

        this._borderEl = this._buttonsEl = this._buttonEl = this._closeEl = this._valueEl = null;

        mini.ButtonEdit.superclass.destroy.call(this, removeEl);
    },
    _deferSetText: true,
    _initEvents: function () {
        mini._BindEvents(function () {
            mini_onOne(this.el, "mousedown", this.__OnMouseDown, this);
            mini_onOne(this._textEl, "focus", this.__OnFocus, this);
            mini_onOne(this._textEl, "change", this.__OnInputTextChanged, this);


            //            mini.on(this.el, "mousedown", this.__OnMouseDown, this);
            //            mini.on(this._textEl, "focus", this.__OnFocus, this);
            //            mini.on(this._textEl, "change", this.__OnInputTextChanged, this);

            var v = this.text;
            this.text = null;
            if (this.el) {
                if (this._deferSetText) {
                    this.setText(v);
                }
            }


            if (mini.isIE) {

                mini.on(this._textEl, "input", this.__input, this);
            }


        }, this);

    },
    __input: function () { },


    _inputEventsInited: false,
    _initInputEvents: function () {
        if (this._inputEventsInited) return;
        this._inputEventsInited = true;

        mini.on(this.el, "click", this.__OnClick, this);
        mini.on(this._textEl, "blur", this.__OnBlur, this);
        mini.on(this._textEl, "keydown", this.__OnInputKeyDown, this);
        mini.on(this._textEl, "keyup", this.__OnInputKeyUp, this);
        mini.on(this._textEl, "keypress", this.__OnInputKeyPress, this);
    },
    _buttonWidth: 20,
    _closeWidth: 20,
    _doInputLayout: function (doLayout) {

        this._buttonEl.style.display = this.showButton ? "inline-block" : "none";
        this._buttonEl.title = this.buttonToolTip;

        if (this._closeEl) {
            this._closeEl.style.display = this.showClose ? "inline-block" : "none";
            this._closeEl.title = this.closeToolTip;
        }

        if (mini.isNull(mini.ButtonEdit._paddingOffset)) {
            var padding = mini.getPaddings(this._borderEl);
            mini.ButtonEdit._paddingOffset = padding.left;
            //alert(mini.ButtonEdit._paddingOffset)
        }

        var buttonsWidth = this._buttonsEl.offsetWidth;

        var w = buttonsWidth + (buttonsWidth > 0 ? 0 : mini.ButtonEdit._paddingOffset);
        if (w == 2) {
            this._noLayout = true;
        } else {
            this._noLayout = false;
        }
        this._borderEl.style["paddingRight"] = w + "px";
        if (doLayout !== false) {
            this.doLayout();
        }
    },
    doLayout: function () {
        //        if (this.id == "xxx") {
        //            //alert(1);
        //            debugger
        //        }

        if (this._noLayout) {
            this._doInputLayout(false);
        }
        if (this._doLabelLayout) {
            this._labelLayout();
        }

    },
    setHeight: function (value) {
        if (parseInt(value) == value) value += "px";
        this.height = value;

    },
    focus: function () {
        try {
            this._textEl.focus();
            var sf = this;
            setTimeout(function () {
                if (sf._focused) {
                    sf._textEl.focus();
                }
                //sf._doEmpty();
            }, 10);
        } catch (e) {
        }
    },
    blur: function () {
        try {
            this._textEl.blur();
            //sf._doEmpty();
        } catch (e) {
        }
    },
    selectText: function () {
        this._textEl.select();
    },

    getTextEl: function () {
        return this._textEl;
    },
    setName: function (value) {
        this.name = value;
        //this._valueEl.name = value;
        if (this._valueEl) mini.setAttr(this._valueEl, "name", this.name);
    },
    setText: function (value) {

        if (value === null || value === undefined) value = "";
        var fire = this.text !== value;
        this.text = value;
        this._textEl.value = value;

        this._doEmpty();
    },
    getText: function () {
        var text = this._textEl.value;
        return text;
        //return text != this.emptyText ? text : "";
    },
    //value是类型值，formattedValue是字符串
    setValue: function (value) {
        if (value === null || value === undefined) value = "";
        var fire = this.value !== value;
        this.value = value;
        this._valueEl.value = this.getFormValue();
        //this._doEmpty();
    },
    getValue: function () {
        return this.value;
    },
    getFormValue: function () {
        var value = this.value;
        if (value === null || value === undefined) value = "";
        return String(value);
    },

    _doEmpty: function () {
        this._textEl.placeholder = this.emptyText;
        if (this.emptyText) {
            mini._placeholder(this._textEl);
        }
        //        mini.removeClass(this.el, this._emptyCls);
        //        if (this._focused) {
        //            if (this._textEl.value == this.emptyText) {
        //                this._textEl.value = "";
        //            }
        //        } else {
        //            if (this._textEl.value == "") {
        //                this._textEl.value = this.emptyText;
        //                mini.addClass(this.el, this._emptyCls);
        //            }
        //        }
    },
    setEmptyText: function (value) {
        if (this.emptyText != value) {
            this.emptyText = value;
            this._doEmpty();
        }
    },
    getEmptyText: function () {
        return this.emptyText;
    },

    setMaxLength: function (value) {
        value = parseInt(value);
        if (isNaN(value)) return;
        this.maxLength = value;
        this._textEl.maxLength = value;
    },
    getMaxLength: function () {
        return this.maxLength;
    },
    setMinLength: function (value) {
        value = parseInt(value);
        if (isNaN(value)) return;
        this.minLength = value;
    },
    getMinLength: function () {
        return this.minLength;
    },
    setEnabled: function (value) {
        mini.ButtonEdit.superclass.setEnabled.call(this, value);

        //this._tryValidate();
    },
    _doReadOnly: function () {
        var readOnly = this.isReadOnly();
        if (readOnly || this.allowInput == false) {
            this._textEl.readOnly = true;
        } else {
            this._textEl.readOnly = false;
        }
        if (readOnly) {
            this.addCls(this._readOnlyCls);
        } else {
            this.removeCls(this._readOnlyCls);
        }
        if (this.allowInput) {
            this.removeCls(this._noInputCls);
        } else {
            this.addCls(this._noInputCls);
        }

        if (this.enabled) {
            this._textEl.disabled = false;
        } else {
            this._textEl.disabled = true;
        }
    },
    setAllowInput: function (value) {
        this.allowInput = value;
        this._doReadOnly();
    },
    getAllowInput: function () {
        return this.allowInput;
    },
    setInputAsValue: function (value) {
        this.inputAsValue = value;
    },
    getInputAsValue: function () {
        return this.inputAsValue;
    },

    autoClear: false,
    setAutoClear: function (value) {
        this.autoClear = value;
    },
    getAutoClear: function () {
        return this.autoClear;
    },

    setButtonToolTip: function (value) {
        this.buttonToolTip = value;
    },
    getButtonToolTip: function () {
        return this.buttonToolTip;
    },

    ////////////////////////////////////   
    //    _errorCls: "mini-buttonedit-error",
    //    _invalidCls: "mini-buttonedit-invalid", //当none时，加上_errorCls，比如红色边框，黄色背景
    _errorIconEl: null,
    getErrorIconEl: function () {
        if (!this._errorIconEl) {
            this._errorIconEl = mini.append(this.el, '<span class="mini-errorIcon"></span>');
        }
        return this._errorIconEl;
    },
    _RemoveErrorIcon: function () {
        if (this._errorIconEl) {
            var el = this._errorIconEl;
            jQuery(el).remove();
        }
        this._errorIconEl = null;
    },
    ///////////////////////////////////////////
    __OnClick: function (e) {

        if (this.enabled == false) return;
        this.fire("click", { htmlEvent: e });

        if (this.isReadOnly()) return;

        if (!mini.isAncestor(this._borderEl, e.target)) return;

        var t = new Date();

        if (mini.isAncestor(this._buttonEl, e.target)) {
            this._OnButtonClick(e);
        }


        if (mini.findParent(e.target, this._closeCls)) {


            if (this.autoClear) {

                if ((this.value && this.value !== 0) || this.text !== "") {
                    this._oldValue = this.value;
                    this.setValue("");
                    this.setText("");
                    this._OnValueChanged();
                    //this.focus();
                }
            }

            this.fire("closeclick", { htmlEvent: e });
        }

        //        t = new Date() - t;
        //        if (t > 500) {
        //            var me = this;
        //            me.blur();
        //            setTimeout(function () {
        //                me.blur();
        //            }, 10);
        //        }
        //this._doEmpty();

        //处理新增的buttons
        this._handlerButtonElClick(e);

    },

    _handlerButtonElClick: function (e) {
        var btnEl = mini.findParent(e.target, "mini-buttonedit-button")
        if (btnEl && btnEl != this._buttonEl && btnEl != this._closeEl) {
            var name = jQuery(btnEl).attr("name");
            var button = this.getButtonByName(name);
            //alert(button.name);

            var event = { sender: this, button: button, htmlEvent: e };
            if (button.handler) button.handler(event);
            //if (button.handler) button.handler.call(this, event);            
        }
    },

    __OnMouseDown: function (e) {
        //this._doEmpty();
        if (this.isReadOnly() || this.enabled == false) return;

        if (!mini.isAncestor(this._borderEl, e.target)) return;

        if (!mini.isAncestor(this._textEl, e.target)) {
            this._clickTarget = e.target;
            var sf = this;
            setTimeout(function () {
                sf.focus();
                mini.selectRange(sf._textEl, 1000, 1000);
            }, 1);
            if (mini.isAncestor(this._buttonEl, e.target)) {
                var up = mini.findParent(e.target, "mini-buttonedit-up");
                var down = mini.findParent(e.target, "mini-buttonedit-down");
                if (up) {
                    mini.addClass(up, this._buttonPressedCls);
                    this._OnButtonMouseDown(e, "up");
                }
                else if (down) {
                    mini.addClass(down, this._buttonPressedCls);
                    this._OnButtonMouseDown(e, "down");
                } else {
                    mini.addClass(this._buttonEl, this._buttonPressedCls);
                    this._OnButtonMouseDown(e);
                }
            }
            mini.on(document, "mouseup", this.__OnDocMouseUp, this);

            var btnEl = mini.findParent(e.target, "mini-buttonedit-button")
            if (btnEl) {
                mini.addClass(btnEl, this._buttonPressedCls);
            }

        }
    },
    __OnDocMouseUp: function (e) {

        this._clickTarget = null;
        //        var tds = this._innerEl.firstChild.rows[0].cells;
        //        var sf = this;
        //        setTimeout(function () {
        //            for (var i = 0, l = tds.length; i < l; i++) {
        //                var td = tds[i];
        //                mini.removeClass(td, sf._buttonPressedCls);
        //                var button = sf.getButton(parseInt(td.id));
        //                if (button && button.type == "spin") {
        //                    mini.removeClass(td.firstChild.firstChild, sf._buttonPressedCls);
        //                    mini.removeClass(td.firstChild.lastChild, sf._buttonPressedCls);
        //                }
        //            }
        //            mini.removeClass(sf.el, sf._pressedCls);
        //        }, 80);
        var me = this;
        setTimeout(function () {
            var doms = me._buttonEl.getElementsByTagName("*");
            for (var i = 0, l = doms.length; i < l; i++) {
                mini.removeClass(doms[i], me._buttonPressedCls);
            }
            mini.removeClass(me._buttonEl, me._buttonPressedCls);
            mini.removeClass(me.el, me._pressedCls);

            jQuery(".mini-buttonedit-button", me._buttonsEl).removeClass(me._buttonPressedCls);

        }, 80);
        mini.un(document, "mouseup", this.__OnDocMouseUp, this);
    },
    __OnFocus: function (e) {

        this.doUpdate();
        this._initInputEvents();
        if (this.isReadOnly()) return;
        //if (this.isReadOnly() || this.allowInput == false) return;
        this._focused = true;
        this.addCls(this._focusCls);

        //this._doEmpty();

        if (this.selectOnFocus) {
            this.selectText();
        }
        this.fire("focus", { htmlEvent: e });
    },
    __doFocusCls: function () {
        if (this._focused == false) {
            this.removeCls(this._focusCls);
        }
    },
    __fireBlur: function (e) {

        //if (this._clickTarget) return;

        var sf = this;

        function f() {
            if (sf._focused == false) {
                sf.removeCls(sf._focusCls);

                if (sf.validateOnLeave && sf.isEditable()) {
                    //if (sf.validateOnLeave) {
                    sf._tryValidate();
                }

                this.fire("blur", { htmlEvent: e });
            }
            //this._doEmpty();
        }
        setTimeout(function () {
            f.call(sf);
        }, 2);

    },
    __OnBlur: function (e) {

        var me = this;

        me._focused = false;
        setTimeout(function () {
            me.__fireBlur(e);

        }, 10);


    },
    __OnInputKeyDown: function (e) {
        var ex = { htmlEvent: e };
        this.fire("keydown", ex);
        if (e.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) {
            return false;
        }
        //if (e.keyCode == 13 || e.keyCode == 9) {
        if (e.keyCode == 27 || e.keyCode == 13 || e.keyCode == 9) {
            var sf = this;
            sf.__OnInputTextChanged(null);
            if (e.keyCode == 13) {
                var me = this;
                //setTimeout(function () {
                me.fire("enter", ex);
                //}, 10);
            }
        }
        if (e.keyCode == 27) {
            e.preventDefault();
        }
    },
    __OnInputTextChanged: function () {

        var v = this._textEl.value;
        if (v == this.text) return;
        var value = this.getValue();
        //if (this.inputAsValue) {
        
        this._oldValue = value;

        this.setText(v);
        if (this.inputAsValue) {
            this.setValue(v);
            if (value !== this.getFormValue()) {
                this._OnValueChanged();
            }
        }
        //}
    },
    __OnInputKeyUp: function (e) {
        this.fire("keyup", { htmlEvent: e });
    },
    __OnInputKeyPress: function (e) {
        this.fire("keypress", { htmlEvent: e });
    },
    ////////////////////////////////////////////     
    _OnButtonClick: function (htmlEvent) {
        var e = {
            htmlEvent: htmlEvent,
            cancel: false
        };
        this.fire("beforebuttonclick", e);
        if (e.cancel == true) return;

        this.fire("buttonclick", e);
    },
    _OnButtonMouseDown: function (htmlEvent, spinType) {
        this.focus();
        this.addCls(this._focusCls);

        this.fire("buttonmousedown", {
            htmlEvent: htmlEvent,
            spinType: spinType
        });
    },

    onButtonClick: function (fn, scope) {
        this.on("buttonclick", fn, scope);
    },
    onButtonMouseDown: function (fn, scope) {
        this.on("buttonmousedown", fn, scope);
    },
    onTextChanged: function (fn, scope) {
        this.on("textchanged", fn, scope);
    },

    textName: "",
    setTextName: function (value) {
        this.textName = value;
        if (this._textEl) mini.setAttr(this._textEl, "name", this.textName);
    },
    getTextName: function () {
        return this.textName;
    },

    setSelectOnFocus: function (value) {
        this.selectOnFocus = value;
    },
    getSelectOnFocus: function (value) {
        return this.selectOnFocus;
    },
    setShowClose: function (value) {
        this.showClose = value;
        this._doInputLayout();
    },
    getShowClose: function (value) {
        return this.showClose;
    },

    setShowButton: function (value) {
        this.showButton = value;
        this._doInputLayout();
    },
    getShowButton: function () {
        return this.showButton;
    },

    inputStyle: "",
    setInputStyle: function (value) {
        this.inputStyle = value;
        mini.setStyle(this._textEl, value);
    },

    getAttrs: function (el) {
        var attrs = mini.ButtonEdit.superclass.getAttrs.call(this, el);
        var jq = jQuery(el);

        mini._ParseString(el, attrs,
            ["value", "text", "textName", "emptyText", "inputStyle", "defaultText",
            "onenter", "onkeydown", "onkeyup", "onkeypress",
            "onbuttonclick", "onbuttonmousedown", "ontextchanged", "onfocus", "onblur",
            "oncloseclick", "onclick", "buttons", "buttonToolTip"
             ]
        );
        mini._ParseBool(el, attrs,
            ["allowInput", "inputAsValue", "selectOnFocus", "showClose", "showButton", "autoClear"
             ]
        );
        mini._ParseInt(el, attrs,
            ["maxLength", "minLength"
             ]
        );


        //buttons
        var buttons = attrs["buttons"];
        if (buttons) {
            buttons = window["ev" + "al"]("(" + buttons + ")");
            attrs.buttons = buttons || null;
            //attrs.buttons = null;
        }

        return attrs;
    }
});
mini.regClass(mini.ButtonEdit, 'buttonedit');





/**
* jQuery MiniUI v3.0
* 
* Web Site : http://www.miniui.com
*
* Commercial License : http://www.miniui.com/license
*
* Copyright(c) 2012 All Rights Reserved. Shanghai PusSoft Co., Ltd (上海普加软件有限公司) [ services@plusoft.com.cn ]. 
* 
*/

mini.PopupEdit = function () {
    mini.PopupEdit.superclass.constructor.apply(this, arguments);
    this._createPopup();

    this.el.className += ' mini-popupedit';
}
mini.extend(mini.PopupEdit, mini.ButtonEdit, {
    uiCls: "mini-popupedit",
    popup: null,

    popupCls: "mini-buttonedit-popup",

    _hoverCls: "mini-buttonedit-hover",
    _pressedCls: "mini-buttonedit-pressed",

    _destroyPopup: true,
    destroy: function (removeEl) {
        if (this.isShowPopup()) {
            this.hidePopup();
        }
        if (this.popup) {
            if (this._destroyPopup) {

                this.popup.destroy();
            }
            this.popup = null;
        }
        if (this._popupInner) {
            this._popupInner.owner = null;
            this._popupInner = null;
        }

        if (this.el) {
            this.el.onmouseover = this.el.onmouseout = null;
        }

        this._listbox = this.tree = null;

        mini.PopupEdit.superclass.destroy.call(this, removeEl);
    },
    _initEvents: function () {
        mini.PopupEdit.superclass._initEvents.call(this);

        mini._BindEvents(function () {
            mini_onOne(this.el, "mouseover", this.__OnMouseOver, this);
            mini_onOne(this.el, "mouseout", this.__OnMouseOut, this);

            //            mini.on(this.el, "mouseover", this.__OnMouseOver, this);
            //            mini.on(this.el, "mouseout", this.__OnMouseOut, this);
        }, this);
    },
    //    _initButtons: function () {
    //        this.buttons = [];

    //        var button = this.createButton({ cls: "mini-buttonedit-popup", iconCls: "mini-buttonedit-icons-popup", name: "popup" });
    //        this.buttons.push(button);
    //    },
    __OnBlur: function (e) {
        //debugger
        this._focused = false;
        if (this._clickTarget && mini.isAncestor(this.el, this._clickTarget)) return;
        if (this.isShowPopup()) return;
        mini.PopupEdit.superclass.__OnBlur.call(this, e);
    },
    __OnMouseOver: function (e) {
        if (this.isReadOnly() || this.allowInput) return;
        if (mini.findParent(e.target, "mini-buttonedit-border")) {

            var btnEl = mini.findParent(e.target, "mini-buttonedit-button");
            if (btnEl && btnEl != this._buttonEl) {
            } else {

                this.addCls(this._hoverCls);

            }
        }
    },
    __OnMouseOut: function (e) {
        if (this.isReadOnly() || this.allowInput) return;
        this.removeCls(this._hoverCls);
    },
    __OnMouseDown: function (e) {
        if (this.isReadOnly()) return;
        mini.PopupEdit.superclass.__OnMouseDown.call(this, e);
        if (this.allowInput == false && mini.findParent(e.target, "mini-buttonedit-border")) {
            mini.addClass(this.el, this._pressedCls);

            mini.on(document, "mouseup", this.__OnDocMouseUp, this);
        }
    },
    __OnInputKeyDown: function (e) {
        this.fire("keydown", { htmlEvent: e });
        if (e.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) {
            return false;
        }
        if (e.keyCode == 9) {
            this.hidePopup();
            return;
        }
        if (e.keyCode == 27) {
            this.hidePopup();
            return;
        }
        if (e.keyCode == 13) {
            this.fire("enter");
        }

        if (this.isShowPopup()) {

            if (e.keyCode == 13 || e.keyCode == 27) {
                e.stopPropagation();
            }
        }
    },

    __OnInputTextChanged: function (e) {
        if (this.isShowPopup()) {
            this._textChanged = true;
        } else {
            this._textChanged = false;
            mini.PopupEdit.superclass.__OnInputTextChanged.call(this, e);
        }
    },

    ///////////////////////////////////////////////////
    within: function (e) {
        if (mini.isAncestor(this.el, e.target)) return true;
        if (this.popup.within(e)) return true;
        return false;
    },

    popupWidth: "100%", //"","100%", 200
    popupMinWidth: 50,
    popupMaxWidth: 2000,

    popupHeight: "",   // "", 30
    popupMinHeight: 30,
    popupMaxHeight: 2000,

    showPopupOnClick: false,     //不管是否可编辑，true的时候点击就showPopup

    setPopup: function (value) {
        if (typeof value == "string") {
            mini.parse(value);
            value = mini.get(value);
        }
        var p = mini.getAndCreate(value);
        if (!p) return;
        p.setVisible(false);
        //p.render(this.popup._contentEl);
        this._popupInner = p;

        p.owner = this;

        p.on("beforebuttonclick", this.__OnPopupButtonClick, this);
    },

    getPopup: function () {
        if (!this.popup) {
            this._createPopup();
        }
        return this.popup;
    },

    _createPopup: function () {
        this.popup = new mini.Popup();
        this.popup.setShowAction("none");
        this.popup.setHideAction("outerclick");
        this.popup.setPopupEl(this.el);

        this.popup.on("BeforeClose", this.__OnPopupBeforeClose, this);
        this.popup.on("close", this.__OnPopupClose, this);
        mini.on(this.popup.el, "keydown", this.__OnPopupKeyDown, this);
    },

    __OnPopupClose: function (e) {

    },

    __OnPopupBeforeClose: function (e) {
        if (this.within(e.htmlEvent)) e.cancel = true;
        else {
            this._unDocumentMousewheel();
        }
    },

    __OnPopupKeyDown: function (e) {
    },

    showPopup: function () {
        
        var ex = { cancel: false };
        if (this._firebeforeshowpopup !== false) {
            this.fire("beforeshowpopup", ex);
            if (ex.cancel == true) return false;
        }

        var popup = this.getPopup();

        //if (this.id == "cityCombo") debugger
        this._syncShowPopup();

        popup.on("Close", this.__OnPopupHide, this);

        this._onDocumentMousewheel();

        this.fire("showpopup");
    },
    _unDocumentMousewheel: function () {
        mini.un(document, "mousewheel", this.__OnDocumentMousewheel, this);
        this._mousewheelXY = null;

    },
    _onDocumentMousewheel: function () {
        this._unDocumentMousewheel();

        this._mousewheelXY = mini.getXY(this.el);
        mini.on(document, "mousewheel", this.__OnDocumentMousewheel, this);

    },
    __OnDocumentMousewheel: function (e) {
        var that = this;


        function doWheel() {
            if (!that.isShowPopup()) return;
            var box = that._mousewheelXY;
            var xy = mini.getXY(that.el);
            if (box[0] != xy[0] || box[1] != xy[1]) {
                that.hidePopup();
            } else {
                setTimeout(doWheel, 300);
            }
            //document.title = new Date().getTime();
        }

        setTimeout(doWheel, 300);
    },

    //    doLayout: function () {
    //        //if(this.id == 'lookup2') debugger
    //        mini.PopupEdit.superclass.doLayout.call(this);
    //        if (this.isShowPopup()) {
    //            //this._syncShowPopup();
    //        }
    //    },

    _syncShowPopup: function () {
        var popup = this.getPopup();

        if (this._popupInner && this._popupInner.el.parentNode != this.popup._contentEl) {
            this.popup._contentEl.appendChild(this._popupInner.el);
            this._popupInner.setVisible(true);
        }

        var box = mini.getBox(this._borderEl); //this.getBox();

        var w = this.popupWidth;
        if (this.popupWidth == "100%") w = box.width;

        //        popup.el.style.left = "-1000px";
        //        popup.el.style.top = "-1000px";

        popup.show(-1000, -1000);

        popup.setWidth(w);

        var h = parseInt(this.popupHeight);
        if (!isNaN(h)) {
            popup.setHeight(h);
        } else {
            popup.setHeight("auto");
        }


        popup.setMinWidth(this.popupMinWidth);
        popup.setMinHeight(this.popupMinHeight);
        popup.setMaxWidth(this.popupMaxWidth);
        popup.setMaxHeight(this.popupMaxHeight);

        var options = {
            xAlign: "left",
            yAlign: "below",
            outYAlign: "above",
            outXAlign: "right",
            popupCls: this.popupCls,
            alwaysView: this.alwaysView
        };

        this._doShowAtEl(this._borderEl, options);
    },
    _doShowAtEl: function (el, options) {
        var popup = this.getPopup();
        popup.showAtEl(el, options);
    },
    __OnPopupHide: function (e) {
        
        if (this._textChanged) {
            this._textChanged = false;

            this.__OnInputTextChanged();
        }
        this.__doFocusCls();
        this.fire("hidepopup");
    },
    hidePopup: function () {
        
        if (this.isShowPopup()) {
            var popup = this.getPopup();

            popup.close();

            if (this._autoBlur !== false) {
                this.blur();
            }


            //this.fire("hidepopup");
        }
    },
    isShowPopup: function () {
        if (this.popup && this.popup.isDisplay()) return true;
        else return false;
    },

    alwaysView: false,
    setAlwaysView: function (value) {
        this.alwaysView = value;
    },
    getAlwaysView: function () {
        return this.alwaysView;
    },

    setPopupWidth: function (value) {
        this.popupWidth = value;
    },
    setPopupMaxWidth: function (value) {
        this.popupMaxWidth = value;
    },
    setPopupMinWidth: function (value) {
        this.popupMinWidth = value;
    },
    getPopupWidth: function (value) {
        return this.popupWidth;
    },
    getPopupMaxWidth: function (value) {
        return this.popupMaxWidth;
    },
    getPopupMinWidth: function (value) {
        return this.popupMinWidth;
    },
    setPopupHeight: function (value) {
        this.popupHeight = value;
    },
    setPopupMaxHeight: function (value) {
        this.popupMaxHeight = value;
    },
    setPopupMinHeight: function (value) {
        this.popupMinHeight = value;
    },
    getPopupHeight: function (value) {
        return this.popupHeight;
    },
    getPopupMaxHeight: function (value) {
        return this.popupMaxHeight;
    },
    getPopupMinHeight: function (value) {
        return this.popupMinHeight;
    },
    setShowPopupOnClick: function (value) {

        this.showPopupOnClick = value;
    },
    getShowPopupOnClick: function (value) {
        return this.showPopupOnClick;
    },

    __OnClick: function (e) {

        if (this.enabled == false) return;
        this.fire("click", { htmlEvent: e });

        if (this.isReadOnly()) return;

        if (mini.isAncestor(this._buttonEl, e.target)) {
            this._OnButtonClick(e);
        }
        if (mini.findParent(e.target, this._closeCls)) {

            if (this.isShowPopup()) {
                this.hidePopup();
            }

            //            if (this.autoClear) {
            //                this.setValue("");
            //                this.setText("");
            //                //this.focus();
            //            }

            if (this.autoClear) {

                if ((this.value && this.value !== 0) || this.text !== "") {
                    this.setValue("");
                    this.setText("");
                    this._OnValueChanged();
                    //this.focus();
                }
            }

            this.fire("closeclick", { htmlEvent: e });
            return;
        }


        if (this.allowInput == false || mini.isAncestor(this._buttonEl, e.target) || this.showPopupOnClick) {

            var btnEl = mini.findParent(e.target, "mini-buttonedit-button");
            if (btnEl && btnEl != this._buttonEl) {
                //如果点击buttons里面的按钮，则不showPopup

            } else {

                if (this.isShowPopup()) {
                    this.hidePopup();
                    this.focus();
                } else {
                    var sf = this;
                    setTimeout(function () {

                        sf.showPopup();
                    }, 1);
                }
            }
        }

        //处理新增的buttons
        this._handlerButtonElClick(e);

    },
    __OnPopupButtonClick: function (e) {
        if (e.name == "close") {
            this.hidePopup();
        }
        e.cancel = true;
    },
    getAttrs: function (el) {
        var attrs = mini.PopupEdit.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["popupWidth", "popupHeight", "popup", "onshowpopup", "onhidepopup", "onbeforeshowpopup"
             ]
        );
        mini._ParseInt(el, attrs,
            ["popupMinWidth", "popupMaxWidth", "popupMinHeight", "popupMaxHeight"
             ]
        );

        mini._ParseBool(el, attrs,
            ["showPopupOnClick", "alwaysView"
             ]
        );


        return attrs;
    }

});
mini.regClass(mini.PopupEdit, 'popupedit');
/**
* jQuery MiniUI v3.0
* 
* Web Site : http://www.miniui.com
*
* Commercial License : http://www.miniui.com/license
*
* Copyright(c) 2012 All Rights Reserved. Shanghai PusSoft Co., Ltd (上海普加软件有限公司) [ services@plusoft.com.cn ]. 
* 
*/

mini.ComboBox = function () {
    this.data = [];
    this.columns = [];
    mini.ComboBox.superclass.constructor.apply(this, arguments);

    this._initInput();
}
mini.extend(mini.ComboBox, mini.PopupEdit, {
    _initInput: function () {
        var me = this;
        if (isFirefox) {
            this._textEl.oninput = function () {
                me._tryQuery();
            }
        }
    },

    __input: function () {

        if (document.activeElement == this._textEl) {

            this._tryQuery();
        }
    },

    text: '',
    value: '',

    valueField: "id",
    textField: "text",
    dataField: "",

    delimiter: ',',

    multiSelect: false,
    data: [],
    url: "",

    valueInCheckOrder: true,

    columns: [],

    allowInput: false,

    valueFromSelect: false, //值是否只能来自下拉数据

    popupMaxHeight: 200,

    setDelimiter: function (value) {
        this.delimiter = value;
        if (this._listbox) this._listbox.delimiter = value;
    },
    getDelimiter: function () {
        return this.delimiter;
    },

    autoFocusItem: false,
    setAutoFocusItem: function (value) {
        this.autoFocusItem = value;
    },
    getAutoFocusItem: function () {
        return this.autoFocusItem;
    },

    //    config: {
    //        autoFocusItem: false
    //    },


    set: function (kv) {
        if (typeof kv == 'string') {
            return this;
        }

        var text = kv.text;
        delete kv.text;
        var value = kv.value;
        delete kv.value;
        var url = kv.url;
        delete kv.url;
        var data = kv.data;
        delete kv.data;

        mini.ComboBox.superclass.set.call(this, kv);

        if (!mini.isNull(data)) {
            this.setData(data);

            kv.data = data;
        }
        if (!mini.isNull(url)) {
            this.setUrl(url);

            kv.url = url;
        }
        if (!mini.isNull(value)) {
            this.setValue(value);

            kv.value = value;
        }

        if (!mini.isNull(text)) {
            this.setText(text);
        }


        return this;
    },


    uiCls: "mini-combobox",


    _createPopup: function () {
        mini.ComboBox.superclass._createPopup.call(this);

        this._listbox = new mini.ListBox();

        this.listbox = this._listbox;

        this._listbox.delimiter = this.delimiter;
        this._listbox.setBorderStyle("border:0;");
        this._listbox.setStyle("width:100%;height:auto;");
        this._listbox.render(this.popup._contentEl);

        this._listbox.on("beforeitemclick", this.__OnBeforeItemClick, this);
        this._listbox.on("itemclick", this.__OnItemClick, this);
        this._listbox.on("drawcell", this.__OnItemDrawCell, this);

        var me = this;
        this._listbox.on("beforeload", function (e) {
            me.fire("beforeload", e);
        }, this);
        this._listbox.on("preload", function (e) {
            me.fire("preload", e);
        }, this);
        this._listbox.on("load", function (e) {
            me.data = e.data;
            me.fire("load", e);
        }, this);
        this._listbox.on("loaderror", function (e) {
            me.fire("loaderror", e);
        }, this);
    },
    showPopup: function () {
        var ex = { cancel: false };
        this.fire("beforeshowpopup", ex);
        this._firebeforeshowpopup = false;
        if (ex.cancel == true) return;



        //if (this.id == "cityCombo") debugger
        this._listbox.setHeight("auto");
        mini.ComboBox.superclass.showPopup.call(this);
        var h = this.popup.el.style.height;
        if (h == "" || h == "auto") {
            this._listbox.setHeight("auto");
        } else {
            this._listbox.setHeight("100%");
        }

        var me = this;

        if (!me.multiSelect) {
            var jq = jQuery("table .mini-listbox-checkbox", me._listbox.el);

            var display = jq.css("display");
            jq.css("display", "table-cell");
            jq.css("display", display);
            //alert(1);
        }


        this._listbox.setValueInCheckOrder(this.valueInCheckOrder);

        this._listbox.setValue(this.value);

        //        var sf = this;
        //        setTimeout(function () {
        //            mini.repaint(sf._listbox.el);
        //        }, 100);

        if (this.autoFocusItem && (this.value == "" || mini.isNull(this.value))) {
            this._listbox._focusItem(0);
        }
    },

    changeOnSelectMethod: false,

    isSelected: function (record) {
        return this._listbox.isSelected(record);
    },

    _syncValueText: function () {
        var items = this._listbox.getSelecteds();
        var vts = this._listbox.getValueAndText(items);
        this.setValue(vts[0]);
        this.setText(vts[1]);
    },

    selectAll: function () {
        this._listbox.selectAll();
        this._syncValueText();
    },

    deselectAll: function () {
        this._listbox.deselectAll();
        this._syncValueText();
    },

    deselect: function (item) {
        this._listbox.deselect(item);
        this._syncValueText();
        //        var items = this._listbox.getSelecteds();
        //        var vts = this._listbox.getValueAndText(items);
        //        this.setValue(vts[0]);
        //        this.setText(vts[1]);
    },

    select: function (item) {
        this._listbox.deselectAll();
        item = this.getItem(item);
        if (item) {

            this._oldValue = this.getValue();

            this._listbox.select(item);
            this.__OnItemClick({ item: item }, false);

            if (this.changeOnSelectMethod) {
                this._OnValueChanged();
            }
        }
    },
    selects: function (items) {
        if (!items) return;
        var vts = this._listbox.getValueAndText(items);
        this.setValue(vts[0]);

        this._listbox.setValue(this.value);
    },
    getItem: function (item) {
        return typeof item == "object" ? item : this.data[item];
    },
    indexOf: function (item) {
        return this.data.indexOf(item);
    },
    getAt: function (index) {
        return this.data[index];
    },
    load: function (data) {

        if (typeof data == "string") {
            this.setUrl(data);
        } else {
            this.setData(data);
        }
    },
    _eval: function (_) {
        return window["ev" + "al"]('(' + _ + ')');
    },
    setData: function (data) {

        if (typeof data == "string") {
            data = this._eval(data);
            //data = eval('(' + data + ')');
            //data = mini._getMap(data, window);

        }
        if (!mini.isArray(data)) data = [];
        this._listbox.setData(data);
        this.data = this._listbox.data;
        //        var v = this._listbox.getValue();
        //        this.setValue(v);

        this.doDataChange();
        //        var vts = this._listbox.getValueAndText(this.value);
        //        this.text = this._textEl.value = vts[1];
        //        this.setValue(vts[0]);
    },
    getData: function () {
        return this.data;
    },

    clearOnLoad: true,      //当加载时，如果value跟新数据不匹配，则清空

    setClearOnLoad: function (value) {
        this.clearOnLoad = value;
    },
    getClearOnLoad: function () {
        return this.clearOnLoad
    },

    doDataChange: function () {
        var vts = this._listbox.getValueAndText(this.value);
        var value = vts[0],
            text = vts[1];

        if (value === "" && !this.clearOnLoad) {
            value = this.value;
            text = this.text;

            this.value = null;
        }

        this.text = this._textEl.value = text;
        this.setValue(value);
    },

    setUrl: function (url) {
        this.getPopup();

        this._listbox.setUrl(url);
        this.url = this._listbox.url;
        this.data = this._listbox.data;

        this.doDataChange();
    },
    getUrl: function () {
        return this.url;
    },
    setValueField: function (valueField) {
        this.valueField = valueField;
        if (this._listbox) {
            this._listbox.setValueField(valueField);
        }
    },
    getValueField: function () {
        return this.valueField;
    },
    setTextField: function (value) {
        if (this._listbox) this._listbox.setTextField(value);
        this.textField = value;
    },
    getTextField: function () {
        return this.textField;
    },

    pinyinField: "tag",
    setPinyinField: function (value) {
        //if (this._listbox) this._listbox.setPhoneticField(value);
        this.pinyinField = value;
    },
    getPinyinField: function () {
        return this.pinyinField;
    },

    setDisplayField: function (value) {
        this.setTextField(value);
    },
    setDataField: function (value) {
        if (this._listbox) this._listbox.setDataField(value);
        this.dataField = value;
    },
    getDataField: function () {
        return this.dataField;
    },

    setValueInCheckOrder: function (value) {
        this.valueInCheckOrder = value;
        this._listbox.valueInCheckOrder = value;
    },
    getValueInCheckOrder: function () {
        return this.valueInCheckOrder;
    },

    //////////////////////////

    //valueFromSelect默认是false，当setValue("aaa")不存在数据中时，value="aaa", text="aaa"
    //valueFromSelect设置为true时，以上情况 value = "", text = ""

    setValue: function (value) {
        if (mini.isNull(value)) value = "";
        //if (this.value !== value) {
        var vts = this._listbox.getValueAndText(value);
        var v = vts[0], text = vts[1];
        if (text === "" || mini.isNull(text)) text = value;

        if (this.valueFromSelect && (v === "" || mini.isNull(v))) {
            value = text = "";
        }

        //		if (!this.valueFromSelect && v == "") {
        //			value = text = "";
        //		}

        this.value = value;

        this._valueEl.value = this.value;
        this.text = this._textEl.value = text;

        this._doEmpty();


        //        } else {
        //            var vts = this._listbox.getValueAndText(value);
        //            this.text = this._textEl.value = vts[1];
        //        }
    },
    setMultiSelect: function (value) {
        if (this.multiSelect != value) {
            this.multiSelect = value;
            if (this._listbox) {
                this._listbox.setMultiSelect(value);
                this._listbox.setShowCheckBox(value);
            }
        }
    },
    getMultiSelect: function () {
        return this.multiSelect;
    },
    setColumns: function (value) {
        if (!mini.isArray(value)) value = [];
        this.columns = value;
        this._listbox.setColumns(value);
    },
    getColumns: function () {
        return this.columns;
    },
    showNullItem: false,
    setShowNullItem: function (value) {
        if (this.showNullItem != value) {
            this.showNullItem = value;
            this._listbox.setShowNullItem(value);
        }
    },
    getShowNullItem: function () {
        return this.showNullItem;
    },
    setNullItemText: function (value) {
        if (this.nullItemText != value) {
            this.nullItemText = value;
            this._listbox.setNullItemText(value);
        }
    },
    getNullItemText: function () {
        return this.nullItemText;
    },
    setValueFromSelect: function (value) {
        this.valueFromSelect = value;
    },
    getValueFromSelect: function () {
        return this.valueFromSelect;
    },

    _OnValueChanged: function () {
        if (this.validateOnChanged) {
            this._tryValidate();
        }
        var sf = this;

        function changed() {
            var value = sf.getValue();
            var selecteds = sf.getSelecteds();
            var selected = selecteds[0];
            sf.fire("valuechanged", { value: value, selecteds: selecteds, selected: selected, oldValue: sf._oldValue });
        }
        setTimeout(function () {
            changed();
        }, 50);

    },
    getSelecteds: function () {
        return this._listbox.findItems(this.value);
    },
    getSelected: function () {
        return this.getSelecteds()[0];
    },
    __OnItemDrawCell: function (e) {

        this.fire("drawcell", e);
    },

    __OnBeforeItemClick: function (e) {
        var ev = { item: e.item, cancel: false };
        this.fire("beforeitemclick", ev);
        if (ev.cancel) e.cancel = true;
    },

    __OnItemClick: function (e, fire) {

        var ev = { item: e.item, cancel: false };

        if (fire !== false) {
            this.fire("beforeitemclick", ev);
            if (ev.cancel) return;
        }
        //        var v = this._listbox.getValue();
        //        var vts = this._listbox.getValueAndText(v);
        //return;
        var items = this._listbox.getSelecteds();

        var vts = this._listbox.getValueAndText(items);


        //this._stopTextChanged = true;//
        var value = this.getValue();
        this.setValue(vts[0]);
        this.setText(vts[1]);

        this._oldValue = value;

        //        if (mini.isFirefox) {   //FF下修改textEl.value，会激发changed...
        //            this.blur();
        //            this.focus();
        //        }

        if (e) {
            if (fire !== false) {
                if (value != this.getValue()) {
                    var sf = this;
                    setTimeout(function () {
                        sf._OnValueChanged();
                    }, 1);
                }

                if (!this.multiSelect) {
                    this.hidePopup();
                }
                if (!isMobile) {
                    this.focus();
                }


                this.fire("itemclick", { item: e.item });
            }
        }
    },
    __OnInputKeyDown: function (e, userOldText) {
        var ex = { htmlEvent: e };
        this.fire("keydown", ex);


        if (e.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) {
            return false;
        }

        if (e.keyCode == 9) {   //tab
            if (this.isShowPopup()) {
                this._autoBlur = false;
                this.hidePopup();
                delete this._autoBlur
            }
            return;
        }

        if (this.isReadOnly()) return;


        switch (e.keyCode) {
            case 27:        //esc
                e.preventDefault();
                if (this.isShowPopup()) {
                    e.stopPropagation();
                }

                this.hidePopup();
                this.focus();
                break;
            case 13:     //enter                
                if (this.isShowPopup()) {
                    e.preventDefault();
                    e.stopPropagation();

                    var index = this._listbox.getFocusedIndex();
                    var item = this._listbox.getAt(index);
                    if (item && item.enabled !== false) {
                        if (index != -1) {
                            var ev = { item: item, cancel: false };
                            this.fire("beforeitemclick", ev);
                            if (ev.cancel == false) {

                                this._oldValue = this.getValue();

                                if (this.multiSelect) {
                                    //this._listbox.select(item);
                                } else {
                                    this._listbox.deselectAll();
                                    this._listbox.select(item);
                                }
                                var items = this._listbox.getSelecteds();
                                var vts = this._listbox.getValueAndText(items);
                                this.setValue(vts[0]);
                                this.setText(vts[1]);
                                this._OnValueChanged();
                            }
                        }

                    }
                    this.hidePopup();
                    this.focus();
                } else {
                    this.fire("enter", ex);
                }
                break;
            case 37:    //left
                break;
            case 38:    //top      
                e.preventDefault();
                var index = this._listbox.getFocusedIndex();
                if (index == -1) {
                    index = 0;
                    if (!this.multiSelect) {
                        var item = this._listbox.findItems(this.value)[0];
                        if (item) {
                            index = this._listbox.indexOf(item);
                        }
                    }
                }
                if (this.isShowPopup()) {
                    if (!this.multiSelect) {
                        index -= 1;
                        if (index < 0) index = 0;
                        this._listbox._focusItem(index, true);
                    }
                }
                break;
            case 39:    //right
                break;
            case 40:    //bottom               
                e.preventDefault();

                var index = this._listbox.getFocusedIndex();
                if (index == -1) {
                    index = -1;
                    if (!this.multiSelect) {
                        var item = this._listbox.findItems(this.value)[0];
                        if (item) {
                            index = this._listbox.indexOf(item);
                        }
                    }
                }
                if (this.isShowPopup()) {
                    if (!this.multiSelect) {
                        index += 1;
                        if (index > this._listbox.getCount() - 1) index = this._listbox.getCount() - 1;
                        this._listbox._focusItem(index, true);
                    }
                } else {
                    if (this.keyNavEnabled) {
                        this.showPopup();
                        if (!this.multiSelect) {
                            this._listbox._focusItem(index, true);
                        }
                    }
                }
                break;
            default:
                if (this.allowInput == false) {
                } else {
                    this._tryQuery(this._textEl.value);
                }
                break;
        }
    },
    __OnInputKeyUp: function (e) {
        this.fire("keyup", { htmlEvent: e });

        //this.__OnInputKeyDown(e, false);
    },
    __OnInputKeyPress: function (e) {
        this.fire("keypress", { htmlEvent: e });
    },
    _tryQuery: function (oldText) {

        var sf = this;
        setTimeout(function () {
            var text = sf._textEl.value;
            if (text != oldText) {
                sf._doQuery(text);
                //document.title = new Date();
            }
        }, 10);
    },
    _doQuery: function (key) {
        if (!this.autoFilter) return;
        if (this.multiSelect == true) return;
        var view = [];
        //        for (var i = 0, l = this.data.length; i < l; i++) {
        //            var o = this.data[i];
        //            var text = mini._getMap(this.textField, o);
        //            if (typeof text == "string") {
        //                text = text.toUpperCase();
        //                key = key.toUpperCase();
        //                if (text.indexOf(key) != -1) {
        //                    view.push(o);
        //                }
        //            }
        //        }
        key = key.toUpperCase();
        for (var i = 0, l = this.data.length; i < l; i++) {
            var o = this.data[i];
            var text = mini._getMap(this.textField, o);
            var pinyin = mini._getMap(this.pinyinField, o);

            text = text ? String(text).toUpperCase() : "";
            pinyin = pinyin ? String(pinyin).toUpperCase() : "";
            if (text.indexOf(key) != -1 || pinyin.indexOf(key) != -1) {
                view.push(o);
            }
        }
        this._listbox.setData(view);
        this._filtered = true;
        if (key !== "" || this.isShowPopup()) {
            this.showPopup();

            //获取第一条，并focus
            //index = this._listbox.getCount() - 1;
            var index = 0;
            //if(this.getText() == "美") debugger
            if (this._listbox.getShowNullItem()) index = 1;
            var me = this;
            //setTimeout(function () {
            me._listbox._focusItem(index, true);
            //}, 10);
        }
    },
    __OnPopupHide: function (e) {
        //alert(this.focused);

        //this.__OnInputTextChanged();          //谨慎

        //document.title = this._focused + ":" + new Date().getTime();

        if (this.valueFromSelect || this._textChanged) {         //@@

            this._textChanged = false;
            this.__OnInputTextChanged();
        }

        //if (this._textEl.value == "") this._listbox._focusedItem = null;    //隐藏下拉框时，如果没有值，则清空掉焦点项
        if (this._textEl.value == "") this._listbox._blurItem();

        if (this._filtered) {
            this._filtered = false;
            if (this._listbox.el) {
                this._listbox.setData(this.data);
            }
        }
        this.__doFocusCls();
        this.fire("hidepopup");
    },
    //    hidePopup: function () {
    //        var popup = this.getPopup();
    //        popup.close();

    //    },
    findItems: function (value) {
        return this._listbox.findItems(value);
    },
    __OnInputTextChanged: function (e) {

        if (this.isShowPopup()) {
            this._textChanged = true;
            return;
        }

        this._textChanged = false;

        this._oldValue = this.getValue();

        if (this.multiSelect == false) {

            var text = this._textEl.value;
            //valueFromSelect

            //根据text找，必须全部匹配，自动选择
            var data = this.getData();
            var selected = null;
            for (var i = 0, l = data.length; i < l; i++) {
                var item = data[i];
                var itemText = item[this.textField];
                var itemValue = item[this.valueField];
                if (itemText == text) {
                    if (mini.isNull(this.value) || this.value === "" || this.value == itemValue) {
                        selected = item;
                        break;
                    }
                }
            }
            if (selected) {
                this._listbox.setValue(selected ? selected[this.valueField] : "");

                var v = this._listbox.getValue();
                var vts = this._listbox.getValueAndText(v);

                var value = this.getValue();

                this.setValue(v);
                this.setText(vts[1]);
            } else {
                if (this.valueFromSelect) {
                    this.setValue("");
                    this.setText("");
                } else {
                    this.setValue(text);
                    this.setText(text);
                }
            }
            if (value != this.getValue()) {
                var sf = this;
                //setTimeout(function () {
                sf._OnValueChanged();
                //}, 1);
            }


        }
        //}

        //        if (this.multiSelect) {
        //        } else {
        //            if (this._textEl.value == "" && !this.value) {
        //                this.setValue("");
        //                this._OnValueChanged();
        //            }
        //            //            var _value = this.value;
        //            //            var vts = this._listbox.getValueAndText(this.value);
        //            //            if (this._textEl.value != vts[1]) {
        //            //                this.setValue("");
        //            //            }
        //            //            if (_value != this.value) {
        //            //                this._OnValueChanged();
        //            //            }
        //        }
    },
    setAjaxData: function (value) {
        this.ajaxData = value;
        this._listbox.setAjaxData(value);
    },
    setAjaxType: function (value) {
        this.ajaxType = value;
        this._listbox.setAjaxType(value);
    },
    setAjaxOptions: function (value) {
        this.ajaxOptions = value;
        this._listbox.setAjaxOptions(value);
    },

    autoFilter: true,
    setAutoFilter: function (value) {
        this.autoFilter = value;
    },
    getAutoFilter: function () {
        return this.autoFilter;
    },

    ////////////////////////////////////
    getAttrs: function (el) {

        var attrs = mini.ComboBox.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["url", "data", "textField", "valueField", "displayField", "nullItemText", "pinyinField", "delimiter",
            "ondrawcell", "onbeforeload", "onpreload", "onload", "onloaderror", "onitemclick", "onbeforeitemclick"
             ]
        );
        mini._ParseBool(el, attrs,
            ["multiSelect", "showNullItem", "valueFromSelect", "valueInCheckOrder", "clearOnLoad", "autoFilter", "autoFocusItem"
             ]
        );

        if (attrs.displayField) attrs.textField = attrs.displayField;

        var valueField = attrs.valueField || this.valueField;
        var textField = attrs.textField || this.textField;
        if (el.nodeName.toLowerCase() == "select") {

            var data = [];
            for (var i = 0, l = el.length; i < l; i++) {
                var op = el.options[i];
                var o = {};
                o[textField] = op.text;
                o[valueField] = op.value;

                data.push(o);
            }
            if (data.length > 0) {
                attrs.data = data;
            }
        } else {
            var cs = mini.getChildNodes(el);
            for (var i = 0, l = cs.length; i < l; i++) {
                var node = cs[i];
                var property = jQuery(node).attr("property");
                if (!property) continue;
                property = property.toLowerCase();
                if (property == "columns") {
                    attrs.columns = mini._ParseColumns(node);
                } else if (property == "data") {
                    attrs.data = node.innerHTML;
                }
            }
        }
        return attrs;
    }
});
mini.regClass(mini.ComboBox, 'combobox');
/**
* jQuery MiniUI v3.0
* 
* Web Site : http://www.miniui.com
*
* Commercial License : http://www.miniui.com/license
*
* Copyright(c) 2012 All Rights Reserved. Shanghai PusSoft Co., Ltd (上海普加软件有限公司) [ services@plusoft.com.cn ]. 
* 
*/

mini.DatePicker = function () {
    mini.DatePicker.superclass.constructor.apply(this, arguments);
    mini.addClass(this.el, "mini-datepicker");

    this.on("validation", this.__OnValidation, this); 
}

mini.extend(mini.DatePicker, mini.PopupEdit, {
    valueFormat: "",
    format: "yyyy-MM-dd",       //displayFormat可以是任意的
    //editFormat: 'yyyy-MM-dd',   //固定几个editFormat，这样可以做成JS的优化处理

    maxDate: null,
    minDate: null,

    popupWidth: "",

    viewDate: new Date(),
    showTime: false,
    timeFormat: 'H:mm',

    showYesterdayButton: false,
    showTodayButton: true,
    showClearButton: true,
    showOkButton: false,

    valueType: "date",      //date,string

    uiCls: "mini-datepicker",

    _getCalendar: function () {

        if (!mini.DatePicker._Calendar || mini.DatePicker._Calendar.destroyed) {
            var calendar = mini.DatePicker._Calendar = new mini.Calendar();

            calendar.setStyle("border:0;");
        }
        return mini.DatePicker._Calendar;
    },

    destroy: function (removeEl) {
        if (this._destroyPopup) {
            //mini.DatePicker._Calendar = null;
        }
        this._calendar = null;

        mini.DatePicker.superclass.destroy.call(this, removeEl);
    },
    _createPopup: function () {

        mini.DatePicker.superclass._createPopup.call(this);

        this._calendar = this._getCalendar();
    },
    __OnPopupClose: function (e) {
        if (this._calendar) {
            this._calendar.hideMenu();
        }
    },
    _monthPicker: false,
    showPopup: function () {
        var ex = { cancel: false };
        this.fire("beforeshowpopup", ex);
        if (ex.cancel == true) return;

        this._calendar = this._getCalendar();
        this._calendar.beginUpdate();
        this._calendar._allowLayout = false;
        if (this._calendar.el.parentNode != this.popup._contentEl) {
            this._calendar.render(this.popup._contentEl);
        }

        this._calendar.set({
            monthPicker: this._monthPicker,
            showTime: this.showTime,
            timeFormat: this.timeFormat,
            showClearButton: this.showClearButton,
            showYesterdayButton: this.showYesterdayButton,
            showTodayButton: this.showTodayButton,
            showOkButton: this.showOkButton,
            showWeekNumber: this.showWeekNumber
        });

        this._calendar.setValue(this.value);

        if (this.value) {
            this._calendar.setViewDate(this.value);
        } else {
            this._calendar.setViewDate(this.viewDate);
        }



        function doUpdate() {
            this._calendar.hideMenu();

            if (this._calendar._target) {
                var obj = this._calendar._target;
                this._calendar.un("timechanged", obj.__OnTimeChanged, obj);
                this._calendar.un("dateclick", obj.__OnDateClick, obj);
                this._calendar.un("drawdate", obj.__OnDrawDate, obj);
            }
            this._calendar.on("timechanged", this.__OnTimeChanged, this);
            this._calendar.on("dateclick", this.__OnDateClick, this);
            this._calendar.on("drawdate", this.__OnDrawDate, this);

            this._calendar.endUpdate();

            this._calendar._allowLayout = true;
            this._calendar.doLayout();

            this._calendar.focus();

            this._calendar._target = this;
        }

        var me = this;
        //setTimeout(function () {
        doUpdate.call(me);
        //}, 1);

        mini.DatePicker.superclass.showPopup.call(this);
    },
    hidePopup: function () {

        mini.DatePicker.superclass.hidePopup.call(this);

        if (this._calendar) {
            this._calendar.un("timechanged", this.__OnTimeChanged, this);
            this._calendar.un("dateclick", this.__OnDateClick, this);
            this._calendar.un("drawdate", this.__OnDrawDate, this);

            this._calendar.hideMenu();
        }
    },
    within: function (e) {
        if (mini.isAncestor(this.el, e.target)) return true;
        if (this._calendar.within(e)) return true;
        return false;
    },
    __OnPopupKeyDown: function (e) {
        if (e.keyCode == 13) {
            this.__OnDateClick();
        }
        if (e.keyCode == 27) {
            this.hidePopup();
            this.focus();
        }
    },
    minDateErrorText: '', //'不能小于日期 {0}',
    maxDateErrorText: '', //'不能大于日期 {0}',
    __OnValidation: function (e) {

        if (e.isValid == false) return;
        var date = this.value;

        if (!mini.isDate(date)) return;
        var maxDate = mini.parseDate(this.maxDate);
        var minDate = mini.parseDate(this.minDate);
        var maxDateErrorText = this.maxDateErrorText || mini.VTypes.maxDateErrorText;
        var minDateErrorText = this.minDateErrorText || mini.VTypes.minDateErrorText;
        if (mini.isDate(maxDate)) {
            if (date.getTime() > maxDate.getTime()) {
                e.isValid = false;
                e.errorText = String.format(maxDateErrorText, mini.formatDate(maxDate, this.format));
            }
        }
        if (mini.isDate(minDate)) {
            if (date.getTime() < minDate.getTime()) {
                e.isValid = false;
                e.errorText = String.format(minDateErrorText, mini.formatDate(minDate, this.format));
            }
        }

    },
    __OnDrawDate: function (e) {
        var date = e.date;
        var maxDate = mini.parseDate(this.maxDate);
        var minDate = mini.parseDate(this.minDate);
        if (mini.isDate(maxDate)) {
            if (date.getTime() > maxDate.getTime()) {
                e.allowSelect = false;
            }
        }
        if (mini.isDate(minDate)) {
            if (date.getTime() < minDate.getTime()) {
                e.allowSelect = false;
            }
        }

        this.fire("drawdate", e);
    },
    __OnDateClick: function (e) {
        if (!e) return;
        if (this.showOkButton && e.action != "ok") return;

        var date = this._calendar.getValue();
        var value = this.getFormValue('U');

        this.setValue(date);

        if (value !== this.getFormValue('U')) {
            this._OnValueChanged();
        }

        this.hidePopup();
        if (!isMobile) {
            this.focus();
        }
    },
    __OnTimeChanged: function (e) {
        if (this.showOkButton) return;
        var date = this._calendar.getValue();
        this.setValue(date);
        this._OnValueChanged();
    },
    setFormat: function (value) {
        if (typeof value != "string") return;
        if (this.format != value) {
            this.format = value;
            this._textEl.value = this._valueEl.value = this.getFormValue();
        }
    },
    getFormat: function () {
        return this.format;
    },
    setValueFormat: function (value) {
        if (typeof value != "string") return;
        if (this.valueFormat != value) {
            this.valueFormat = value;
        }
    },
    getValueFormat: function () {
        return this.valueFormat;
    },



    setValue: function (value) {

        var me = this;

        if (me.valueType == "date") {
            value = mini.parseDate(value);
        } else {
            if (mini.isDate(value)) value = mini.formatDate(value, me.format);
        }

        if (mini.isNull(value)) value = "";
        if (mini.isDate(value)) {
            value = new Date(value.getTime());
            if (mini.isDate(value) && isNaN(value.getTime())) {
                value = "";
            }
        }
        if (this.value != value) {
            this.value = value;
            //this._doEmpty();
        }
        this.text = this._textEl.value = this._valueEl.value = this.getFormValue();
    },
    nullValue: "",
    setNullValue: function (value) {
        if (value == "null") value = null;
        this.nullValue = value;
    },
    getNullValue: function () {
        return this.nullValue;
    },

    getValue: function () {
        if (this.valueType != "date") return this.value;
        if (!mini.isDate(this.value)) return this.nullValue;
        var v = this.value;
        if (this.valueFormat) {
            v = mini.formatDate(v, this.valueFormat);
        }
        return v;
    },

    getFormValue: function (format) {
        if (this.valueType != "date") return this.value;
        if (!mini.isDate(this.value)) return "";
        format = format || this.format;
        return mini.formatDate(this.value, format);
    },

    setViewDate: function (value) {
        value = mini.parseDate(value);
        if (!mini.isDate(value)) return;
        this.viewDate = value;
    },
    getViewDate: function () {
        return this._calendar.getViewDate();
    },
    setShowTime: function (value) {
        if (this.showTime != value) {
            this.showTime = value;
            //this._calendar.setShowTime(value);
        }
    },
    getShowTime: function () {
        return this.showTime;
    },
    setTimeFormat: function (value) {
        if (this.timeFormat != value) {
            this.timeFormat = value;
            //this._calendar.setTimeFormat(value);
        }
    },
    getTimeFormat: function () {
        return this.timeFormat;
    },

    setShowYesterdayButton: function (value) {
        this.showYesterdayButton = value;
        //this.doUpdate();
    },
    getShowYesterdayButton: function () {
        return this.showYesterdayButton;
    },
    setShowTodayButton: function (value) {
        this.showTodayButton = value;
        //this.doUpdate();
    },
    getShowTodayButton: function () {
        return this.showTodayButton;
    },
    setShowClearButton: function (value) {
        this.showClearButton = value;
        //this.doUpdate();
    },
    getShowClearButton: function () {
        return this.showClearButton;
    },
    setShowOkButton: function (value) {
        this.showOkButton = value;
    },
    getShowOkButton: function () {
        return this.showOkButton;
    },
    setShowWeekNumber: function (value) {
        this.showWeekNumber = value;
    },
    getShowWeekNumber: function () {
        return this.showWeekNumber;
    },
    setMaxDate: function (value) {
        this.maxDate = value;
    },
    getMaxDate: function () {
        return this.maxDate;
    },
    setMinDate: function (value) {
        this.minDate = value;
    },
    getMinDate: function () {
        return this.minDate;
    },

    setMaxDateErrorText: function (value) {
        this.maxDateErrorText = value;
    },
    getMaxDateErrorText: function () {
        return this.maxDateErrorText;
    },
    setMinDateErrorText: function (value) {
        this.minDateErrorText = value;
    },
    getMinDateErrorText: function () {
        return this.minDateErrorText;
    },
    //////////////////////////////////
    __OnInputTextChanged: function (e) {
        var v = this._textEl.value;
        var value = this.getFormValue('U');


        if (this.valueType == "date") {
            var d = mini.parseDate(v);

            //if (!d || isNaN(d) || d.getFullYear() == 1970) {
            if (!d || isNaN(d)) {
                d = null;
            }

        }

        this.setValue(v);
        //if (d == null) this._textEl.value = "";


        if (value !== this.getFormValue('U')) {
            this._OnValueChanged();
        }

    },
    __OnInputKeyDown: function (e) {
        var ex = { htmlEvent: e };
        this.fire("keydown", ex);
        if (e.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) {
            return false;
        }

        if (e.keyCode == 9) {   //tab
            if (this.isShowPopup()) {
                this.hidePopup();
            }
            return;
        }

        if (this.isReadOnly()) return;

        switch (e.keyCode) {
            case 27:        //esc
                e.preventDefault();
                if (this.isShowPopup()) {
                    e.stopPropagation();
                }

                this.hidePopup();
                break;
            case 9:     //tab
            case 13:     //enter     

                if (this.isShowPopup()) {
                    e.preventDefault();
                    e.stopPropagation();


                    this.hidePopup();
                    this.focus();

                } else {
                    this.__OnInputTextChanged(null);
                    var me = this;
                    setTimeout(function () {
                        me.fire("enter", ex);
                    }, 10);
                }
                break;
            case 37:    //left
                break;
            case 38:    //top      
                e.preventDefault();
                break;
            case 39:    //right
                break;
            case 40:    //bottom
                if (this.keyNavEnabled) {
                    e.preventDefault();
                    this.showPopup();
                }
                break;
            default:
                break;
        }
    },

    getAttrs: function (el) {
        var attrs = mini.DatePicker.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["format", "viewDate", "timeFormat", "ondrawdate", "minDate", "maxDate", "valueType",
            "valueFormat", "nullValue", "minDateErrorText", "maxDateErrorText"
             ]
        );
        mini._ParseBool(el, attrs,
            ["showTime", "showTodayButton", "showClearButton", "showOkButton", "showWeekNumber", "showYesterdayButton"
             ]
        );


        return attrs;
    }
});

mini.regClass(mini.DatePicker, 'datepicker');


mini.MonthPicker = function () {
    mini.MonthPicker.superclass.constructor.apply(this, arguments);

}

mini.extend(mini.MonthPicker, mini.DatePicker, {
    uiCls: 'mini-monthpicker',
    valueFormat: "",
    format: "yyyy-MM",
    _monthPicker: true
});
mini.regClass(mini.MonthPicker, 'monthpicker');
/**
* jQuery MiniUI v3.0
* 
* Web Site : http://www.miniui.com
*
* Commercial License : http://www.miniui.com/license
*
* Copyright(c) 2012 All Rights Reserved. Shanghai PusSoft Co., Ltd (上海普加软件有限公司) [ services@plusoft.com.cn ]. 
* 
*/

mini.Calendar = function () {
    this.viewDate = new Date();
    this._selectedDates = [];
    mini.Calendar.superclass.constructor.apply(this, arguments);
}
mini.extend(mini.Calendar, mini.Control, {
    width: 220,
    height: 160,

    monthPicker: false,

    _clearBorder: false,

    viewDate: null,
    _selectedDate: "",
    _selectedDates: [],              //先放置，后续完善
    multiSelect: false,

    firstDayOfWeek: 0,
    yesterdayText: "Yesterday",
    todayText: "Today",
    clearText: "Clear",
    okText: "OK",
    cancelText: "Cancel",
    daysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    format: "MMM, yyyy",

    timeFormat: 'H:mm',

    showTime: false,
    currentTime: true,    //点击"今天"按钮时，是否将Time设置为当前小时

    rows: 1,
    columns: 1,

    headerCls: "",
    bodyCls: "",
    footerCls: "",

    _todayCls: "mini-calendar-today",
    _weekendCls: "mini-calendar-weekend",
    _otherMonthCls: "mini-calendar-othermonth",
    _selectedDateCls: "mini-calendar-selected",

    showHeader: true,
    showFooter: true,
    showWeekNumber: false,
    showDaysHeader: true,
    showMonthButtons: true,
    showYearButtons: true,
    showTodayButton: true,
    showClearButton: true,
    showOkButton: false,

    showYesterdayButton: false,

    isWeekend: function (date) {
        var day = date.getDay();
        return day == 0 || day == 6;
    },
    getFirstDateOfMonth: function (date) {
        //first day of month
        var date = new Date(date.getFullYear(), date.getMonth(), 1);
        //获得当前周的第一天 
        return mini.getWeekStartDate(date, this.firstDayOfWeek);
    },
    getShortWeek: function (week) {
        return this.daysShort[week];
    },

    uiCls: "mini-calendar",
    _create: function () {
        var s = '<tr style="width:100%;"><td style="width:100%;"></td></tr>';
        s += '<tr ><td><div class="mini-calendar-footer">'
                    + '<span style="display:inline-block;"><input name="time" class="mini-timespinner mini-calendar-timespinner" format="' + this.timeFormat + '"/>'
                    + '<span class="mini-calendar-footerSpace"></span></span>'
                    + '<span class="mini-calendar-tadayButton mini-calendar-button mini-corner-all">' + this.todayText + '</span>'

                    + '<span class="mini-calendar-footerSpace"></span>'
                    + '<span class="mini-calendar-clearButton mini-calendar-button mini-corner-all">' + this.clearText + '</span>'
                    + '<span class="mini-calendar-okButton mini-calendar-button mini-corner-all">' + this.okText + '</span>'
                    + '<a href="#" class="mini-calendar-focus" style="position:absolute;left:-10px;top:-10px;width:0px;height:0px;outline:none" hideFocus></a>'
                    + '</div></td></tr>';

        var html = '<table class="mini-calendar" cellpadding="0" cellspacing="0">' + s + '</table>';

        var d = document.createElement("div");
        d.innerHTML = html;
        this.el = d.firstChild;

        var trs = this.el.getElementsByTagName("tr");
        var tds = this.el.getElementsByTagName("td");

        this._innerEl = tds[0];
        this._footerEl = mini.byClass("mini-calendar-footer", this.el);

        this.timeWrapEl = this._footerEl.childNodes[0];
        this.todayButtonEl = this._footerEl.childNodes[1];
        this.footerSpaceEl = this._footerEl.childNodes[2];
        this.closeButtonEl = this._footerEl.childNodes[3];
        this.okButtonEl = this._footerEl.childNodes[4];
        this._focusEl = this._footerEl.lastChild;

        //
        //debugger
        this.yesterdayButtonEl = mini.after(this.todayButtonEl, '<span class="mini-calendar-tadayButton yesterday mini-calendar-button mini-corner-all">' + this.yesterdayText + '</span>');


        mini.parse(this._footerEl);
        this.timeSpinner = mini.getbyName('time', this.el);
        this.doUpdate();
    },
    focus: function () {
        try {
            this._focusEl.focus();
        } catch (e) { }
    },
    destroy: function (removeEl) {

        if (this.timeSpinner) {
            this.timeSpinner.destroy();
            this.timeSpinner = null;
        }

        this._innerEl = this._footerEl = this.timeWrapEl = this.todayButtonEl = this.footerSpaceEl = this.closeButtonEl = null;

        this._focusEl = this.okButtonEl = this.yesterdayButtonEl = null;

        this.timeSpinner = null;

        mini.Calendar.superclass.destroy.call(this, removeEl);
    },
    _initEvents: function () {
        if (this.timeSpinner) this.timeSpinner.on("valuechanged", this.__OnTimeChanged, this);
        mini._BindEvents(function () {
            //            mini_onOne(this.el, "click", this.__OnClick, this);
            //            mini_onOne(this.el, "mousedown", this.__OnMouseDown, this);
            //            mini_onOne(this.el, "keydown", this.__OnKeyDown, this);


            mini.on(this.el, "click", this.__OnClick, this);
            mini.on(this.el, "mousedown", this.__OnMouseDown, this);
            mini.on(this.el, "keydown", this.__OnKeyDown, this);

        }, this);


        //        var self = this;
        //        setInterval(function () {
        //            if (self.menuEl) {
        //                if (!self.isDisplay()) {
        //                    self.hideMenu();
        //                }
        //            }
        //        }, 50);
    },
    getDateEl: function (date) {
        if (!date) return null;
        var id = this.uid + "$" + mini.clearTime(date).getTime();
        return document.getElementById(id);
    },
    within: function (e) {
        if (mini.isAncestor(this.el, e.target)) return true;
        if (this.menuEl && mini.isAncestor(this.menuEl, e.target)) return true;
        return false;
    },
    //    setHeaderCls: function (value) {
    //        this.headerCls = value;
    //        this.doUpdate();
    //    },
    //    getHeaderCls: function () {
    //        return this.headerCls;
    //    },
    //    setBodyCls: function (value) {
    //        this.bodyCls = value;
    //        this.doUpdate();
    //    },
    //    getBodyCls: function () {
    //        return this.bodyCls;
    //    },
    //    setFooterCls: function (value) {
    //        this.footerCls = value;
    //        this.doUpdate();
    //    },
    //    getFooterCls: function () {
    //        return this.footerCls;
    //    },
    //    set_todayCls: function (value) {
    //        this._todayCls = value;
    //        this.doUpdate();
    //    },
    //    get_todayCls: function () {
    //        return this._todayCls;
    //    },
    //    set_otherMonthCls: function (value) {
    //        this._otherMonthCls = value;
    //        this.doUpdate();
    //    },
    //    get_otherMonthCls: function () {
    //        return this._otherMonthCls;
    //    },
    //    set_weekendCls: function (value) {
    //        this._weekendCls = value;
    //        this.doUpdate();
    //    },
    //    get_weekendCls: function () {
    //        return this._weekendCls;
    //    },
    //    setShowClearButton: function (value) {
    //        this.showClearButton = value;
    //        debugger
    //        var button = this.getButton("clear");
    //        if (button) {
    //            this.doUpdate();
    //        }
    //    },
    //    getShowClearButton: function () {
    //        return this.showClearButton;
    //    },
    setShowHeader: function (value) {
        this.showHeader = value;
        this.doUpdate();
    },
    getShowHeader: function () {
        return this.showHeader;
    },
    setShowFooter: function (value) {
        this.showFooter = value;
        this.doUpdate();
    },
    getShowFooter: function () {
        return this.showFooter;
    },
    setShowWeekNumber: function (value) {
        this.showWeekNumber = value;
        this.doUpdate();
    },
    getShowWeekNumber: function () {
        return this.showWeekNumber;
    },
    setShowDaysHeader: function (value) {
        this.showDaysHeader = value;
        this.doUpdate();
    },
    getShowDaysHeader: function () {
        return this.showDaysHeader;
    },
    setShowMonthButtons: function (value) {
        this.showMonthButtons = value;
        this.doUpdate();
    },
    getShowMonthButtons: function () {
        return this.showMonthButtons;
    },
    setShowYearButtons: function (value) {
        this.showYearButtons = value;
        this.doUpdate();
    },
    getShowYearButtons: function () {
        return this.showYearButtons;
    },
    setShowTodayButton: function (value) {
        this.showTodayButton = value;
        this.todayButtonEl.style.display = this.showTodayButton ? "" : "none";
        this.doUpdate();
    },
    getShowTodayButton: function () {
        return this.showTodayButton;
    },
    setShowYesterdayButton: function (value) {
        this.showYesterdayButton = value;
        this.yesterdayButtonEl.style.display = this.showYesterdayButton ? "" : "none";
        this.doUpdate();
    },
    getShowYesterdayButton: function () {
        return this.showYesterdayButton;
    },
    setShowClearButton: function (value) {
        this.showClearButton = value;
        this.closeButtonEl.style.display = this.showClearButton ? "" : "none";
        this.doUpdate();
    },
    getShowClearButton: function () {
        return this.showClearButton;
    },
    setShowOkButton: function (value) {
        this.showOkButton = value;
        this.okButtonEl.style.display = this.showOkButton ? "" : "none";
        this.doUpdate();
    },
    getShowOkButton: function () {
        return this.showOkButton;
    },

    setViewDate: function (value) {
        value = mini.parseDate(value);
        if (!value) value = new Date();
        if (mini.isDate(value)) value = new Date(value.getTime());
        this.viewDate = value;
        this.doUpdate();
    },
    getViewDate: function () {
        return this.viewDate;
    },
    setSelectedDate: function (value) {
        value = mini.parseDate(value);
        if (!mini.isDate(value)) value = "";
        else value = new Date(value.getTime());

        var dateEl = this.getDateEl(this._selectedDate);
        if (dateEl) mini.removeClass(dateEl, this._selectedDateCls);


        this._selectedDate = value;
        if (this._selectedDate) this._selectedDate = mini.cloneDate(this._selectedDate);

        var dateEl = this.getDateEl(this._selectedDate);
        if (dateEl) mini.addClass(dateEl, this._selectedDateCls);

        this.fire("datechanged");

    },
    setSelectedDates: function (value) {
        if (!mini.isArray(value)) value = [];
        this._selectedDates = value;
        this.doUpdate();
    },
    getSelectedDate: function () {
        return this._selectedDate ? this._selectedDate : "";
    },
    setTime: function (time) {
        this.timeSpinner.setValue(time);
    },
    getTime: function () {
        return this.timeSpinner.getFormValue();
    },
    setValue: function (value) {
        this.setSelectedDate(value);
        if (!value) {
            value = new Date();
        }
        this.setTime(value);
    },
    getValue: function () {
        var d = this._selectedDate;
        if (d) {
            d = mini.clearTime(d);
            if (this.showTime) {

                var d2 = this.timeSpinner.getValue();

                if (d2) {
                    d.setHours(d2.getHours());
                    d.setMinutes(d2.getMinutes());
                    d.setSeconds(d2.getSeconds());
                }
            }
        }
        return d ? d : "";
    },
    getFormValue: function () {
        var d = this.getValue();
        if (d) return mini.formatDate(d, 'yyyy-MM-dd HH:mm:ss');
        return "";
    },
    isSelectedDate: function (date) {
        if (!date || !this._selectedDate) return false;
        return mini.clearTime(date).getTime()
                == mini.clearTime(this._selectedDate).getTime();
    },
    setMultiSelect: function (value) {
        this.multiSelect = value;
        this.doUpdate();
    },
    getMultiSelect: function () {
        return this.multiSelect;
    },
    setRows: function (value) {
        if (isNaN(value)) return;
        if (value < 1) value = 1;
        this.rows = value;
        this.doUpdate();
    },
    getRows: function () {
        return this.rows;
    },
    setColumns: function (value) {
        if (isNaN(value)) return;
        if (value < 1) value = 1;
        this.columns = value;
        this.doUpdate();
    },
    getColumns: function () {
        return this.columns;
    },
    setShowTime: function (value) {
        if (this.showTime != value) {
            this.showTime = value;
            this.timeWrapEl.style.display = this.showTime ? '' : "none";

            jQuery(this._footerEl).toggleClass("mini-calendar-hastime", this.showTime);
            this.doLayout();
        }
    },
    getShowTime: function () {
        return this.showTime;
    },
    setTimeFormat: function (value) {
        if (this.timeFormat != value) {

            this.timeSpinner.setFormat(value);
            this.timeFormat = this.timeSpinner.format;
        }
    },
    getTimeFormat: function () {
        return this.timeFormat;
    },
    doLayout: function () {

        if (!this.canLayout()) return;

        this.timeWrapEl.style.display = this.showTime ? '' : "none";
        this.todayButtonEl.style.display = this.showTodayButton ? "" : "none";
        this.closeButtonEl.style.display = this.showClearButton ? "" : "none";


        this.yesterdayButtonEl.style.display = this.showYesterdayButton ? "" : "none";


        this.okButtonEl.style.display = this.showOkButton ? "" : "none";
        this.footerSpaceEl.style.display = (this.showClearButton && this.showTodayButton) ? "" : "none";

        this._footerEl.style.display = this.showFooter ? "" : "none";

        var views = this._innerEl.firstChild;

        var autoHeight = this.isAutoHeight();
        if (!autoHeight) {

            views.parentNode.style.height = "100px";
            h = jQuery(this.el).height();
            //views.style.display = "";

            h -= jQuery(this._footerEl).outerHeight()

            views.parentNode.style.height = h + "px";
        } else {
            views.parentNode.style.height = "";
        }

        mini.layout(this._footerEl);


        if (this.monthPicker) this._tryShowMenu();
    },
    doUpdate: function () {
        if (!this._allowUpdate) return;

        var viewDate = new Date(this.viewDate.getTime());
        var isOne = this.rows == 1 && this.columns == 1;
        var h = 100 / this.rows;
        var s = '<table class="mini-calendar-views" border="0" cellpadding="0" cellspacing="0">';
        for (var i = 0, l = this.rows; i < l; i++) {
            s += '<tr >';
            for (var j = 0, k = this.columns; j < k; j++) {
                s += '<td style="height:' + h + '%">';

                s += this._CreateView(viewDate, i, j);

                s += '</td>';

                viewDate = new Date(viewDate.getFullYear(), viewDate.getMonth() + 1, 1);
            }
            s += '</tr>';
        }

        s += '</table>';
        this._innerEl.innerHTML = s;

        var el = this.el;
        setTimeout(function () {
            mini.repaint(el);
        }, 100);

        this.doLayout();
    },
    _CreateView: function (viewDate, row, column) {
        var month = viewDate.getMonth();
        var date = this.getFirstDateOfMonth(viewDate);
        var firstDateOfWeek = new Date(date.getTime());
        var todayTime = mini.clearTime(new Date()).getTime();
        var selectedTime = this.value ? mini.clearTime(this.value).getTime() : -1;

        var multiView = this.rows > 1 || this.columns > 1;

        var s = '';
        s += '<table class="mini-calendar-view" border="0" cellpadding="0" cellspacing="0">';
        //header
        if (this.showHeader) {
            s += '<tr ><td colSpan="10" class="mini-calendar-header"><div class="mini-calendar-headerInner">';
            if (row == 0 && column == 0) {
                s += '<div class="mini-calendar-prev mini-icon">';
                if (this.showYearButtons) s += '<span class="mini-calendar-yearPrev mini-icon"></span>';
                if (this.showMonthButtons) s += '<span class="mini-calendar-monthPrev mini-icon"></span>';
                s += '</div>';
            }
            if (row == 0 && column == this.columns - 1) {
                s += '<div class="mini-calendar-next mini-icon">';
                if (this.showMonthButtons) s += '<span class="mini-calendar-monthNext mini-icon"></span>';
                if (this.showYearButtons) s += '<span class="mini-calendar-yearNext mini-icon"></span>';
                s += '</div>';
            }
            s += '<span class="mini-calendar-title">' + mini.formatDate(viewDate, this.format); +'</span>';
            s += '</div></td></tr>';
        }

        //daysHeader
        if (this.showDaysHeader) {
            s += '<tr class="mini-calendar-daysheader"><td class="mini-calendar-space"></td>';
            if (this.showWeekNumber) {
                s += '<td sclass="mini-calendar-weeknumber"></td>';
            }

            for (var j = this.firstDayOfWeek, k = j + 7; j < k; j++) {
                var name = this.getShortWeek(j);
                s += '<td yAlign="middle">';
                s += name;
                s += '</td>';
                date = new Date(date.getFullYear(), date.getMonth(), date.getDate() + 1);
            }
            s += '<td class="mini-calendar-space"></td></tr>';
        }

        //days
        date = firstDateOfWeek;
        for (var i = 0; i <= 5; i++) {
            s += '<tr class="mini-calendar-days"><td class="mini-calendar-space"></td>';
            if (this.showWeekNumber) {
                var num = mini.getWeek(date.getFullYear(), date.getMonth() + 1, date.getDate());
                if (String(num).length == 1) num = "0" + num;
                s += '<td class="mini-calendar-weeknumber" yAlign="middle">' + num + '</td>';
            }
            for (var j = this.firstDayOfWeek, k = j + 7; j < k; j++) {
                var weekend = this.isWeekend(date);
                var clearTime = mini.clearTime(date).getTime();
                var isToday = clearTime == todayTime;
                var isSelected = this.isSelectedDate(date);

                if (month != date.getMonth() && multiView) {
                    clearTime = -1;
                }

                var e = this._OnDrawDate(date);

                s += '<td yAlign="middle" id="';
                s += this.uid + "$" + clearTime;
                s += '" class="mini-calendar-date ';
                if (weekend) {
                    s += ' mini-calendar-weekend '
                }
                if (e.allowSelect == false) {
                    s += ' mini-calendar-disabled '
                }

                if (month != date.getMonth() && multiView) {
                } else {
                    if (isSelected) {
                        s += ' ' + this._selectedDateCls + ' ';
                    }
                    if (isToday) {
                        s += ' mini-calendar-today '
                    }
                }
                if (month != date.getMonth()) {
                    s += ' mini-calendar-othermonth ';
                }

                if (e.dateCls) s += ' ' + e.dateCls;

                s += '" style="';
                if (e.dateStyle) s += e.dateStyle;
                s += '">';

                if (month != date.getMonth() && multiView) {
                } else {

                    s += e.dateHtml;
                }
                s += '</td>';

                date = new Date(date.getFullYear(), date.getMonth(), date.getDate() + 1);
            }
            s += '<td class="mini-calendar-space"></td></tr>';
        }
        s += '<tr class="mini-calendar-bottom" colSpan="10"><td ></td></tr>';

        s += '</table>';
        return s;
    },
    _OnDrawDate: function (date) {
        var e = {
            date: date,
            dateCls: "",
            dateStyle: "",
            dateHtml: date.getDate(),
            allowSelect: true

        };
        this.fire("drawdate", e);
        return e;
    },
    _OnDateClick: function (date, action) {


        var e = { date: date, action: action };
        this.fire("dateclick", e);

        this._OnValueChanged();

        this.hideMenu();
    },
    /////////////////////////////////////////////
    menuEl: null,
    menuYear: null,
    menuSelectMonth: null,
    menuSelectYear: null,
    _tryShowMenu: function () {
        if (!this.menuEl) {
            var that = this;

            setTimeout(function () {
                that.showMenu();
            }, 1);
        }
    },
    showMenu: function () {

        this.hideMenu();

        this.menuYear = parseInt(this.viewDate.getFullYear() / 10) * 10;
        this._menuselectMonth = this.viewDate.getMonth();
        this._menuselectYear = this.viewDate.getFullYear();

        var s = '<div class="mini-calendar-menu"></div>';
        this.menuEl = mini.append(document.body, s);
        this.updateMenu(this.viewDate);

        var box = this.getBox();
        //        box.x += 1;
        //        box.y += 1;
        //        box.width -= 2;
        //        box.height -= 2;

        //        var border = mini.getBorders(this.el);
        //        debugger
        if (this.el.style.borderWidth == "0px") {
            this.menuEl.style.border = "0";
        }
        mini.setBox(this.menuEl, box);

        //        var elBox = mini.getBox(el);
        //        var x = elBox.x, y = elBox.y;

        //        mini.setX(this.menuEl, x);
        //        mini.setY(this.menuEl, y);

        mini.on(this.menuEl, "click", this.__OnMenuClick, this);
        mini.on(this.menuEl, "dblclick", this.__OnMenuDblClick, this);
        mini.on(document, "mousedown", this.__OnBodyMenuMouseDown, this);
    },
    //        hide: function () {debugger
    //            mini.Calendar.superclass.hide.call(this);
    //            this.hideMenu();
    //        },
    hideMenu: function () {

        if (this.menuEl) {
            mini.un(this.menuEl, "click", this.__OnMenuClick, this);
            mini.un(document, "mousedown", this.__OnBodyMenuMouseDown, this);
            jQuery(this.menuEl).remove();
            this.menuEl = null;
        }
    },
    updateMenu: function () {
        if (!this.menuEl) return;
        var s = '<div class="mini-calendar-menu-months">';
        for (var i = 0, l = 12; i < l; i++) {
            var text = mini.getShortMonth(i);
            var cls = "";
            if (this._menuselectMonth == i) cls = "mini-calendar-menu-selected";
            s += '<a id="' + i + '" class="mini-calendar-menu-month ' + cls + '" href="javascript:void(0);" hideFocus onclick="return false">' + text + '</a>';
        }
        s += '<div style="clear:both;"></div></div>';

        s += '<div class="mini-calendar-menu-years">';
        for (var i = this.menuYear, l = this.menuYear + 10; i < l; i++) {
            var text = i;
            var cls = "";
            if (this._menuselectYear == i) cls = "mini-calendar-menu-selected";
            s += '<a id="' + i + '" class="mini-calendar-menu-year ' + cls + '" href="javascript:void(0);" hideFocus onclick="return false">' + text + '</a>';
        }
        s += '<div class="mini-calendar-menu-prevYear mini-icon"></div><div class="mini-calendar-menu-nextYear mini-icon"></div><div style="clear:both;"></div></div>';

        s += '<div class="mini-calendar-footer">'
            + '<span class="mini-calendar-okButton mini-calendar-button mini-corner-all">' + this.okText + '</span>'
            + '<span class="mini-calendar-footerSpace"></span>'
            + '<span class="mini-calendar-cancelButton mini-calendar-button mini-corner-all">' + this.cancelText + '</span>'
            + '</div><div style="clear:both;"></div>';

        this.menuEl.innerHTML = s;
    },
    __OnMenuClick: function (e) {

        var me = this,
            t = e.target,
            monthCls = "mini-calendar-menu-month",
            yearCls = "mini-calendar-menu-year",
            selCls = "mini-calendar-menu-selected";


        function updateMenu() {
            setTimeout(function () {
                me.updateMenu();
            }, 30);
        }

        var monthEl = mini.findParent(t, monthCls);
        var yearEl = mini.findParent(t, yearCls);

        if (monthEl) {
            this._menuselectMonth = parseInt(monthEl.id);
            //updateMenu();

            jQuery("." + monthCls, me.menuEl).removeClass(selCls);
            jQuery(t).parent().find("#" + this._menuselectMonth).addClass(selCls);

        }
        else if (yearEl) {
            this._menuselectYear = parseInt(yearEl.id);
            //updateMenu();

            jQuery("." + yearCls, me.menuEl).removeClass(selCls);
            jQuery(t).parent().find("#" + this._menuselectYear).addClass(selCls);
        }
        else if (mini.findParent(t, "mini-calendar-menu-prevYear")) {
            this.menuYear = this.menuYear - 1;
            this.menuYear = parseInt(this.menuYear / 10) * 10;
            updateMenu();
        }
        else if (mini.findParent(t, "mini-calendar-menu-nextYear")) {
            this.menuYear = this.menuYear + 11;
            this.menuYear = parseInt(this.menuYear / 10) * 10;
            updateMenu();
        }
        else if (mini.findParent(t, "mini-calendar-okButton")) {
            this.__getMonthYear();
        }
        else if (mini.findParent(t, "mini-calendar-cancelButton")) {
            if (this.monthPicker) {

                this._OnDateClick(null, "cancel");
            } else {
                this.hideMenu();
            }
        }
    },
    __OnMenuDblClick: function (e) {

        var yearEl = mini.findParent(e.target, "mini-calendar-menu-year");
        var monthEl = mini.findParent(e.target, "mini-calendar-menu-month");
        var dateEl = mini.findParent(e.target, "mini-calendar-date ");

        if (!yearEl && !monthEl && !dateEl) return;

        if (this.monthPicker) {

            if (!monthEl && !yearEl) return;
        }

        this.__getMonthYear();

    },
    __getMonthYear: function () {
        var date = new Date(this._menuselectYear, this._menuselectMonth, 1);
        if (this.monthPicker) {
            this.setViewDate(date);
            this.setSelectedDate(date);
            this._OnDateClick(date);
        } else {
            this.setViewDate(date);
            this.hideMenu();
        }
    },
    __OnBodyMenuMouseDown: function (e) {
        if (!mini.findParent(e.target, "mini-calendar-menu")) {
            if (!mini.findParent(e.target, "mini-monthpicker")) {
                //if (!this.monthPicker) {
                this.hideMenu();
                //}

            }
        }
    },
    ///////////////////////////////////////////////
    __OnClick: function (e) {
        var viewDate = this.viewDate;
        if (this.enabled == false) return;
        var t = e.target;
        var titleEl = mini.findParent(e.target, "mini-calendar-title");

        if (mini.findParent(t, "mini-calendar-monthNext")) {
            viewDate.setDate(1);
            viewDate.setMonth(viewDate.getMonth() + 1);
            this.setViewDate(viewDate);
        }
        else if (mini.findParent(t, "mini-calendar-yearNext")) {
            //viewDate.setMonth(0);
            viewDate.setDate(1);
            viewDate.setFullYear(viewDate.getFullYear() + 1);
            this.setViewDate(viewDate);
        }
        else if (mini.findParent(t, "mini-calendar-monthPrev")) {
            viewDate.setMonth(viewDate.getMonth() - 1);
            this.setViewDate(viewDate);
        }
        else if (mini.findParent(t, "mini-calendar-yearPrev")) {
            viewDate.setFullYear(viewDate.getFullYear() - 1);
            this.setViewDate(viewDate);
        }
        else if (mini.findParent(t, "mini-calendar-tadayButton")) {

            // var d = mini.clearTime(new Date());
            var isYesterday = !!mini.findParent(t, "yesterday");

            var d = new Date();
            if (isYesterday) {
                d.setDate(d.getDate() - 1);
            }
            this.setViewDate(d);
            this.setSelectedDate(d);
            if (this.currentTime) {
                var td = new Date();
                this.setTime(td);
            }
            this._OnDateClick(d, "today");
        }
        else if (mini.findParent(t, "mini-calendar-clearButton")) {
            this.setSelectedDate(null);
            this.setTime(null);
            this._OnDateClick(null, "clear");
        } else if (mini.findParent(t, "mini-calendar-okButton")) {
            this._OnDateClick(null, "ok");
            //            this.setSelectedDate(null);
            //            this.setTime(null);
            //            this._OnDateClick(null, "clear");
        } else if (titleEl) {
            this.showMenu();
        }

        var dateEl = mini.findParent(e.target, "mini-calendar-date");

        if (dateEl && !mini.hasClass(dateEl, "mini-calendar-disabled")) {
            var ids = dateEl.id.split("$");
            var time = parseInt(ids[ids.length - 1]);
            if (time == -1) return;
            var date = new Date(time);

            this._OnDateClick(date);
        }

        //this.focus();
    },
    __OnMouseDown: function (e) {
        if (this.enabled == false) return;
        var dateEl = mini.findParent(e.target, "mini-calendar-date");
        if (dateEl && !mini.hasClass(dateEl, "mini-calendar-disabled")) {
            var ids = dateEl.id.split("$");
            var time = parseInt(ids[ids.length - 1]);
            if (time == -1) return;
            var date = new Date(time);
            this.setSelectedDate(date);
        }
    },
    __OnTimeChanged: function (e) {
        this.fire("timechanged");
        this._OnValueChanged();
    },

    __OnKeyDown: function (e) {
        if (this.enabled == false) return;
        //
        //alert(1);
        var date = this.getSelectedDate();
        if (!date) date = new Date(this.viewDate.getTime());
        switch (e.keyCode) {
            case 27:        //esc

                break;
            case 13:     //enter
                if (date) {
                    //e.stopPropagation();
                    this._OnDateClick(date);
                }
                return;
                break;
            case 37:    //left
                date = mini.addDate(date, -1, 'D');
                break;
            case 38:    //top      
                date = mini.addDate(date, -7, 'D');
                break;
            case 39:    //right
                date = mini.addDate(date, 1, 'D');
                break;
            case 40:    //bottom                   
                date = mini.addDate(date, 7, 'D');
                break;
            default:
                break;
        }
        var me = this;


        if (date.getMonth() != me.viewDate.getMonth()) {
            me.setViewDate(mini.cloneDate(date));
            me.focus();
        }

        var dateEl = this.getDateEl(date);
        if (dateEl && mini.hasClass(dateEl, "mini-calendar-disabled")) {
            return;
        }

        me.setSelectedDate(date);

        if (e.keyCode == 37 || e.keyCode == 38 || e.keyCode == 39 || e.keyCode == 40) {
            e.preventDefault();
        }

    },

    _OnValueChanged: function () {
        this.fire("valuechanged");
    },
    ////////////////////////////////
    getAttrs: function (el) {
        var attrs = mini.Calendar.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["viewDate", "rows", "columns",
                "ondateclick", "ondrawdate", "ondatechanged", "timeFormat", "ontimechanged", "onvaluechanged"
             ]
        );
        mini._ParseBool(el, attrs,
            ["multiSelect", "showHeader", "showFooter", "showWeekNumber", "showDaysHeader",
            "showMonthButtons", "showYearButtons", "showTodayButton", "showClearButton", "showYesterdayButton",
            "showTime", "showOkButton"
             ]
        );

        return attrs;
    }
});
mini.regClass(mini.Calendar, "calendar");


/*
    setSelectedDate     只设置Date
    setTime             只设置Time
    setValue            同时设置Date和Time
                        getValue同理

    1.点击日期格子，只修改Date
    2.clearButton       清除Date和Time
    3.todayButton       1）不修改Time；2）将Time设置为当前日期currentTime=true
                        这个不需要。
                        实现方式：监听DateClick事件，让用户来设置小时

    事件：
        valuechanged
        datechanged
        timechanged

*/
/**
* jQuery MiniUI v3.0
* 
* Web Site : http://www.miniui.com
*
* Commercial License : http://www.miniui.com/license
*
* Copyright(c) 2012 All Rights Reserved. Shanghai PusSoft Co., Ltd (上海普加软件有限公司) [ services@plusoft.com.cn ]. 
* 
*/

mini.ListBox = function () {
    mini.ListBox.superclass.constructor.apply(this, arguments);
}
mini.extend(mini.ListBox, mini.ListControl, {
    formField: true,

    //width: 200,
    columns: null,
    columnWidth: 80,

    showNullItem: false,
    nullItemText: "",

    showEmpty: false,
    emptyText: "",

    showCheckBox: false,
    showAllCheckBox: true,
    multiSelect: false,


    _itemCls: "mini-listbox-item",
    _itemHoverCls: "mini-listbox-item-hover",
    _itemSelectedCls: "mini-listbox-item-selected",

    uiCls: "mini-listbox",
    _create: function () {
        var el = this.el = document.createElement("div");
        this.el.className = "mini-listbox";

        this.el.innerHTML = '<div class="mini-listbox-border"><div class="mini-listbox-header"></div><div class="mini-listbox-view"></div><input type="hidden"/></div><div class="mini-errorIcon"></div>';

        this._borderEl = this.el.firstChild;
        this._headerEl = this._borderEl.firstChild;
        this._viewEl = this._borderEl.childNodes[1];
        this._valueEl = this._borderEl.childNodes[2];

        this._errorIconEl = this.el.lastChild;

        this._scrollViewEl = this._viewEl;


        this._viewEl.innerHTML = '<div class="mini-grid-rows-content"></div>';

        this._contentEl = this._viewEl.firstChild;
    },
    _initEvents: function () {
        mini.ListBox.superclass._initEvents.call(this);
        mini._BindEvents(function () {
            mini_onOne(this._viewEl, "scroll", this.__OnScroll, this);

            //mini.on(this._viewEl, "scroll", this.__OnScroll, this);
        }, this);

    },
    destroy: function (removeEl) {
        if (this._viewEl) {
            this._viewEl.onscroll = null;
            mini.clearEvent(this._viewEl);
            this._viewEl = null;
        }
        this._borderEl = this._headerEl = this._viewEl = this._valueEl = this._errorIconEl = this._scrollViewEl = this._contentEl = null;
        mini.ListBox.superclass.destroy.call(this, removeEl);
    },
    setColumns: function (value) {
        //{name, visible, header, field，width, headerAlign, align, headerCls, cellCls, headerStyle, cellStyle}
        if (!mini.isArray(value)) value = [];
        this.columns = value;

        for (var i = 0, l = this.columns.length; i < l; i++) {
            var column = this.columns[i];

            if (column.type) {
                if (!mini.isNull(column.header) && typeof column.header !== "function") {
                    if (column.header.trim() == "") {
                        delete column.header;
                    }
                }
                var col = mini._getColumn(column.type);
                if (col) {
                    var _column = mini.copyTo({}, column);
                    mini.copyTo(column, col);
                    mini.copyTo(column, _column);
                }
            }

            var width = parseInt(column.width);
            if (mini.isNumber(width) && String(width) == column.width) column.width = width + "px";
            if (mini.isNull(column.width)) column.width = this.columnWidth + "px";
        }

        this.doUpdate();
    },

    isVisibleColumn: function (column) {
        column = this.getColumn(column);
        if (column.visible == false) return false;
        return true;
    },
    getColumn: function (index) {
        var t = typeof index;
        if (t == "number") return this.columns[index];
        else if (t == "object") return index;
        else {
            for (var i = 0, l = this.columns.length; i < l; i++) {
                var col = this.columns[i];
                if (col.name == index) {
                    return col;
                }
            }
            return null;
            //return this._nameColumns[index];
        }
    },
    hideColumn: function (column) {
        column = this.getColumn(column);
        if (!column) return;

        column.visible = false;

        //        for (var i = 0, l = this.columns.length; i < l; i++) {
        //            var col = this.columns[i];
        //            if (col.name == column.name) {
        //                col.visible = false;
        //            }
        //        }
        //this.setColumns(this.columns);

        this.doUpdate();
    },
    showColumn: function (column) {

        column = this.getColumn(column);
        if (!column) return;
        column.visible = true;
        //        for (var i = 0, l = this.columns.length; i < l; i++) {
        //            var col = this.columns[i];
        //            if (col.name == column.name) {
        //                col.visible = true;
        //            }
        //        }
        //this.setColumns(this.columns);

        this.doUpdate();
    },


    getColumns: function () {
        return this.columns;
    },
    doUpdate: function () {
        if (this._allowUpdate === false) return;
        var hasColumns = this.columns && this.columns.length > 0;

        if (hasColumns) {
            mini.addClass(this.el, "mini-listbox-showColumns");
        } else {
            mini.removeClass(this.el, "mini-listbox-showColumns");
        }
        this._headerEl.style.display = hasColumns ? "" : "none";

        var sb = [];
        if (hasColumns) {
            sb[sb.length] = '<table class="mini-listbox-headerInner" cellspacing="0" cellpadding="0"><tr>';
            var ckAllId = this.uid + "$ck$all";
            if (this.showCheckBox) {
                sb[sb.length] = '<td class="mini-listbox-checkbox"><input type="checkbox" id="' + ckAllId + '"></td>';
            }
            for (var j = 0, k = this.columns.length; j < k; j++) {
                var column = this.columns[j];

                if (column.visible === false) {
                    continue;
                }

                var header = column.header;
                if (mini.isNull(header)) header = '&nbsp;';

                var w = column.width;
                if (mini.isNumber(w)) w = w + "px";

                sb[sb.length] = '<td class="';
                if (column.headerCls) sb[sb.length] = column.headerCls;
                sb[sb.length] = '" style="';
                if (column.headerStyle) sb[sb.length] = column.headerStyle + ";";
                if (w) {
                    sb[sb.length] = 'width:' + w + ';';
                }
                if (column.headerAlign) {
                    sb[sb.length] = 'text-align:' + column.headerAlign + ';';
                }


                sb[sb.length] = '">';
                sb[sb.length] = header;
                sb[sb.length] = '</td>';
            }
            sb[sb.length] = '</tr></table>';
        }
        this._headerEl.innerHTML = sb.join('');

        var sb = [];
        var data = this.data;

        sb[sb.length] = '<table class="mini-listbox-items" cellspacing="0" cellpadding="0">';

        if (this.showEmpty && data.length == 0) {

            sb[sb.length] = '<tr><td colspan="20">' + this.emptyText + '</td></tr>';
        } else {
            this._doNullItem();

            for (var i = 0, l = data.length; i < l; i++) {
                var item = data[i];

                var rowClsIndex = -1;
                var rowCls = " ";
                var rowStyleIndex = -1;
                var rowStyle = " ";

                sb[sb.length] = '<tr id="';
                sb[sb.length] = this._createItemId(i);
                sb[sb.length] = '" index="';
                sb[sb.length] = i;
                sb[sb.length] = '" class="mini-listbox-item ';

                if (item.enabled === false) {
                    sb[sb.length] = ' mini-disabled ';
                }

                rowClsIndex = sb.length;
                sb[sb.length] = rowCls;
                sb[sb.length] = '" style="';
                rowStyleIndex = sb.length;
                sb[sb.length] = rowStyle;
                sb[sb.length] = '">';

                var ckid = this._createCheckId(i);
                var ckName = this.name;
                var ckValue = this.getItemValue(item);

                var disable = '';
                if (item.enabled === false) {
                    disable = 'disabled';
                }

                if (this.showCheckBox) {
                    if (item.__NullItem === true) {
                        sb[sb.length] = '<td class="mini-listbox-checkbox"></td>';
                    } else {
                        sb[sb.length] = '<td class="mini-listbox-checkbox"><input ' + disable + ' id="' + ckid + '" type="checkbox" ></td>';
                    }
                }

                //sb[sb.length] = '<td class="mini-listbox-checkbox"><input ' + disable + ' id="' + ckid + '" type="checkbox" ></td>';

                if (hasColumns) {
                    for (var j = 0, k = this.columns.length; j < k; j++) {
                        var column = this.columns[j];

                        if (column.visible === false) {
                            continue;
                        }

                        var e = this._OnDrawCell(item, i, column);

                        var w = column.width;
                        if (typeof w == "number") w = w + "px";

                        sb[sb.length] = '<td class="';
                        if (e.cellCls) sb[sb.length] = e.cellCls;
                        sb[sb.length] = '" style="';
                        if (e.cellStyle) sb[sb.length] = e.cellStyle + ";";
                        if (w) {
                            sb[sb.length] = 'width:' + w + ';';
                        }
                        if (column.align) {
                            sb[sb.length] = 'text-align:' + column.align + ';';
                        }
                        sb[sb.length] = '">';
                        sb[sb.length] = e.cellHtml;
                        sb[sb.length] = '</td>';

                        if (e.rowCls) rowCls = e.rowCls;
                        if (e.rowStyle) rowStyle = e.rowStyle;
                    }
                } else {
                    var e = this._OnDrawCell(item, i, null);
                    sb[sb.length] = '<td class="';
                    if (e.cellCls) sb[sb.length] = e.cellCls;
                    sb[sb.length] = '" style="';
                    if (e.cellStyle) sb[sb.length] = e.cellStyle;
                    sb[sb.length] = '">';
                    sb[sb.length] = e.cellHtml;
                    sb[sb.length] = '</td>';

                    if (e.rowCls) rowCls = e.rowCls;
                    if (e.rowStyle) rowStyle = e.rowStyle;
                }

                sb[rowClsIndex] = rowCls;
                sb[rowStyleIndex] = rowStyle;

                sb[sb.length] = '</tr>';
            }
        }
        sb[sb.length] = '</table>';


        var innerHTML = sb.join("");

        this._viewEl.firstChild.innerHTML = innerHTML;

        this._doSelects();

        this.doLayout();
    },
    doLayout: function (isValid) {

        //if (!this.canLayout()) return;
        if (this.columns && this.columns.length > 0) {
            // if (this.columns && this.columns.length > 0) {
            mini.addClass(this.el, "mini-listbox-showcolumns");
        } else {
            mini.removeClass(this.el, "mini-listbox-showcolumns");
        }
        if (this.showCheckBox) {
            mini.removeClass(this.el, "mini-listbox-hideCheckBox");
        } else {
            mini.addClass(this.el, "mini-listbox-hideCheckBox");
        }

        var ckAllId = this.uid + "$ck$all";
        var ck = document.getElementById(ckAllId);
        if (ck) ck.style.display = this.showAllCheckBox ? "" : "none";

        var viewEl = this._viewEl;
        var autoHeight = this.isAutoHeight();

        if (autoHeight) viewEl.style.height = "auto";

        var h = this.getHeight(true);
        //w = this.getWidth(true);
        var w = mini.getWidth(this._borderEl, true);
        var elWidth = w;



        //不处理宽度
        if (!mini.isIE6) viewEl.style.width = w + "px";


        ///////////////////////////////////////新处理


        var h2 = mini.getHeight(this._headerEl);
        h = h - h2;
        if (h < 0) h = 0;
        viewEl.style.height = h + "px";     //setHeight();


        ////////////////////////////////////

        //某些ie9下高度有问题，用以上代码替换
        //        if (!autoHeight) {


        //            //            if (jQuery.boxModel) {
        //            //                var padding = mini.getPaddings(this._bodyEl);
        //            //                var border = mini.getBorders(this._bodyEl);
        //            //            }
        //            //            var margin = mini.getMargins(this._bodyEl);
        //            var h2 = mini.getHeight(this._headerEl);
        //            h = h - h2;
        //            viewEl.style.height = h + "px";
        //        } else {
        //            viewEl.style.height = "auto";
        //        }



        if (isIE) {

            var table1 = this._headerEl.firstChild, table2 = this._viewEl.firstChild.firstChild;
            if (this._viewEl.offsetHeight >= this._viewEl.scrollHeight) {
                if (table2) table2.style.width = "100%";
                if (table1) table1.style.width = "100%";
            } else {
                //var w = parseInt(table2.parentNode.offsetWidth - 17) + 'px'
                var w = parseInt(table2.parentNode.offsetWidth) + 'px'
                //table2.style.width = w;
                if (table1) table1.style.width = w;
            }
        }
        if (this._viewEl.offsetHeight < this._viewEl.scrollHeight) {

            //this._headerEl.style.width = (elWidth - 17) + "px";

            //fix: 某浏览器下滚动条宽度可以设置变化

            var scrollBarWidth = jQuery(this._viewEl).width() - jQuery(this._contentEl).width();

            var w = elWidth - scrollBarWidth;
            if (w < 0) w = 0;
            this._headerEl.style.width = w + "px";

        } else {
            this._headerEl.style.width = "100%";
        }
        //mini.repaint(this._viewEl);

        //                this._innerEl.firstChild.style.width = w + "px";     

        //this._headerEl.firstChild.style.width = jQuery(this._viewEl.firstChild).outerHeight() + "px";        
    },
    setShowCheckBox: function (value) {
        this.showCheckBox = value;
        this.doUpdate();
        //this.doLayout();
    },
    getShowCheckBox: function () {
        return this.showCheckBox;
    },
    setShowAllCheckBox: function (value) {
        this.showAllCheckBox = value;
        this.doLayout();
    },
    getShowAllCheckBox: function () {
        return this.showAllCheckBox;
    },
    setShowNullItem: function (value) {
        if (this.showNullItem != value) {
            this.showNullItem = value;

            this._doNullItem();

            this.doUpdate();
        }
    },
    getShowNullItem: function () {
        return this.showNullItem;
    },
    setNullItemText: function (value) {

        if (this.nullItemText != value) {
            this.nullItemText = value;

            this._doNullItem();

            this.doUpdate();
        }
    },
    getNullItemText: function () {
        return this.nullItemText;
    },

    _doNullItem: function () {
        for (var i = 0, l = this.data.length; i < l; i++) {
            var item = this.data[i];
            if (item.__NullItem) {
                this.data.removeAt(i);
                break;
            }
        }
        if (this.showNullItem) {
            var item = { __NullItem: true };
            item[this.textField] = ""; // this.nullItemText;
            item[this.valueField] = "";
            this.data.insert(0, item);
        }
    },
    ///////////////////////////////////////////////////

    //    moveItems: function (items, index) {
    //        if (!mini.isArray(items) || !mini.isNumber(index)) return;
    //        var target = this.data[index];

    //        this._allowUpdate = false;
    //        for (var i = 0, l = items.length; i < l; i++) {
    //            var item = items[i];
    //            this.moveItem(index);
    //        }
    //        this._allowUpdate = true;
    //        this.doUpdate();
    //    },
    ///////////////////////////////////////////////////
    _OnDrawCell: function (record, index, column) {
        var value = column ? mini._getMap(column.field, record) : this.getItemText(record);
        var e = {
            sender: this,
            index: index,
            rowIndex: index,
            record: record,
            item: record,
            column: column,
            field: column ? column.field : null,
            value: value,
            cellHtml: value,
            rowCls: null,
            cellCls: column ? (column.cellCls || '') : "",
            rowStyle: null,
            cellStyle: column ? (column.cellStyle || '') : ""
        };

        var hasColumns = this.columns && this.columns.length > 0;
        if (!hasColumns) {
            if (index == 0 && this.showNullItem) {
                e.cellHtml = this.nullItemText;
            }
        }
        if (e.autoEscape == true) {
            e.cellHtml = mini.htmlEncode(e.cellHtml);
        }

        if (column) {
            if (column.dateFormat) {
                if (mini.isDate(e.value)) e.cellHtml = mini.formatDate(value, column.dateFormat);
                else e.cellHtml = value;
            }
            var renderer = column.renderer;
            if (renderer) {
                fn = typeof renderer == "function" ? renderer : window[renderer];
                if (fn) {
                    e.cellHtml = fn.call(column, e);
                }
            }
        }

        this.fire("drawcell", e);

        if (e.cellHtml === null || e.cellHtml === undefined || e.cellHtml === "") e.cellHtml = "&nbsp;";

        return e;
    },
    __OnScroll: function (e) {
        this._headerEl.scrollLeft = this._viewEl.scrollLeft;
    },
    __OnClick: function (e) {

        var ckAllId = this.uid + "$ck$all";
        if (e.target.id == ckAllId) {
            var ck = document.getElementById(ckAllId);
            if (ck) {
                var checked = ck.checked;

                var value = this.getValue();
                this._oldValue = value;

                if (checked) {
                    this.selectAll();
                } else {
                    this.deselectAll();
                }
                this._OnSelectionChanged();

                if (value != this.getValue()) {
                    this._OnValueChanged();

                    this.fire("itemclick", { htmlEvent: e });
                }
            }
            return;
        }

        this._fireEvent(e, 'Click');
    },

    setValue: function (value) {
        mini.ListBox.superclass.setValue.call(this, value);

        this._doCheckState();
    },

    _doCheckState: function () {
        //alert(1);
        var ckAllId = this.uid + "$ck$all";
        var ck = jQuery(document.getElementById(ckAllId));
        if (this._isSelectedAll() && this.getSelecteds().length != 0) {
            //ck.attr("checked", true)
            if (ck.prop) {
                ck.prop("checked", true);
            } else {
                ck.attr("checked", true)
            }

        } else {
            //ck.attr("checked", false)            
            if (ck.prop) {
                ck.prop("checked", false);
            } else {
                ck.attr("checked", false)
            }
        }
    },

    _OnValueChanged: function (e) {
        mini.ListBox.superclass._OnValueChanged.call(this);

        this._doCheckState();
    },
    ////////////////////////////////
    getAttrs: function (el) {
        var attrs = mini.ListBox.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["nullItemText", "ondrawcell"//, "onclick"
             ]
        );
        mini._ParseBool(el, attrs,
            ["showCheckBox", "showAllCheckBox", "showNullItem"
             ]
        );

        if (el.nodeName.toLowerCase() != "select") {
            var cs = mini.getChildNodes(el);
            for (var i = 0, l = cs.length; i < l; i++) {
                var node = cs[i];
                var property = jQuery(node).attr("property");
                if (!property) continue;
                property = property.toLowerCase();
                if (property == "columns") {
                    attrs.columns = mini._ParseColumns(node);
                } else if (property == "data") {
                    attrs.data = node.innerHTML;
                }
            }
        }

        return attrs;
    }
});
mini.regClass(mini.ListBox, "listbox");
/**
* jQuery MiniUI V3.0
* 
* Web Site : http://www.miniui.com
*
* Commercial License : http://www.miniui.com/license
*
* Copyright(c) 2012 All Rights Reserved. Shanghai PusSoft Co., Ltd (上海普加软件有限公司) [ services@plusoft.com.cn ]. 
* 
*/

mini.CheckBoxList = function () {
    mini.CheckBoxList.superclass.constructor.apply(this, arguments);
}
mini.extend(mini.CheckBoxList, mini.ListControl, {
    formField: true,
    _labelFieldCls: 'mini-labelfield-checkboxlist',

    multiSelect: true,
    repeatItems: 0,
    repeatLayout: "none", //none, flow, table
    repeatDirection: "horizontal",  //vertical, horizontal

    _itemCls: "mini-checkboxlist-item",
    _itemHoverCls: "mini-checkboxlist-item-hover",
    _itemSelectedCls: "mini-checkboxlist-item-selected",

    _tableCls: "mini-checkboxlist-table",
    _tdCls: "mini-checkboxlist-td",
    _checkType: "checkbox",

    uiCls: "mini-checkboxlist",
    _create: function () {
        var el = this.el = document.createElement("div");
        this.el.className = this.uiCls;

        this.el.innerHTML = '<table cellpadding="0" border="0" cellspacing="0" style="display:table;"><tr><td><div class="mini-list-inner"></div><div class="mini-errorIcon"></div><input type="hidden" /></td></tr></table>';
        //this.cellEl = this.el.firstChild.rows[0].cells[0];
        this.cellEl = el.getElementsByTagName("td")[0]; // this.el.firstChild.rows[0].cells[0];
        this._innerEl = this.cellEl.firstChild;
        this._valueEl = this.cellEl.lastChild;
        this._errorIconEl = this.cellEl.childNodes[1];

        this._borderEl = this.el.firstChild;

        var me = this;
        mini.on(this.el, "keyup", function (event) {
            if (event.keyCode == 32) {
                $(event.target).click();
            }
        });
    },
    //    _initEvents: function () {
    //        mini.CheckBoxList.superclass._initEvents.call(this);
    //        mini.on(this._viewEl, "scroll", this.__OnScroll, this);
    //    },
    _getRepeatTable: function () {
        var table = [];
        if (this.repeatItems > 0) {
            if (this.repeatDirection == "horizontal") {
                var row = [];
                for (var i = 0, l = this.data.length; i < l; i++) {
                    var item = this.data[i];
                    if (row.length == this.repeatItems) {
                        table.push(row);
                        row = [];
                    }
                    row.push(item);
                }
                table.push(row);
            } else {
                var len = this.repeatItems > this.data.length ? this.data.length : this.repeatItems;
                for (var i = 0, l = len; i < l; i++) {
                    table.push([]);
                }
                for (var i = 0, l = this.data.length; i < l; i++) {
                    var item = this.data[i];
                    var index = i % this.repeatItems;
                    table[index].push(item);
                }
            }
        } else {
            table = [this.data.clone()];
        }
        return table;
    },
    doUpdate: function () {
        var data = this.data;
        var s = "";

        for (var i = 0, l = data.length; i < l; i++) {
            var item = data[i];
            item._i = i;
        }

        if (this.repeatLayout == "flow") {

            var table = this._getRepeatTable();
            for (var i = 0, l = table.length; i < l; i++) {
                var row = table[i];
                for (var j = 0, k = row.length; j < k; j++) {
                    var item = row[j];
                    s += this._createItemHtml(item, item._i);
                }
                if (i != l - 1) {
                    s += '<br/>';
                }
            }


        } else if (this.repeatLayout == "table") {
            var table = this._getRepeatTable();
            s += '<table class="' + this._tableCls + '" cellpadding="0" cellspacing="1">';
            for (var i = 0, l = table.length; i < l; i++) {
                var row = table[i];
                s += '<tr>';
                for (var j = 0, k = row.length; j < k; j++) {
                    var item = row[j];
                    s += '<td class="' + this._tdCls + '">';
                    s += this._createItemHtml(item, item._i);
                    s += '</td>';
                }
                s += '</tr>';
            }
            s += '</table>';
        } else {
            for (var i = 0, l = data.length; i < l; i++) {
                var item = data[i];
                s += this._createItemHtml(item, i);
            }
        }
        this._innerEl.innerHTML = s;

        for (var i = 0, l = data.length; i < l; i++) {
            var item = data[i];
            delete item._i;
        }
    },
    _createItemHtml: function (item, index) {
        var e = this._OnDrawItem(item, index);
        var id = this._createItemId(index);
        var ckId = this._createCheckId(index);
        var ckValue = this.getItemValue(item);

        var disable = '';

        var s = '<div id="' + id + '" index="' + index + '" class="' + this._itemCls + ' ';
        if (item.enabled === false) {
            s += ' mini-disabled ';
            disable = 'disabled';
        }

        var onclick = 'onclick="return false"';
        //if (isChrome) {
        onclick = 'onmousedown="this._checked = this.checked;" onclick="this.checked = this._checked"';
        //}

        s += e.itemCls + '" style="' + e.itemStyle + '"><span tabIndex="0" class="mini-list-icon mini-icon"></span><input style="display:none;" ' + onclick + ' ' + disable + ' value="' + ckValue + '" id="' + ckId + '" type="' + this._checkType + '" /><label for="' + ckId + '" onclick="return false;">';
        s += e.itemHtml + '</label></div>';
        return s;
    },
    _OnDrawItem: function (item, index) {
        var value = this.getItemText(item);
        var e = {
            index: index,
            item: item,
            itemHtml: value,
            itemCls: "",
            itemStyle: ""
        };
        this.fire("drawitem", e);

        if (e.itemHtml === null || e.itemHtml === undefined) e.itemHtml = "";

        return e;
    },

    setRepeatItems: function (value) {
        value = parseInt(value);
        if (isNaN(value)) value = 0;
        if (this.repeatItems != value) {
            this.repeatItems = value;
            this.doUpdate();
        }
    },
    getRepeatItems: function () {
        return this.repeatItems;
    },
    setRepeatLayout: function (value) {
        if (value != "flow" && value != "table") value = "none";
        if (this.repeatLayout != value) {
            this.repeatLayout = value;
            this.doUpdate();
        }
    },
    getRepeatLayout: function () {
        return this.repeatLayout;
    },
    setRepeatDirection: function (value) {
        if (value != "vertical") value = "horizontal";
        if (this.repeatDirection != value) {
            this.repeatDirection = value;
            this.doUpdate();
        }
    },
    getRepeatDirection: function () {
        return this.repeatDirection;
    },
    ///////////////////////////////////////////////
    getAttrs: function (el) {
        var attrs = mini.CheckBoxList.superclass.getAttrs.call(this, el);
        var jq = jQuery(el);

        mini._ParseString(el, attrs,
            [
                "ondrawitem"
             ]
        );

        var repeatItems = parseInt(jq.attr("repeatItems"));
        if (!isNaN(repeatItems)) {
            attrs.repeatItems = repeatItems;
        }
        var repeatLayout = jq.attr("repeatLayout");
        if (repeatLayout) {
            attrs.repeatLayout = repeatLayout;
        }
        var repeatDirection = jq.attr("repeatDirection");
        if (repeatDirection) {
            attrs.repeatDirection = repeatDirection;
        }
        return attrs;
    }
});
mini.regClass(mini.CheckBoxList, "checkboxlist");
/**
* jQuery MiniUI v3.0
* 
* Web Site : http://www.miniui.com
*
* Commercial License : http://www.miniui.com/license
*
* Copyright(c) 2012 All Rights Reserved. Shanghai PusSoft Co., Ltd (上海普加软件有限公司) [ services@plusoft.com.cn ]. 
* 
*/

mini.RadioButtonList = function () {
    mini.RadioButtonList.superclass.constructor.apply(this, arguments);
}
mini.extend(mini.RadioButtonList, mini.CheckBoxList, {
    multiSelect: false,

    _itemCls: "mini-radiobuttonlist-item",
    _itemHoverCls: "mini-radiobuttonlist-item-hover",
    _itemSelectedCls: "mini-radiobuttonlist-item-selected",

    _tableCls: "mini-radiobuttonlist-table",
    _tdCls: "mini-radiobuttonlist-td",
    _checkType: "radio",

    uiCls: "mini-radiobuttonlist"
});
mini.regClass(mini.RadioButtonList, "radiobuttonlist");
/**
* jQuery MiniUI V3.0
* 
* Web Site : http://www.miniui.com
*
* Commercial License : http://www.miniui.com/license
*
* Copyright(c) 2012 All Rights Reserved. Shanghai PusSoft Co., Ltd (上海普加软件有限公司) [ services@plusoft.com.cn ]. 
* 
*/

//Number.prototype.toFixed = function (s) {
//    var changenum = (parseInt(this * Math.pow(10, s) + 0.5) / Math.pow(10, s)).toString();
//    var index = changenum.indexOf(".");
//    if (index < 0 && s > 0) {
//        changenum = changenum + ".";
//        for (i = 0; i < s; i++) {
//            changenum = changenum + "0";
//        }
//    } else {
//        index = changenum.length - index;
//        for (i = 0; i < (s - index) + 1; i++) {
//            changenum = changenum + "0";
//        }
//    }
//    return changenum;
//}

mini.Spinner = function () {
    mini.Spinner.superclass.constructor.apply(this, arguments);
    this.setValue(this.minValue);
}
mini.extend(mini.Spinner, mini.ButtonEdit, {
    value: 0,
    minValue: 0,
    maxValue: 100,
    increment: 1,
    decimalPlaces: -1,   //保留的小数点位数
    changeOnMousewheel: true,
    allowLimitValue: true,

    allowLoopValue: false,

    allowNull: false,

    set: function (kv) {
        if (typeof kv == 'string') {
            return this;
        }

        var value = kv.value;
        delete kv.value;

        mini.Spinner.superclass.set.call(this, kv);

        if (!mini.isNull(value)) {
            this.setValue(value);
        }

        return this;
    },

    uiCls: "mini-spinner",
    _getButtonHtml: function () {
        var hover = 'onmouseover="mini.addClass(this, \'' + this._buttonHoverCls + '\');" '
                        + 'onmouseout="mini.removeClass(this, \'' + this._buttonHoverCls + '\');"';
        return '<span name="trigger" class="mini-buttonedit-button mini-buttonedit-trigger" ' + hover + '><span class="mini-buttonedit-up"><span class="mini-icon"></span></span><span class="mini-buttonedit-down"><span class="mini-icon"></span></span></span>';
    },

    _initEvents: function () {
        mini.Spinner.superclass._initEvents.call(this);

        mini._BindEvents(function () {
            //            this.on("buttonmousedown", this.__OnButtonMouseDown, this);
            //            mini_onOne(this.el, "mousewheel", this.__OnMousewheel, this);


            this.on("buttonmousedown", this.__OnButtonMouseDown, this);
            mini.on(this.el, "mousewheel", this.__OnMousewheel, this);
        }, this);

    },

    _ValueLimit: function () {
        if (this.allowLimitValue == false) return;
        if (mini.isNull(this.value) && this.allowNull) return;
        if (this.minValue > this.maxValue) {
            this.maxValue = this.minValue + 100;
        }
        if (this.value < this.minValue) {
            this.setValue(this.minValue);
        }
        if (this.value > this.maxValue) {
            this.setValue(this.maxValue);
        }
    },
    getFormValue: function () {
        var v = this.value;
        v = parseFloat(v);
        if (this.allowNull && isNaN(v)) return "";
        if (isNaN(v)) v = 0;
        var s = String(v).split(".");
        var s1 = s[0], s2 = s[1];
        if (!s2) s2 = "";
        if (this.decimalPlaces > 0) {
            for (var i = s2.length, l = this.decimalPlaces; i < l; i++) {
                s2 += "0";
            }
            s2 = "." + s2;
        } else {
            if (s2) s2 = "." + s2;
        }
        return s1 + s2;
    },

    setValue: function (value) {
        //alert(this.allowNull);

        //value = parseFloat(value);
        //if (isNaN(value)) value = this.defaultValue;

        value = mini.parseFloat(value, this.culture, this.format);
        value = parseFloat(value);


        if (isNaN(value) && !this.allowNull) value = this.minValue;
        if (isNaN(value) && this.allowNull) value = null;
        if (value && this.decimalPlaces >= 0) value = parseFloat(value.toFixed(this.decimalPlaces));
        if (this.value != value) {
            this.value = value; //this._getFormattedString(value);            
            this._ValueLimit();
            this._valueEl.value = this.value;

            this.text = this._textEl.value = this.getFormatValue();
        } else {
            this.text = this._textEl.value = this.getFormatValue();
        }
    },
    setMaxValue: function (value) {
        value = parseFloat(value);
        if (isNaN(value)) return;
        value = parseFloat(value);
        if (this.maxValue != value) {
            this.maxValue = value;
            this._ValueLimit();
        }
    },
    getMaxValue: function (value) {
        return this.maxValue;
    },
    setMinValue: function (value) {
        value = parseFloat(value);
        if (isNaN(value)) return;
        value = parseFloat(value);
        if (this.minValue != value) {
            this.minValue = value;
            this._ValueLimit();
        }
    },
    getMinValue: function (value) {
        return this.minValue;
    },
    setIncrement: function (value) {
        value = parseFloat(value);
        if (isNaN(value)) return;
        if (this.increment != value) {
            this.increment = value;
        }
    },
    getIncrement: function (value) {
        return this.increment;
    },
    setDecimalPlaces: function (value) {
        value = parseInt(value);
        if (isNaN(value) || value < 0) return;
        this.decimalPlaces = value;
    },
    getDecimalPlaces: function (value) {
        return this.decimalPlaces;
    },
    setChangeOnMousewheel: function (value) {
        this.changeOnMousewheel = value;
    },
    getChangeOnMousewheel: function (value) {
        return this.changeOnMousewheel;
    },
    setAllowLimitValue: function (value) {
        this.allowLimitValue = value;
    },
    getAllowLimitValue: function (value) {
        return this.allowLimitValue;
    },
    setAllowNull: function (value) {
        this.allowNull = value;
    },
    getAllowNull: function (value) {
        return this.allowNull;
    },
    format: "",
    setFormat: function (value) {
        if (typeof value != "string") return;
        if (this.format != value) {
            this.format = value;

            this.setText(this.getFormatValue())
        }
    },
    getFormat: function () {
        return this.format;
    },
    getFormatValue: function () {
        if (mini.isNull(this.value)) return "";
        if (this.format && mini.isNumber(this.value)) return mini.formatNumber(this.value, this.format, this.culture);
        return this.value;
    },
    setAllowLoopValue: function (value) {
        this.allowLoopValue = value;
    },
    getAllowLoopValue: function () {
        return this.allowLoopValue;
    },

    ////////////////////////////////////////////////
    _SpinTimer: null,
    _StartSpin: function (Increment, time, count) {
        this._StopSpin();

        var sf = this;

        function loop(value) {
            if (Increment > 0) {
                if (value > sf.maxValue) sf.setValue(sf.minValue);
            } else {
                if (value < sf.minValue) sf.setValue(sf.maxValue);
            }
        }

        var nx = 1000000;
        var n1 = this.value * nx;
        var n2 = Increment * nx;
        var v = (n1 + n2) / nx;

        //this.setValue(this.value + Increment);
        this.setValue(v);

        if (sf.allowLoopValue) {
            loop(v);
        }

        //this._OnValueChanged();


        var sourceCount = count;
        var now = new Date();
        this._SpinTimer = setInterval(function () {

            var v = sf.value + Increment;
            sf.setValue(v);

            if (sf.allowLoopValue) {
                loop(v);
            }

            sf._OnValueChanged();

            count--;
            if (count == 0 && time > 50) {
                sf._StartSpin(Increment, time - 100, sourceCount + 3);

            }

            //防止alert
            var now2 = new Date();
            if (now2 - now > 500) sf._StopSpin();
            now = now2;
        }, time);
        mini.on(document, "mouseup", this._OnDocumentMouseUp, this);
        //document.title = time +":"+count;
    },
    _StopSpin: function () {
        clearInterval(this._SpinTimer);
        this._SpinTimer = null;
    },
    __OnButtonMouseDown: function (e) {
        this._DownValue = this.getValue();

        this.__OnInputTextChanged();

        if (e.spinType == "up") {

            this._StartSpin(this.increment, 230, 2);
        } else {
            this._StartSpin(-this.increment, 230, 2);
        }
    },
    __OnInputKeyDown: function (e) {
        mini.Spinner.superclass.__OnInputKeyDown.call(this, e);

        var KEY = mini.Keyboard;

        if (this.isReadOnly()) return;

        switch (e.keyCode) {
            case KEY.Top:
                if (this.keyNavEnabled) {
                    this.setValue(this.value + this.increment);
                    this._OnValueChanged();
                }
                break;
            case KEY.Bottom:
                if (this.keyNavEnabled) {
                    this.setValue(this.value - this.increment);
                    this._OnValueChanged();
                }
                break;
        }
    },

    __OnMousewheel: function (e) {
        if (this.isReadOnly()) return;
        if (this.changeOnMousewheel == false) return;


        if (this.text != this._textEl.value) {
            this.__OnInputTextChanged();
            //document.title = new Date().getTime();
        }


        var wheelDelta = e.wheelDelta || e.originalEvent.wheelDelta;            //ie
        if (mini.isNull(wheelDelta)) wheelDelta = -e.originalEvent.detail * 24; //ff
        var increment = this.increment;
        if (wheelDelta < 0) increment = -increment;


        var nx = 1000000;
        var n1 = this.value * nx;
        var n2 = increment * nx;
        var v = (n1 + n2) / nx;
        this.setValue(v);

        //this.setValue(this.value + increment);

        this._OnValueChanged();



        return false;
    },
    _OnDocumentMouseUp: function (e) {
        this._StopSpin();
        mini.un(document, "mouseup", this._OnDocumentMouseUp, this);

        if (this._DownValue != this.getValue()) {
            this._OnValueChanged();
        }
    },
    __OnInputTextChanged: function (e) {
        var _value = this.getValue();


        var value = mini.parseFloat(this._textEl.value, this.culture, this.format);
        this.setValue(value);
        //        if (isNaN(value)) {
        //            if (this.required) {
        //                this._textEl.value = this.getFormValue();
        //            } else {
        //                this.setValue(this.minValue);
        //            }
        //        } else {
        //            this.setValue(value);
        //        }

        if (_value != this.getValue()) {
            this._OnValueChanged();
        }
    },

    ////////////////////////////
    getAttrs: function (el) {
        var attrs = mini.Spinner.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["minValue", "maxValue", "increment", "decimalPlaces", "format"
             ]
        );
        mini._ParseBool(el, attrs,
            ["allowLimitValue", "allowNull", "changeOnMousewheel", "allowLoopValue"
             ]
        );


        return attrs;
    }

});
mini.regClass(mini.Spinner, 'spinner');


/**
* jQuery MiniUI v3.0
* 
* Web Site : http://www.miniui.com
*
* Commercial License : http://www.miniui.com/license
*
* Copyright(c) 2012 All Rights Reserved. Shanghai PusSoft Co., Ltd (上海普加软件有限公司) [ services@plusoft.com.cn ]. 
* 
*/

mini.TimeSpinner = function () {
    mini.TimeSpinner.superclass.constructor.apply(this, arguments);
    
    this.setValue("00:00:00");
}
mini.extend(mini.TimeSpinner, mini.ButtonEdit, {

    value: null,
    format: 'H:mm:ss', //(当前只处理一个格式，以后处理更多格式，先满足国内习惯，后满足国际习惯，如h:mm:ss tt）

    uiCls: "mini-timespinner",
    _getButtonHtml: function () {
        var hover = 'onmouseover="mini.addClass(this, \'' + this._buttonHoverCls + '\');" '
                        + 'onmouseout="mini.removeClass(this, \'' + this._buttonHoverCls + '\');"';
        return '<span class="mini-buttonedit-button" ' + hover + '><span class="mini-buttonedit-up"><span class="mini-icon"></span></span><span class="mini-buttonedit-down"><span class="mini-icon"></span></span></span>';
    },
    _initEvents: function () {
        mini.TimeSpinner.superclass._initEvents.call(this);

        mini._BindEvents(function () {
            this.on("buttonmousedown", this.__OnButtonMouseDown, this);
            mini.on(this.el, "mousewheel", this.__OnMousewheel, this);
            mini.on(this._textEl, "keydown", this.__OnKeyDown, this);
        }, this);

    },
    setFormat: function (value) {
        if (typeof value != "string") return;
        var formats = ['H:mm:ss', 'HH:mm:ss', 'H:mm', 'HH:mm', 'H', 'HH', 'mm:ss'];
        //if (formats.indexOf(value) == -1) return;

        if (this.format != value) {
            this.format = value;
            this.text = this._textEl.value = this.getFormattedValue();
        }
    },
    getFormat: function () {
        return this.format;
    },
    setValue: function (value) {

        
        value = mini.parseTime(value, this.format);
        if (!value) value = null; //mini.parseTime("00:00:00", this.format);

        if (mini.isDate(value)) value = new Date(value.getTime());

        //if (mini.formatDate(this.value, "H:mm:ss") != mini.formatDate(value, "H:mm:ss")) {
        this.value = value;
        this.text = this._textEl.value = this.getFormattedValue();
        this._valueEl.value = this.getFormValue();
        //}
    },
    getValue: function () {
        return this.value == null ? null : new Date(this.value.getTime());
    },
    getFormValue: function () {
        if (!this.value) return "";
        return mini.formatDate(this.value, this.format);
    },
    getFormattedValue: function () {
        if (!this.value) return "";
        return mini.formatDate(this.value, this.format);
    },
    _ChangeValue: function (Increment, timeType) {
        var value = this.getValue();
        if (value) {
            switch (timeType) {
                case "hours":
                    var hours = value.getHours() + Increment;
                    if (hours > 23) hours = 23;
                    if (hours < 0) hours = 0;
                    value.setHours(hours);
                    break;
                case "minutes":
                    var minutes = value.getMinutes() + Increment;
                    if (minutes > 59) minutes = 59;
                    if (minutes < 0) minutes = 0;
                    value.setMinutes(minutes);
                    break;
                case "seconds":
                    var seconds = value.getSeconds() + Increment;
                    if (seconds > 59) seconds = 59;
                    if (seconds < 0) seconds = 0;
                    value.setSeconds(seconds);
                    break;
            }
        } else {
            value = "00:00:00";
        }

        this.setValue(value);
        //this._OnValueChanged();
    },
    ////////////////////////////////////////////////    
    _SpinTimer: null,
    _StartSpin: function (Increment, time, count) {
        this._StopSpin();

        this._ChangeValue(Increment, this._timeType);
        //        this.setValue(this.value + Increment);
        //        this._OnValueChanged();

        var sf = this;
        var sourceCount = count;
        var now = new Date();
        this._SpinTimer = setInterval(function () {

            sf._ChangeValue(Increment, sf._timeType);

            count--;
            if (count == 0 && time > 50) {
                sf._StartSpin(Increment, time - 100, sourceCount + 3);

            }

            //防止alert
            var now2 = new Date();
            if (now2 - now > 500) sf._StopSpin();
            now = now2;
        }, time);
        mini.on(document, "mouseup", this._OnDocumentMouseUp, this);
        //document.title = time +":"+count;
    },
    _StopSpin: function () {
        clearInterval(this._SpinTimer);
        this._SpinTimer = null;
        //this._timeType = null;
    },
    __OnButtonMouseDown: function (e) {
        this._DownValue = this.getFormValue();
        this._timeType = "hours";
        if (e.spinType == "up") {
            this._StartSpin(1, 230, 2);
        } else {
            this._StartSpin(-1, 230, 2);
        }
    },
    //    __OnKeyDown: function (e) {
    //        var KEY = mini.Keyboard;
    //        switch (e.keyCode) {
    //            case KEY.Top:
    //                this.setValue(this.value + 1);
    //                this._OnValueChanged();
    //                break;
    //            case KEY.Bottom:
    //                this.setValue(this.value - 1);
    //                this._OnValueChanged();
    //                break;
    //        }
    //    },
    //    __OnMousewheel: function (e) {
    //        var wheelDelta = e.wheelDelta;
    //        if (mini.isNull(wheelDelta)) wheelDelta = -e.detail * 24;
    //        var increment = this.increment;
    //        if (wheelDelta < 0) increment = -increment;
    //        this.setValue(this.value + increment);
    //        this._OnValueChanged();
    //        return false;
    //    },
    _OnDocumentMouseUp: function (e) {
        this._StopSpin();
        mini.un(document, "mouseup", this._OnDocumentMouseUp, this);

        if (this._DownValue != this.getFormValue()) {
            this._OnValueChanged();
        }
    },
    __OnInputTextChanged: function (e) {
        
        var _value = this.getFormValue();

        this.setValue(this._textEl.value);

        if (_value != this.getFormValue()) {
            this._OnValueChanged();
        }
    },
    ////////////////////////////
    getAttrs: function (el) {
        var attrs = mini.TimeSpinner.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["format"
                ]
        );

        return attrs;
    }

});
mini.regClass(mini.TimeSpinner, 'timespinner');
/**
* jQuery MiniUI v3.0
* 
* Web Site : http://www.miniui.com
*
* Commercial License : http://www.miniui.com/license
*
* Copyright(c) 2012 All Rights Reserved. Shanghai PusSoft Co., Ltd (上海普加软件有限公司) [ services@plusoft.com.cn ]. 
* 
*/

mini.Lookup = function () {
    this.data = [];
    mini.Lookup.superclass.constructor.apply(this, arguments);

    mini.on(this._textEl, "mouseup", this.__OnMouseUp, this);

    this.on("showpopup", this.__OnShowPopup, this);
    
}
mini.extend(mini.Lookup, mini.PopupEdit, {
    allowInput: true,

    valueField: "id",
    textField: "text",
    delimiter: ',',
    setDelimiter: function (del) {
        this.delimiter = del;
    },
    getDelimiter: function () {
        return this.delimiter;
    },

    multiSelect: false,

    data: [],

    grid: null,
    _destroyPopup: false,




    uiCls: "mini-lookup",
    destroy: function (removeEl) {

        if (this.grid) {
            //this.grid.el.parentNode.removeChild(this.grid.el);

            this.grid.un("rowclick", this.__OnGridRowClickChanged, this);
            this.grid.un("load", this.__OnGridLoad, this);
            this.grid.un("checkall", this.__OnGridRowClickChanged, this);
            this.grid = null;


        }
        mini.Lookup.superclass.destroy.call(this, removeEl);
    },
    setMultiSelect: function (value) {
        this.multiSelect = value;

        if (this.grid) this.grid.setMultiSelect(value);
    },
    setGrid: function (value) {

        if (typeof value == "string") {
            mini.parse(value);
            value = mini.get(value);
        }
        this.grid = mini.getAndCreate(value);
        if (this.grid) {
            this.grid.setMultiSelect(this.multiSelect);
            this.grid.setCheckSelectOnLoad(false);
            this.grid.on("rowclick", this.__OnGridRowClickChanged, this);
            this.grid.on("load", this.__OnGridLoad, this);
            this.grid.on("checkall", this.__OnGridRowClickChanged, this);

        }
    },
    getGrid: function () {
        return this.grid;
    },
    setValueField: function (valueField) {
        this.valueField = valueField;
        //        if (this._listbox) {
        //            this._listbox.setValueField(valueField);
        //        }
    },
    getValueField: function () {
        return this.valueField;
    },
    setTextField: function (value) {
        //if (this._listbox) this._listbox.setTextField(value);
        this.textField = value;
    },
    getTextField: function () {
        return this.textField;
    },
    deselectAll: function () {
        this.data = [];
        this.setValue("");
        this.setText("");
        if (this.grid) this.grid.deselectAll();
    },
    ///////////////////////////////////////////////////
    getItemValue: function (item) {
        return String(item[this.valueField]);
    },
    getItemText: function (item) {
        var t = item[this.textField];
        return mini.isNull(t) ? '' : String(t);
    },
    getValueAndText: function (records) {
        if (mini.isNull(records)) records = [];

        var values = [];
        var texts = [];
        for (var i = 0, l = records.length; i < l; i++) {
            var record = records[i];
            if (record) {
                values.push(this.getItemValue(record));
                texts.push(this.getItemText(record));
            }
        }
        return [values.join(this.delimiter), texts.join(this.delimiter)];
    },
    _createData: function () {
        this.value = mini.isNull(this.value) ? "" : String(this.value);
        this.text = mini.isNull(this.text) ? "" : String(this.text);
        //        if (typeof this.value != "string") this.value = "";
        //        if (typeof this.text != "string") this.text = "";

        var data = [];
        var values = this.value.split(this.delimiter);
        var texts = this.text.split(this.delimiter);
        var len = values.length;
        //if (len < values.length) len = values.length;
        if (this.value) {
            for (var i = 0, l = len; i < l; i++) {
                var row = {};
                var id = values[i];
                var text = texts[i];
                row[this.valueField] = id ? id : "";
                row[this.textField] = text ? text : "";
                data.push(row);
            }
        }
        this.data = data;

    },
    _getValueMaps: function (rows) {

        var vs = {};
        for (var i = 0, l = rows.length; i < l; i++) {
            var row = rows[i];
            var id = row[this.valueField];
            vs[id] = row;
        }
        return vs;
    },
    setValue: function (value) {

        mini.Lookup.superclass.setValue.call(this, value);
        this._createData();
    },
    setText: function (value) {
        mini.Lookup.superclass.setText.call(this, value);
        this._createData();
    },
    __OnGridRowClickChanged: function (e) {
        var me = this,
            grid = me.grid;

        //var rows = this._getValueMaps(this.grid.getData());         //当前页行
        var rows = this._getValueMaps(grid.getList());         //当前页行
        var sels = this._getValueMaps(grid.getSelecteds());    //当前页选中
        var vs = this._getValueMaps(this.data);                     //所有选中

        if (this.multiSelect == false) {
            vs = {};
            this.data = [];
        }

        //处理删除
        var removes = {};
        for (var id in vs) {
            var o = vs[id];
            if (rows[id]) {         //如果在当前页
                if (sels[id]) {     //如果被选中

                } else {            //否则去除掉
                    removes[id] = o;
                }
            }
        }

        for (var i = this.data.length - 1; i >= 0; i--) {
            var o = this.data[i];
            var id = o[this.valueField];
            if (removes[id]) this.data.removeAt(i);
        }


        //        //处理增加
        //        for (var id in sels) {
        //            var o = sels[id];
        //            if (!vs[id]) this.data.push(o);
        //        }


        //处理增加
        var adds = [];
        for (var id in sels) {
            var o = sels[id];
            if (!vs[id]) adds.push(o);
        }

        adds.sort(function (a, b) {
            var index1 = grid.indexOf(a),
                index2 = grid.indexOf(b);
            if (index1 < index2) return -1;
            if (index1 == index2) return 0;
            return 1;
        });

        this.data.addRange(adds);

        /////////////////////////////////////////




        var vts = this.getValueAndText(this.data);

        this.setValue(vts[0]);
        this.setText(vts[1]);

        this._OnValueChanged();
    },
    __OnGridLoad: function (e) {
        this.__OnShowPopup(e);
    },
    __OnShowPopup: function (e) {

        var vsb = String(this.value).split(this.delimiter);
        var vs = {};
        for (var i = 0, l = vsb.length; i < l; i++) {
            var v = vsb[i];
            vs[v] = 1;
        }

        var rows = this.grid.getData();
        //var vs = this._getValueMaps(this.data);                     //所有选中

        var sels = [];
        for (var i = 0, l = rows.length; i < l; i++) {
            var row = rows[i];
            var id = row[this.valueField];
            if (vs[id]) sels.push(row);
        }

        this.grid.selects(sels);
    },
    //////////////////////////////////////////////

    //禁止输入，光标可操作
    doUpdate: function () {
        mini.Lookup.superclass.doUpdate.call(this);
        this._textEl.readOnly = true;
        this.el.style.cursor = "default";
        //this.addCls(this._readOnlyCls);
    },
    __OnInputKeyDown: function (e) {
        mini.Lookup.superclass.__OnInputKeyDown.call(this, e);
        //e.preventDefault();
        switch (e.keyCode) {
            case 46:    //del
            case 8:    //backspace

                break;
            case 37:    //left

                break;
            case 39:    //right

                break;
        }
        //        this.fire("keydown", { htmlEvent: e });
        //        if (e.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) {
        //            return false;
        //        }
        //        if (e.keyCode == 13) {
        //            this.fire("enter");
        //        }
    },
    __OnMouseUp: function (e) {
        if (this.isReadOnly()) return;
        //mini.Lookup.superclass.__OnMouseUp.call(this, e);

        var rg = mini.getSelectRange(this._textEl);
        var start = rg[0], end = rg[1];

        //alert(rg[0] + ":" + rg[1]);
        var index = this._findTextIndex(start);
        //document.title = index;
        //暂时不做。。。
    },
    _findTextIndex: function (rgIndex) {
        var index = -1;
        if (this.text == "") return index;

        var texts = String(this.text).split(this.delimiter);
        var len = 0;
        for (var i = 0, l = texts.length; i < l; i++) {
            var text = texts[i];
            if (len < rgIndex && rgIndex <= len + text.length) {
                index = i;
                break;
            }
            len = len + text.length + 1;
        }
        return index;
    },

    /////////////////////////////////////////////
    getAttrs: function (el) {
        var attrs = mini.Lookup.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["grid", "valueField", "textField", "delimiter"
             ]
        );
        mini._ParseBool(el, attrs,
            ["multiSelect"
             ]
        );

        return attrs;
    }
});

mini.regClass(mini.Lookup, 'lookup');

/*
    目的：多选/单选数据，标准使用。复杂使用，可以做一个弹出表格选择面板示例。
        本地
        远程数据

    另外，弹出面板的表格数据选择，做成一个独立示例。
*/
/**
* jQuery MiniUI v3.0
* 
* Web Site : http://www.miniui.com
*
* Commercial License : http://www.miniui.com/license
*
* Copyright(c) 2012 All Rights Reserved. Shanghai PusSoft Co., Ltd (上海普加软件有限公司) [ services@plusoft.com.cn ]. 
* 
*/

/*
1.当setValue,setText的时候，自动生成data，然后刷新refresh
2.界面操作：
删除
增加
都从DOM级别修改
3.导航
4.输入下拉        
*/

mini.TextBoxList = function (el) {
    mini.TextBoxList.superclass.constructor.call(this, null);

    this.data = [];
    this.selecteds = []; //selecteds
    this.doUpdate();    

    //this._createPopup();
    if (el) mini.applyTo.call(this, el);
}
mini.extend(mini.TextBoxList, mini.ValidatorBase, {
    formField: true,

    remote: true,       //url, data

    value: "",
    text: "",
    valueField: "id",
    textField: "text",
    selecteds: null,

    data: null,

    url: "",
    delay: 150,

    allowInput: true,

    editIndex: 0,

    _focusCls: "mini-textboxlist-focus",
    _itemHoverClass: "mini-textboxlist-item-hover",
    _itemSelectedClass: "mini-textboxlist-item-selected",
    _closeHoverClass: "mini-textboxlist-close-hover",

    textName: "",
    setTextName: function (value) {
        this.textName = value;
        //if (this._textEl) mini.setAttr(this._textEl, "name", this.textName);
    },
    getTextName: function () {
        return this.textName;
    },

    getData: function () {
        return this.data;
    },

    setData: function (data) {
        this.data = data;
    },

    getRemote: function () {
        return this.remote;
    },

    setRemote: function (remote) {
        this.remote = remote;
    },

    ////////////////////////////////////////////
    uiCls: "mini-textboxlist",
    _create: function () {

        var html = '<table class="mini-textboxlist mini-corner-all" cellpadding="0" cellspacing="0"><tr ><td class="mini-textboxlist-border mini-corner-all"><ul></ul><a href="#"></a><input type="hidden"/></td></tr></table>';
        var d = document.createElement("div");
        d.innerHTML = html;
        this.el = d.firstChild;

        var td = this.el.getElementsByTagName("td")[0];
        this.ulEl = td.firstChild;
        this._valueEl = td.lastChild;
        this.focusEl = td.childNodes[1];
    },
    destroy: function (removeEl) {
        if (this.isShowPopup) {
            this.hidePopup();
        }
        if (this._inputEl) {
            mini.clearEvent(this._inputEl);
            this._inputEl.onkeyup = null;
            this._inputEl.onfocus = null;
            this._inputEl.onblur = null;
        }
        mini.un(document, "mousedown", this.__OnDocMouseDown, this);
        mini.TextBoxList.superclass.destroy.call(this, removeEl);
    },
    _initEvents: function () {
        mini.TextBoxList.superclass._initEvents.call(this);

        mini.on(this.el, "mousemove", this.__OnMouseMove, this);
        mini.on(this.el, "mouseout", this.__OnMouseOut, this);
        mini.on(this.el, "mousedown", this.__OnMouseDown, this);
        mini.on(this.el, "click", this.__OnClick, this);
        mini.on(this.el, "keydown", this.__OnKeyDown, this);

        mini.on(document, "mousedown", this.__OnDocMouseDown, this);
    },
    __OnDocMouseDown: function (e) {

        if (this.isReadOnly()) return;
        if (this.isShowPopup) {
            if (!mini.isAncestor(this.popup.el, e.target)) {
                this.hidePopup();
            }
        }
        var sf = this;
        if (this._focused) {
            if (this.within(e) == false) {


                clearInterval(this._ValueChangeTimer);

                this.select(null, false);
                //this.showInput(false);
                setTimeout(function () {
                    sf.showInput(false);
                }, 100);

                this.removeCls(this._focusCls);
                this._focused = false;

                //alert(this._inputEl.onblur);
            }

        }
    },
    ///////////////////////////////////////////////
    errorIconEl: null,
    getErrorIconEl: function () {
        if (!this._errorIconEl) {
            var tr = this.el.rows[0];
            var td = tr.insertCell(1);
            td.style.cssText = 'width:18px;vertical-align:top;';
            td.innerHTML = '<div class="mini-errorIcon"></div>';
            this._errorIconEl = td.firstChild;
        }
        return this._errorIconEl;
    },
    _RemoveErrorIcon: function () {
        if (this._errorIconEl) {
            jQuery(this._errorIconEl.parentNode).remove();
        }
        this._errorIconEl = null;
    },
    ///////////////////////////////////////////////
    doLayout: function () {
        if (this.canLayout() == false) return;
        mini.TextBoxList.superclass.doLayout.call(this);

        this.doReadOnly();
    },

    doReadOnly: function () {
        if (this.isReadOnly() || this.allowInput == false) {
            this._inputEl.readOnly = true;
        } else {
            this._inputEl.readOnly = false;
        }
    },

    doUpdate: function () {
        if (this._ValueChangeTimer) clearInterval(this._ValueChangeTimer);
        if (this._inputEl) mini.un(this._inputEl, "keydown", this.__OnInputKeyDown, this);

        var sb = [];
        var id = this.uid;
        for (var i = 0, l = this.selecteds.length; i < l; i++) {
            var o = this.selecteds[i];   //selecteds
            var li_id = id + "$text$" + i;
            var text = mini._getMap(this.textField, o); //o[this.textField];
            if (mini.isNull(text)) text = "";
            sb[sb.length] = '<li id="' + li_id + '" class="mini-textboxlist-item">';
            sb[sb.length] = text;
            sb[sb.length] = '<span class="mini-textboxlist-close"></span></li>';
        }
        var inputid = id + "$input";
        sb[sb.length] = '<li id="' + inputid + '" class="mini-textboxlist-inputLi"><input class="mini-textboxlist-input" type="text" autocomplete="off"></li>';

        this.ulEl.innerHTML = sb.join("");

        this.editIndex = this.selecteds.length;
        if (this.editIndex < 0) this.editIndex = 0;

        this.inputLi = this.ulEl.lastChild;
        this._inputEl = this.inputLi.firstChild;

        this._inputEl.placeholder = this.placeholder;

        mini.on(this._inputEl, "keydown", this.__OnInputKeyDown, this);

        var sf = this;
        this._inputEl.onkeyup = function () {
            sf._syncInputSize();
        }

        sf._ValueChangeTimer = null;
        sf._LastInputText = sf._inputEl.value;
        this._inputEl.onfocus = function () {
            sf._LastInputText = sf._inputEl.value;
            sf._ValueChangeTimer = setInterval(function () {
                //document.title = new Date().getTime();
                if (!sf._focused) {
                    clearInterval(sf._ValueChangeTimer);
                    sf._ValueChangeTimer = null;
                    return;
                }
                if (sf._LastInputText != sf._inputEl.value) {
                    sf._startQuery();
                    sf._LastInputText = sf._inputEl.value;
                }
            }, 10);

            sf.addCls(sf._focusCls);
            sf._focused = true;

            sf.fire("focus");
        }

        this._inputEl.onblur = function () {
            clearInterval(sf._ValueChangeTimer);
            sf._ValueChangeTimer = null;

            sf.fire("blur");
            //alert(1);

            if (sf.validateOnLeave && sf.isEditable()) {
                sf._tryValidate();
            }
        }

        this.doReadOnly();

        //        var inputEvent = "input";
        //        if (isIE) inputEvent = "propertychange";
        //        mini.on(this._inputEl, inputEvent, this.__OnInputTextChange, this);

        //this.select(this._selected);
    },
    getItemByEvent: function (event) {
        var domItem = mini.findParent(event.target, "mini-textboxlist-item");
        if (domItem) {
            var ids = domItem.id.split("$");
            var id = ids[ids.length - 1];
            return this.selecteds[id];
        }
    },
    getItem: function (id) {
        if (typeof id == "number") return this.selecteds[id];
        if (typeof id == "object") return id;
        //        for (var i = 0, l = this.selecteds.length; i < l; i++) {
        //            var o = this.selecteds[i];
        //            if (o._id == id) return o;
        //        }
    },
    getItemEl: function (o) {
        var index = this.selecteds.indexOf(o);
        var li_id = this.uid + "$text$" + index;
        return document.getElementById(li_id);
    },
    hoverItem: function (item, e) {
        if (this.isReadOnly() || this.enabled == false) return;
        this.blurItem();
        var li = this.getItemEl(item);
        mini.addClass(li, this._itemHoverClass);

        if (e && mini.hasClass(e.target, "mini-textboxlist-close")) {
            mini.addClass(e.target, this._closeHoverClass);
        }
    },
    blurItem: function () {
        var len = this.selecteds.length;
        for (var i = 0, l = len; i < l; i++) {
            var o = this.selecteds[i];

            var li = this.getItemEl(o);
            if (li) {
                mini.removeClass(li, this._itemHoverClass);

                mini.removeClass(li.lastChild, this._closeHoverClass);
            }
        }
    },
    showInput: function (index) {
        this.select(null);

        if (mini.isNumber(index)) {
            this.editIndex = index;
        } else {
            this.editIndex = this.selecteds.length;
        }
        if (this.editIndex < 0) this.editIndex = 0;
        if (this.editIndex > this.selecteds.length) this.editIndex = this.selecteds.length;

        var inputLi = this.inputLi;
        inputLi.style.display = "block";

        if (mini.isNumber(index) && index < this.selecteds.length) {
            var item = this.selecteds[index];
            var itemEl = this.getItemEl(item);
            jQuery(itemEl).before(inputLi);
        } else {
            this.ulEl.appendChild(inputLi);
        }
        if (index !== false) {
            setTimeout(function () {
                try {

                    inputLi.firstChild.focus();
                    mini.selectRange(inputLi.firstChild, 100);
                } catch (e) {
                }
            }, 10);
        } else {
            this.lastInputText = "";
            this._inputEl.value = "";
        }
        return inputLi;
    },
    select: function (item) {
        item = this.getItem(item);
        if (this._selected) {
            var itemEl = this.getItemEl(this._selected);
            mini.removeClass(itemEl, this._itemSelectedClass);
        }
        this._selected = item;

        if (this._selected) {
            var itemEl = this.getItemEl(this._selected);
            mini.addClass(itemEl, this._itemSelectedClass);
        }

        var sf = this;

        if (this._selected) {
            this.focusEl.focus();
            var me = this;
            setTimeout(function () {
                try {
                    me.focusEl.focus();
                } catch (ex) { }
            }, 50);
        }

        if (this._selected) {
            sf.addCls(sf._focusCls);
            sf._focused = true;
        }
    },
    ////////////////////////////////////////
    _doInsertInputValue: function () {

        var text = this.getInputText();
        var item = {};
        item[this.textField] = text;
        item[this.valueField] = text;
        var index = this.editIndex;

        this.insertItem(index, item);

    },
    _doInsertSelectValue: function () {

        if (this._listbox.getData().length == 0) return;

        var item = this._listbox.getSelected();
        var index = this.editIndex;

        if (item) {

            item = mini.clone(item);

            this.insertItem(index, item);
        }
    },
    insertItem: function (index, item) {
        this.selecteds.insert(index, item);
        var text = this.getText();
        var value = this.getValue();

        this.setValue(value, false);
        this.setText(text, false);

        this._createSelecteds();

        this.doUpdate();

        this.showInput(index + 1);

        this._OnValueChanged();
    },
    removeItem: function (item) {
        if (!item) return;
        var itemEl = this.getItemEl(item);
        mini.removeNode(itemEl);

        this.selecteds.remove(item);

        var text = this.getText();
        var value = this.getValue();


        this.setValue(value, false);
        this.setText(text, false);

        this._OnValueChanged();
    },
    _createSelecteds: function () {
        var texts = (this.text ? this.text : "").split(",");
        var values = (this.value ? this.value : "").split(",");

        if (values[0] == "") values = [];
        var len = values.length;
        this.selecteds.length = len;

        for (var i = 0, l = len; i < l; i++) {
            var o = this.selecteds[i];
            if (!o) {
                o = {};
                this.selecteds[i] = o;
            }

            //if (!o._id) o._id = this.itemID++;

            var text = !mini.isNull(texts[i]) ? texts[i] : "";
            var value = !mini.isNull(values[i]) ? values[i] : "";

            mini._setMap(this.textField, text, o);
            mini._setMap(this.valueField, value, o);
        }

        this.value = this.getValue();
        this.text = this.getText();
    },
    getInputText: function () {
        return this._inputEl ? this._inputEl.value : "";
    },
    getText: function () {
        var sb = [];
        for (var i = 0, l = this.selecteds.length; i < l; i++) {
            var o = this.selecteds[i];
            var name = mini._getMap(this.textField, o);
            if (mini.isNull(name)) name = "";
            name = name.replace(",", "，");
            sb.push(name);
        }
        return sb.join(",");
    },
    getValue: function () {
        var sb = [];
        for (var i = 0, l = this.selecteds.length; i < l; i++) {
            var o = this.selecteds[i];
            var v = mini._getMap(this.valueField, o);
            sb.push(v);
        }
        return sb.join(",")
    },

    getFormValue: function () {
        var value = this.value;
        if (value === null || value === undefined) value = "";
        return String(value);
    },

    ///////////////////////////////
    setName: function (value) {
        if (this.name != value) {
            this.name = value;
            this._valueEl.name = value;
        }
    },
    setValue: function (value) {

        if (mini.isNull(value)) value = "";

        if (this.value != value) {
            this.value = value;
            this._valueEl.value = value;
            this._createSelecteds();
            this.doUpdate();
        }
    },
    setText: function (value) {
        if (mini.isNull(value)) value = "";
        if (this.text !== value) {
            this.text = value;
            this._createSelecteds();
            this.doUpdate();
        }
    },
    setValueField: function (value) {
        this.valueField = value;
        this._createSelecteds();
    },
    getValueField: function () {
        return this.valueField;
    },
    setTextField: function (value) {
        this.textField = value;
        this._createSelecteds();
    },
    getTextField: function () {
        return this.textField;
    },
    setAllowInput: function (value) {
        this.allowInput = value;
        this.doLayout();
    },
    getAllowInput: function () {
        return this.allowInput;
    },
    setUrl: function (value) {
        this.url = value;
    },
    getUrl: function () {
        return this.url;
    },
    setPopupHeight: function (value) {
        this.popupHeight = value;
    },
    getPopupHeight: function () {
        return this.popupHeight;
    },
    setPopupMinHeight: function (value) {
        this.popupMinHeight = value;
    },
    getPopupMinHeight: function () {
        return this.popupMinHeight;
    },
    setPopupMaxHeight: function (value) {
        this.popupMaxHeight = value;
    },
    getPopupMaxHeight: function () {
        return this.popupMaxHeight;
    },


    valueFromSelect: true,
    setValueFromSelect: function (value) {
        this.valueFromSelect = value;
    },
    getValueFromSelect: function () {
        return this.valueFromSelect;
    },
    ////////////////////////////////////////////////    
    doQuery: function () {
        this._startQuery(true);
    },
    //文本框宽度调整
    _syncInputSize: function () {
        if (this.isDisplay() == false) return;
        var text = this.getInputText();
        var size = mini.measureText(this._inputEl, text);
        var width = size.width > 20 ? size.width + 4 : 20;
        var elWidth = mini.getWidth(this.el, true);
        if (width > elWidth - 15) width = elWidth - 15;
        this._inputEl.style.width = width + "px";
    },

    inputMode: false,
    setIputMode: function (value) {
        this.inputMode = value;
    },
    getIputMode: function () {
        return this.inputMode;
    },


    _startQuery: function (oldText) {
        var sf = this;

        if (this.inputMode) return;

        setTimeout(function () {
            sf._syncInputSize();
        }, 1);

        this.showPopup("loading");

        this._stopQuery();

        this._loading = true;

        this.delayTimer = setTimeout(function () {
            var text = sf._inputEl.value;

            //if (oldText === true || text != oldText) {
            sf._doQuery();
            //}
        }, this.delay);
    },
    ajaxDataType: "text",
    ajaxContentType: "application/x-www-form-urlencoded; charset=UTF-8",

    _getSelectedMap: function () {
        var map = {};
        for (var i = 0, l = this.selecteds.length; i < l; i++) {
            var o = this.selecteds[i];
            map[o[this.valueField]] = o[this.textField];

        }
        return map;
    },

    _getFilterLocalData: function (key) {
        var sf = this,
            data = [],
            map = this._getSelectedMap();

        key = (key || "").toLowerCase();

        for (var i = 0, l = sf.data.length; i < l; i++) {
            var o = sf.data[i];
            var id = o[this.valueField];
            if (!map[id]) {
                var text = o[this.textField];
                if (!key || String(text).toLowerCase().indexOf(key) != -1) {
                    data.push(o);
                }
            }
        }
        return data;
    },

    _doQuery: function () {
        if (this.isDisplay() == false) return;
        var text = this.getInputText();

        var sf = this;

        //local

        if (!sf.remote) {
            var data = this._getFilterLocalData(text);

            sf._listbox.setData(data);
            sf.showPopup();
            sf._listbox._focusItem(0, true);

            sf._loading = false;

            return;
        }


        //remote
        var dataSource = this._listbox.getData();
        var params = {
            //key: text,
            value: this.getValue(),
            text: this.getText()
        };
        params[this.searchField] = text;

        var url = this.url;
        var fn = typeof url == "function" ? url : window[url];
        if (typeof fn == "function") {
            url = fn(this);
        }
        if (!url) return;

        var ajaxMethod = "post";
        if (url) {
            if (url.indexOf(".txt") != -1 || url.indexOf(".json") != -1) {
                ajaxMethod = "get";
            }
        }

        var e = {
            url: url,
            async: true,
            params: params,
            data: params,
            type: this.ajaxType ? this.ajaxType : ajaxMethod,
            cache: false,
            cancel: false
        };

        jQuery.extend(true, e, this.ajaxOptions);

        this.fire("beforeload", e);
        if (e.cancel) return;

        var me = this;
        mini.copyTo(e, {
            success: function (text, textStatus, xhr) {
                delete e.params;
                var obj = { text: text, result: null, sender: me, options: e, xhr: xhr };
                var result = null;
                try {
                    mini_doload(obj);
                    result = obj.result;
                    if (!result) {
                        result = mini.decode(text);
                    }
                } catch (ex) {
                    if (mini_debugger == true) {
                        throw new Error("textboxlist json is error");
                    }
                }
                if (mini.isArray(result)) result = { data: result };

                //var data = mini.decode(text);

                //                if (mini.isNumber(data.error) && data.error != 0) {
                //                    var ex = {};
                //                    ex.stackTrace = data.stackTrace;
                //                    ex.errorMsg = data.errorMsg;
                //                    if (mini_debugger == true) {
                //                        alert(url + "\n" + ex.textStatus + "\n" + ex.stackTrace);
                //                    }
                //                    return;
                //                }

                if (me.dataField) {
                    result.data = mini._getMap(me.dataField, result);
                }
                if (!result.data) result.data = [];

                sf._listbox.setData(result.data);
                sf.showPopup();
                sf._listbox._focusItem(0, true);
                sf.fire("load", { data: result.data, result: result });
                sf._loading = false;

                if (sf._selectOnLoad) {
                    sf.__doSelectValue();
                    sf._selectOnLoad = null;
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                sf.showPopup("error");
            }
        });

        sf._ajaxer = mini.ajax(e);
    },
    _stopQuery: function () {
        if (this.delayTimer) {
            clearTimeout(this.delayTimer);
            this.delayTimer = null;
        }
        if (this._ajaxer) {
            this._ajaxer.abort();
        }
        this._loading = false;
    },

    ////////////////////////////////////////////////
    within: function (e) {
        if (mini.isAncestor(this.el, e.target)) return true;
        if (this.showPopup && this.popup && this.popup.within(e)) return true;
        return false;
    },

    ////////////////////////////////

    placeholder: "",
    setPlaceholder: function (value) {

        this.placeholder = value;
    },
    getPlaceholder: function (value) {
        return this.placeholder;
    },

    emptyText: "No Result",     //emptyDatText
    setEmptyText: function (value) {
        this.popupEmptyText = "<span class='mini-textboxlist-popup-noresult'>" + value + "</span>";
        this.emptyText = value;
    },
    getEmptyText: function (value) {
        return this.emptyText;
    },
    loadingText: "Loading...",
    setLoadingText: function (value) {
        this.popupLoadingText = "<span class='mini-textboxlist-popup-noresult'>" + value + "</span>";
        this.loadingText = value;
    },
    getLoadingText: function (value) {
        return this.loadingText;
    },
    errorText: "Error",
    setErrorText: function (value) {
        this.popupEmptyText = "<span class='mini-textboxlist-popup-noresult'>" + value + "</span>";
        this.errorText = value;
    },
    getErrorText: function (value) {
        return this.errorText;
    },
    ////////////////////////////////

    popupLoadingText: "<span class='mini-textboxlist-popup-loading'>Loading...</span>",
    popupErrorText: "<span class='mini-textboxlist-popup-error'>Error</span>",
    popupEmptyText: "<span class='mini-textboxlist-popup-noresult'>No Result</span>",

    isShowPopup: false,
    popupHeight: "",
    popupMinHeight: 30,
    popupMaxHeight: 150,
    _createPopup: function () {
        if (!this.popup) {
            this.popup = new mini.ListBox();
            this.popup.addCls("mini-textboxlist-popup");
            this.popup.setStyle("position:absolute;left:0;top:0;");
            this.popup.showEmpty = true;
            this.popup.setValueField(this.valueField);
            this.popup.setTextField(this.textField);
            this.popup.render(document.body);

            this.popup.on("itemclick", function (e) {
                this.hidePopup();

                this._doInsertSelectValue();
            }, this);
        }
        this._listbox = this.popup;
        return this.popup;
    },
    showPopup: function (action) {
        if (this.isDisplay() == false) return;
        this.isShowPopup = true;

        var popup = this._createPopup();

        popup.el.style.zIndex = mini.getMaxZIndex();
        var control = this._listbox;
        control.emptyText = this.popupEmptyText;

        //action = "loading";
        if (action == "loading") {
            control.emptyText = this.popupLoadingText;
            this._listbox.setData([]);
        } else if (action == "error") {
            control.emptyText = this.popupLoadingText;
            this._listbox.setData([]);
        }
        this._listbox.doUpdate();

        var box = this.getBox();
        var x = box.x, y = box.y + box.height;

        this.popup.el.style.display = "block";
        mini.setXY(popup.el, -1000, -1000);
        this.popup.setWidth(box.width);

        this.popup.setHeight(this.popupHeight);

        if (this.popup.getHeight() < this.popupMinHeight) {
            this.popup.setHeight(this.popupMinHeight);
        }
        if (this.popup.getHeight() > this.popupMaxHeight) {
            this.popup.setHeight(this.popupMaxHeight);
        }
        mini.setXY(popup.el, x, y);

    },
    hidePopup: function () {
        this.isShowPopup = false;
        if (this.popup) this.popup.el.style.display = "none";
    },
    ////////////////////////////////////////////////
    __OnMouseMove: function (e) {
        if (this.enabled == false) return;
        var item = this.getItemByEvent(e);
        if (!item) {
            this.blurItem();
            return;
        }
        this.hoverItem(item, e);
    },
    __OnMouseOut: function (e) {
        this.blurItem();
    },
    __OnClick: function (e) {
        if (this.isReadOnly() || this.enabled == false) return;
        if (this.enabled == false) return;
        //if (this.isReadOnly()) return;

        var item = this.getItemByEvent(e);
        if (!item) {
            if (mini.findParent(e.target, "mini-textboxlist-input")) {

            } else {
                this.showInput();
            }
            return;
        }
        this.focusEl.focus();
        this.select(item);

        if (e && mini.hasClass(e.target, "mini-textboxlist-close")) {
            this.removeItem(item);

            this.fire("removeitem", { item: item });
        }
    },
    __OnKeyDown: function (e) {


        if (this.isReadOnly() || this.allowInput == false) return false;

        var index = this.selecteds.indexOf(this._selected);

        var sf = this;
        function remove() {
            var item = sf.selecteds[index];
            sf.removeItem(item);

            item = sf.selecteds[index];
            if (!item) item = sf.selecteds[index - 1];
            sf.select(item);
            if (!item) {
                sf.showInput();
            }
        }

        switch (e.keyCode) {
            case 8:     //backspace
                e.preventDefault();
                remove();
                break;
            case 37:    //left
            case 38:    //top      
                this.select(null);
                this.showInput(index);
                break;
            case 39:    //right
            case 40:    //bottom
                index += 1;
                this.select(null);
                this.showInput(index);
                break;
            case 46:    //del
                remove();
                break;
        }
    },
    __doSelectValue: function () {
        var item = this._listbox.getFocusedItem();
        if (item) {
            this._listbox.setSelected(item);


            this.lastInputText = this.text;
            this.hidePopup();

            this._doInsertSelectValue();

        } else if (!this.valueFromSelect) {
            var text = this.getInputText().trim();
            if (text) {
                this._doInsertInputValue();
            }
            //            var item = this._listbox.getFocusedItem();
            //            if (!item && !this.valueFromSelect) {
            //                var value = this._inputEl.value.trim()
            //                if (value != "") {
            //                    //this.selecteds.push({ value: value, text: value })
            //                    this.doUpdate();
            //                    this.showInput()

            //                }

            //            }

        }

        //this._doSetValue();
        //                    var text = this._getValueAndText(this.value)[1];
        //                    this.setText(text, true);


    },
    __OnInputKeyDown: function (e) {

        this._selectOnLoad = null;

        if (this.isReadOnly() || this.allowInput == false) return false;
        
        if (e.keyCode == 13 && !this.isShowPopup) {
            return ;
        }

        e.stopPropagation();

        if (this.isReadOnly() || this.allowInput == false) return;

        var range = mini.getSelectRange(this._inputEl);
        var start = range[0], end = range[1], textLen = this._inputEl.value.length;
        var isFirst = start == end && start == 0;
        var isLast = start == end && end == textLen;


        if (this.isReadOnly() || this.allowInput == false) { //bacjsoace
            e.preventDefault();
        }
        if (e.keyCode == 9) {   //tab            
            this.hidePopup();
            return;
        }
        if (e.keyCode == 16 || e.keyCode == 17 || e.keyCode == 18) return;

        switch (e.keyCode) {

            //            case 13:    //enter                                            

            //                if (this.isShowPopup) {                                            
            //                    e.preventDefault();                                            

            //                    //是否交互中？                                                                
            //                    if (this._loading) {                                            
            //                        this._selectOnLoad = true;                                            
            //                        return;                                            
            //                    }                                            

            //                    //选中                                            
            //                    this.__doSelectValue();                                            

            //                }                                            

            //                break;                                             

            case 13:    //enter

                if (this.inputMode) {
                    var text = this.getInputText().trim();
                    if (text) {
                        this._doInsertInputValue();
                    }
                    return;
                }


                if (this.isShowPopup) {
                    e.preventDefault();

                    //是否交互中？                    
                    if (this._loading) {
                        this._selectOnLoad = true;
                        return;
                    }

                    var item = this._listbox.getFocusedItem();
                    if (item && item.enabled === false) return;

                    //选中
                    this.__doSelectValue();

                    //                    var item = this._listbox.getFocusedItem();
                    //                    if (!item && !this.valueFromSelect) {
                    //                        var value = this._inputEl.value.trim()
                    //                        if (value != "") {
                    //                            //this.selecteds.push({ value: value, text: value })
                    //                            this.doUpdate();
                    //                            this.showInput()
                    //                        }
                    //                    }
                }
                break;

            case 27:    //esc
                e.preventDefault();
                this.hidePopup();
                break;
            case 8:    //backspace

                if (isFirst) {
                    e.preventDefault();
                }
            case 37:    //left
                if (isFirst) {
                    if (this.isShowPopup) {
                        this.hidePopup();
                    } else {
                        if (this.editIndex > 0) {
                            var index = this.editIndex - 1;
                            if (index < 0) index = 0;
                            if (index >= this.selecteds.length) index = this.selecteds.length - 1;

                            this.showInput(false);
                            this.select(index);
                        }
                    }
                }
                break;
            case 39:    //right
                if (isLast) {
                    if (this.isShowPopup) {
                        this.hidePopup();
                    } else {
                        if (this.editIndex <= this.selecteds.length - 1) {

                            var index = this.editIndex;
                            //                        if (index < 0) index = 0;
                            //                        if (index >= this.selecteds.length) index = this.selecteds.length - 1;
                            this.showInput(false);
                            this.select(index);

                        }
                    }
                }
                break;
            case 38: //top
                e.preventDefault();
                if (this.isShowPopup) {
                    var index = -1;
                    var item = this._listbox.getFocusedItem();
                    if (item) index = this._listbox.indexOf(item);
                    index--;
                    if (index < 0) index = 0;
                    this._listbox._focusItem(index, true);

                    //his._doSetValue();
                }
                break;
            case 40: //bottom

                e.preventDefault();
                if (this.isShowPopup) {
                    var index = -1;
                    var item = this._listbox.getFocusedItem();
                    if (item) index = this._listbox.indexOf(item);
                    index++
                    if (index < 0) index = 0;
                    if (index >= this._listbox.getCount()) index = this._listbox.getCount() - 1;
                    this._listbox._focusItem(index, true);

                    //this._doSetValue();
                } else {
                    this._startQuery(true);
                }
                break;
            default:
                //this._startQuery(this._inputEl.value);
                break;
        }
    },
    ////////////////////////////////////////////////
    focus: function () {

        try {
            this._inputEl.focus();
        } catch (e) {
        }
    },
    blur: function () {
        try {
            this._inputEl.blur();
        } catch (e) {
        }
    },
    searchField: "key",
    setSearchField: function (value) {
        this.searchField = value;
    },
    getSearchField: function () {
        return this.searchField;
    },
    getAttrs: function (el) {
        var attrs = mini.TextBox.superclass.getAttrs.call(this, el);
        var jq = jQuery(el);

        mini._ParseString(el, attrs,
            ["value", "text", "valueField", "textField", "url", "popupHeight",
            "textName", "onfocus", "onbeforeload", "onload", "searchField",
            "emptyText", "loadingText", "errorText", "onblur", "onremoveitem", "placeholder"
             ]
        );
        mini._ParseBool(el, attrs,
            ["allowInput", "valueFromSelect", "remote", "inputMode"
             ]
        );

        mini._ParseInt(el, attrs,
            ["popupMinHeight", "popupMaxHeight"
             ]
        );
        return attrs;
    }

});

mini.regClass(mini.TextBoxList, "textboxlist");
/**
* jQuery MiniUI v3.0
* 
* Web Site : http://www.miniui.com
*
* Commercial License : http://www.miniui.com/license
*
* Copyright(c) 2012 All Rights Reserved. Shanghai PusSoft Co., Ltd (上海普加软件有限公司) [ services@plusoft.com.cn ]. 
* 
*/

mini.AutoComplete = function () {
    mini.AutoComplete.superclass.constructor.apply(this, arguments);

    //this._updateButton("popup", { visible: false });

    var sf = this;
    sf._ValueChangeTimer = null;

    this._textEl.onfocus = function () {
        //sf._NowText = sf._textEl.value;
        sf._LastInputText = sf._textEl.value;
        sf._ValueChangeTimer = setInterval(function () {
            //document.title = new Date().getTime();

            if (sf._LastInputText != sf._textEl.value) {
                //if( sf.minChars

                sf._tryQuery();
                sf._LastInputText = sf._textEl.value;

                if (sf._textEl.value == "" && sf.value != "") {
                    sf.setValue("");
                    sf._OnValueChanged();
                }
            }
        }, 10);

        //sf.addCls(sf._focusCls);
        //sf._focused = true;
    }
    this._textEl.onblur = function () {
        clearInterval(sf._ValueChangeTimer);
        if (!sf.isShowPopup()) {
            if (sf._LastInputText != sf._textEl.value) {
                //alert(1);
                if (sf._textEl.value == "" && sf.value != "") {
                    sf.setValue("");
                    sf._OnValueChanged();
                }
            }
        }
    }

    this._buttonEl.style.display = "none";

    this._doInputLayout();
}
mini.extend(mini.AutoComplete, mini.ComboBox, {
    remote: true,   //false

    url: "",
    allowInput: true,
    delay: 150,

    showButton: false,

    searchField: "key",

    minChars: 0,

    _buttonWidth: 0,

    uiCls: "mini-autocomplete",

    _initInput: function () {
        var me = this;

        if (isFirefox) {
            this._textEl.oninput = function () {
                if (!me.enterQuery) {

                    me._tryQuery();
                }
            }
        }
    },

    getRemote: function () {
        return this.remote;
    },

    setRemote: function (remote) {
        this.remote = remote;
    },

    setUrl: function (value) {
        this.url = value;
        if (!this.remote) {
            mini.AutoComplete.superclass.setUrl.call(this, value);
        }
    },
    setValue: function (value) {
        //if (value == "德国") alert(value);
        if (mini.isNull(value)) value = "";
        if (this.value != value) {
            this.value = value;
            this._valueEl.value = this.value;
        }
        this.__oldText = '';
    },
    setText: function (value) {
        if (mini.isNull(value)) value = "";
        if (this.text != value) {
            this.text = value;
            this._LastInputText = value;
        }
        //fix ff
        //        var _canFire = this._canFire;
        //        this._canFire = false;
        //this._stopTextChanged = true;   //fix ff
        this._textEl.value = this.text;
        //delete this._stopTextChanged;
        //this._canFire = _canFire;
    },

    setMinChars: function (value) {
        this.minChars = value;
    },
    getMinChars: function () {
        return this.minChars;
    },
    setSearchField: function (value) {
        this.searchField = value;
    },
    getSearchField: function () {
        return this.searchField;
    },


    ////////////////////////////////
    popupEmptyText: "No Result",
    setPopupEmptyText: function (value) {
        this.popupEmptyText = value;
    },
    getPopupEmptyText: function (value) {
        return this.popupEmptyText;
    },
    loadingText: "Loading...",
    setLoadingText: function (value) {
        this.loadingText = value;
    },
    getLoadingText: function (value) {
        return this.loadingText;
    },
    errorText: "Error",
    setErrorText: function (value) {
        this.errorText = value;
    },
    getErrorText: function (value) {
        return this.errorText;
    },
    ////////////////////////////////

    //    popupLoadingText: "<span class='mini-textboxlist-popup-loading'>Loading...</span>",
    //    popupErrorText: "<span class='mini-textboxlist-popup-error'>Error</span>",
    //    popupEmptyText: "<span class='mini-textboxlist-popup-noresult'>No Result</span>",

    getPopupEmptyHtml: function () {
        return "<span class='mini-textboxlist-popup-noresult'>" + this.popupEmptyText + "</span>";
    },
    getPopupLoadingHtml: function () {
        return "<span class='mini-textboxlist-popup-loading'>" + this.loadingText + "</span>"
    },
    getPopupErrorHtml: function () {
        return "<span class='mini-textboxlist-popup-error'>" + this.errorText + "</span>";
    },

    showPopup: function (action) {

        var popup = this.getPopup();
        var control = this._listbox;
        control.showEmpty = true;
        control.emptyText = this.getPopupEmptyHtml();
        if (action == "loading") {
            control.emptyText = this.getPopupLoadingHtml();
            this._listbox.setData([]);
        } else if (action == "error") {
            control.emptyText = this.getPopupErrorHtml();
            this._listbox.setData([]);
        }
        this._listbox.doUpdate();

        mini.AutoComplete.superclass.showPopup.call(this);


    },
    ///////////////////////////////
    //    __OnInputKeyUp: function (e) {
    //        this.__OnInputKeyDown(e);
    //    },
    __OnInputKeyDown: function (e) {
        var me = this;
        var ex = { htmlEvent: e };
        this.fire("keydown", ex);
        if (e.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) {
            return false;
        }
        if (e.keyCode == 9) {   //tab
            this.hidePopup();
            return;
        }
        if (e.keyCode == 16 || e.keyCode == 17 || e.keyCode == 18) {
            return;
        }

        if (this.isReadOnly()) return;

        switch (e.keyCode) {
            case 27:        //esc
                if (this.isShowPopup()) {
                    e.stopPropagation();
                }

                this.hidePopup();
                break;
            case 13:     //enter      

                var doSelect = true;

                if (!this.isShowPopup() || this._listbox.getData().length == 0) {

                    //                    if (this.enterQuery) {
                    //                        doSelect = false;
                    //                        this._tryQuery(this._textEl.value);
                    //                    }

                    if (this.enterQuery) {
                        doSelect = false;
                        var searchText = this._textEl.value;
                        if (this._enterSearchText != searchText || !me.loading) {
                            this._enterSearchText = searchText;
                            this._tryQuery(searchText);
                        }
                    }

                }

                if (this.isShowPopup()) {
                    e.preventDefault();
                    e.stopPropagation();

                    if (me._requestSearch !== true) {
                        var index = this._listbox.getFocusedIndex();

                        if (index != -1) {
                            var item = this._listbox.getAt(index);
                            var vts = this._listbox.getValueAndText([item]);
                            var value = vts[0];

                            this.setText(vts[1]);
                            //                        if (mini.isFirefox) {   //FF下修改textEl.value，会激发changed...
                            //                            this.blur();
                            //                            this.focus();
                            //                        }

                            this.setValue(value);

                            this._OnValueChanged();


                            //alert(this.getValue());
                        }
                    }
                } else {

                    this.fire("enter", ex);
                }

                if (doSelect) {
                    this.hidePopup();
                    this.focus();
                }

                break;
            case 37:    //left
                break;
            case 38:    //top      
                var index = this._listbox.getFocusedIndex();
                if (index == -1) {
                    index = 0;
                    if (!this.multiSelect) {
                        var item = this._listbox.findItems(this.value)[0];
                        if (item) {
                            index = this._listbox.indexOf(item);
                        }
                    }
                }
                if (this.isShowPopup()) {
                    if (!this.multiSelect) {
                        index -= 1;
                        if (index < 0) index = 0;
                        this._listbox._focusItem(index, true);
                    }
                }
                break;
            case 39:    //right
                break;
            case 40:    //bottom

                var index = this._listbox.getFocusedIndex();
                if (this.isShowPopup()) {
                    if (!this.multiSelect) {
                        index += 1;
                        if (index > this._listbox.getCount() - 1) index = this._listbox.getCount() - 1;
                        this._listbox._focusItem(index, true);
                    }
                } else {
                    this._tryQuery(this._textEl.value);
                }
                break;
            default:
                if (this.enterQuery == true) {
                    this.hidePopup();
                    this.focus();
                } else {

                    this._keydownQuery();


                }

                break;
        }
    },

    delay: 200,

    _keydownQuery: function () {
        var me = this;

        me._requestSearch = true;       //发起请求

        if (!me.remote) me._requestSearch = false;

        //        var text = me._textEl.value;
        //        me._tryQuery(text);

        //        return;

        if (me._keydownTimer) {
            clearTimeout(me._keydownTimer);
            me._keydownTimer = null;
        }

        me._keydownTimer = setTimeout(function () {

            var text = me._textEl.value;
            if (text != me.__oldText) {
                me._tryQuery(text);


                me.__oldText = text;
            }

        }, me.delay);

    },

    enterQuery: false,
    doQuery: function () {

        this._tryQuery();
    },
    _tryQuery: function (oldText) {
        var sf = this;


        if (this._queryTimer) {
            clearTimeout(this._queryTimer);
            this._queryTimer = null;
        }
        this._queryTimer = setTimeout(function () {
            var text = sf._textEl.value;
            //if (text != oldText) {

            sf._doQuery(text);

            //document.title = text + ":" + new Date().getTime();

            //document.title = new Date();
            //}
        }, this.delay);
        if (sf._tryHide() !== false) {
            this.showPopup("loading");
        }
    },

    _tryHide: function () {
        var me = this;
        if (mini.getActiveElement() != me._textEl && mini.hasClass(me.el, 'mini-buttonedit-focus')) {
            me.hidePopup();
            return false;
        }
    },

    blur: function () {
        var me = this;
        mini.AutoComplete.superclass.blur.apply(this);

        if (me._ajaxer) {
            me._ajaxer.abort();
            me._ajaxer = null;
        }
        if (me._doloadTimer) {
            clearTimeout(me._doloadTimer);
            me._doloadTimer = null;
        }
        if (me._queryTimer) {
            clearTimeout(me._queryTimer);
            me._queryTimer = null;
        }
        if (me._keydownTimer) {
            clearTimeout(me._keydownTimer);
            me._keydownTimer = null;
        }
        if (me.isShowPopup()) {
            me.hidePopup();
        }
        //alert(111);
    },

    _doQuery: function (key) {
        var me = this;
        //if ($(document.activeElement).closest(me.el).length) {
        //        if ($(document.activeElement).closest(me.el).length) {
        //            document.title = new Date().getTime();
        //            me.hidePopup();
        //        }
        if (mini.getActiveElement() != me._textEl) {
            me.hidePopup();
            return;
        }

        if (!this.remote) {
            mini.AutoComplete.superclass._doQuery.apply(this, arguments);
            return;
        }

        //if (!this.url) return;
        if (this._ajaxer) {
            this._ajaxer.abort();
        }

        var url = this.url;
        var ajaxMethod = "post";
        if (url) {
            if (url.indexOf(".txt") != -1 || url.indexOf(".json") != -1) {
                ajaxMethod = "get";
            }
        }

        var params = {};
        params[this.searchField] = key;

        var e = {
            url: url,
            async: true,
            params: params,
            data: params,
            type: this.ajaxType ? this.ajaxType : ajaxMethod,
            cache: false,
            cancel: false
        };

        jQuery.extend(true, e, this.ajaxOptions);

        this.fire("beforeload", e);

        var me = this;
        function doload(data, result) {
            if (!me._focused) return;

            if (me._tryHide() === false) return;
            if (me._doloadTimer) {
                clearTimeout(me._doloadTimer);
                me._doloadTimer = null;
            }
            me._doloadTimer = setTimeout(function () {
                me._doloadTimer = null;
                me._tryHide();
            }, 100);

            me._listbox.setData(data);
            me.showPopup();
            me._listbox._focusItem(0, true);
            me.data = data;
            me.fire("load", { data: data, result: result });
        }

        if (e.cancel) {
            var data = e.result || [];
            doload(data, data);
            return;
        }

        //alert(this.dataField);

        me.loading = true;

        mini.copyTo(e, {
            success: function (text, textStatus, xhr) {
                delete e.params;
                var obj = { text: text, result: null, sender: me, options: e, xhr: xhr };
                var result = null;
                try {
                    mini_doload(obj);
                    result = obj.result;
                    if (!result) {
                        result = mini.decode(text);
                    }
                } catch (ex) {
                    if (mini_debugger == true) {
                        throw new Error("autocomplete json is error");
                    }
                }
                if (mini.isArray(result)) result = { data: result };

                //                if (mini.isNumber(result.error) && result.error != 0) {
                //                    var ex = {};
                //                    ex.stackTrace = result.stackTrace;
                //                    ex.errorMsg = result.errorMsg;
                //                    if (mini_debugger == true) {
                //                        alert(url + "\n" + ex.textStatus + "\n" + ex.stackTrace);
                //                    }
                //                    return;
                //                }

                if (me.dataField) {
                    result.data = mini._getMap(me.dataField, result);
                }
                if (!result.data) result.data = [];

                doload(result.data, result);

                //                if (me._doloadTimer) {
                //                    clearTimeout(me._doloadTimer);
                //                    me._doloadTimer = null;
                //                }
                //                me._doloadTimer = setTimeout(function () {
                //                    doload(result.data, result);
                //                }, 50);

                //                me._listbox.setData(result.data);
                //                me.showPopup();
                //                me._listbox._focusItem(0, true);
                //                me.data = result.data;
                //                me.fire("load", { data: result.data, result: result });

            },
            error: function (jqXHR, textStatus, errorThrown) {
                //                if (textStatus != "abort") {
                //                    me.showPopup("error");
                //                }
            },
            complete: function () {
                me.loading = false;
                me._requestSearch = false;
                me._ajaxer = null;
            }
        });

        this._ajaxer = mini.ajax(e);
    },
    setEnterQuery: function (value) {
        this.enterQuery = value;
    },
    getEnterQuery: function () {
        return this.enterQuery;
    },
    ////////////////////////////////
    getAttrs: function (el) {
        var attrs = mini.AutoComplete.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["searchField", "popupEmptyText", "loadingText", "errorText"]
        );
        mini._ParseBool(el, attrs,
            ["enterQuery", "remote"]
        );


        return attrs;
    }
});

mini.regClass(mini.AutoComplete, "autocomplete");
/**
* jQuery MiniUI v3.0
* 
* Web Site : http://www.miniui.com
*
* Commercial License : http://www.miniui.com/license
*
* Copyright(c) 2012 All Rights Reserved. Shanghai PusSoft Co., Ltd (上海普加软件有限公司) [ services@plusoft.com.cn ]. 
* 
*/

mini.ToolTip = function () {
    mini.ToolTip.superclass.constructor.apply(this, arguments);

    
}
mini.extend(mini.ToolTip, mini.Control, {

    selector: '[title]',
    placement: 'bottom',    //bottomleft, topleft, bottomright, topright
    trigger: 'hover focus',
    delay: 200,

    uiCls: "mini-tooltip",

    _create: function () {
        this.el = jQuery('<div class="mini-tooltip"><div class="mini-tooltip-arrow"></div><div class="mini-tooltip-inner mini-corner-all"></div></div>')[0];
        this.$element = jQuery(this.el);
        this.$element.appendTo(document.body);
    },
    _initEvents: function () {

    },
    _bindTooltip: function () {
        var jq = jQuery(document),
            selector = this.selector,
            type = 'tooltip';

        jq.unbind('.' + type, this);

        var triggers = this.trigger.split(' ');

        for (var i = triggers.length; i--; ) {
            var trigger = triggers[i]

            if (trigger == 'click') {
                jq.on('click.' + type, selector, jQuery.proxy(this._toggle, this))
            } else if (trigger != 'manual') {
                var eventIn = trigger == 'hover' ? 'mouseenter' : 'focus'
                var eventOut = trigger == 'hover' ? 'mouseleave' : 'blur'

                jq.on(eventIn + '.' + type, selector, jQuery.proxy(this._enter, this))
                jq.on(eventOut + '.' + type, selector, jQuery.proxy(this._leave, this))
            }
        }
    },

    setSelector: function (value) {
        this.selector = value;
        this._bindTooltip();
    },
    getSelector: function () {
        return this.selector;
    },
    setPlacement: function (value) {
        this.placement = value;
    },
    getPlacement: function () {
        return this.placement;
    },
    setTrigger: function (value) {
        this.trigger = value;
        this._bindTooltip();
    },
    getTrigger: function () {
        return this.trigger;
    },
    //////////////////////////////////////////////////

    openTimer: null,
    _enter: function (e) {


        var self = this;

        var target = e.currentTarget;
        this.getContent(target);

        clearTimeout(this.openTimer);
        this.openTimer = setTimeout(function () {
            self.openTimer = null;
            self.open(target);
        }, self.delay);
    },
    _leave: function (e) {

        clearTimeout(this.openTimer);

        this.close();
    },
    _toggle: function (e) {
        if (this._getTip().css("display") == 'none') {
            this.enter(e);
        } else {
            this.leave(e);
        }
    },
    /////////////////////////////////////////////////
    open: function (target) {
        var target = jQuery(target)[0] || this.target,
                jq = jQuery(target),
                content = this.getContent(target);

        var e = { element: target, content: content, cancel: !content };
        this.fire("beforeopen", e);
        if (e.cancel) return;

        this.$element.show();

        this._target = target;

        try {
            this.setContent(e.content);
        } catch (ex) { }

        this.fire("open", { element: target });

    },
    close: function () {
        this._target = null;
        this.$element.hide();
    },
    showLoading: function () {
        this.setContent('<div class="mini-tooltip-loading"></div>');
    },
    setContent: function (value) {
        this.$element.children(".mini-tooltip-inner").html(value || '&nbsp;');
        this.applyPlacement();
    },
    getContent: function (element) {
        var content = element.title;
        if (content) {
            jQuery(element).attr("data-tooltip", content).attr("title", "");
        }
        if (!content) {
            content = jQuery(element).attr("data-tooltip");
        }
        return content;
    },
    applyPlacement: function () {
        if (!this._target) return;
        if (this.$element.css("display") == "none") return;
        var target = this._target,
            jq = jQuery(target),
            placement = jq.attr("data-placement") || this.placement,
            tip = this.$element;

        if (!target || !tip[0]) return;

        tip.show().css({ left: "-2000px", top: "-2000px" });

        function applyCls(placement) {

            tip.removeClass("mini-tooltip-left mini-tooltip-top mini-tooltip-right mini-tooltip-bottom mini-tooltip-bottomleft mini-tooltip-topleft mini-tooltip-bottomright mini-tooltip-topright")
                .addClass('mini-tooltip-' + placement);
        }
        function applyPos(pos) {
            tip.offset(pos);
        }

        //
        var box = mini.getBox(target);
        var vbox = mini.getViewportBox();
        var topspace = box.top - vbox.top, bottomspace = vbox.bottom - box.bottom;

        applyCls(placement);

        var tipbox = mini.getBox(tip[0]);
        var pos = mini.getCalculatedOffset(placement, box, tipbox.width, tipbox.height);


        //边界处理
        if (placement == "left") {
        } else if (placement == "right") {
        } else if (placement == "top") {
        } else if (placement == "bottom") {

        } else if (placement == "bottomleft" && topspace > bottomspace) {

            if (pos.top + tipbox.height > vbox.bottom) {
                placement = "topleft";
            }
        } else if (placement == "topleft") {

        }

        applyCls(placement);
        pos = mini.getCalculatedOffset(placement, box, tipbox.width, tipbox.height);



        if (placement == "right" || placement == "left") {

            var arrow = jQuery(tip).children(".mini-tooltip-arrow");
            arrow.css("top", "");

            function centerArrow() {
                var top = box.top + box.height / 2 - arrow.height() / 2;

                var y = top - pos.top;
                arrow.css("top", y);

            }


            var vbox = mini.getViewportBox();
            if (pos.top < vbox.y) {
                pos.top = vbox.y;
                centerArrow();
            } else if (pos.top + tipbox.height > vbox.bottom) {
                pos.top = vbox.bottom - tipbox.height;
                centerArrow();
            }
        }

        applyPos(pos);
    },

    ///////////////////////////////////////////////
    getAttrs: function (el) {
        var attrs = mini.ToolTip.superclass.getAttrs.call(this, el);
        mini._ParseString(el, attrs,
            ['selector', 'placement', "onbeforeopen", "onopen", "onclose"
             ]
        );
        return attrs;
    }
});
mini.regClass(mini.ToolTip, "tooltip");

mini.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
    if(placement == 'bottom') return { top: pos.top + pos.height, left: pos.left + pos.width / 2 - actualWidth / 2}; 
    if(placement == 'top') return  { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2};
    if(placement == 'left') return { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth} ;
    //if(placement == 'right') return {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width };
    if (placement == 'bottomleft') return { top: pos.top + pos.height, left: pos.left };
    if (placement == 'bottomright') return { top: pos.top + pos.height, left: pos.left + pos.width - actualWidth };
    if (placement == 'topleft') return { top: pos.top - actualHeight, left: pos.left };
    if (placement == 'topright') return { top: pos.top - actualHeight, left: pos.left + pos.width - actualWidth };

    return { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width };
}


mini.ProgressBar = function () {
    mini.ProgressBar.superclass.constructor.apply(this, arguments);
    //mini.Button.superclass.constructor.apply(this, arguments);
}

mini.extend(mini.ProgressBar, mini.Control, {
    formField: true,
    uiCls: "mini-progressbar",

    showText: false,
    textAlign: "center",
    text: "",
    format: "{0}%",         //"百分之{0}"
    value: 0,               //0~100

    set: function (kv) {
        if (typeof kv == 'string') {
            return this;
        }

        var value = kv.value;
        delete kv.value;

        mini.ProgressBar.superclass.set.call(this, kv);

        if (!mini.isNull(value)) {
            this.setValue(value);
        }

        return this;
    },

    _create: function () {

        this.el = document.createElement("div");
        this.el.className = "mini-progressbar";

        var s = '<div class="mini-progressbar-border">'
                    + '<div class="mini-progressbar-bar"></div>'
                    + '<div class="mini-progressbar-text"></div>'
                + '</div>';


        this.el.innerHTML = s;
        this._borderEl = this.el.firstChild;
        this._barEl = this._borderEl.firstChild;
        this._textEl = this._borderEl.lastChild;

        //....
    },

    setText: function (value) {
        this.text = value;
        this._textEl.innerHTML = value;
    },

    setShowText: function (value) {
        this.showText = value;
        this._textEl.style.display = value ? "" : "none";
    },

    getShowText: function () {
        return this.showText;
    },

    setTextAlign: function (value) {

        this.textAlign = value
        this._textEl.style.textAlign = value;
    },

    getTextAlign: function () {
        return this.textAlign;
    },

    setValue: function (value) {
        value = parseFloat(value);
        if (isNaN(value)) value = 0;

        if (value < 0) value = 0;
        if (value > 100) value = 100;

        this.value = value;

        this._barEl.style.width = value + "%";

        var text = String.format(this.format, value);
        this.setText(text);
    },

    getValue: function () {
        return this.value;
    },

    getAttrs: function (el) {
        var attrs = mini.ProgressBar.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["text", "format", "textAlign"
                ]
        );

        mini._ParseBool(el, attrs,
            ["showText"]
        );

        return attrs;
    }
})

mini.regClass(mini.ProgressBar, "progressbar");

/**
* jQuery MiniUI v3.0
* 
* Web Site : http://www.miniui.com
*
* Commercial License : http://www.miniui.com/license
*
* Copyright(c) 2012 All Rights Reserved. Shanghai PusSoft Co., Ltd (上海普加软件有限公司) [ services@plusoft.com.cn ]. 
* 
*/

mini.Form = function (el) {
    this.el = mini.byId(el);
    if (!this.el) throw new Error("form element not null");
    
    mini.Form.superclass.constructor.apply(this, arguments);

}
mini.extend(mini.Form, mini.Component, {
    //_FORM: true,
    el: null,

    getFields: function () {
        if (!this.el) return [];
        var controls = mini.findControls(function (control) {
            if (!control.el || control.formField != true) return false;
            if (mini.isAncestor(this.el, control.el)) return true;
            return false;
        }, this);
        return controls;
    },
    getFieldsMap: function () {
        var fields = this.getFields();
        var map = {};
        for (var i = 0, l = fields.length; i < l; i++) {
            var field = fields[i];
            if (field.name) map[field.name] = field;
        }
        return map;
    },
    getField: function (name) {
        if (!this.el) return null;
        return mini.getbyName(name, this.el);
    },

    getData: function (formatted, deep) {
        if (mini.isNull(deep)) deep = true;
        var valueFn = formatted ? "getFormValue" : "getValue";
        var controls = this.getFields();
        var data = {};
        for (var i = 0, l = controls.length; i < l; i++) {
            var control = controls[i];
            var fn = control[valueFn];
            if (!fn) continue;
            if (control.name) {
                if (deep == true) {
                    mini._setMap(control.name, fn.call(control), data);
                } else {
                    data[control.name] = fn.call(control);
                }
            }
            if (control.textName && control.getText) {
                if (deep == true) {
                    mini._setMap(control.textName, control.getText(), data);
                } else {
                    data[control.textName] = control.getText();
                }
            }
        }
        return data;
    },
    setData: function (options, all, deep) {
        if (mini.isNull(deep)) deep = true;
        if (typeof options != "object") options = {};
        var map = this.getFieldsMap();
        for (var name in map) {
            var control = map[name];
            if (!control) continue;
            if (control.setValue) {
                var v = options[name];
                if (deep == true) {
                    v = mini._getMap(name, options);
                }
                if (v === undefined && all === false) continue;
                if (v === null) v = "";
                control.setValue(v);
            }
            if (control.setText && control.textName) {
                var text = options[control.textName];
                if (deep == true) {
                    text = mini._getMap(control.textName, options);
                }
                if (mini.isNull(text)) text = "";
                control.setText(text);
            }
        }
        //mini.repaint(document.body);
    },
    reset: function () {
        var controls = this.getFields();
        for (var i = 0, l = controls.length; i < l; i++) {
            var control = controls[i];
            if (!control.setValue) continue;
            if (control.setText && control._clearText !== false) {
                var text = control.defaultText;
                if (mini.isNull(text)) text = "";
                control.setText(text);
            }
            control.setValue(control.defaultValue);
            if (control.clear) control.clear();
        }
        this.setIsValid(true);
    },
    clear: function () {
        var controls = this.getFields();
        for (var i = 0, l = controls.length; i < l; i++) {
            var control = controls[i];
            if (!control.setValue) continue;
            if (control.setText && control._clearText !== false) {
                control.setText("");
            }
            control.setValue("");
            if (control.clear) control.clear();
        }
        this.setIsValid(true);
    },
    getValidateFields: function (disableValid) {
        function isDisplay(control) {
            return control.isDisplay(function (p) {
                if (mini.hasClass(p, 'mini-tabs-body')) return true;
            });
        }

        var fields = [];
        var controls = this.getFields();
        for (var i = 0, l = controls.length; i < l; i++) {
            var control = controls[i];
            if (!control.validate || !control.isDisplay) continue;
            if (isDisplay(control) || control.forceValidate) { //

                if (control.enabled || disableValid || control.forceValidate) {

                    fields.push(control);
                }
            }
        }
        return fields;
    },
    validate: function (all, disableValid) {
        var controls = this.getValidateFields(disableValid);
        for (var i = 0, l = controls.length; i < l; i++) {
            var control = controls[i];
            var succ = control.validate();
            if (succ == false && all === false) {
                break;
            }
        }
        return this.isValid();
    },
    isValid: function () {
        var controls = this.getValidateFields();
        for (var i = 0, l = controls.length; i < l; i++) {
            var control = controls[i];
            if (control.isValid() == false) return false;
        }
        return true;
    },
    setIsValid: function (isValid) {
        var controls = this.getFields();
        for (var i = 0, l = controls.length; i < l; i++) {
            var control = controls[i];
            if (!control.setIsValid) continue;
            control.setIsValid(isValid);
        }
    },

    getErrorTexts: function () {
        var errorTexts = [];
        var errors = this.getErrors();
        for (var i = 0, l = errors.length; i < l; i++) {
            var control = errors[i];
            errorTexts.push(control.errorText);
        }
        return errorTexts;
    },
    getErrors: function () {
        var errors = [];
        var controls = this.getFields();
        for (var i = 0, l = controls.length; i < l; i++) {
            var control = controls[i];
            if (!control.isValid) continue;
            if (control.isValid() == false) {
                errors.push(control);
            }
        }
        return errors;
    },
    ///////////////////////////////////////////////////////////
    mask: function (options) {
        if (typeof options == "string") options = { html: options };
        options = options || {};
        options.el = this.el;
        if (!options.cls) options.cls = this._maskCls;
        mini.mask(options);
    },
    unmask: function () {
        mini.unmask(this.el);
    },
    _maskCls: "mini-mask-loading",
    loadingMsg: "数据加载中，请稍后...",
    loading: function (msg) {
        this.mask(msg || this.loadingMsg);
    },
    /////////////////////////////////////////////////////////
    __OnValueChanged: function (e) {

        this._changed = true;
    },
    _changed: false,
    setChanged: function (value) {
        this._changed = value;

        var controls = this.getFields();
        for (var i = 0, l = controls.length; i < l; i++) {
            var control = controls[i];

            control.on("valuechanged", this.__OnValueChanged, this);
        }
    },
    isChanged: function () {
        return this._changed;
    },
    //////////////////////////////
    setEnabled: function (value) {
        var controls = this.getFields();
        for (var i = 0, l = controls.length; i < l; i++) {
            var control = controls[i];
            control.setEnabled(value);
        }
    }

});

/**
* jQuery MiniUI v3.0
* 
* Web Site : http://www.miniui.com
*
* Commercial License : http://www.miniui.com/license
*
* Copyright(c) 2012 All Rights Reserved. Shanghai PusSoft Co., Ltd (上海普加软件有限公司) [ services@plusoft.com.cn ]. 
* 
*/

mini.Fit = function () {
    mini.Fit.superclass.constructor.apply(this, arguments);
}
mini.extend(mini.Fit, mini.Container, {

    style: "",
    _clearBorder: false,

    uiCls: "mini-fit",
    _create: function () {
        this.el = document.createElement("div");
        this.el.className = "mini-fit";
        this._bodyEl = this.el;
    },
    _initEvents: function () {

    },
    isFixedSize: function () {
        return false;
    },
    doLayout: function () {
        if (!this.canLayout()) return;

        var parentNode = this.el.parentNode;
        var childNodes = mini.getChildNodes(parentNode);
        if (parentNode == document.body) {
            this.el.style.height = "0px";
        }
        //        this.el.style.height = "100px";
        //        this.el.style.overFlow = "hidden";
        var height = mini.getHeight(parentNode, true);
        //        var border = mini.getBorders(parentNode);
        //        if (jQuery.boxModel) {
        //            height = height - border.top - border.bottom;
        //        }

        //alert(height + ":" + document.body.clientHeight);
        
        for (var i = 0, l = childNodes.length; i < l; i++) {
            var node = childNodes[i];
            var tagName = node.tagName ? node.tagName.toLowerCase() : "";
            if (node == this.el || (tagName == "style" || tagName == "script" || node.type == "hidden")) continue;
            var pos = mini.getStyle(node, "position");
            if (pos == "absolute" || pos == "fixed") continue;

            var h = mini.getHeight(node);

            var margin = mini.getMargins(node);
            height = height - h - margin.top - margin.bottom;
        }

        var border = mini.getBorders(this.el);
        var padding = mini.getPaddings(this.el);
        var margin = mini.getMargins(this.el);

        height = height - margin.top - margin.bottom;
        if (jQuery.boxModel) {
            height = height - padding.top - padding.bottom - border.top - border.bottom;
        }
        if (height < 0) height = 0;

        this.el.style.height = height + "px";

        //layout children
        try {
            childNodes = mini.getChildNodes(this.el);
            for (var i = 0, l = childNodes.length; i < l; i++) {
                var node = childNodes[i];
                mini.layout(node);
            }
        } catch (e) { }

    },
    set_bodyParent: function (value) {

        if (!value) return;
        //bodyParent
        var el = this._bodyEl;

        var p = value;
        while (p.firstChild) {
            try {
                el.appendChild(p.firstChild);
            } catch (e) { }
        }
        this.doLayout();
    },

    ///////////////////////////////////////////////
    getAttrs: function (el) {
        var attrs = mini.Fit.superclass.getAttrs.call(this, el);

        attrs._bodyParent = el;

        return attrs;
    }
});
mini.regClass(mini.Fit, "fit");
/**
* jQuery MiniUI v3.0
* 
* Web Site : http://www.miniui.com
*
* Commercial License : http://www.miniui.com/license
*
* Copyright(c) 2012 All Rights Reserved. Shanghai PusSoft Co., Ltd (上海普加软件有限公司) [ services@plusoft.com.cn ]. 
* 
*/

mini.Panel = function () {
    this._initButtons();
    mini.Panel.superclass.constructor.apply(this, arguments);

    if (this.url) this.setUrl(this.url);

    this._contentEl = this._bodyEl;

    this._doVisibleEls();

    this._Resizer = new mini._Resizer(this);

    this._doTools();
}
mini.extend(mini.Panel, mini.Container, {
    width: 250,
    title: "",
    iconCls: "",
    iconStyle: "",

    allowResize: false,

    url: "",

    refreshOnExpand: false,
    maskOnLoad: true,

    collapseOnTitleClick: false,

    showCollapseButton: false,
    showCloseButton: false,
    closeAction: "display", //"destroy"
    showHeader: true,
    showToolbar: false,
    showFooter: false,

    headerCls: "",
    headerStyle: "",
    bodyCls: "",
    bodyStyle: "",
    footerCls: "",
    footerStyle: "",
    toolbarCls: "",
    toolbarStyle: "",

    minWidth: 180,
    minHeight: 100,
    maxWidth: 5000,
    maxHeight: 3000,

    set: function (kv) {
        if (typeof kv == 'string') {
            return this;
        }

        var _allowLayout = this._allowLayout;
        this._allowLayout = false;

        var toolbar = kv.toolbar;
        delete kv.toolbar;
        var footer = kv.footer;
        delete kv.footer;
        var url = kv.url;
        delete kv.url;

        var buttons = kv.buttons;
        delete kv.buttons;

        mini.Panel.superclass.set.call(this, kv);

        if (buttons) {
            this.setButtons(buttons);
        }
        if (toolbar) {
            this.setToolbar(toolbar);
        }
        if (footer) {
            this.setFooter(footer);
        }
        if (url) {
            this.setUrl(url);
        }

        this._allowLayout = _allowLayout;
        this.doLayout();

        return this;
    },

    uiCls: "mini-panel",
    _create: function () {
        this.el = document.createElement("div");
        this.el.className = "mini-panel";
        this.el.tabIndex = 0;

        var s = '<div class="mini-panel-border">'
            + '<div class="mini-panel-header" ><div class="mini-panel-header-inner" ><span class="mini-panel-icon mini-icon mini-iconfont"></span><div class="mini-panel-title" ></div><div class="mini-tools" ></div></div></div>'
            + '<div class="mini-panel-viewport">'
                + '<div class="mini-panel-toolbar"></div>'
                + '<div class="mini-panel-body" ></div>'
                + '<div class="mini-panel-footer"></div>'
                + '<div class="mini-resizer-trigger"></div>'
            + '</div>'
            + '</div>';
        this.el.innerHTML = s;
        this.el.hideFocus = true;

        this._borderEl = this.el.firstChild;
        this._headerEl = this._borderEl.firstChild;
        this._viewportEl = this._borderEl.lastChild;

        this._toolbarEl = mini.byClass('mini-panel-toolbar', this.el);
        this._bodyEl = mini.byClass('mini-panel-body', this.el);
        this._footerEl = mini.byClass('mini-panel-footer', this.el);
        this._resizeGridEl = mini.byClass('mini-resizer-trigger', this.el);

        var hi = mini.byClass('mini-panel-header-inner', this.el);
        this._iconEl = mini.byClass('mini-panel-icon', this.el);
        this._titleEl = mini.byClass('mini-panel-title', this.el);
        this._toolsEl = mini.byClass('mini-tools', this.el);

        mini.setStyle(this._bodyEl, this.bodyStyle);


        this._doTitle();
    },
    destroy: function (removeEl) {

        this._doRemoveIFrame();
        this._iframeEl = null;

        //        mini.removeChilds(this._toolbarEl);
        //        mini.removeChilds(this._bodyEl);
        //        mini.removeChilds(this._footerEl); 
        this._viewportEl = this._borderEl = this._bodyEl = this._footerEl = this._toolbarEl = null;
        this._toolsEl = this._titleEl = this._iconEl = this._resizeGridEl = null;
        mini.Panel.superclass.destroy.call(this, removeEl);
    },
    _initEvents: function () {
        mini._BindEvents(function () {
            mini.on(this.el, "click", this.__OnClick, this);
        }, this);
    },

    _doVisibleEls: function () {
        this._headerEl.style.display = this.showHeader ? "" : "none";
        this._toolbarEl.style.display = this.showToolbar ? "" : "none";
        this._footerEl.style.display = this.showFooter ? "" : "none";
    },
    _setBodyWidth: true,
    doLayout: function () {
        if (!this.canLayout()) return;

        var autoHeight = this.isAutoHeight();
        var autoWidth = this.isAutoWidth();

        var maxHeight = parseInt(jQuery(this.el).css("max-height"));
        //alert(maxHeight);

        if (autoHeight && maxHeight) {

            this._viewportEl.style.height = "auto";
            this._bodyEl.style.height = "auto";
            var height = this.el.firstChild.offsetHeight;
            if (height > maxHeight) {
                autoHeight = false;
            }
        }

        this._autoHeight = autoHeight;

        //debugger

        //alert(mini_getStyle(this.el, 'min-height'));
        //alert(mini.getAttr(this.el, 'min-height'));

        //var w = mini.getWidth(this._viewportEl, true);

        var w = this.getWidth(true);
        var elWidth = w;
        if (mini.isIE6) {
            //mini.setWidth(this._bodyEl, w - 2);
            mini.setWidth(this._bodyEl, w);
        }
        if (!autoHeight) {

            var vh = this.getViewportHeight();

            mini.setHeight(this._viewportEl, vh);

            var bh = this.getBodyHeight();

            mini.setHeight(this._bodyEl, bh);
        } else {
            this._viewportEl.style.height = "auto";
            this._bodyEl.style.height = "auto";
        }

        mini.layout(this._borderEl);

        if (this._resizeGridEl) {
            mini.repaint(this._resizeGridEl);
            //            var that = this;
            //            var rd = this._resizeGridEl.style.display;
            //            this._resizeGridEl.style.display = "none";
            //            setTimeout(function(){
            //            that._resizeGridEl.style.display = rd;
            //            },1);
        }

        this._resizeGridEl.style.display = this.allowResize ? "" : "none";

        this.fire("layout");
    },
    deferLayout: function (time) {
        if (!time) time = 10;
        if (this._layoutTimer) return;
        var me = this;
        this._layoutTimer = setTimeout(function () {
            me._layoutTimer = null;
            me.doLayout();
        }, time);
    },
    _stopLayout: function () {
        clearTimeout(this._layoutTimer);
        this._layoutTimer = null;
    },
    getViewportWidth: function (content) {
        //return mini.getWidth(this._viewportEl, content);
        return this.getWidth(true);
    },
    getViewportHeight: function (content) {
        var h = this.getHeight(true) - this.getHeaderHeight();
        
        if (content) {
            var padding2 = mini.getPaddings(this._viewportEl);
            var border2 = mini.getBorders(this._viewportEl);
            var margin2 = mini.getMargins(this._viewportEl);
            if (jQuery.boxModel) {
                h = h - padding2.top - padding2.bottom - border2.top - border2.bottom;
            }
            h = h - margin2.top - margin2.bottom;
        }
        return h;
    },
    getBodyHeight: function (content) {
        var h = this.getViewportHeight();
        var h = h - this.getToolbarHeight() - this.getFooterHeight();
        if (content) {
            var padding = mini.getPaddings(this._bodyEl);
            var border = mini.getBorders(this._bodyEl);
            var margin = mini.getMargins(this._bodyEl);
            if (jQuery.boxModel) {
                h = h - padding.top - padding.bottom - border.top - border.bottom;
            }
            h = h - margin.top - margin.bottom;
        }
        //if (isIE9) h -= 1;
        if (h < 0) h = 0;
        return h;
    },
    getHeaderHeight: function () {
        var h = this.showHeader ? jQuery(this._headerEl).outerHeight() : 0;
        return h;
    },
    getToolbarHeight: function () {
        var h = this.showToolbar ? jQuery(this._toolbarEl).outerHeight() : 0;
        return h;
    },
    getFooterHeight: function () {
        var h = this.showFooter ? jQuery(this._footerEl).outerHeight() : 0;
        return h;
    },

    setHeaderStyle: function (value) {
        this.headerStyle = value;
        mini.setStyle(this._headerEl, value);
        this.doLayout();
    },
    getHeaderStyle: function () {
        return this.headerStyle;
    },
    setBodyStyle: function (value) {
        this.bodyStyle = value;
        mini.setStyle(this._bodyEl, value);
        this.doLayout();
    },
    getBodyStyle: function () {
        return this.bodyStyle;
    },
    setToolbarStyle: function (value) {
        this.toolbarStyle = value;
        mini.setStyle(this._toolbarEl, value);
        this.doLayout();
    },
    getToolbarStyle: function () {
        return this.toolbarStyle;
    },
    setFooterStyle: function (value) {
        this.footerStyle = value;
        mini.setStyle(this._footerEl, value);
        this.doLayout();
    },
    getFooterStyle: function () {
        return this.footerStyle;
    },
    setHeaderCls: function (cls) {
        jQuery(this._headerEl).removeClass(this.headerCls);
        jQuery(this._headerEl).addClass(cls);
        this.headerCls = cls;
        this.doLayout();
    },
    getHeaderCls: function () {
        return this.headerCls;
    },
    setBodyCls: function (cls) {
        jQuery(this._bodyEl).removeClass(this.bodyCls);
        jQuery(this._bodyEl).addClass(cls);
        this.bodyCls = cls;
        this.doLayout();
    },
    getBodyCls: function () {
        return this.bodyCls;
    },
    setToolbarCls: function (cls) {
        jQuery(this._toolbarEl).removeClass(this.toolbarCls);
        jQuery(this._toolbarEl).addClass(cls);
        this.toolbarCls = cls;
        this.doLayout();
    },
    getToolbarCls: function () {
        return this.toolbarCls;
    },
    setFooterCls: function (cls) {
        jQuery(this._footerEl).removeClass(this.footerCls);
        jQuery(this._footerEl).addClass(cls);
        this.footerCls = cls;
        this.doLayout();
    },
    getFooterCls: function () {
        return this.footerCls;
    },

    _doTitle: function () {
        var title = this.title == "" ? "&nbsp" : this.title;
        this._titleEl.innerHTML = title;

        this._iconEl.style.display = (this.iconCls || this.iconStyle) ? "inline" : "none";
        this._iconEl.className = "mini-panel-icon mini-icon mini-iconfont " + this.iconCls;

        mini.setStyle(this._iconEl, this.iconStyle);

    },
    setTitle: function (value) {
        this.title = value;
        this._doTitle();
    },
    getTitle: function () {
        return this.title;
    },
    setIconCls: function (value) {
        this.iconCls = value;
        this._doTitle();
    },
    getIconCls: function () {
        return this.iconCls;
    },
    setIconStyle: function (value) {
        this.iconStyle = value;
        this._doTitle();
    },
    getIconStyle: function () {
        return this.iconStyle;
    },

    //maxButtonCls: "",

    _doTools: function () {
        var s = "";
        for (var i = 0, l = this.buttons.length; i < l; i++) {
            var button = this.buttons[i];
            if (button.html) {
                s += button.html;
            } else {
                s += '<span id="' + i + '" class="mini-icon mini-iconfont fa ' + button.cls + ' '
                + (button.enabled ? "" : "mini-disabled") + '" style="'
                + button.style + ';' + (button.visible ? "" : "display:none;") + '"></span>';
            }
        }
        this._toolsEl.innerHTML = s;
    },
    setShowCloseButton: function (value) {
        this.showCloseButton = value;
        var button = this.getButton("close");
        if (!button) return;
        button.visible = value;
        this._doTools();
    },
    getShowCloseButton: function () {
        return this.showCloseButton;
    },
    setCloseAction: function (value) {
        this.closeAction = value;
    },
    getCloseAction: function () {
        return this.closeAction;
    },
    setShowCollapseButton: function (value) {
        this.showCollapseButton = value;
        var button = this.getButton("collapse");
        if (!button) return;
        button.visible = value;
        this._doTools();
    },
    getShowCollapseButton: function () {
        return this.showCollapseButton;
    },
    setShowHeader: function (value) {
        this.showHeader = value;
        this._doVisibleEls();
        this.deferLayout();
    },
    getShowHeader: function () {
        return this.showHeader;
    },
    setShowToolbar: function (value) {
        this.showToolbar = value;
        this._doVisibleEls();
        this.deferLayout();
    },
    getShowToolbar: function () {
        return this.showToolbar;
    },
    setShowFooter: function (value) {
        this.showFooter = value;
        this._doVisibleEls();
        this.deferLayout();
    },
    getShowFooter: function () {
        return this.showFooter;
    },
    ////////////////////////////////////////
    __OnClick: function (e) {

        if (mini.isAncestor(this._headerEl, e.target)) {
            var toolsEl = mini.findParent(e.target, 'mini-tools');
            if (toolsEl) {
                var button = this.getButton(parseInt(e.target.id));
                if (button) {
                    this._OnButtonClick(button, e);
                }
            } else {
                if (this.collapseOnTitleClick) {
                    this.toggle();
                }
            }
        }
    },
    _OnButtonClick: function (button, htmlEvent) {
        var e = {
            button: button,
            index: this.buttons.indexOf(button),
            name: button.name.toLowerCase(),
            htmlEvent: htmlEvent,
            cancel: false
        };
        this.fire("beforebuttonclick", e);

        var ret = true;
        try {
            if (e.name == "close" && this.closeAction == "destroy" && this._iframeEl && this._iframeEl.contentWindow) {

                if (this._iframeEl.contentWindow.CloseWindow) {
                    ret = this._iframeEl.contentWindow.CloseWindow("close");
                } else if (this._iframeEl.contentWindow.CloseOwnerWindow) {
                    ret = this._iframeEl.contentWindow.CloseOwnerWindow("close");
                } else {
                    //如果以上两行无法进入,说明弹出页面是跨域,自己调用
                    ret = this._CloseOwnerWindow("close");
                }

            }
        } catch (ex) {
            //如果有报错，也是跨域
            ret = this._CloseOwnerWindow("close");

        }
        if (ret === false) {
            e.cancel = true;
        }

        if (e.cancel == true) return e;

        this.fire("buttonclick", e);

        if (e.name == "close") {
            if (this.closeAction == "destroy") {
                this.__HideAction = "close";
                this.destroy();
            } else {
                this.hide();
            }
        }
        if (e.name == "collapse") {
            this.toggle();
            if (this.refreshOnExpand && this.expanded && this.url) {
                this.reload();
            }
        }
        return e;
    },
    onButtonClick: function (fn, scope) {
        this.on("buttonclick", fn, scope);
    },

    /*
    buttons: close, max, min, restore, collapse, expand
    */
    _initButtons: function () {
        this.buttons = [];

        var collapse = this.createButton({ name: "collapse", cls: "mini-tools-collapse", visible: this.showCollapseButton });
        this.buttons.push(collapse);

        var close = this.createButton({ name: "close", cls: "mini-tools-close", visible: this.showCloseButton });
        this.buttons.push(close);
    },
    createButton: function (options) {
        var button = mini.copyTo({
            name: "",
            cls: "",
            style: "",
            visible: true,
            enabled: true,
            html: ""
        }, options);
        return button;
    },
    setButtons: function (value) {
        if (typeof value == "string") {
            value = value.split(" ");
        }
        if (!mini.isArray(value)) value = [];
        var btns = [];
        for (var i = 0, l = value.length; i < l; i++) {
            var btn = value[i];
            if (typeof btn == "string") {
                btn = btn.trim();
                if (!btn) continue;
                btn = { name: btn, cls: 'mini-tools-' + btn, html: '' };
            }
            btn = this.createButton(btn);
            btns.push(btn);
        }
        this.buttons = btns;
        this._doTools();
    },
    getButtons: function () {
        return this.buttons;
    },
    addButton: function (button, index) {
        if (typeof button == "string") {
            button = { iconCls: button };
        }
        button = this.createButton(button);
        if (typeof index != "number") index = this.buttons.length;
        this.buttons.insert(index, button);
        this._doTools();
    },
    updateButton: function (index, options) {
        var button = this.getButton(index);
        if (!button) return;
        mini.copyTo(button, options);
        this._doTools();
    },
    removeButton: function (index) {
        var button = this.getButton(index);
        if (!button) return;
        this.buttons.remove(button);
        this._doTools();
    },
    getButton: function (index) {
        if (typeof index == "number") {
            return this.buttons[index];
        } else {
            for (var i = 0, l = this.buttons.length; i < l; i++) {
                var button = this.buttons[i];
                if (button.name == index) return button;
            }
        }
    },
    setBody: function (value) {
        __mini_setControls(value, this._bodyEl, this);
    },
    set_bodyParent: function (value) {

    },
    setToolbar: function (value) {
        __mini_setControls(value, this._toolbarEl, this);
    },
    setFooter: function (value) {
        __mini_setControls(value, this._footerEl, this);
    },
    getHeaderEl: function () {
        return this._headerEl;
    },
    getToolbarEl: function () {
        return this._toolbarEl;
    },
    getBodyEl: function () {
        return this._bodyEl;
    },
    getFooterEl: function () {
        return this._footerEl;
    },
    getIFrameEl: function (index) {
        return this._iframeEl;
    },

    clearTimeStamp: false,
    setClearTimeStamp: function (value) {
        this.clearTimeStamp = value;
    },
    getClearTimeStamp: function () {
        return this.clearTimeStamp;
    },

    ///////////////////////////////////////////////
    _getMaskWrapEl: function () {
        return this._bodyEl;
    },
    _doRemoveIFrame: function (removeAll) {

        if (this._iframeEl) {
            var iframe = this._iframeEl;
            //setTimeout(function () {

            if (iframe._ondestroy) iframe._ondestroy();

            iframe.onload = function () { };
            jQuery(iframe).unbind("load");
            iframe.src = "";

            if (mini.isIE) {
                try {
                    iframe.contentWindow.document.write("");
                    iframe.contentWindow.document.close();
                } catch (ex) { }
            }

            //}, 1);
            try {
                this._iframeEl.parentNode.removeChild(this._iframeEl);
                this._iframeEl.removeNode(true);
            } catch (ex) { }
        }
        this._iframeEl = null;
        //        try {
        //            CollectGarbage();
        //        } catch (e) { }

        //删除bodyEl内所有元素
        if (removeAll === true) {
            mini.removeChilds(this._bodyEl);
        }
    },
    _deferLoadingTime: 80,
    _doLoad: function () {

        if (!this.url) return;
        //if (this.isDisplay() == false) return;
        this._doRemoveIFrame(true);

        var st = new Date();
        var sf = this;
        this.loadedUrl = this.url;
        if (this.maskOnLoad) this.loading();

        jQuery(this._bodyEl).css("overflow", "hidden");

        function CloseOwnerWindow(action) {

            sf.__HideAction = action;

            //__onDestroy
            var ret = true;
            try {
                if (sf.__onDestroy) ret = sf.__onDestroy(action);
            } catch (ex) { }
            if (ret === false) {
                return false;
            }

            var e = {
                iframe: sf._iframeEl,
                action: action
            };

            sf.fire("unload", e);

            setTimeout(function () {
                sf.destroy();
            }, 10);

        }
        sf._CloseOwnerWindow = CloseOwnerWindow;

        var iframe = mini.createIFrame(this.url,
            function (_iframe, firstLoad) {
                if (sf.destroyed) return;

                var t = (st - new Date()) + sf._deferLoadingTime;

                if (t < 0) t = 0;
                setTimeout(function () {
                    sf.unmask();
                }, t);

                //window.close
                try {


                    sf._iframeEl.contentWindow.Owner = sf.Owner;
                    sf._iframeEl.contentWindow.CloseOwnerWindow = CloseOwnerWindow;
                } catch (e) { }

                //firstLoad
                //alert(1);
                if (firstLoad || sf.loadOnRefresh) {
                    if (sf.__onLoad) sf.__onLoad();

                    var e = {
                        iframe: sf._iframeEl
                    };

                    //mini.repaint(sf.el);
                    sf.fire("load", e);
                }
            },
            this.clearTimeStamp
        );
        this._bodyEl.appendChild(iframe);
        this._iframeEl = iframe;

    },

    load: function (url, onload, ondestroy) {
        this.setUrl(url, onload, ondestroy);
    },
    reload: function () {
        this.setUrl(this.url);
    },
    setUrl: function (value, onload, ondestroy) {
        this.url = value;
        this.__onLoad = onload;
        this.__onDestroy = ondestroy;
        if (this.expanded && value) {
            this._doLoad();
        }
    },
    getUrl: function () {
        return this.url;
    },
    setRefreshOnExpand: function (value) {
        this.refreshOnExpand = value;
    },
    getRefreshOnExpand: function () {
        return this.refreshOnExpand;
    },
    setMaskOnLoad: function (value) {
        this.maskOnLoad = value;
    },
    getMaskOnLoad: function (value) {
        return this.maskOnLoad;
    },
    setAllowResize: function (value) {
        if (this.allowResize != value) {
            this.allowResize = value;
            this.doLayout();
        }
    },
    getAllowResize: function () {
        return this.allowResize;
    },
    setLoadOnRefresh: function (value) {
        this.loadOnRefresh = value;
    },
    getLoadOnRefresh: function (value) {
        return this.loadOnRefresh;
    },

    /////////////////////////////////////////
    expanded: true,
    setExpanded: function (value) {
        if (this.expanded != value) {
            this.expanded = value;
            if (this.expanded) {
                this.expand();
            } else {
                this.collapse();
            }
        }
    },
    getExpanded: function () {
        return this.expanded;
    },
    toggle: function () {
        if (this.expanded) {
            this.collapse();
        } else {
            this.expand();
        }
    },
    collapse: function () {
        this.expanded = false;

        if (this.state != "max") {

            this._height = this.el.style.height;
        }
        this.el.style.height = "auto";
        this._viewportEl.style.display = "none";

        mini.addClass(this.el, "mini-panel-collapse");
        this.doLayout();
    },

    expand: function () {
        this.expanded = true;

        if (this._height) {
            this.el.style.height = this._height;
        }
        this._viewportEl.style.display = "block";

        if (this.state != "max") {
            delete this._height;
        }

        mini.removeClass(this.el, "mini-panel-collapse");

        //
        this._expandLoad();

        this.doLayout();
    },

    _expandLoad: function () {
        if (this.url && this.url != this.loadedUrl) {
            this._doLoad();
        }
    },

    //    setVisible: function (value) {
    //        mini.Panel.superclass.setVisible.call(this, value);
    //        if (value) {
    //            if (this.url && this.url != this.loadedUrl) {
    //                this._doLoad();
    //            }
    //        }
    //    },
    setCollapseOnTitleClick: function (value) {
        this.collapseOnTitleClick = value;
        mini.removeClass(this.el, 'mini-panel-titleclick');
        if (value) mini.addClass(this.el, 'mini-panel-titleclick');
    },
    getCollapseOnTitleClick: function () {
        return this.collapseOnTitleClick;
    },
    ///////////////////////////////////////////////
    getAttrs: function (el) {
        var attrs = mini.Panel.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["title", "iconCls", "iconStyle", "headerCls", "headerStyle", "bodyCls", "bodyStyle",
            "footerCls", "footerStyle", "toolbarCls", "toolbarStyle", "footer", "toolbar",
            "url", "closeAction", "loadingMsg",
            "onbeforebuttonclick", "onbuttonclick", "onload", "buttons"
             ]
        );
        mini._ParseBool(el, attrs,
            ["allowResize", "showCloseButton", "showHeader", "showToolbar", "showFooter", "loadOnRefresh",
            "showCollapseButton", "refreshOnExpand", "maskOnLoad", "expanded", "collapseOnTitleClick", "clearTimeStamp"
             ]
        );

        var cs = mini.getChildNodes(el, true);
        for (var i = cs.length - 1; i >= 0; i--) {
            var node = cs[i];
            //var property = jQuery(node).attr("property");
            var property = mini.getAttr(node, "property");
            if (!property) continue;
            property = property.toLowerCase();
            if (property == "toolbar") {
                attrs.toolbar = node;
            } else if (property == "footer") {
                attrs.footer = node;
            }
        }
        attrs.body = cs;

        return attrs;
    }


});
mini.regClass(mini.Panel, "panel");


//mini._PanelResizer = function (panel) {
//    this.owner = panel;
//    mini.on(panel.el, "mousedown", this.__OnMouseDown, this);
//}
//mini._PanelResizer.prototype = {
//    __OnMouseDown: function (e) {
//        var panel = this.owner;
//        
//        if (mini.isAncestor(panel._resizeGridEl, e.target) && panel.allowResize) {
//            var drag = this._getResizeDrag();
//            drag.start(e);
//        }
//    },
//    _getResizeDrag: function () {
//        if (!this._resizeDragger) {
//            this._resizeDragger = new mini.Drag({
//                capture: true,
//                onStart: mini.createDelegate(this._OnDragStart, this),
//                onMove: mini.createDelegate(this._OnDragMove, this),
//                onStop: mini.createDelegate(this._OnDragStop, this)
//            });
//        }
//        return this._resizeDragger;
//    },
//    _OnDragStart: function (drag) {

//        this.proxy = mini.append(document.body, '<div class="mini-resizer-proxy"></div>');
//        this.proxy.style.cursor = "se-resize";

//        this.elBox = mini.getBox(this.el);
//        mini.setBox(this.proxy, this.elBox);
//    },
//    _OnDragMove: function (drag) {
//        var xOffset = drag.now[0] - drag.init[0];
//        var yOffset = drag.now[1] - drag.init[1];

//        var w = this.elBox.width + xOffset;
//        var h = this.elBox.height + yOffset;
//        if (w < this.minWidth) w = this.minWidth;
//        if (h < this.minHeight) h = this.minHeight;
//        if (w > this.maxWidth) w = this.maxWidth;
//        if (h > this.maxHeight) h = this.maxHeight;

//        mini.setSize(this.proxy, w, h);
//    },
//    _OnDragStop: function (drag) {
//        var box = mini.getBox(this.proxy);

//        jQuery(this.proxy).remove();
//        this.proxy = null;
//        this.elBox = null;

//        this.setWidth(box.width);
//        this.setHeight(box.height);

//        delete this._width;
//        delete this._height;

//        //mini.repaint(this.el);
//    }
//}
/**
* jQuery MiniUI v3.0
* 
* Web Site : http://www.miniui.com
*
* Commercial License : http://www.miniui.com/license
*
* Copyright(c) 2012 All Rights Reserved. Shanghai PusSoft Co., Ltd (上海普加软件有限公司) [ services@plusoft.com.cn ]. 
* 
*/

mini.Window = function () {
    
    mini.Window.superclass.constructor.apply(this, arguments);

    this.addCls("mini-window");
    
    this.setVisible(false);
    this.setAllowDrag(this.allowDrag);
    this.setAllowResize(this.allowResize);
}

mini.extend(mini.Window, mini.Panel, {
    x: 0,
    y: 0,
    state: "restore", //restore, max

    _dragCls: "mini-window-drag",
    _resizeCls: "mini-window-resize",
    allowDrag: true,
    //allowResize: false,
    showCloseButton: true,
    showMaxButton: false,
    showMinButton: false,
    showCollapseButton: false,

    showModal: true,

    minWidth: 150,
    minHeight: 80,
    maxWidth: 2000,
    maxHeight: 2000,

    uiCls: "mini-window",

    _create: function () {
        mini.Window.superclass._create.call(this);

        this.el.className += ' mini-corner-all';
        this.el.firstChild.className += ' mini-corner-all';

        if (mini.isIE && mini_useShims) {
            var iframe = "<iframe frameborder='0' style='position: absolute; z-index: -1; width: 100%; height: 100%; top: 0;left:0;scrolling:no;'></iframe>";
            mini.append(this.el, iframe);
        }
    },
    _initButtons: function () {
        this.buttons = [];


        var collapse = this.createButton({ name: "collapse", cls: "mini-tools-collapse", visible: this.showCollapseButton });
        this.buttons.push(collapse);

        var min = this.createButton({ name: "min", cls: "mini-tools-min", visible: this.showMinButton });
        this.buttons.push(min);

        var max = this.createButton({ name: "max", cls: "mini-tools-max", visible: this.showMaxButton });
        this.buttons.push(max);

        var close = this.createButton({ name: "close", cls: "mini-tools-close", visible: this.showCloseButton });
        this.buttons.push(close);

    },
    _initEvents: function () {
        mini.Window.superclass._initEvents.call(this);

        mini._BindEvents(function () {
            //mini.on(document, "mousedown", this.__OnBodyMouseDown, this);
            mini.on(this.el, "mouseover", this.__OnMouseOver, this);
            mini.on(window, "resize", this.__OnWindowResize, this);

            mini.on(this.el, "mousedown", this.__OnWindowMouseDown, this);
        }, this);


    },
    doLayout: function () {
        if (!this.canLayout()) return;
        //        if (this.state == "max") {
        //            this._doShow();
        //        }

        if (this.state == "max") {
            var vbox = this.getParentBox();
            this.el.style.left = "0px";
            this.el.style.top = "0px";
            mini.setSize(this.el, vbox.width, vbox.height);
        }

        mini.Window.superclass.doLayout.call(this);
        //this._doShadow();

        if (this.allowDrag) {
            mini.addClass(this.el, this._dragCls);
        }
        if (this.state == "max") {
            this._resizeGridEl.style.display = "none";
            mini.removeClass(this.el, this._dragCls);
        }

        //modal
        this._doModal();
    },
    _doModal: function () {

        if (!this.el) {

            if (this._modalEl) mini.removeNode(this._modalEl);
            return;
        }
        var show = this.showModal && this.isDisplay() && this.visible;
        if (!this._modalEl && this.showModal == false) {

            if (this._modalEl) mini.removeNode(this._modalEl);
            return;
        }
        //if (this.showModal && this.visible) show = true;
        //this.el.style.display = "none";
        if (!this._modalEl) {
            var id = '__modal' + this._id;

            var iframe = mini_useShims ? "<iframe frameborder='0' style='position: absolute; z-index: -1; width: 100%; height: 100%; top: 0;left:0;scrolling:no;'></iframe>" : "";
            this._modalEl = mini.append(document.body, '<div id="' + id + '" class="mini-modal mini-widget-content" style="display:none">' + iframe + '</div>');
        }
        //this._modalEl.style.display = "none";
        //        this._modalEl.style.width = "100px";
        //        this._modalEl.style.height = "100px";
        //        function resizeModal() {
        //            //mini.repaint(document.body);
        //            var dd = document.documentElement;
        //            var scrollWidth = parseInt(Math.max(document.body.scrollWidth, dd ? dd.scrollWidth : 0));
        //            var scrollHeight = parseInt(Math.max(document.body.scrollHeight, dd ? dd.scrollHeight : 0));

        //            var vbox = mini.getViewportBox();
        //            var height = vbox.height;
        //            if (height < scrollHeight) height = scrollHeight;

        //            var width = vbox.width;
        //            if (width < scrollWidth) width = scrollWidth;

        //            this._modalEl.style.display = show ? "block" : "none";

        //            this._modalEl.style.height = height + "px";
        //            this._modalEl.style.width = width + "px"; //"100%";
        //            this._modalEl.style.zIndex = mini.getStyle(this.el, 'zIndex') - 1;
        //        }
        if (show) {
            this._modalEl.style.display = "block";
            this._modalEl.style.zIndex = mini.getStyle(this.el, 'zIndex') - 1;
            //            var me = this;

            //            setTimeout(function () {
            //                if (me._modalEl) {
            //                    me._modalEl.style.display = "none";
            //                    resizeModal.call(me);
            //                }
            //            }, 1);
        } else {
            this._modalEl.style.display = "none";
        }
    },
    getParentBox: function () {
        var vbox = mini.getViewportBox();
        var containerEl = this._containerEl || document.body;
        if (containerEl != document.body) {
            vbox = mini.getBox(containerEl);
        }
        return vbox;
    },
    ////////////////////////////////////////////////////////
    setShowModal: function (value) {

        this.showModal = value;
    },
    getShowModal: function () {
        return this.showModal;
    },
    setMinWidth: function (value) {
        if (isNaN(value)) return;
        this.minWidth = value;
    },
    getMinWidth: function () {
        return this.minWidth;
    },
    setMinHeight: function (value) {
        if (isNaN(value)) return;
        this.minHeight = value;
    },
    getMinHeight: function () {
        return this.minHeight;
    },
    setMaxWidth: function (value) {
        if (isNaN(value)) return;
        this.maxWidth = value;
    },
    getMaxWidth: function () {
        return this.maxWidth;
    },
    setMaxHeight: function (value) {
        if (isNaN(value)) return;
        this.maxHeight = value;
    },
    getMaxHeight: function () {
        return this.maxHeight;
    },
    setAllowDrag: function (value) {
        this.allowDrag = value;
        mini.removeClass(this.el, this._dragCls);
        if (value) {
            mini.addClass(this.el, this._dragCls);
        }
    },
    getAllowDrag: function () {
        return this.allowDrag;
    },
    //    setAllowResize: function (value) {
    //        if (this.allowResize != value) {
    //            this.allowResize = value;
    //            this.doLayout();
    //        }
    //    },
    //    getAllowResize: function () {
    //        return this.allowResize;
    //    },
    setShowMaxButton: function (value) {
        this.showMaxButton = value;
        var button = this.getButton("max");
        if (!button) return;
        button.visible = value;
        this._doTools();
    },
    getShowMaxButton: function () {
        return this.showMaxButton;
    },
    setShowMinButton: function (value) {
        this.showMinButton = value;
        var button = this.getButton("min");
        if (!button) return;
        button.visible = value;
        this._doTools();
    },
    getShowMinButton: function () {
        return this.showMinButton;
    },
    ///////////////////////////////////////////////////
    max: function () {
        this.state = "max";

        //        this.el.style.left = "-10000px";
        //        this.el.style.top = "-10000px";

        this.addCls("mini-window-max");

        this.show();

        var button = this.getButton("max");
        if (button) {
            button.cls = "mini-tools-restore";
            this._doTools();
        }
    },
    restore: function () {

        this.removeCls("mini-window-max");

        this.state = "restore";
        this.show(this.x, this.y);

        var button = this.getButton("max");
        if (button) {
            button.cls = "mini-tools-max";
            this._doTools();
        }

    },
    showInBody: true,
    setShowInBody: function (value) {
        this.showInBody = value;
    },
    getShowInBody: function () {
        return this.showInBody;
    },
    containerEl: null,
    showAtPos: function (x, y, options) {
        this.show(x, y, options);
    },
    show: function (x, y, options) {
        this._allowLayout = false;

        var containerEl = this._containerEl || document.body;
        if (!this.isRender() || (this.el.parentNode != containerEl && this.showInBody)) {
            this.render(containerEl);
        }

        this.el.style.zIndex = mini.getMaxZIndex();

        this._doShow(x, y);

        this._allowLayout = true;
        this.setVisible(true);

        if (this.state != "max") {
            var box = this.getBox();
            this.x = box.x;
            this.y = box.y;
        }


        //mini.repaint(this.el);

        //this.focus();
        try {
            //this.el.focus();
            document.body.focus();
        } catch (e) { }
    },
    //    focus: function () {
    //        debugger
    //    },
    hide: function () {
        this.setVisible(false);
        this._doModal();
    },
    getWidth: function (content) {
        this._headerEl.style.width = "50px";
        var width = mini.getWidth(this.el);
        this._headerEl.style.width = "auto";

        if (content && this._borderEl) {
            var b2 = mini.getBorders(this._borderEl);
            width = width - b2.left - b2.right;
        }

        return width;
    },
    getBox: function () {
        this._headerEl.style.width = "50px";
        this.el.style.display = "";
        var width = mini.getWidth(this.el);
        this._headerEl.style.width = "auto";
        var box = mini.getBox(this.el);
        box.width = width;
        box.right = box.x + width;
        return box;
    },
    _measureSize: function () {
        this.el.style.display = "";
        var box = this.getBox();
        //min, max
        if (box.width > this.maxWidth) {
            mini.setWidth(this.el, this.maxWidth);
            box = this.getBox();
        }
        if (this.expanded) {
            if (box.height > this.maxHeight) {
                mini.setHeight(this.el, this.maxHeight);
                box = this.getBox();
            }
        }
        if (box.width < this.minWidth) {
            mini.setWidth(this.el, this.minWidth);
            box = this.getBox();
        }

        if (this.expanded) {
            if (box.height < this.minHeight) {
                mini.setHeight(this.el, this.minHeight);
                box = this.getBox();
            }
        }
    },
    _doShow: function (x, y) {
        var vbox = this.getParentBox();

        if (this.state == "max") {

            if (!this._width) {
                var box = this.getBox();

                this._width = box.width;

                if (this.expanded) {
                    this._height = box.height;
                }
                this.x = box.x;
                this.y = box.y;


            }

            this.el.style.left = "-10000px";
            this.el.style.top = "-10000px";
        } else {
            if (mini.isNull(x)) x = "center";
            if (mini.isNull(y)) y = "middle";

            this.el.style.position = "absolute";
            this.el.style.left = "-2000px";
            this.el.style.top = "-2000px";
            this.el.style.display = "";

            if (this._width) {
                this.setWidth(this._width);
                this.setHeight(this._height);
                delete this._width;
                delete this._height;
            } else {
                //mini.setSize(this.el, this.width, this.height);
            }
            this._measureSize();

            var box = this.getBox();

            //x, y的获取        
            if (x == "left") x = 0;
            if (x == 'center') x = vbox.width / 2 - box.width / 2;
            if (x == "right") x = vbox.width - box.width;

            if (y == "top") y = 0;
            if (y == "middle") y = vbox.y + vbox.height / 2 - box.height / 2;
            if (y == "bottom") y = vbox.height - box.height;

            if (x + box.width > vbox.right) x = vbox.right - box.width;
            if (y + box.height > vbox.bottom) y = vbox.bottom - box.height;
            if (x < 0) x = 0;
            if (y < 0) y = 0;

            this.el.style.display = "";
            //document.title = x+":"+y;
            mini.setX(this.el, x);

            mini.setY(this.el, y);

            //            this.el.style.left = x + "px";
            //            this.el.style.top = y + "px";

            //jQuery(this.el).fadeOut();
            //jQuery(this.el).slideUp();
            //jQuery(this.el).slideDown();



            //alert(x);
        }
        this.doLayout();
    },
    ///////////////////////////////////////////////////
    //    __OnClick: function (e) {
    //        mini.Window.superclass.__OnClick.call(this, e);
    //        if(this.el) this.el.style.zIndex = mini.getMaxZIndex();
    //    },
    _OnButtonClick: function (button, htmlEvent) {
        var e = mini.Window.superclass._OnButtonClick.call(this, button, htmlEvent);
        if (e.cancel == true) return e;

        if (e.name == "max") {
            if (this.state == "max") {
                this.restore();
            } else {
                this.max();
            }
        }
        return e;
    },
    __OnWindowResize: function (e) {
        if (this.state == "max") {
            this.doLayout();


        }
        if (!mini.isIE6) {
            this._doModal();
        }
    },
    enableDragProxy: true,
    setEnableDragProxy: function (value) {
        this.enableDragProxy = value;
    },
    getEnableDragProxy: function (value) {
        return this.enableDragProxy;
    },

    allowCrossBottom: true,
    setAllowCrossBottom: function (value) {
        this.allowCrossBottom = value
    },
    getAllowCrossBottom: function () {
        return this.allowCrossBottom;
    },


    xxx: 0,
    __OnWindowMouseDown: function (e) {

        var sf = this;

        //drag
        //if (e.button != mini.MouseButton.Left) return;

        if (this.state != "max" && this.allowDrag && mini.isAncestor(this._headerEl, e.target) && !mini.findParent(e.target, "mini-tools")) {
            var sf = this;
            //this.focus();
            if (this.el) {
                this.el.style.zIndex = mini.getMaxZIndex();
            }
            var box = this.getBox();
            var drag = new mini.Drag({
                capture: false,
                onStart: function () {
                    sf._maskProxy = mini.append(document.body, '<div class="mini-resizer-mask" style=""></div>');

                    if (sf.enableDragProxy) {
                        sf._dragProxy = mini.append(document.body, '<div class="mini-drag-proxy"></div>');
                        //sf.el.style.display = "none";

                        sf.el.style.left = "-2000px";
                        sf.el.style.top = "-2000px";

                        //                        var iframe = "<iframe frameborder='0' style='position: absolute; z-index: -1; width: 0; height: 0; top: 0;left:0;scrolling:no;'></iframe>";
                        //                        mini.append(sf._dragProxy, iframe);

                    } else {
                        sf._dragProxy = sf.el;
                    }
                    //sf.el.style.cursor = "move";

                    var mask = mini.append(document.body, '<div class="mini-resizer-mask"></div>');
                    setTimeout(function () {
                        mini.removeNode(mask);
                    }, 300);

                },
                onMove: function (drag) {
                    //document.title = "move" + new Date().getTime();
                    var x = drag.now[0] - drag.init[0], y = drag.now[1] - drag.init[1];

                    x = box.x + x;
                    y = box.y + y;
                    //限制在浏览器范围内
                    var vbox = sf.getParentBox();

                    var right = x + box.width;
                    var bottom = y + box.height;
                    if (right > vbox.width) x = vbox.width - box.width;
                    //if (bottom > vbox.bottom) y = vbox.bottom - box.height;

                    if (!sf.allowCrossBottom) {
                        if (bottom > vbox.height) y = vbox.height - box.height;
                    }


                    if (x < 0) x = 0;
                    if (y < 0) y = 0;

                    //mini.setXY(sf.el, x, y);
                    //                    if (sf.shadowEl) {
                    //                        mini.setXY(sf.shadowEl, x, y);
                    //                    }
                    sf.x = x;
                    sf.y = y;

                    //_dragProxy
                    var dbox = { x: x, y: y, width: box.width, height: box.height };

                    mini.setBox(sf._dragProxy, dbox);

                    this.moved = true;
                },
                onStop: function () {

                    //document.title = sf.xxx++;
                    if (sf.el) {
                        sf.el.style.display = "block";
                        //if (!sf._dragProxy) return;
                        if (this.moved) {
                            var box = mini.getBox(sf._dragProxy);
                            //if(box.width < 10) debugger
                            //debugger
                            mini.setBox(sf.el, box);
                        }
                    }

                    jQuery(sf._maskProxy).remove();
                    sf._maskProxy = null;

                    if (sf.enableDragProxy) {
                        jQuery(sf._dragProxy).remove();
                    }
                    sf._dragProxy = null;

                    sf.fire("moveend");
                }
            });
            drag.start(e);


        }
    },
    destroy: function (removeEl) {
        //this._doModal();
        //mini.un(document, "mousedown", this.__OnBodyMouseDown, this);
        mini.un(window, "resize", this.__OnWindowResize, this);


        if (this._modalEl) {
            jQuery(this._modalEl).remove();
            this._modalEl = null;
        }
        if (this.shadowEl) {
            jQuery(this.shadowEl).remove();
            this.shadowEl = null;
        }

        var id = '__modal' + this._id;
        jQuery("[id='" + id + "']").remove();

        mini.Window.superclass.destroy.call(this, removeEl);
    },
    getAttrs: function (el) {
        var attrs = mini.Window.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["modalStyle", "onmoveend"
                ]
        );
        mini._ParseBool(el, attrs,
            ["showModal", "showShadow", "allowDrag", "allowResize",
            "showMaxButton", "showMinButton", "showInBody", "enableDragProxy", "allowCrossBottom"
                ]
        );
        mini._ParseInt(el, attrs,
            ["minWidth", "minHeight", "maxWidth", "maxHeight"
                ]
        );

        return attrs;
    },
    ////////////////////////////////////////////
    showAtEl: function (atEl, options) {
        atEl = mini.byId(atEl);
        if (!atEl) return;
        if (!this.isRender() || this.el.parentNode != document.body) {
            this.render(document.body);
        }

        var c = {
            xAlign: this.xAlign,
            yAlign: this.yAlign,
            xOffset: 0,
            yOffset: 0,
            popupCls: this.popupCls
        };
        mini.copyTo(c, options);

        //        mini.addClass(atEl, c.popupCls);
        //        atEl.popupCls = c.popupCls;
        this._popupEl = atEl;

        this.el.style.position = "absolute";
        this.el.style.left = "-2000px";
        this.el.style.top = "-2000px";
        this.el.style.display = "";

        this.doLayout();
        this._measureSize();

        var vbox = mini.getViewportBox();
        var box = this.getBox();
        var pbox = mini.getBox(atEl);
        var xy = c.xy;
        var h = c.xAlign, v = c.yAlign;

        var x = vbox.width / 2 - box.width / 2, y = 0;
        if (xy) {
            x = xy[0];
            y = xy[1];
        }

        switch (c.xAlign) {
            case "outleft":
                x = pbox.x - box.width;
                break;
            case "left":
                x = pbox.x;
                break;
            case "center":
                x = pbox.x + pbox.width / 2 - box.width / 2;
                break;
            case "right":
                x = pbox.right - box.width;
                break;
            case "outright":
                x = pbox.right;
                break;
            default:

                break;
        }

        switch (c.yAlign) {
            case "above":
                y = pbox.y - box.height;
                break;
            case "top":
                y = pbox.y;
                break;
            case "middle":
                y = pbox.y + pbox.height / 2 - box.height / 2;
                break;
            case "bottom":
                y = pbox.bottom - box.height;
                break;
            case "below":
                y = pbox.bottom;
                break;
            default:

                break;
        }
        x = parseInt(x);
        y = parseInt(y);


        if (c.outYAlign || c.outXAlign) {
            if (c.outYAlign == "above") {
                if (y + box.height > vbox.bottom) {
                    var top = pbox.y - vbox.y;
                    var bottom = vbox.bottom - pbox.bottom;
                    if (top > bottom) {
                        y = pbox.y - box.height;
                    }
                }

            }
            if (c.outXAlign == "outleft") {
                if (x + box.width > vbox.right) {
                    var left = pbox.x - vbox.x;
                    var right = vbox.right - pbox.right;
                    if (left > right) {
                        x = pbox.x - box.width;
                    }
                }
            }
            if (c.outXAlign == "right") {
                if (x + box.width > vbox.right) {
                    x = pbox.right - box.width;
                    //                    var right = vbox.right - pbox.right;
                    //                    if (left > right) {
                    //                        x = pbox.x - box.width;
                    //                    }
                }
            }
            this._Show(x, y);
        } else {
            this.showAtPos(x + c.xOffset, y + c.yOffset);
        }
    }
});

mini.regClass(mini.Window, "window");


/* MessageBox
-----------------------------------------------------------------------------*/

//mini.on(document, "keydown", function (e) {
//    // debugger
//    if (e.keyCode == 27) {
//        alert("enter");
//        //        if (callback) callback("close");
//        //        e.cancel = true;

//        //        if (control && control._Buttons) {
//        //            mini.MessageBox.hide(control);
//        //        }
//    }
//});

mini.MessageBox = {
    //    INFO: 'mini-messagebox-info',
    //    WARNING: 'mini-messagebox-warning',
    //    QUESTION: 'mini-messagebox-question',
    //    ERROR: 'mini-messagebox-error',
    //    WAITING: 'mini-messagebox-waiting',

    alertTitle: "提醒",
    confirmTitle: "确认",
    prompTitle: "输入",
    prompMessage: "请输入内容：",
    buttonText: {
        ok: "确定", //"OK",
        cancel: "取消", //"Cancel",
        yes: "是", //"Yes",
        no: "否"//"No"
    },

    autoFocus: true,

    show: function (options) {

        options = mini.copyTo({
            width: "auto",
            height: "auto",
            showModal: true,

            timeout: 0,

            minWidth: 150,
            maxWidth: 800,
            minHeight: 50,
            maxHeight: 350,

            showHeader: true,
            title: "",
            titleIcon: "",
            iconCls: "",
            iconStyle: "",
            message: "",
            html: "",

            spaceStyle: "margin-right:15px",

            showCloseButton: true,
            buttons: null,
            buttonWidth: 58,
            callback: null
        }, options);

        options.message = String(options.message);

        var callback = options.callback;

        var control = new mini.Window();

        control.addCls("mini-messagebox");

        control.setBodyStyle("overflow:hidden");
        control.setShowModal(options.showModal);
        control.setTitle(options.title || "");
        control.setIconCls(options.titleIcon);
        control.setShowHeader(options.showHeader);

        control.setShowCloseButton(options.showCloseButton);

        var id1 = control.uid + "$table", id2 = control.uid + "$content";

        var icon = '<div class="' + options.iconCls + '" style="' + options.iconStyle + '"></div>';
        var s = '<table class="mini-messagebox-table" id="' + id1 + '" style="" cellspacing="0" cellpadding="0"><tr><td>'
                + icon + '</td><td id="' + id2 + '" class="mini-messagebox-content-text">'
                + (options.message || "") + '</td></tr></table>';

        //var s = "";
        //control.setShowHeader(false);

        var ws = '<div class="mini-messagebox-content"></div>'
             + '<div class="mini-messagebox-buttons"></div>';
        control._bodyEl.innerHTML = ws;
        var contentEl = control._bodyEl.firstChild;
        if (options.html) {
            if (typeof options.html == "string") {
                contentEl.innerHTML = options.html;
            } else if (mini.isElement(options.html)) {
                contentEl.appendChild(options.html);
            }
        } else {
            contentEl.innerHTML = s;
        }

        control._Buttons = [];

        var buttonsEl = control._bodyEl.lastChild;
        if (options.buttons && options.buttons.length > 0) {
            for (var i = 0, l = options.buttons.length; i < l; i++) {
                var button = options.buttons[i];
                var text = mini.MessageBox.buttonText[button];
                if (!text) text = button;

                var btn = new mini.Button();
                btn.setText(text);
                btn.setWidth(options.buttonWidth);
                btn.render(buttonsEl);
                btn.action = button;
                btn.on("click", function (e) {
                    var button = e.sender;
                    if (callback) if (callback(button.action) === false) return;
                    mini.MessageBox.hide(control);
                });

                if (i != l - 1) {
                    btn.setStyle(options.spaceStyle);
                }

                control._Buttons.push(btn);
            }
        } else {
            buttonsEl.style.display = "none";
        }

        control.setMinWidth(options.minWidth);
        control.setMinHeight(options.minHeight);
        control.setMaxWidth(options.maxWidth);
        control.setMaxHeight(options.maxHeight);
        control.setWidth(options.width);
        control.setHeight(options.height);
        control.show(options.x, options.y, { animType: options.animType });




        var width = control.getWidth();
        control.setWidth(width);
        var height = control.getHeight();
        control.setHeight(height);

        var tb = document.getElementById(id1);
        if (tb) {
            tb.style.width = "100%";
        }
        var td = document.getElementById(id2);
        if (td) {
            td.style.width = "100%";
        }
        //}

        if (mini.MessageBox.autoFocus) {
            var firstButton = control._Buttons[0];
            if (firstButton) {
                //alert(1);
                firstButton.focus();
            } else {
                //alert(2);
                control.focus();
            }
        }

        control.on("beforebuttonclick", function (e) {
            if (callback) callback("close");
            e.cancel = true;
            mini.MessageBox.hide(control);
        });

        mini.on(control.el, "keydown", function (e) {
            if (e.keyCode == 27) {
                if (callback) callback("close");
                mini.MessageBox.hide(control);
            }
        });

        //

        if (options.timeout) {
            setTimeout(function () {
                mini.MessageBox.hide(control.uid);
            }, options.timeout);
        }

        return control.uid;
    },
    hide: function (id) {
        if (!id) return;
        var control = typeof id == "object" ? id : mini.getbyUID(id);
        if (!control) return;

        //destroy buttons
        for (var i = 0, l = control._Buttons.length; i < l; i++) {
            var button = control._Buttons[i];
            button.destroy();
        }
        control._Buttons = null;

        control.destroy();
    },
    alert: function (message, title, callback) {
        return mini.MessageBox.show({
            minWidth: 250,
            title: title || mini.MessageBox.alertTitle,
            buttons: ["ok"],
            message: message,
            iconCls: "mini-messagebox-warning",
            callback: callback
        });
    },
    confirm: function (message, title, callback) {
        return mini.MessageBox.show({
            minWidth: 250,
            title: title || mini.MessageBox.confirmTitle,
            buttons: ["ok", "cancel"],
            message: message,
            iconCls: "mini-messagebox-question",
            callback: callback
        });
    },
    prompt: function (message, title, callback, multi, value) {
        var id = "prompt$" + new Date().getTime();
        var s = message || mini.MessageBox.promptMessage;



        if (multi) {
            s = s + '<br/><textarea id="' + id + '" style="width:200px;height:60px;margin-top:3px;"></textarea>';
        } else {
            s = s + '<br/><input id="' + id + '" type="text" style="width:200px;margin-top:3px;"/>';
        }
        var uid = mini.MessageBox.show({
            title: title || mini.MessageBox.promptTitle,
            buttons: ["ok", "cancel"],
            width: 250,
            html: '<div style="padding:5px;padding-left:10px;">' + s + '</div>',
            callback: function (action) {
                var input = document.getElementById(id);
                if (callback) return callback(action, input.value);
            }
        });
        var input = document.getElementById(id);
        input.focus();

        if (value == null) value = "";
        input.value = value;

        return uid;
    },
    loading: function (message, title) {
        return mini.MessageBox.show({
            minHeight: 50,
            title: title,
            showCloseButton: false,
            message: message,
            iconCls: "mini-messagebox-waiting"
        });
    },
    showTips: function (options) {
        var $ = jQuery;

        options = jQuery.extend({
            content: '',
            state: '',
            x: 'center',
            y: 'top',
            offset: [10, 10],
            fixed: true,
            timeout: 2000
        }, options);

        var cls = 'mini-tips-' + options.state;
        var html = '<div class="mini-tips ' + cls + '">' + options.content + '</div>';
        var jq = jQuery(html).appendTo(document.body);

        options.el = jq[0];
        options.timeoutHandler = function () {
            jq.slideUp();
            setTimeout(function () {
                jq.remove();
            }, 2000);
        }

        mini.showAt(options);
        jq.hide().slideDown();

    }
};
mini.alert = mini.MessageBox.alert;
mini.confirm = mini.MessageBox.confirm;
mini.prompt = mini.MessageBox.prompt;
mini.loading = mini.MessageBox.loading;
mini.showMessageBox = mini.MessageBox.show;
mini.hideMessageBox = mini.MessageBox.hide;
mini.showTips = mini.MessageBox.showTips;

/**
* jQuery MiniUI v3.0
* 
* Web Site : http://www.miniui.com
*
* Commercial License : http://www.miniui.com/license
*
* Copyright(c) 2012 All Rights Reserved. Shanghai PusSoft Co., Ltd (上海普加软件有限公司) [ services@plusoft.com.cn ]. 
* 
*/

mini.Tabs = function () {    
    this._initTabs();
    mini.Tabs.superclass.constructor.apply(this, arguments);
}
mini.extend(mini.Tabs, mini.Control, {
    activeIndex: -1,
    tabAlign: "left",   //left/center/right/fit
    tabPosition: "top", //top/right/bottom/left
    showBody: true,
    showHeader: true,

    nameField: "name",
    titleField: "title",
    urlField: "url",

    url: "",
    maskOnLoad: true,

    //showCloseOnHover: true,

    plain: true,
    //    tabHeaderCls: "",
    //    tabHeaderStyle: "",
    //    tabBodyCls: "",
    //    tabBodyStyle: "",

    bodyStyle: "",

    _tabHoverCls: "mini-tab-hover",
    _tabActiveCls: "mini-tab-active",

    set: function (obj) {
        if (typeof obj == 'string') {
            return this;
        }



        var _allowLayout = this._allowLayout;
        this._allowLayout = false;

        var activeIndex = obj.activeIndex;
        delete obj.activeIndex;

        var url = obj.url;
        delete obj.url;

        mini.Tabs.superclass.set.call(this, obj);

        if (url) {
            this.setUrl(url);
        }
        if (mini.isNumber(activeIndex)) {
            this.setActiveIndex(activeIndex);
        }

        this._allowLayout = _allowLayout;
        this.doLayout();

        return this;
    },

    uiCls: "mini-tabs",
    _create: function () {
        this.el = document.createElement("div");
        this.el.className = "mini-tabs";

        var s = '<table class="mini-tabs-table" cellspacing="0" cellpadding="0"><tr style="width:100%;">'
                    + '<td></td>'
                    + '<td style="text-align:left;vertical-align:top;width:100%;"><div class="mini-tabs-bodys"></div></td>'
                    + '<td></td>'
                + '</tr></table>';
        this.el.innerHTML = s;
        this._tableEl = this.el.firstChild;

        var tds = this.el.getElementsByTagName("td");
        this._td1El = tds[0];
        this._td2El = tds[1];
        this._td3El = tds[2];

        this._bodyEl = this._td2El.firstChild;
        this._borderEl = this._bodyEl;
        this.doUpdate();
    },
    destroy: function (removeEl) {

        if (this.tabs) {
            for (var i = 0, l = this.tabs.length; i < l; i++) {
                var tab = this.tabs[i];
                //this._doRemoveIFrame(tab, true);
                tab._iframeEl = null;
            }
        }

        this._tableEl = this._td1El = this._td2El = this._td3El = null;
        this._bodyEl = this._borderEl = this.headerEl = null;
        this.tabs = null;
        mini.Tabs.superclass.destroy.call(this, removeEl);
    },
    //    destroy: function (removeEl) {
    //        if (this.tabs) {
    //            for (var i = 0, l = this.tabs.length; i < l; i++) {
    //                var tab = this.tabs[i];
    //                this._doRemoveIFrame(tab, true);
    //            }
    //        }
    //        this.tabs = null;
    //        mini.Tabs.superclass.destroy.call(this, removeEl);
    //    },
    _doClearElement: function () {
        mini.removeClass(this._td1El, "mini-tabs-header");
        mini.removeClass(this._td3El, "mini-tabs-header");
        this._td1El.innerHTML = '';
        this._td3El.innerHTML = '';

        mini.removeChilds(this._td2El, this._bodyEl);
    },
    _initEvents: function () {
        mini._BindEvents(function () {
            mini.on(this.el, "mousedown", this.__OnMouseDown, this);
            mini.on(this.el, "click", this.__OnClick, this);
            mini.on(this.el, "mouseover", this.__OnMouseOver, this);
            mini.on(this.el, "mouseout", this.__OnMouseOut, this);
            mini.on(this.el, "dblclick", this.__OnDblClick, this);
        }, this);

    },

    _initTabs: function () {
        this.tabs = [];
    },
    _TabID: 1,

    createTab: function (options) {
        var tab = mini.copyTo({
            _id: this._TabID++,
            name: "",
            title: "",

            newLine: false,

            tooltip: "",

            iconCls: "",
            iconStyle: "",
            headerCls: "",
            headerStyle: "",
            bodyCls: "",
            bodyStyle: "",

            visible: true,
            enabled: true,
            showCloseButton: false,
            active: false,

            url: "",
            loaded: false,
            refreshOnClick: false

        }, options);
        if (options) {
            options = mini.copyTo(options, tab);
            tab = options;
        }
        return tab;
    },
    /////////////////////////////////
    _doLoad: function () {

        var tabs = mini._getResult(this.url, null, null, null, null, this.dataField);

        if (this.dataField && !mini.isArray(tabs)) {
            tabs = mini._getMap(this.dataField, tabs);
        }
        if (!tabs) tabs = [];


        this.setTabs(tabs);
        this.fire("load");
    },

    load: function (url) {
        if (typeof url == "string") {
            this.setUrl(url);
        } else {
            this.setTabs(url);
        }
    },
    //    setShowCloseOnHover: function (value) {
    //        this.showCloseOnHover = value;

    //        if (this.showCloseOnHover) mini.addClass(this.el, "mini-tabs-hoverclose");
    //        else mini.removeClass(this.el, "mini-tabs-hoverclose");

    //    },
    //    getShowCloseOnHover: function (value) {
    //        return this.showCloseOnHover;
    //    },
    setUrl: function (value) {
        this.url = value;

        this._doLoad();
    },
    getUrl: function () {
        return this.url;
    },

    setNameField: function (value) {
        this.nameField = value;
    },
    getNameField: function () {
        return this.nameField;
    },
    setTitleField: function (value) {
        this.titleField = value;
    },
    getTitleField: function () {
        return this.titleField;
    },
    setUrlField: function (value) {
        this.urlField = value;
    },
    getUrlField: function () {
        return this.urlField;
    },

    buttonsAlign: "right",
    setButtonsAlign: function (value) {
        this.buttonsAlign = value;
    },
    getButtonsAlign: function () {
        return this.buttonsAlign;
    },

    setButtons: function (value) {
        this._buttons = mini.byId(value);
        if (this._buttons) {
            var el = mini.byClass('mini-tabs-buttons', this.el);
            if (el) {

                el.appendChild(this._buttons);
                mini.parse(el);
                this.doLayout();
            }
        }
    },
    setTabControls: function (tab, value) {
        var tab = this.getTab(tab);
        if (!tab) return;
        var el = this.getTabBodyEl(tab);
        __mini_setControls(value, el, this);
    },
    setTabs: function (tabs) {
        if (!mini.isArray(tabs)) return;
        this.beginUpdate();

        this.removeAll();

        //转换
        for (var i = 0, l = tabs.length; i < l; i++) {
            var tab = tabs[i];
            tab.title = mini._getMap(this.titleField, tab); //tab[this.titleField];
            tab.url = mini._getMap(this.urlField, tab);     //tab[this.urlField];
            tab.name = mini._getMap(this.nameField, tab);   //tab[this.nameField];
        }

        for (var i = 0, l = tabs.length; i < l; i++) {
            this.addTab(tabs[i]);
        }
        this.setActiveIndex(0);
        this.endUpdate();
    },
    getTabs: function () {
        return this.tabs;
    },
    removeAll: function (butTabs) {
        var activeTab = this.getActiveTab();
        if (mini.isNull(butTabs)) butTabs = [];
        if (!mini.isArray(butTabs)) {
            butTabs = [butTabs];
        }
        for (var i = butTabs.length - 1; i >= 0; i--) {
            var t = this.getTab(butTabs[i]);
            if (!t) butTabs.removeAt(i);
            else butTabs[i] = t;
        }

        var olds = this.tabs;
        for (var i = olds.length - 1; i >= 0; i--) {
            var tab = olds[i];
            if (butTabs.indexOf(tab) == -1) {
                this.removeTab(tab);
            }
        }
        var butTab = butTabs[0];
        if (activeTab != this.getActiveTab()) {
            if (butTab) this.activeTab(butTab);
        }
    },
    addTab: function (tab, index) {
        if (typeof tab == "string") {
            tab = { title: tab };
        }
        tab = this.createTab(tab);
        if (!tab.name) tab.name = "";

        //保持activeIndex序号正确
        var activeTab = this.getActiveTab();

        if (typeof index != "number") index = this.tabs.length;
        this.tabs.insert(index, tab);

        //保持activeIndex序号正确
        if (activeTab) this.activeIndex = this.tabs.indexOf(activeTab);

        //body
        var bodyId = this._createTabBodyId(tab);
        var s = '<div id="' + bodyId + '" class="mini-tabs-body ' + tab.bodyCls + '" style="' + tab.bodyStyle + ';display:none;"></div>';
        mini.append(this._bodyEl, s);

        var el = this.getTabBodyEl(tab);

        //body
        var cs = tab.body;
        delete tab.body;
        if (cs) {

            if (!mini.isArray(cs)) cs = [cs];
            for (var i = 0, l = cs.length; i < l; i++) {
                mini.append(el, cs[i]);
            }
        }

        //bodyParent
        if (tab.bodyParent) {
            var p = tab.bodyParent;

            while (p.firstChild) {
                if (p.firstChild.nodeType == 8) {
                    p.removeChild(p.firstChild);
                } else {
                    el.appendChild(p.firstChild);
                }
            }
        }
        delete tab.bodyParent;

        //controls
        if (tab.controls) {
            this.setTabControls(tab, tab.controls);
            delete tab.controls;
        }

        this.doUpdate();
        return tab;
    },
    removeTab: function (tab) {

        tab = this.getTab(tab);
        if (!tab || this.tabs.indexOf(tab) == -1) return;
        //alert(1);

        var acTab = this.getActiveTab();

        var isActive = tab == acTab;

        var autoActive = this._OnTabDestroy(tab);

        this.tabs.remove(tab);

        //iframe
        this._doRemoveIFrame(tab);

        var el = this.getTabBodyEl(tab);
        if (el) this._bodyEl.removeChild(el);
        //mini.removeNode(el);

        if (autoActive && isActive) {
            for (var i = this.activeIndex; i >= 0; i--) {
                var tab = this.getTab(i);
                if (tab && tab.enabled && tab.visible) {
                    this.activeIndex = i;
                    break;
                }
            }
            this.doUpdate();
            this.setActiveIndex(this.activeIndex);
            this.fire("activechanged");
        } else {
            this.activeIndex = this.tabs.indexOf(acTab);
            this.doUpdate();
        }
        return tab;
    },
    moveTab: function (tab, index) {
        tab = this.getTab(tab);
        if (!tab) return;

        var t = this.tabs[index];
        if (t == tab) return;

        this.tabs.remove(tab);
        var index = this.tabs.indexOf(t);
        if (index == -1) {
            this.tabs.add(tab);
        } else {
            this.tabs.insert(index, tab);
        }
        this.doUpdate();
    },
    updateTab: function (tab, options) {
        tab = this.getTab(tab);
        if (!tab) return;
        mini.copyTo(tab, options);

        if (!tab.visible && this.tabs.indexOf(tab) == this.activeIndex) {
            var activeIndex = -1;
            for (var i = this.activeIndex + 1, l = this.tabs.length; i < l; i++) {
                var item = this.tabs[i];
                if (item.visible) {
                    activeIndex = i;
                    break;
                }
            }
            this.setActiveIndex(activeIndex)
        }

        this.doUpdate();
    },
    ////////////////////////////////////////////
    _getMaskWrapEl: function () {
        return this._bodyEl;
    },
    _doRemoveIFrame: function (tab, removeAll) {

        //return;

        if (tab._iframeEl && tab._iframeEl.parentNode) {
            var iframe = tab._iframeEl;

            iframe.onload = function () { };
            jQuery(iframe).unbind("load");

            iframe.src = "";
            if (mini.isIE) {
                try {
                    iframe.contentWindow.document.write("");
                    iframe.contentWindow.document.close();
                } catch (ex) { }
            }
            if (tab._iframeEl._ondestroy) tab._iframeEl._ondestroy();

            try {
                iframe.parentNode.removeChild(iframe);
                iframe.removeNode(true);
            } catch (ex) { }
        }

        tab._iframeEl = null;
        tab.loadedUrl = null;

        //删除bodyEl内所有元素
        if (removeAll === true) {
            var bodyEl = this.getTabBodyEl(tab);
            if (bodyEl) {
                var cs = mini.getChildNodes(bodyEl, true);
                for (var i = 0, l = cs.length; i < l; i++) {
                    var d = cs[i];
                    if (d && d.parentNode) d.parentNode.removeChild(d);
                    //mini.removeNode(d);
                }
            }
        }
    },
    _deferLoadingTime: 180,
    _cancelLoadTabs: function (tab) {
        //取消所有正在加载中的tab
        var tabs = this.tabs;
        for (var i = 0, l = tabs.length; i < l; i++) {
            var t = tabs[i];
            if (t != tab) {
                if (t._loading && t._iframeEl) {
                    t._loading = false;
                    this._doRemoveIFrame(t, true);
                }
            }
        }
        if (tab && tab == this.getActiveTab() && tab._loading) {
        } else {
            this._loading = false;
            this.unmask();
        }
    },
    _doLoadTab: function (tab) {
        if (!tab || tab != this.getActiveTab()) return;
        var bodyEl = this.getTabBodyEl(tab);
        if (!bodyEl) return;

        this._cancelLoadTabs();

        this._doRemoveIFrame(tab, true);

        this._loading = true;
        tab._loading = true;


        this.unmask();
        if (this.maskOnLoad) this.loading();
        var st = new Date();

        var sf = this;

        //如果页面onload后，给300毫秒初始化时间，防止快速切换导致问题
        sf.isLoading = true;
        //        setTimeout(function () {
        //            sf.isLoading = false;
        //        }, 300);

        var iframe = mini.createIFrame(tab.url,
            function (_iframe, firstLoad) {
                //window.close
                try {
                    tab._iframeEl.contentWindow.Owner = window;
                    tab._iframeEl.contentWindow.CloseOwnerWindow = function (action) {

                        tab.removeAction = action;
                        //tab.ondestroy
                        var ret = true;
                        if (tab.ondestroy) {
                            if (typeof tab.ondestroy == "string") {
                                tab.ondestroy = window[tab.ondestroy];
                            }
                            if (tab.ondestroy) {
                                var e = sf._getTabEvent(tab);
                                e.action = action;
                                ret = tab.ondestroy.call(sf, e);
                            }
                        }

                        if (ret === false) {
                            return false;
                        }

                        setTimeout(function () {
                            sf.removeTab(tab);
                        }, 10);
                    }
                } catch (e) { }

                if (tab._loading != true) return;
                var t = (st - new Date()) + sf._deferLoadingTime;

                tab._loading = false;
                tab.loadedUrl = tab.url;

                if (t < 0) t = 0;
                setTimeout(function () {
                    sf.unmask();
                    sf.doLayout();
                    sf.isLoading = false;
                }, t);

                //firstLoad
                if (firstLoad) {
                    var e = {
                        sender: sf,
                        tab: tab,
                        index: sf.tabs.indexOf(tab),
                        name: tab.name,
                        iframe: tab._iframeEl
                    };
                    if (tab.onload) {
                        if (typeof tab.onload == "string") {
                            tab.onload = window[tab.onload];
                        }
                        if (tab.onload) {
                            tab.onload.call(sf, e);
                        }
                    }
                }
                if (sf.getActiveTab() == tab) {
                    sf.fire("tabload", e);
                }
            },
            this.clearTimeStamp, tab.method, tab.params
        );
        setTimeout(function () {
            if (tab._iframeEl == iframe) {
                bodyEl.appendChild(iframe);
            }
            //iframe.src = tab.url;
        }, 1);
        tab._iframeEl = iframe;
    },
    _getTabEvent: function (tab) {
        var e = {
            sender: this,
            tab: tab,
            index: this.tabs.indexOf(tab),
            name: tab.name,
            iframe: tab._iframeEl,
            autoActive: true
        };
        return e;
    },
    _OnTabDestroy: function (tab) {
        //        var e = {
        //            sender: this,
        //            tab: tab,
        //            index: this.tabs.indexOf(tab),
        //            name: tab.name,
        //            iframe: tab._iframeEl,
        //            autoActive: true
        //        };
        var e = this._getTabEvent(tab);
        this.fire("tabdestroy", e);
        return e.autoActive;
    },
    //loadTab({...});
    loadTab: function (url, tab, onload, ondestroy) {
        if (!url) return;
        tab = this.getTab(tab);
        if (!tab) tab = this.getActiveTab();
        if (!tab) return;

        var el = this.getTabBodyEl(tab);
        if (el) {
            mini.addClass(el, 'mini-tabs-hideOverflow');
        }

        tab.url = url;
        delete tab.loadedUrl;

        if (onload) tab.onload = onload;
        if (ondestroy) tab.ondestroy = ondestroy;

        var me = this;
        clearTimeout(this._loadTabTimer);
        this._loadTabTimer = null;
        this._loadTabTimer = setTimeout(function () {
            me._doLoadTab(tab);
        }, 1);
    },
    reloadTab: function (tab) {
        tab = this.getTab(tab);
        if (!tab) tab = this.getActiveTab();
        if (!tab) return;
        this.loadTab(tab.url, tab);
    },
    ///////////////////////////////////////////
    getTabRows: function () {
        var rows = [];
        var row = [];
        for (var i = 0, l = this.tabs.length; i < l; i++) {
            var tab = this.tabs[i];
            if (i != 0 && tab.newLine) {
                rows.push(row);
                row = [];
            }
            row.push(tab);
        }
        rows.push(row);
        return rows;
    },
    doUpdate: function () {

        if (this._allowUpdate === false) return;

        if (this._buttons && this._buttons.parentNode) {
            this._buttons.parentNode.removeChild(this._buttons);
        }



        mini.removeClass(this.el, "mini-tabs-position-left");
        mini.removeClass(this.el, "mini-tabs-position-top");
        mini.removeClass(this.el, "mini-tabs-position-right");
        mini.removeClass(this.el, "mini-tabs-position-bottom");

        if (this.tabPosition == "bottom") {
            mini.addClass(this.el, "mini-tabs-position-bottom");
            this._doUpdateBottom();
        } else if (this.tabPosition == "right") {
            mini.addClass(this.el, "mini-tabs-position-right");
            this._doUpdateRight();
        } else if (this.tabPosition == "left") {
            mini.addClass(this.el, "mini-tabs-position-left");
            this._doUpdateLeft();
        } else {
            mini.addClass(this.el, "mini-tabs-position-top");
            this._doUpdateTop();
        }

        //header
        var el = this._headerEl, cls = "mini-tabs-header-";
        mini.removeClass(el, cls + "left");
        mini.removeClass(el, cls + "top");
        mini.removeClass(el, cls + "right");
        mini.removeClass(el, cls + "bottom");
        mini.addClass(el, cls + this.tabPosition);

        //body

        var el = this._bodyEl, cls = "mini-tabs-body-";
        mini.removeClass(el, cls + "left");
        mini.removeClass(el, cls + "top");
        mini.removeClass(el, cls + "right");
        mini.removeClass(el, cls + "bottom");
        mini.addClass(el, cls + this.tabPosition);

        //buttons
        if (this._buttons) {
            var el = mini.byClass('mini-tabs-buttons', this.el);
            if (el) {
                el.appendChild(this._buttons);
                mini.parse(el);
            }
        }

        this.doLayout();

        this.setActiveIndex(this.activeIndex, false);
    },
    _handleIFrameOverflow: function () {

        var bodyEl = this.getTabBodyEl(this.activeIndex);
        if (bodyEl) {
            mini.removeClass(bodyEl, 'mini-tabs-hideOverflow');
            var dom = mini.getChildNodes(bodyEl)[0];

            if (dom && dom.tagName && dom.tagName.toUpperCase() == "IFRAME") {
                mini.addClass(bodyEl, 'mini-tabs-hideOverflow');
            }

        }
    },
    doLayout: function () {

        var me = this,
            headerEl = me._headerEl,
            bodyEl = me._bodyEl,
            tabPosition = me.tabPosition;


        if (!this.canLayout()) return;

        headerEl.style.display = this.showHeader ? "" : "none";

        this._handleIFrameOverflow();


        var autoHeight = this.isAutoHeight();

        //headerEl.style.display = "none";

        h = this.getHeight(true);
        w = this.getWidth();
        var elHeight = h;
        var elWidth = w;
        //        headerEl.style.display = "";
        if (this.showBody) {
            bodyEl.style.display = "";
        } else {
            bodyEl.style.display = "none";
        }

        var plainEl = this.el.firstChild;
        if (this.plain) {
            mini.addClass(plainEl, "mini-tabs-plain");
        } else {
            mini.removeClass(plainEl, "mini-tabs-plain");
        }


        if (!autoHeight && this.showBody) {

            var headerHeight = jQuery(headerEl).outerHeight();
            var headerWidth = jQuery(headerEl).outerWidth();
            if (tabPosition == "top" || tabPosition == "bottom") {
                headerHeight = jQuery(headerEl.parentNode).outerHeight();
                //alert(headerHeight);

                headerHeight -= 1;
            }

            if (tabPosition == "left" || tabPosition == "right") {
                w = w - headerWidth;
            } else {
                h = h - headerHeight;
            }

            //alert(jQuery.boxModel);
            if (jQuery.boxModel) {
                var padding = mini.getPaddings(bodyEl);
                var border = mini.getBorders(bodyEl);

                h = h - padding.top - padding.bottom - border.top - border.bottom;
                w = w - padding.left - padding.right - border.left - border.right;
            }
            margin = mini.getMargins(bodyEl);

            h = h - margin.top - margin.bottom;
            w = w - margin.left - margin.right;



            if (h < 0) h = 0;
            if (w < 0) w = 0;

            bodyEl.style.width = w + "px";
            bodyEl.style.height = h + "px";

            //调整header
            if (tabPosition == "left" || tabPosition == "right") {

                //                var tds = headerEl.firstChild.rows[0].cells;
                //                var trs = tds[0].firstChild.rows;

                var tr = headerEl.getElementsByTagName("tr")[0];
                var tds = tr.childNodes;
                var trs = tds[0].getElementsByTagName("tr");

                var first = last = all = 0;
                for (var i = 0, l = trs.length; i < l; i++) {
                    var tr = trs[i];
                    var trH = jQuery(tr).outerHeight();
                    all += trH;
                    if (i == 0) first = trH;
                    if (i == l - 1) last = trH;
                }

                switch (this.tabAlign) {
                    case "center":
                        var halfH = parseInt((elHeight - (all - first - last)) / 2);
                        for (var i = 0, l = tds.length; i < l; i++) {
                            tds[i].firstChild.style.height = elHeight + "px";
                            var tb = tds[i].firstChild;
                            var trs = tb.getElementsByTagName("tr");
                            var tr1 = trs[0], tr2 = trs[trs.length - 1];
                            tr1.style.height = halfH + "px";
                            tr2.style.height = halfH + "px";
                        }
                        break;
                    case "right":
                        for (var i = 0, l = tds.length; i < l; i++) {
                            var tb = tds[i].firstChild;
                            var trs = tb.getElementsByTagName("tr");
                            var tr = trs[0];

                            var size = elHeight - (all - first);
                            if (size >= 0) {
                                tr.style.height = size + "px";
                            }
                        }
                        break;
                    case "fit":
                        for (var i = 0, l = tds.length; i < l; i++) {
                            tds[i].firstChild.style.height = elHeight + "px"; ;
                        }
                        break;
                    default:
                        for (var i = 0, l = tds.length; i < l; i++) {
                            var tb = tds[i].firstChild;
                            var trs = tb.getElementsByTagName("tr");
                            var tr = trs[trs.length - 1];
                            var size = elHeight - (all - last);
                            if (size >= 0) {
                                tr.style.height = size + "px";
                            }
                        }
                        break;
                }
            }
        } else {
            bodyEl.style.width = "auto";
            bodyEl.style.height = "auto";
        }

        //active tab
        var tabBodyEl = this.getTabBodyEl(this.activeIndex);
        if (tabBodyEl) {
            if (!autoHeight && this.showBody) {
                var h = mini.getHeight(bodyEl, true);
                if (jQuery.boxModel) {
                    var padding = mini.getPaddings(tabBodyEl);
                    var border = mini.getBorders(tabBodyEl);
                    h = h - padding.top - padding.bottom - border.top - border.bottom;
                }
                tabBodyEl.style.height = h + "px";
            } else {
                tabBodyEl.style.height = "auto";
            }
        }

        switch (tabPosition) {
            case "bottom":
                var hds = headerEl.childNodes;
                for (var i = 0, l = hds.length; i < l; i++) {
                    var tb = hds[i];
                    mini.removeClass(tb, "mini-tabs-header2");
                    if (l > 1 && i != 0) {

                        mini.addClass(tb, "mini-tabs-header2");
                    }
                }
                break;
            case "left":

                //                var trs = headerEl.firstChild.getElementsByTagName("tr");
                //                var tds = trs[0].getElementsByTagName("td");
                var tds = headerEl.firstChild.rows[0].cells;
                for (var i = 0, l = tds.length; i < l; i++) {
                    var td = tds[i];
                    mini.removeClass(td, "mini-tabs-header2");
                    if (l > 1 && i == 0) {
                        mini.addClass(td, "mini-tabs-header2");
                    }
                }
                break;
            case "right":
                //                var trs = headerEl.firstChild.getElementsByTagName("tr");
                //                var tds = trs[0].getElementsByTagName("td");

                var tds = headerEl.firstChild.rows[0].cells;
                for (var i = 0, l = tds.length; i < l; i++) {
                    var td = tds[i];
                    mini.removeClass(td, "mini-tabs-header2");
                    if (l > 1 && i != 0) {
                        mini.addClass(td, "mini-tabs-header2");
                    }
                }
                break;
            default:
                var hds = headerEl.childNodes;
                for (var i = 0, l = hds.length; i < l; i++) {
                    var tb = hds[i];
                    mini.removeClass(tb, "mini-tabs-header2");
                    if (l > 1 && i == 0) {
                        mini.addClass(tb, "mini-tabs-header2");
                    }
                }
                break;
        }


        //scroll 
        mini.removeClass(this.el, 'mini-tabs-scroll');
        var td = mini.byClass('mini-tabs-lastSpace', this.el);
        var buttons = mini.byClass('mini-tabs-buttons', this.el);
        var ct = headerEl.parentNode;
        ct.style["paddingRight"] = '0px';
        if (this._navEl) this._navEl.style.display = 'none';
        if (this._leftNavEl) this._leftNavEl.style.display = 'none';
        if (buttons) buttons.style.display = 'none';

        var isRightButton = this.buttonsAlign == "right";
        if (!isRightButton) {
            buttons.style.right = 'auto';
            buttons.style.left = '0';
        }

        mini.setWidth(ct, elWidth);

        if ((tabPosition == "top" || tabPosition == "bottom") && (this.tabAlign == "left" || this.tabAlign == "right")) {
            headerEl.style.width = 'auto';
            buttons.style.display = 'block';


            var width = elWidth;

            var tabsWidth = headerEl.firstChild.offsetWidth - td.offsetWidth;
            var buttonsWidth = buttons.firstChild ? buttons.offsetWidth : 0;

            //            this._navEl.style.display = 'none';
            //            this._navEl.style.display = 'none';

            if (tabsWidth + buttonsWidth > width) {
                this._navEl.style.display = 'block';
                var navWidth = this._navEl.offsetWidth;
                //_headerMenuEl
                var headerMenuWidth = 0;

                if (this.showNavMenu) {
                    this._headerMenuEl.style.display = 'inline-block';
                    headerMenuWidth = this._headerMenuEl.offsetWidth;
                    this._headerMenuEl.style.right = buttonsWidth + "px";

                    if (!this._headerMenu) {
                        this._createHeaderMenu();
                    }
                }
                var leftNavWidth = 0;
                if (this.arrowPosition == "side") {
                    this._leftNavEl.style.display = "block";
                    leftNavWidth = this._leftNavEl.offsetWidth;
                    headerEl.style.left = leftNavWidth + "px";
                }
                this._navEl.style.right = (isRightButton ? buttonsWidth : 0) + headerMenuWidth + 'px';
                var w = width - buttonsWidth - navWidth - leftNavWidth - headerMenuWidth;
                mini.setWidth(headerEl, w);
                //alert(1);

                //ct.style["paddingRight"] = (buttonsWidth - navWidth) + "px";

                //mini.addClass(this.el, 'mini-tabs-scroll');
            } else {
                headerEl.style.left = 0 + "px";
            }

            headerEl.style.marginLeft = (isRightButton ? 0 : buttonsWidth) + "px";
        }



        this._scrollToTab(this.activeIndex);
        this._doScrollButton();

        //        if (autoHeight) {
        //        } else {
        //        }

        //alert("layout tab");
        mini.layout(bodyEl);

        var that = this;
        var tab = this.getActiveTab();
        if (tab && tab.repaint && tabBodyEl) {
            var w = tabBodyEl.style.width;
            tabBodyEl.style.width = '0px';
            setTimeout(function () {

                tabBodyEl.style.width = w;
            }, 1);
        }

        this.fire("layout");

    },

    _getTabBy_Id: function (id) {
        for (var i = 0, l = this.tabs.length; i < l; i++) {
            var tab = this.tabs[i];
            if (tab._id == id) return tab;
        }
    },
    _createHeaderMenu: function () {


        this._headerMenu = new mini.Menu();
        this._headerMenu.setIdField("_id");
        this._headerMenu.setTextField("title");
        this._headerMenu.setPopupEl(this._headerMenuEl);
        this._headerMenu.setShowAction("leftclick");
        this._headerMenu.setHideAction("outerclick");
        this._headerMenu.setXAlign("left");
        this._headerMenu.setYAlign("below");
        //jQuery(this._headerMenu.el).addClass("mini-shadow");
        //alert(1);
        mini.addClass(this._headerMenu.el, "mini-menu-open");
        this._headerMenu.on("itemclick", this._doMenuSelectTab, this)

        this._headerMenu.hide();
        this._headerMenu.owner = this._headerMenuEl;

    },
    _setHeaderMenuItems: function () {
        var tabs = this.getTabs();
        var items = [];
        for (var i = 0, l = tabs.length; i < l; i++) {
            var o = tabs[i];
            items.push({
                //id: o[this.nameField],
                id: o._id,
                text: o[this.titleField]
            });
        }

        this._headerMenu.setItems(items);
    },
    _doMenuSelectTab: function (e) {
        var item = e.item;

        var tab = this._getTabBy_Id(item.id);
        this.activeTab(tab);
    },
    setTabAlign: function (value) {
        this.tabAlign = value;
        this.doUpdate();
    },
    setTabPosition: function (value) {
        this.tabPosition = value;
        this.doUpdate();
    },

    allowClickWrap: true,

    setAllowClickWrap: function (value) {
        this.allowClickWrap = value;
    },
    getAllowClickWrap: function () {
        return this.allowClickWrap;
    },

    getTab: function (index) {
        if (typeof index == "object") return index;
        if (typeof index == "number") {
            return this.tabs[index];
        } else {
            for (var i = 0, l = this.tabs.length; i < l; i++) {
                var tab = this.tabs[i];
                if (tab.name == index) return tab;
            }
        }
    },
    getHeaderEl: function () {
        return this._headerEl;
    },
    getBodyEl: function () {
        return this._bodyEl;
    },
    getTabEl: function (index) {
        var tab = this.getTab(index);
        if (!tab) return null;
        var id = this._createTabId(tab);
        var cs = this.el.getElementsByTagName("*");
        for (var i = 0, l = cs.length; i < l; i++) {
            var el = cs[i];
            if (el.id == id) return el;
        }
        return null;
    },
    getTabBodyEl: function (index) {
        var tab = this.getTab(index);
        if (!tab) return null;
        var id = this._createTabBodyId(tab);
        var cs = this._bodyEl.childNodes;
        for (var i = 0, l = cs.length; i < l; i++) {
            var el = cs[i];
            if (el.id == id) return el;
        }
        return null;
    },
    getTabIFrameEl: function (index) {
        var tab = this.getTab(index);
        if (!tab) return null;
        return tab._iframeEl;
    },
    _createTabId: function (tab) {
        return this.uid + "$" + tab._id;
    },
    _createTabBodyId: function (tab) {
        return this.uid + "$body$" + tab._id;
    },
    _doScrollButton: function () {
        if (this.tabPosition == "top" || this.tabPosition == "bottom") {
            mini.removeClass(this._leftButtonEl, "mini-disabled");
            mini.removeClass(this._rightButtonEl, "mini-disabled");
            if (this._headerEl.scrollLeft == 0) {
                mini.addClass(this._leftButtonEl, "mini-disabled");
            }
            var tabEl = this.getTabEl(this.tabs.length - 1);
            if (tabEl) {
                var tabBox = mini.getBox(tabEl);
                var scrollBox = mini.getBox(this._headerEl);
                if (tabBox.right <= scrollBox.right) {
                    mini.addClass(this._rightButtonEl, "mini-disabled");
                }
            }
        }
    },

    setActiveIndex: function (value, load) {

        var tab = this.getTab(value);

        var acTab = this.getTab(this.activeIndex);

        //

        var fire = tab != acTab;

        var el = this.getTabBodyEl(this.activeIndex);
        if (el) el.style.display = "none";
        if (tab) {
            this.activeIndex = this.tabs.indexOf(tab);
        } else {
            this.activeIndex = -1;
        }
        var el = this.getTabBodyEl(this.activeIndex);
        if (el) el.style.display = "";

        var el = this.getTabEl(acTab);
        if (el) mini.removeClass(el, this._tabActiveCls);

        var el = this.getTabEl(tab);
        if (el) mini.addClass(el, this._tabActiveCls);

        if (el && fire) {
            if (this.tabPosition == "bottom") {
                var tb = mini.findParent(el, "mini-tabs-header");
                if (tb) {
                    jQuery(this._headerEl).prepend(tb);
                }
            } else if (this.tabPosition == "left") {
                var td = mini.findParent(el, "mini-tabs-header").parentNode;
                if (td) {
                    td.parentNode.appendChild(td);
                }
            } else if (this.tabPosition == "right") {
                var td = mini.findParent(el, "mini-tabs-header").parentNode;
                if (td) {
                    jQuery(td.parentNode).prepend(td);
                }
            } else {

                //                var tb = mini.findParent(el, "mini-tabs-header");
                //                if (tb) {
                //                    this._headerEl.appendChild(tb);
                //                }

                var tb = mini.findParent(el, "mini-tabs-header");
                if (tb && this.allowClickWrap) {
                    this._headerEl.appendChild(tb);
                }
            }
            var scrollLeft = this._headerEl.scrollLeft;



            var acTab = this.getTab(this.activeIndex);
            var canLayout = acTab ? !acTab._layouted : false;
            var autoHeight = this.isAutoHeight();

            //alert(1);

            if (autoHeight || canLayout) {
                if (acTab) acTab._layouted = true;
                this.doLayout();
                if (acTab) acTab._layouted = false;
            }

            //alert(2);

            var rows = this.getTabRows();
            if (rows.length > 1) {

            } else {
                this._scrollToTab(this.activeIndex);
                //                if (this.tabPosition == "top") {
                //                    this._headerEl.scrollLeft = scrollLeft;
                //                    var tabEl = this.getTabEl(this.activeIndex);
                //                    if (tabEl) {
                //                        var sf = this;
                //                        var tabBox = mini.getBox(tabEl);
                //                        var scrollBox = mini.getBox(sf._headerEl);

                //                        if (tabBox.x < scrollBox.x) {
                //                            sf._headerEl.scrollLeft -= (scrollBox.x - tabBox.x);
                //                        } else if (tabBox.right > scrollBox.right) {
                //                            sf._headerEl.scrollLeft += (tabBox.right - scrollBox.right);
                //                        }
                //                    }
                //                }
                this._doScrollButton();
            }

            for (var i = 0, l = this.tabs.length; i < l; i++) {
                var tabEl = this.getTabEl(this.tabs[i]);
                if (tabEl) {
                    mini.removeClass(tabEl, this._tabHoverCls);
                }
            }


        }
        var me = this;
        if (fire) {
            var e = {
                tab: tab,
                index: this.tabs.indexOf(tab),
                name: tab ? tab.name : ""
            };

            setTimeout(function () {    //延迟激发，这样确保UI都被继续创建后



                me.fire("ActiveChanged", e);

            }, 1);
        }

        //iframe load
        this._cancelLoadTabs(tab);
        if (load !== false) {
            if (tab && tab.url && !tab.loadedUrl) {
                var me = this;

                //setTimeout(function () {
                me.loadTab(tab.url, tab);
                //}, 1);
            }
        } else {
            //if (this.maskOnLoad) this.loading();
        }

        if (tab) {
            if (mini.isChrome) {
                var iframe = this.getTabIFrameEl(tab);
                if (iframe) {
                    //mini.repaint(iframe);

                    iframe.style.position = 'relative';     //fix chrome iframe scroll 
                    iframe.style.left = '1px'

                    iframe.offsetWidth;

                    iframe.style.left = '0px'

                    //alert('repaint');
                }
            }
        }

        if (me.canLayout()) {
            try {
                mini.layoutIFrames(me.el);
            } catch (e) {
            }
        }
    },
    _scrollToTab: function (tab) {
        var scrollLeft = this._headerEl.scrollLeft;

        if (this.tabPosition == "top" || this.tabPosition == "bottom") {
            this._headerEl.scrollLeft = scrollLeft;
            var tabEl = this.getTabEl(tab);
            if (tabEl) {
                var sf = this;
                var tabBox = mini.getBox(tabEl);
                var scrollBox = mini.getBox(sf._headerEl);

                if (tabBox.x < scrollBox.x) {
                    sf._headerEl.scrollLeft -= (scrollBox.x - tabBox.x);
                } else if (tabBox.right > scrollBox.right) {
                    sf._headerEl.scrollLeft += (tabBox.right - scrollBox.right);
                }

                //alert(sf._headerEl.scrollLeft);
            }
        }
    },
    getActiveIndex: function () {
        return this.activeIndex;
    },
    activeTab: function (tab) {
        this.setActiveIndex(tab);
    },
    getActiveTab: function () {
        return this.getTab(this.activeIndex);
    },
    getActiveIndex: function () {
        return this.activeIndex;
    },
    _tryActiveTab: function (tab) {
        tab = this.getTab(tab);
        if (!tab) return;
        var index = this.tabs.indexOf(tab);
        if (this.activeIndex == index) return;
        var e = {
            tab: tab,
            index: index,
            name: tab.name,
            cancel: false
        };
        this.fire("BeforeActiveChanged", e);
        if (e.cancel == false) {
            this.activeTab(tab);
        }
    },

    setShowHeader: function (value) {
        if (this.showHeader != value) {
            this.showHeader = value;
            this.doLayout();
        }
    },
    getShowHeader: function () {
        return this.showHeader;
    },
    setShowBody: function (value) {
        if (this.showBody != value) {
            this.showBody = value;
            this.doLayout();
        }
    },
    getShowBody: function () {
        return this.showBody;
    },
    setBodyStyle: function (value) {
        this.bodyStyle = value;
        mini.setStyle(this._bodyEl, value);
        this.doLayout();
    },
    getBodyStyle: function () {
        return this.bodyStyle;
    },
    setMaskOnLoad: function (value) {
        this.maskOnLoad = value;
    },
    getMaskOnLoad: function () {
        return this.maskOnLoad;
    },
    setPlain: function (value) {
        this.plain = value;
        this.doLayout();
    },
    getPlain: function () {
        return this.plain;
    },

    arrowPosition: "right",         //right, side
    setArrowPosition: function (value) {
        this.arrowPosition = value;
    },
    getArrowPosition: function () {
        return this.arrowPosition;
    },
    showNavMenu: false,
    setShowNavMenu: function (value) {
        this.showNavMenu = value
    },
    getShowNavMenu: function () {
        return this.showNavMenu;
    },


    clearTimeStamp: false,
    setClearTimeStamp: function (value) {
        this.clearTimeStamp = value;
    },
    getClearTimeStamp: function () {
        return this.clearTimeStamp;
    },
    ////////////////////////////////////////
    getTabByEvent: function (e) {
        return this._getTabByEvent(e);
    },
    _getTabByEvent: function (e) {
        var el = mini.findParent(e.target, 'mini-tab');
        if (!el) return null;
        var ids = el.id.split("$");
        if (ids[0] != this.uid) return null;
        var index = parseInt(jQuery(el).attr("index"));
        return this.getTab(index);
    },
    __OnDblClick: function (e) {
        var tab = this._getTabByEvent(e);
        if (!tab) return;
        var e = {
            tab: tab
        }
        this.fire("tabdblclick", e)
    },
    __OnClick: function (e) {
        //if (this.isLoading) return;
        var tab = this._getTabByEvent(e);
        if (!tab) return;

        var close = !!mini.findParent(e.target, "mini-tab-close");
        if (!close && tab == this.getActiveTab() && !tab.refreshOnClick) return;

        if (tab.enabled) {
            var me = this;
            setTimeout(function () {

                if (close) {
                    me._OnCloseButtonClick(tab, e);
                } else {
                    var loadedUrl = tab.loadedUrl;
                    me._tryActiveTab(tab);
                    if (tab.refreshOnClick && tab.url == loadedUrl) {
                        me.reloadTab(tab);
                    }
                }
            }, 10);
        }
    },
    hoverTab: null,
    __OnMouseOver: function (e) {

        var tab = this._getTabByEvent(e);
        if (tab && tab.enabled) {
            var tabEl = this.getTabEl(tab);
            mini.addClass(tabEl, this._tabHoverCls);
            this.hoverTab = tab;
        }
    },
    __OnMouseOut: function (e) {
        if (this.hoverTab) {
            var tabEl = this.getTabEl(this.hoverTab);
            mini.removeClass(tabEl, this._tabHoverCls);
        }
        this.hoverTab = null;

    },
    __OnMouseDown: function (e) {
        clearInterval(this._scrollTimer);
        if (this.tabPosition == "top" || this.tabPosition == "bottom") {
            var sf = this;
            var count = 0, num = 10;
            if (e.target == this._leftButtonEl) {
                this._scrollTimer = setInterval(function () {
                    sf._headerEl.scrollLeft -= num;
                    count++;
                    if (count > 5) num = 18;
                    if (count > 10) num = 25;
                    sf._doScrollButton();
                }, 25);
            } else if (e.target == this._rightButtonEl) {
                this._scrollTimer = setInterval(function () {
                    sf._headerEl.scrollLeft += num;
                    count++;
                    if (count > 5) num = 18;
                    if (count > 10) num = 25;
                    sf._doScrollButton();
                }, 25);
            } else if (e.target == this._headerMenuEl) {
                this._setHeaderMenuItems();
            }
            mini.on(document, "mouseup", this.__OnDocMouseUp, this);
        }
    },
    __OnDocMouseUp: function (e) {
        clearInterval(this._scrollTimer);
        this._scrollTimer = null;
        mini.un(document, "mouseup", this.__OnDocMouseUp, this);
    },

    /////////////////////////////////////
    _doUpdateTop: function () {

        //
        var isTop = this.tabPosition == "top";

        var s = '';
        //if (isTop) {
        s += '<div class="mini-tabs-scrollCt">';
        if (this.arrowPosition == "side") {
            s += '<div class="mini-tabs-leftnav"><a class="mini-tabs-leftButton mini-icon" href="javascript:void(0)" hideFocus onclick="return false"></a></div>';
            s += '<div class="mini-tabs-nav"><a class="mini-tabs-rightButton mini-icon" href="javascript:void(0)" hideFocus onclick="return false"></a></div>';
        } else {
            s += '<div class="mini-tabs-nav"><a class="mini-tabs-leftButton mini-icon" href="javascript:void(0)" hideFocus onclick="return false"></a><a class="mini-tabs-rightButton mini-icon" href="javascript:void(0)" hideFocus onclick="return false"></a></div>';
        }
        if (this.showNavMenu) {
            s += '<a class="mini-tabs-tabmenu mini-icon" href="javascript:void(0)" hideFocus onclick="return false"></a>'
        }

        s += '<div class="mini-tabs-buttons" a=1 style="' + (this.buttonsAlign == "right" ? "" : "right:auto;left:0;") + '"></div>';
        //}
        s += '<div class="mini-tabs-headers">';
        var rows = this.getTabRows();
        for (var j = 0, k = rows.length; j < k; j++) {
            var tabs = rows[j];
            var cls = "";
            s += '<table class="mini-tabs-header" cellspacing="0" cellpadding="0"><tr><td class="mini-tabs-space mini-tabs-firstSpace"><div></div></td>';
            for (var i = 0, l = tabs.length; i < l; i++) {
                var tab = tabs[i];
                var id = this._createTabId(tab);
                if (!tab.visible) continue;
                var index = this.tabs.indexOf(tab);
                var cls = tab.headerCls || "";
                if (tab.enabled == false) {
                    cls += ' mini-disabled';
                }
                s += '<td title="' + tab.tooltip + '" id="' + id + '" index="' + index + '"  class="mini-tab mini-corner-all ' + cls + '" style="' + tab.headerStyle + '">';
                if (tab.iconCls || tab.iconStyle) {
                    s += '<span class="mini-tab-icon mini-iconfont ' + tab.iconCls + '" style="' + tab.iconStyle + '"></span>';
                }
                s += '<span class="mini-tab-text">' + tab.title + '</span>';
                if (tab.showCloseButton) {
                    var ms = "";
                    if (tab.enabled) {
                        ms = 'onmouseover="mini.addClass(this, \'mini-tab-close-hover\')" onmouseout="mini.removeClass(this, \'mini-tab-close-hover\')"'
                    }
                    s += '<span class="mini-tab-close mini-icon" ' + ms + ' ></span>';
                }
                s += '</td>';
                if (i != l - 1) {
                    s += '<td class="mini-tabs-space2"><div></div></td>';
                }

            }
            s += '<td class="mini-tabs-space mini-tabs-lastSpace" ><div></div></td></tr></table>';
        }
        //if (isTop) {
        s += '</div>';
        //}
        s += '</div>';

        this._doClearElement();

        mini.prepend(this._td2El, s);

        var td = this._td2El;

        this._headerEl = td.firstChild.lastChild;

        //alert(this._headerEl.outerHTML);

        //if (isTop) {
        if (this.arrowPosition == "side") {
            this._leftNavEl = td.firstChild.firstChild;
            this._navEl = this._headerEl.parentNode.children[1];
            this._leftButtonEl = this._leftNavEl.firstChild;
            this._rightButtonEl = this._navEl.firstChild;

            if (this.showNavMenu) {
                this._headerMenuEl = this._headerEl.parentNode.children[2];
            }
        } else {
            this._navEl = this._headerEl.parentNode.firstChild;
            this._leftButtonEl = this._navEl.firstChild;
            this._rightButtonEl = this._navEl.childNodes[1];

            if (this.showNavMenu) {
                this._headerMenuEl = this._headerEl.parentNode.children[1];
            }
        }


        //}
        switch (this.tabAlign) {
            case "center":
                var hds = this._headerEl.childNodes;
                for (var i = 0, l = hds.length; i < l; i++) {
                    var tb = hds[i];
                    var tds = tb.getElementsByTagName("td");
                    tds[0].style.width = "50%";
                    tds[tds.length - 1].style.width = "50%";
                }
                break;
            case "right":
                var hds = this._headerEl.childNodes;
                for (var i = 0, l = hds.length; i < l; i++) {
                    var tb = hds[i];
                    var tds = tb.getElementsByTagName("td");
                    tds[0].style.width = "100%";
                }
                break;
            case "fit":
                break;
            default:
                var hds = this._headerEl.childNodes;
                for (var i = 0, l = hds.length; i < l; i++) {
                    var tb = hds[i];
                    var tds = tb.getElementsByTagName("td");
                    tds[tds.length - 1].style.width = "100%";
                }
                break;
        }



    },
    _doUpdateBottom: function () {
        this._doUpdateTop();
        var td = this._td2El;

        mini.append(td, td.firstChild);

        //this._headerEl = td.lastChild;

        this._headerEl = td.lastChild.lastChild;

        //alert(this._headerEl.outerHTML);
    },
    _doUpdateLeft: function () {
        var s = '<table cellspacing="0" cellpadding="0"><tr>';
        var rows = this.getTabRows();
        for (var j = 0, k = rows.length; j < k; j++) {
            var tabs = rows[j];

            var cls = "";
            if (k > 1 && j != k - 1) {
                cls = "mini-tabs-header2";
            }
            s += '<td class="' + cls + '"><table class="mini-tabs-header" cellspacing="0" cellpadding="0">';
            s += '<tr ><td class="mini-tabs-space mini-tabs-firstSpace" ><div></div></td></tr>';

            for (var i = 0, l = tabs.length; i < l; i++) {
                var tab = tabs[i];
                var id = this._createTabId(tab);
                if (!tab.visible) continue;

                var index = this.tabs.indexOf(tab);

                var cls = tab.headerCls || "";
                if (tab.enabled == false) {
                    cls += ' mini-disabled';
                }
                s += '<tr><td id="' + id + '" index="' + index + '"  class="mini-tab ' + cls + '" style="' + tab.headerStyle + '">';
                if (tab.iconCls || tab.iconStyle) {
                    s += '<span class="mini-tab-icon mini-iconfont ' + tab.iconCls + '" style="' + tab.iconStyle + '"></span>';
                }
                s += '<span class="mini-tab-text">' + tab.title + '</span>';
                if (tab.showCloseButton) {
                    var ms = "";
                    if (tab.enabled) {
                        ms = 'onmouseover="mini.addClass(this, \'mini-tab-close-hover\')" onmouseout="mini.removeClass(this, \'mini-tab-close-hover\')"'
                    }
                    s += '<span class="mini-tab-close mini-icon" ' + ms + '></span>';
                }
                s += '</td></tr>';

                if (i != l - 1) {
                    s += '<tr><td class="mini-tabs-space2"><div></div></td></tr>';
                }

            }

            s += '<tr ><td class="mini-tabs-space mini-tabs-lastSpace" ><div></div></td></tr>';
            s += '</table></td>';
        }

        s += '</tr ></table>';

        this._doClearElement();
        mini.addClass(this._td1El, "mini-tabs-header");
        mini.append(this._td1El, s);
        this._headerEl = this._td1El;

    },
    _doUpdateRight: function () {
        this._doUpdateLeft();

        mini.removeClass(this._td1El, "mini-tabs-header");
        mini.removeClass(this._td3El, "mini-tabs-header");
        mini.append(this._td3El, this._td1El.firstChild);
        this._headerEl = this._td3El;

    },
    ///////////////////////////////////
    _OnCloseButtonClick: function (tab, htmlEvent) {
        var e = {
            tab: tab,
            index: this.tabs.indexOf(tab),
            name: tab.name.toLowerCase(),
            htmlEvent: htmlEvent,
            cancel: false
        };

        this.fire("beforecloseclick", e);

        if (e.cancel == true) return;

        try {
            if (tab._iframeEl && tab._iframeEl.contentWindow) {
                var ret = true;
                if (tab._iframeEl.contentWindow.CloseWindow) {
                    ret = tab._iframeEl.contentWindow.CloseWindow("close");
                } else if (tab._iframeEl.contentWindow.CloseOwnerWindow) {
                    ret = tab._iframeEl.contentWindow.CloseOwnerWindow("close");
                }
                if (ret === false) {
                    e.cancel = true;
                }
            }
        } catch (ex) { }

        if (e.cancel == true) return;

        tab.removeAction = "close";
        this.removeTab(tab);
        this.fire("closeclick", e);
    },
    onBeforeCloseClick: function (fn, scope) {
        this.on("beforecloseclick", fn, scope);
    },
    onCloseClick: function (fn, scope) {
        this.on("closeclick", fn, scope);
    },
    onActiveChanged: function (fn, scope) {
        this.on("activechanged", fn, scope);
    },
    ///////////////////////////////////////////////
    getAttrs: function (el) {
        var attrs = mini.Tabs.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["tabAlign", "tabPosition", "bodyStyle", "onactivechanged", "onbeforeactivechanged", "url",
                "ontabload", "ontabdestroy", "onbeforecloseclick", "oncloseclick", "ontabdblclick",
                "titleField", "urlField", "nameField", "loadingMsg", "buttons", "arrowPosition", "buttonsAlign"
             ]
        );
        mini._ParseBool(el, attrs,
            ["allowAnim", "showBody", "showHeader", "maskOnLoad", "plain", "allowClickWrap", "showNavMenu", "clearTimeStamp"
             ]
        );
        mini._ParseInt(el, attrs,
            ["activeIndex"
             ]
        );

        var tabs = [];
        var nodes = mini.getChildNodes(el);
        for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];

            var o = {};
            tabs.push(o);

            o.style = node.style.cssText;
            mini._ParseString(node, o,
                ["name", "title", "url", "cls", "iconCls", "iconStyle", "headerCls", "headerStyle", "bodyCls", "bodyStyle",
                    "onload", "ondestroy", "data-options", "tooltip"
                 ]
            );
            mini._ParseBool(node, o,
                ["newLine", "visible", "enabled", "showCloseButton", "refreshOnClick"
                 ]
            );

            //            var cs = mini.getChildNodes(node, true);
            //            o.body = cs;
            o.bodyParent = node;

            //data-options
            var options = o["data-options"];
            if (options) {

                options = window["ev" + "al"]("(" + options + ")");
                if (options) {
                    //attrs["data-options"] = options;
                    mini.copyTo(o, options);
                }
            }
        }
        attrs.tabs = tabs;

        return attrs;
    }
});
mini.regClass(mini.Tabs, "tabs");
/**
* jQuery MiniUI v3.0
* 
* Web Site : http://www.miniui.com
*
* Commercial License : http://www.miniui.com/license
*
* Copyright(c) 2012 All Rights Reserved. Shanghai PusSoft Co., Ltd (上海普加软件有限公司) [ services@plusoft.com.cn ]. 
* 
*/

mini.Menu = function () {
    this.items = [];
    mini.Menu.superclass.constructor.apply(this, arguments);

    //this.el.style.background = "none";
}
mini.extend(mini.Menu, mini.Control);
mini.copyTo(mini.Menu.prototype, mini.Popup_prototype);
var mini_Popup_prototype_hide = mini.Popup_prototype.hide;

mini.copyTo(mini.Menu.prototype, {
    height: "auto",
    width: "auto",
    minWidth: 140,
    vertical: true,
    allowSelectItem: false,
    _selectedItem: null,
    _itemSelectedCls: "mini-menuitem-selected",

    textField: "text",
    resultAsTree: false,
    idField: "id",
    parentField: "pid",
    itemsField: "children",
    iconClsField: "iconCls",

    showNavArrow: true,

    imgPath: '',

    overflow: false,

    //autoShowArrow: 

    _clearBorder: false,

    showAction: "none", //none, leftclick, rightclick, mouseover
    hideAction: "outerclick", //none, outerclick, mouseout

    menuAlign: "",      //left, right
    setMenuAlign: function (value) {
        this.menuAlign = value;
        //this.doLayout();
    },
    getMenuAlign: function () {
        return this.menuAlign;
    },

    getbyName: function (name) {

        for (var i = 0, l = this.items.length; i < l; i++) {
            var item = this.items[i];
            if (item.name == name) {
                return item;
            }
            if (item.menu) {
                var control = item.menu.getbyName(name);
                if (control) return control;
            }
        }
        return null;
    },

    set: function (obj) {
        if (typeof obj == 'string') {
            return this;
        }

        var url = obj.url;
        delete obj.url;

        if (obj.imgPath) this.setImgPath(obj.imgPath);
        delete obj.imgPath;

        this.ownerItem = obj.ownerItem;
        delete obj.ownerItem;

        mini.Menu.superclass.set.call(this, obj);

        if (url) {
            this.setUrl(url);
        }

        return this;
    },
    ////////////////////////
    uiCls: "mini-menu",
    _create: function () {
        this.el = document.createElement("div");
        this.el.className = "mini-menu";
        this.el.innerHTML = '<div class="mini-menu-border"><a class="mini-menu-topArrow mini-icon" href="#" onclick="return false"></a><div class="mini-menu-inner"></div><a class="mini-menu-bottomArrow mini-icon" href="#" onclick="return false"></a></div>';
        this._borderEl = this.el.firstChild;

        this._topArrowEl = this._borderEl.childNodes[0];
        this._bottomArrowEl = this._borderEl.childNodes[2];

        this._innerEl = this._borderEl.childNodes[1];
        this._innerEl.innerHTML = '<div class="mini-menu-float"></div><div class="mini-menu-toolbar"></div><div style="clear:both;max-height: 1px;"></div>';
        this._contentEl = this._innerEl.firstChild;
        this._toolbarEl = this._innerEl.childNodes[1];


        //this._topArrowEl.style.display = this._bottomArrowEl.style.display = "none";

        if (this.isVertical() == false) mini.addClass(this.el, 'mini-menu-horizontal');

    },
    destroy: function (removeEl) {

        if (this.items) {
            for (var i = 0, l = this.items.length; i < l; i++) {
                this.items[i].destroy();
            }
        }

        if (this._topArrowEl) {
            this._topArrowEl.onmousedown = this._bottomArrowEl.onmousedown = null;
        }

        this._popupEl = this.popupEl = this._borderEl = this._innerEl = this._contentEl = this._toolbarEl = null;
        this._topArrowEl = this._bottomArrowEl = null;
        this.owner = null;
        this.window = null;
        mini.un(document, "mousedown", this.__OnBodyMouseDown, this);
        mini.un(window, "resize", this.__OnWindowResize, this);

        mini.Menu.superclass.destroy.call(this, removeEl);

    },
    _disableContextMenu: false,
    _initEvents: function () {
        mini._BindEvents(function () {
            mini.on(document, "mousedown", this.__OnBodyMouseDown, this);
            mini_onOne(this.el, "mouseover", this.__OnMouseOver, this);
            mini.on(window, "resize", this.__OnWindowResize, this);
            if (this._disableContextMenu) {
                mini_onOne(this.el, "contextmenu", function (e) {
                    e.preventDefault();
                    //e.stopPropagation();
                }, this);
            }

            mini_onOne(this._topArrowEl, "mousedown", this.__OnTopMouseDown, this);
            mini_onOne(this._bottomArrowEl, "mousedown", this.__OnBottomMouseDown, this);

        }, this);

    },
    within: function (e) {
        if (mini.isAncestor(this.el, e.target)) return true;
        for (var i = 0, l = this.items.length; i < l; i++) {
            var item = this.items[i];
            if (item.within(e)) return true;
        }
        return false;
    },
    //    _getClearEl: function () {
    //        if (!this._clearEl) {
    //            this._clearEl = mini.append(this._contentEl, '<div style="clear:both;"></div>');
    //        }
    //        return this._clearEl;
    //    },
    setVertical: function (value) {
        this.vertical = value;
        if (!value) {
            mini.addClass(this.el, 'mini-menu-horizontal');
        } else {
            mini.removeClass(this.el, 'mini-menu-horizontal');
        }
        //mini.append(this._contentEl, this._getClearEl());
    },
    getVertical: function () {
        return this.vertical;
    },
    isVertical: function () {
        return this.vertical;
    },

    show: function () {
        this.setVisible(true);
    },
    hide: function () {
        this.hideItems();
        mini_Popup_prototype_hide.call(this);
    },
    hideItems: function () {
        for (var i = 0, l = this.items.length; i < l; i++) {
            var menuitem = this.items[i];
            menuitem.hideMenu();
        }
    },

    showItemMenu: function (item) {
        for (var i = 0, l = this.items.length; i < l; i++) {
            var menuitem = this.items[i];
            if (menuitem == item) {
                menuitem.showMenu();
            } else {
                menuitem.hideMenu();
            }
        }
    },
    hasShowItemMenu: function () {
        for (var i = 0, l = this.items.length; i < l; i++) {
            var menuitem = this.items[i];
            if (menuitem && menuitem.menu && menuitem.menu.isPopup) {
                return true;
            }
        }
        return false;
    },

    setData: function (value) {
        if (!mini.isArray(value)) value = [];
        this.setItems(value);
    },
    getData: function () {
        return this.getItems();
    },
    setItems: function (items) {
        if (!mini.isArray(items)) items = [];

        this.removeAll();
        var sss = new Date();

        for (var i = 0, l = items.length; i < l; i++) {
            this.addItem(items[i]);
        }
        //alert(new Date() - sss);
    },
    getItems: function () {
        return this.items;
    },
    _itemType: "menuitem",
    addItem: function (item) {
        if (item == "-" || item == "|" || item.type == "separator") {
            //            mini.append(this._contentEl, '<span id="' + item.id + '" name="' + (item.name || "") + '" class="mini-separator"></span>');
            //            return;

            var s = item.id ? ('id="' + item.id + '"') : "";
            mini.append(this._contentEl, '<span ' + s + ' name="' + (item.name || "") + '" class="mini-separator"></span>');
            return;

        }

        if (!mini.isControl(item) && !mini.getClass(item.type)) {
            item.type = this._itemType;
        }

        item.ownerMenu = this;

        item = mini.getAndCreate(item);

        this.items.push(item);
        //if (this.vertical) {
        this._contentEl.appendChild(item.el);
        //}
        item.ownerMenu = this;

        //mini.append(this._contentEl, this._getClearEl());

        this.fire("itemschanged");
    },
    removeItem: function (item) {
        item = mini.get(item);
        if (!item) return;
        this.items.remove(item);
        //if (this.vertical) {
        this._contentEl.removeChild(item.el);
        //}
        this.fire("itemschanged");
    },
    removeItemAt: function (index) {
        var item = this.items[index];
        this.removeItem(item);
    },
    removeAll: function () {
        var items = this.items.clone();
        for (var i = items.length - 1; i >= 0; i--) {
            this.removeItem(items[i]);
        }
        this._contentEl.innerHTML = "";
    },
    getGroupItems: function (name) {
        if (!name) return [];
        var items = [];
        for (var i = 0, l = this.items.length; i < l; i++) {
            var item = this.items[i];
            if (item.groupName == name) items.push(item);
        }
        return items;
    },
    getItem: function (item) {
        if (typeof item == "number") return this.items[item];
        if (typeof item == "string") {
            for (var i = 0, l = this.items.length; i < l; i++) {
                var it = this.items[i];
                if (it.id == item) return it;
            }
            return null;
        }
        if (item && this.items.indexOf(item) != -1) return item;
        return null;
    },

    setAllowSelectItem: function (value) {
        this.allowSelectItem = value;
    },
    getAllowSelectItem: function () {
        return this.allowSelectItem;
    },
    setSelectedItem: function (item) {
        item = this.getItem(item);
        this._OnItemSelect(item);
    },
    getSelectedItem: function (item) {
        return this._selectedItem;
    },

    setShowNavArrow: function (value) {
        this.showNavArrow = value;
    },
    getShowNavArrow: function () {
        return this.showNavArrow;
    },
    setTextField: function (value) {
        this.textField = value;
    },
    getTextField: function () {
        return this.textField;
    },
    setResultAsTree: function (value) {
        this.resultAsTree = value;
    },
    getResultAsTree: function () {
        return this.resultAsTree;
    },
    setIdField: function (value) {
        this.idField = value;
    },
    getIdField: function () {
        return this.idField;
    },
    setParentField: function (value) {
        this.parentField = value;
    },
    getParentField: function () {
        return this.parentField;
    },
    setIconClsField: function (value) {
        this.iconClsField = value;
    },
    getIconClsField: function () {
        return this.iconClsField;
    },

    setOverflow: function (value) {
        this.overflow = value;

        if (value) {
            mini.addClass(this.el, 'mini-menu-overflow');
        } else {
            mini.removeClass(this.el, 'mini-menu-overflow');
        }
    },
    getOverflow: function () {
        return this.overflow;
    },

    ////////////////////////////////////////
    doLayout: function () {

        if (!this.canLayout()) return;

        var innerEl = this._innerEl,
            topEl = this._topArrowEl,
            bottomEl = this._bottomArrowEl;

        if (!this.isAutoHeight()) {
            //var height = this.getHeight(true);
            var height = mini.getHeight(this.el, true);

            mini.setHeight(this._borderEl, height);
            topEl.style.display = bottomEl.style.display = "none";
            //topEl.style.width = "auto";
            this._contentEl.style.height = "auto";

            //alert(this._borderEl.scrollHeight + "," + this._borderEl.clientHeight);
            if (this.showNavArrow && this._borderEl.scrollHeight > this._borderEl.clientHeight + 2) {

                topEl.style.display = bottomEl.style.display = "block";
                height = mini.getHeight(this._borderEl, true);
                var th = mini.getHeight(topEl);
                var bh = mini.getHeight(bottomEl);
                var h = height - th - bh;
                if (h < 0) h = 0;
                mini.setHeight(this._contentEl, h);

                //fix ie7
                var width = mini.getWidth(this._borderEl, true);
                mini.setWidth(topEl, width);
                mini.setWidth(bottomEl, width);

            } else {
                this._contentEl.style.height = "auto";
            }
        } else {
            this._borderEl.style.height = "auto";
            this._contentEl.style.height = "auto";
        }

        if (this.overflow) {
            topEl.style.display = bottomEl.style.display = "none";
            innerEl.style.marginLeft = innerEl.style.marginRight = "0px";

            if (this._getScrollWidth() > this._innerEl.offsetWidth) {
                topEl.style.display = bottomEl.style.display = "block";
                innerEl.style.marginLeft = innerEl.style.marginRight = "15px";
            } else {
                innerEl.scrollLeft = 0;
            }

        }
    },
    _measureSize: function () {
        if (this.height == "auto") {
            this.el.style.height = "auto";
            this._borderEl.style.height = "auto";
            this._contentEl.style.height = "auto";
            this._topArrowEl.style.display = this._bottomArrowEl.style.display = "none";

            var vbox = mini.getViewportBox();
            var box = mini.getBox(this.el);
            this.maxHeight = vbox.height - 2;

            //@ 以下代码删除。
            //            if (this.ownerItem) {
            //                var box = mini.getBox(this.ownerItem.el);
            //                var topH = box.top;
            //                var bottomH = vbox.height - box.bottom;
            //                var maxHeight = topH > bottomH ? topH : bottomH;
            //                maxHeight -= 10;
            //                this.maxHeight = maxHeight;
            //            }

            //@ 2018年代码
            if (this.ownerItem) {
                this.maxHeight = vbox.height - 2;
            }
        }
        //this.maxHeight = 200;
        this.el.style.display = "";
        var box = mini.getBox(this.el);
        //min, max
        if (box.width > this.maxWidth) {
            mini.setWidth(this.el, this.maxWidth);
            box = mini.getBox(this.el);
        }
        if (box.height > this.maxHeight) {
            mini.setHeight(this.el, this.maxHeight);
            box = mini.getBox(this.el);
        }
        if (box.width < this.minWidth) {
            mini.setWidth(this.el, this.minWidth);
            box = mini.getBox(this.el);
        }
        if (box.height < this.minHeight) {
            mini.setHeight(this.el, this.minHeight);
            box = mini.getBox(this.el);
        }
    },
    ////////////////////////////////////////
    url: "",
    _doLoad: function () {

        var items = mini._getResult(this.url, null, null, null, null, this.dataField);
        //var items = mini.getData(this.url);

        if (this.dataField && !mini.isArray(items)) {
            items = mini._getMap(this.dataField, items);
        }
        if (!items) items = [];

        if (this.resultAsTree == false) {
            items = mini.arrayToTree(items, this.itemsField, this.idField, this.parentField)
        }

        var list = mini.treeToArray(items, this.itemsField, this.idField, this.parentField)
        for (var i = 0, l = list.length; i < l; i++) {
            var o = list[i];
            o.text = mini._getMap(this.textField, o);
            o.iconCls = mini._getMap(this.iconClsField, o);
            if (mini.isNull(o.text)) o.text = "";
        }
        var sss = new Date();
        this.setItems(items);
        //alert(new Date() - sss);
        this.fire("load");
    },
    loadList: function (list, idField, parentField) {
        if (!list) return;

        idField = idField || this.idField;
        parentField = parentField || this.parentField;

        for (var i = 0, l = list.length; i < l; i++) {
            var o = list[i];
            o.text = mini._getMap(this.textField, o);
            o.iconCls = mini._getMap(this.iconClsField, o);
            if (mini.isNull(o.text)) o.text = "";
        }

        var tree = mini.arrayToTree(list, this.itemsField, idField, parentField);

        this.load(tree);
    },
    load: function (url) {
        if (typeof url == "string") {
            this.setUrl(url);
        } else {
            this.setItems(url);
        }
    },
    setUrl: function (value) {
        this.url = value;

        this._doLoad();
    },
    getUrl: function () {
        return this.url;
    },
    hideOnClick: true,
    setHideOnClick: function (value) {
        this.hideOnClick = value;
    },
    getHideOnClick: function () {
        return this.hideOnClick;
    },


    hideOnClick: true,
    setImgPath: function (value) {
        this.imgPath = value;
    },
    getImgPath: function () {
        return this.imgPath;
    },
    ////////////////////////////////////////
    _OnItemClick: function (item, htmlEvent) {
        var e = {
            item: item,
            isLeaf: !item.menu,
            htmlEvent: htmlEvent
        };
        if (this.hideOnClick) {
            if (this.isPopup) {
                this.hide();
            } else {
                if (e.isLeaf) {
                    this.hideItems();
                }
            }
        }

        if (this.allowSelectItem && this._selectedItem != item) {
            this.setSelectedItem(item);
        }

        this.fire("itemclick", e);
        if (this.ownerItem) {

        }
    },
    _OnItemSelect: function (item) {
        if (this._selectedItem) {
            this._selectedItem.removeCls(this._itemSelectedCls);
        }
        this._selectedItem = item;

        if (this._selectedItem) {
            this._selectedItem.addCls(this._itemSelectedCls);
        }

        var e = {
            item: this._selectedItem,
            isLeaf: this._selectedItem ? !this._selectedItem.menu : false
        };
        this.fire("itemselect", e);
    },
    onItemClick: function (fn, scope) {
        this.on("itemclick", fn, scope);
    },
    onItemSelect: function (fn, scope) {
        this.on("itemselect", fn, scope);
    },
    /////////////////////////////////////
    __OnTopMouseDown: function (e) {
        this._startScrollMove(-20);
    },
    __OnBottomMouseDown: function (e) {
        this._startScrollMove(20);
    },

    _getScrollWidth: function () {
        var self = this;
        var width = 0;

        var first = jQuery(".mini-menuitem", self.el).first()[0];
        var last = jQuery(".mini-menuitem", self.el).last()[0];
        if (first && last) {
            var box1 = mini.getBox(first);
            var box2 = mini.getBox(last);
            width = box2.right - box1.left;
        }

        return width;
    },

    _getMaxScrollLeft: function () {
        return parseInt(this._getScrollWidth() - this._innerEl.offsetWidth + 6);
    },

    _startScrollMove: function (value) {
        clearInterval(this._scrollTimer);
        var fn = function () {
            clearInterval(me._scrollTimer);
            mini.un(document, "mouseup", fn);
        };
        mini.on(document, "mouseup", fn);

        var scrollWidth = this._getMaxScrollLeft();

        var me = this;
        this._scrollTimer = setInterval(function () {
            if (me.isVertical() == false) {

                var left = me._innerEl.scrollLeft;
                left += value;
                if (left > scrollWidth) left = scrollWidth;
                //me._contentEl.scrollLeft += value;

                me._innerEl.scrollLeft = left;

            } else {
                me._contentEl.scrollTop += value;
            }
            //me._contentEl.scrollTop += value;
            //document.title = new Date().getTime();
        }, 50);
    },
    setToolbar: function (value) {
        __mini_setControls(value, this._toolbarEl, this);
        this._toolbarEl.style.display = "block";
    },
    ////////////////////////////////////
    parseItems: function (nodes) {

        var data = [];
        for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];

            if (node.className == "separator") {
                var o = { type: 'separator', id: node.id, name: node.name };
                data.add(o);
                continue;
            }

            var cnodes = mini.getChildNodes(node);

            var nodeItem = cnodes[0];
            var nodeChild = cnodes[1];

            var o = new mini.MenuItem();

            if (!nodeChild) {
                //o.applyTo(node);
                mini.applyTo.call(o, node);
                data.add(o);
                continue;
            }
            //o.applyTo(nodeItem);
            mini.applyTo.call(o, nodeItem);
            o.render(document.body);


            var menu = new mini.Menu();
            //menu.applyTo(nodeChild);
            mini.applyTo.call(menu, nodeChild);

            o.setMenu(menu);

            menu.render(document.body);
            //jQuery(node).remove();

            data.add(o);
        }
        return data.clone();
    },
    getAttrs: function (el) {

        var attrs = mini.Menu.superclass.getAttrs.call(this, el);
        var jq = jQuery(el);

        mini._ParseString(el, attrs,
            ["popupEl", "popupCls", "showAction", "hideAction", "xAlign", "yAlign", "modalStyle",
            "onbeforeopen", "open", "onbeforeclose", "onclose", "url", "onitemclick", "onitemselect",
            "textField", "idField", "parentField", "toolbar", "imgPath", "iconClsField", "menuAlign"
                ]
        );
        mini._ParseBool(el, attrs,
            ["resultAsTree", "hideOnClick", "showNavArrow", "showShadow", "overflow"
                ]
        );
        //alert(this.el.outerHTML);

        //var toolbar = jQuery("div[property=toolbar]", this.el)[0];
        //alert(toolbar);

        //toobar
        var nodes = mini.getChildNodes(el);
        for (var i = nodes.length - 1; i >= 0; i--) {
            var node = nodes[i];
            var property = jQuery(node).attr("property");
            if (!property) continue;
            property = property.toLowerCase();
            if (property == "toolbar") {
                attrs.toolbar = node;
                node.parentNode.removeChild(node);
            }
        }

        var nodes = mini.getChildNodes(el);

        var items = this.parseItems(nodes);
        if (items.length > 0) {
            attrs.items = items;
        }

        var vertical = jq.attr("vertical");
        if (vertical) {

            attrs.vertical = vertical == "true" ? true : false;
        }
        var allowSelectItem = jq.attr("allowSelectItem");
        if (allowSelectItem) {
            attrs.allowSelectItem = allowSelectItem == "true" ? true : false;
        }

        return attrs;
    }

});
mini.regClass(mini.Menu, 'menu');

/* MenuBar */
mini.MenuBar = function () {
    mini.MenuBar.superclass.constructor.apply(this, arguments);
}
mini.extend(mini.MenuBar, mini.Menu, {
    uiCls: "mini-menubar",
    vertical: false,
    setVertical: function (value) {
        this.vertical = false;
    }
});
mini.regClass(mini.MenuBar, 'menubar');

/* ContextMenu */
mini.ContextMenu = function () {
    mini.ContextMenu.superclass.constructor.apply(this, arguments);
}
mini.extend(mini.ContextMenu, mini.Menu, {
    uiCls: "mini-contextmenu",
    vertical: true,
    visible: false,
    _disableContextMenu: true,
    setVertical: function (value) {
        this.vertical = true;
    }
});
mini.regClass(mini.ContextMenu, 'contextmenu');

/* MenuItem */
mini.MenuItem = function () {
    mini.MenuItem.superclass.constructor.apply(this, arguments);
}
mini.extend(mini.MenuItem, mini.Control, {
    text: "",
    iconCls: "",
    iconStyle: "",
    iconPosition: "left", //left/top

    img: '',

    showIcon: true,
    showAllow: true,

    checked: false,
    checkOnClick: false,
    groupName: "",

    _hoverCls: "mini-menuitem-hover",
    _pressedCls: "mini-menuitem-pressed",
    _checkedCls: "mini-menuitem-checked",

    _clearBorder: false,

    menu: null,

    set: function (kv) {
        if (typeof kv == 'string') {
            return this;
        }

        this.ownerMenu = kv.ownerMenu;
        delete kv.ownerMenu;

        //        var checked = kv.checked;
        //        delete kv.checked;

        //        if (checked) this.setChecked(checked);

        //this.ownerMenu = kv.ownerMenu;
        //delete kv.ownerMenu;

        mini.MenuItem.superclass.set.call(this, kv);


        return this;
    },

    uiCls: "mini-menuitem",
    _create: function () {
        var el = this.el = document.createElement("div");
        this.el.className = "mini-menuitem";

        this.el.innerHTML = '<div class="mini-menuitem-inner"><div class="mini-menuitem-icon mini-icon mini-iconfont"></div><div class="mini-menuitem-text"></div><div class="mini-menuitem-allow mini-icon"></div></div>';
        this._innerEl = this.el.firstChild;
        this._iconEl = this._innerEl.firstChild;
        this._textEl = this._innerEl.childNodes[1];
        this.allowEl = this._innerEl.lastChild;
    },
    _initEvents: function () {
        mini._BindEvents(function () {
            mini_onOne(this.el, "mouseover", this.__OnMouseOver, this);
        }, this);

    },
    _inputEventsInited: false,
    _initInputEvents: function () {
        if (this._inputEventsInited) return;
        this._inputEventsInited = true;

        mini_onOne(this.el, "click", this.__OnClick, this);
        mini_onOne(this.el, "mouseup", this.__OnMouseUp, this);

        mini_onOne(this.el, "mouseout", this.__OnMouseOut, this);


    },
    destroy: function (removeEl) {
        //        if (this.el) {
        //            this.el.onmouseover = null
        //        }

        if (this.menu) this.menu.destroy();
        this.menu = this._innerEl = this._iconEl = this._textEl = this.allowEl = null;
        mini.MenuItem.superclass.destroy.call(this, removeEl);
    },
    within: function (e) {
        if (mini.isAncestor(this.el, e.target)) return true;
        if (this.menu && this.menu.within(e)) return true;
        return false;
    },
    _getIconImg: function () {
        //return this.img; //暂时不实现
        //if (this.img == 'download.gif') debugger;
        return this.img && this.getTopMenu() ? this.getTopMenu().imgPath + this.img : this.img;
    },
    _doUpdateIcon: function () {


        var img = this._getIconImg();
        var hasIcon = !!(this.iconStyle || this.iconCls || this.checkOnClick || img);
        if (this._iconEl) {
            mini.setStyle(this._iconEl, this.iconStyle);
            mini.addClass(this._iconEl, this.iconCls);

            //if(this.checked) debugger
            //img
            if (img && !this.checked) {
                var style = 'background-image:url(' + img + ')';
                mini.setStyle(this._iconEl, style);
            }

            if (this.checked) jQuery(this._iconEl).css({ "background-image": "" });

            this._iconEl.style.display = hasIcon ? "block" : "none";
        }
        if (this.iconPosition == "top") {
            mini.addClass(this.el, "mini-menuitem-icontop");
        } else {
            mini.removeClass(this.el, "mini-menuitem-icontop");
        }
    },
    _hasChildMenu: function () {
        return this.menu && this.menu.items.length > 0;
    },
    doUpdate: function () {
        if (this._textEl) this._textEl.innerHTML = this.text;
        this._doUpdateIcon();


        if (this.checked) {
            mini.addClass(this.el, this._checkedCls);

            //mini.setStyle(this._iconEl, "background-image:''");
            jQuery(this._iconEl).css({ "background-image": "" });
        } else {
            mini.removeClass(this.el, this._checkedCls);
        }
        if (this.allowEl) {

            if (this._hasChildMenu()) {

                this.allowEl.style.display = "block";
            } else {
                this.allowEl.style.display = "none";
            }
        }
    },
    setText: function (value) {
        this.text = value;
        //this.doUpdate();
        if (this._textEl) this._textEl.innerHTML = this.text;
    },
    getText: function () {
        return this.text;
    },
    setIconCls: function (value) {
        mini.removeClass(this._iconEl, this.iconCls);
        this.iconCls = value;
        //this.doUpdate();
        this._doUpdateIcon();
    },
    getIconCls: function () {
        return this.iconCls;
    },
    setImg: function (value) {
        this.img = value;
        //this.doUpdate();
        this._doUpdateIcon();
    },
    getImg: function () {
        return this.img;
    },
    setIconStyle: function (value) {
        this.iconStyle = value;
        //this.doUpdate();
        this._doUpdateIcon();
    },
    getIconStyle: function () {
        return this.iconStyle;
    },
    setIconPosition: function (value) {
        this.iconPosition = value;
        //this.doUpdate();
        this._doUpdateIcon();
    },
    getIconPosition: function () {
        return this.iconPosition;
    },
    setCheckOnClick: function (value) {
        this.checkOnClick = value;
        if (value) {
            mini.addClass(this.el, "mini-menuitem-showcheck");
        } else {
            mini.removeClass(this.el, "mini-menuitem-showcheck");
        }
        this.doUpdate();
    },
    getCheckOnClick: function () {
        return this.checkOnClick;
    },
    setChecked: function (value) {
        if (this.checked != value) {
            this.checked = value;
            this.doUpdate();
            this.fire("checkedchanged");
        }
    },
    getChecked: function () {
        return this.checked;
    },
    setGroupName: function (value) {
        if (this.groupName != value) {
            this.groupName = value;
        }
    },
    getGroupName: function () {
        return this.groupName;
    },
    setChildren: function (value) {
        this.setMenu(value);
    },
    setMenu: function (value) {
        if (mini.isArray(value)) {
            value = {
                type: "menu",
                items: value
            };
        }
        if (this.menu !== value) {
            value.ownerItem = this;
            this.menu = mini.getAndCreate(value);
            this.menu.hide();
            this.menu.ownerItem = this;
            this.doUpdate();
            this.menu.on("itemschanged", this.__OnItemsChanged, this);

        }
    },
    getMenu: function () {
        return this.menu;
    },



    showMenu: function () {
        if (this.menu && this.menu.isDisplay() == false) {
            this.menu.setHideAction("outerclick");

            var options = {
                xAlign: "outright",
                yAlign: "top",
//                outXAlign: "outleft",
//                outYAlign: 'below',
                //xOffset: -1,
                popupCls: "mini-menu-popup"
            };

            options.alwaysView = true;

            if (this.ownerMenu && this.ownerMenu.vertical == false) {

                options.xAlign = this.ownerMenu.menuAlign || "left";
                options.yAlign = "below";
                //options.outXAlign = null;
                options.outXAlign = "right";
            }
            
            this.menu.showAtEl(this.el, options);

            this.menu.addCls("mini-menu-open");

        }
    },
    hideMenu: function () {
        if (this.menu) {
            this.menu.hide();
        }
    },
    hide: function () {
        this.hideMenu();
        this.setVisible(false);
    },

    __OnItemsChanged: function (e) {
        this.doUpdate();
    },
    getTopMenu: function () {
        if (this.ownerMenu) {
            if (this.ownerMenu.ownerItem) return this.ownerMenu.ownerItem.getTopMenu();
            else return this.ownerMenu;
        }
        return null;
    },
    ///////////////////////////
    __OnClick: function (e) {

        if (this.isReadOnly()) return;

        if (this.checkOnClick) {
            if (this.ownerMenu && this.groupName) {
                var groups = this.ownerMenu.getGroupItems(this.groupName);
                if (groups.length > 0) {
                    if (this.checked == false) {
                        for (var i = 0, l = groups.length; i < l; i++) {
                            var item = groups[i];
                            if (item != this) {

                                item.setChecked(false);
                            }
                        }
                        this.setChecked(true);
                    }
                } else {
                    this.setChecked(!this.checked);
                }
            } else {
                this.setChecked(!this.checked);
            }
        }

        this.fire("click");

        var topMenu = this.getTopMenu();
        if (topMenu) {
            topMenu._OnItemClick(this, e);
        }
    },
    __OnMouseUp: function (e) {
        if (this.isReadOnly()) return;

        if (this.ownerMenu) {
            var me = this;
            setTimeout(function () {
                if (me.isDisplay()) {
                    me.ownerMenu.showItemMenu(me);

                }
            }, 1);
        }
    },
    __OnMouseOver: function (e) {
        //if(this.text == "Ajax") debugger
        if (this.isReadOnly()) return;
        this._initInputEvents();
        mini.addClass(this.el, this._hoverCls);

        this.el.title = this.text;

        if (this._textEl.scrollWidth > this._textEl.clientWidth) {
            this.el.title = this.text;
        } else {
            this.el.title = "";
        }

        if (this.ownerMenu) {
            if (this.ownerMenu.isVertical() == true) {
                this.ownerMenu.showItemMenu(this);
            } else if (this.ownerMenu.hasShowItemMenu()) {
                this.ownerMenu.showItemMenu(this);
            }
        }
    },

    __OnMouseOut: function (e) {
        mini.removeClass(this.el, this._hoverCls);
    },
    onClick: function (fn, scope) {
        this.on("click", fn, scope);
    },
    onCheckedChanged: function (fn, scope) {
        this.on("checkedchanged", fn, scope);
    },
    ////////////////////////////////
    getAttrs: function (el) {
        var attrs = mini.MenuItem.superclass.getAttrs.call(this, el);
        var jq = jQuery(el);

        attrs.text = el.innerHTML;
        mini._ParseString(el, attrs,
            ["text", "iconCls", "iconStyle", "iconPosition", "groupName", "onclick", "oncheckedchanged"
             ]
        );
        mini._ParseBool(el, attrs,
            ["checkOnClick", "checked"
             ]
        );

        return attrs;
    }
});
mini.regClass(mini.MenuItem, 'menuitem');


///////////////////////////////////////////
mini.Separator = function () {
    mini.Separator.superclass.constructor.apply(this, arguments);
}
mini.extend(mini.Separator, mini.Control, {
    _clearBorder: false,
    uiCls: "mini-separator",
    _create: function () {
        this.el = document.createElement("span");
        this.el.className = "mini-separator";
    }
});
mini.regClass(mini.Separator, 'separator');


/**
* jQuery MiniUI v3.0
* 
* Web Site : http://www.miniui.com
*
* Commercial License : http://www.miniui.com/license
*
* Copyright(c) 2012 All Rights Reserved. Shanghai PusSoft Co., Ltd (上海普加软件有限公司) [ services@plusoft.com.cn ]. 
* 
*/

mini.Pager = function () {
    mini.Pager.superclass.constructor.apply(this, arguments);
}
mini.extend(mini.Pager, mini.Control, {
    pageIndex: 0,
    pageSize: 10,
    totalCount: 0,
    totalPage: 0,

    showPageIndex: true,
    showPageSize: true,
    showTotalCount: true,

    showPageInfo: true,
    showReloadButton: true,

    _clearBorder: false,

    showButtonText: false,
    showButtonIcon: true,


    sizeText: "",
    firstText: "首页",
    prevText: "上一页",
    nextText: "下一页",
    lastText: "尾页",
    reloadText: "刷新",

    pageInfoText: "每页 {0} 条, 共 {1} 条",
    sizeList: [10, 20, 50, 100],


    set: function (kv) {
        if (typeof kv == 'string') {
            return this;
        }

        var pageIndex = kv.pageIndex;
        delete kv.pageIndex;

        mini.Pager.superclass.set.call(this, kv);

        if (!mini.isNull(pageIndex)) {
            this.setPageIndex(pageIndex);
        }
        return this;
    },

    uiCls: "mini-pager",
    _create: function () {
        this.el = document.createElement("div");
        this.el.className = "mini-pager";


        var s = '<div class="mini-pager-left"><table cellspacing="0" cellpadding="0" border="0"><tr><td></td><td></td></tr></table></div><div class="mini-pager-right"></div>';

        if (isIE6 || isIE7) {
            s += '<div class="mini-clearfix"></div>';
            mini.addClass(this.el, "mini-clearfix");
        }

        this.el.innerHTML = s;

        this._leftEl = this.el.childNodes[0];
        this._rightEl = this.el.childNodes[1];

        //        this._barEl = this._leftEl.firstChild.rows[0].cells[0];
        //        this._barEl2 = this._leftEl.firstChild.rows[0].cells[1];

        var tds = this._leftEl.getElementsByTagName("td");
        this._barEl = tds[0];
        this._barEl2 = tds[1];


        this.sizeEl = mini.append(this._barEl, '<span class="mini-pager-size"></span>');

        this.sizeTextEl = mini.before(this.sizeEl, '<span class="mini-pager-sizetext"></span>');


        this.sizeCombo = new mini.ComboBox();
        //this.sizeCombo.setName("pagesize");       //name还挺难用的。
        if (this.pageSizeWidth) this.sizeCombo.setWidth(this.pageSizeWidth);
        this.sizeCombo.render(this.sizeEl);
        mini.append(this.sizeEl, '<span class="separator"></span>');

        this.firstButton = new mini.Button();
        this.firstButton.addCls("mini-pager-firstbutton");
        this.firstButton.render(this._barEl);

        this.prevButton = new mini.Button();
        this.prevButton.addCls("mini-pager-prevbutton");
        this.prevButton.render(this._barEl);

        this.indexEl = document.createElement("span");
        this.indexEl.className = 'mini-pager-index';
        this.indexEl.innerHTML = '<input type="text" class="mini-pager-num"/><span class="mini-pager-pages">/ 0</span>';
        this._barEl.appendChild(this.indexEl);

        this.numInput = this.indexEl.firstChild;
        this.pagesLabel = this.indexEl.lastChild;

        this.nextButton = new mini.Button();
        this.nextButton.addCls("mini-pager-nextbutton");
        this.nextButton.render(this._barEl);

        this.lastButton = new mini.Button();
        this.lastButton.addCls("mini-pager-lastbutton");
        this.lastButton.render(this._barEl);

        mini.append(this._barEl, '<span class="separator"></span>');

        this.reloadButton = new mini.Button();
        this.reloadButton.render(this._barEl);

        this.firstButton.setPlain(true);
        this.prevButton.setPlain(true);
        this.nextButton.setPlain(true);
        this.lastButton.setPlain(true);
        this.reloadButton.setPlain(true);


        this.buttonsEl = mini.append(this._barEl2, '<div class="mini-page-buttons"></div>');


        this.update();
    },

    destroy: function (removeEl) {
        if (this.pageSelect) {
            mini.clearEvent(this.pageSelect);
            this.pageSelect = null;
        }
        if (this.numInput) {
            mini.clearEvent(this.numInput);
            this.numInput = null;
        }
        this.sizeEl = this.sizeTextEl = this._barEl = this._barEl2 = this._leftEl = this._rightEl = this.indexEl = this.buttonsEl = null;

        mini.Pager.superclass.destroy.call(this, removeEl);
    },

    setButtons: function (value) {
        __mini_setControls(value, this.buttonsEl, this);
    },
    getButtonsEl: function () {
        return this.buttonsEl;
    },

    _initEvents: function () {

        mini.Pager.superclass._initEvents.call(this);

        this.firstButton.on("click", function (e) {
            this._OnPageChanged(0);
        }, this);
        this.prevButton.on("click", function (e) {
            this._OnPageChanged(this.pageIndex - 1);
        }, this);
        this.nextButton.on("click", function (e) {

            this._OnPageChanged(this.pageIndex + 1);
        }, this);
        this.lastButton.on("click", function (e) {
            this._OnPageChanged(this.totalPage);
        }, this);
        this.reloadButton.on("click", function (e) {
            this._OnPageChanged();
        }, this);


        function doPage() {
            if (changing) return;
            changing = true;
            var index = parseInt(this.numInput.value);
            if (isNaN(index)) {
                this.update();
            } else {
                this._OnPageChanged(index - 1);
            }
            setTimeout(function () {
                changing = false;
            }, 100);
        }

        var changing = false;
        mini.on(this.numInput, "change", function (e) {
            doPage.call(this);
        }, this);

        mini.on(this.numInput, "keydown", function (e) {
            if (e.keyCode == 13) {
                doPage.call(this);
                e.stopPropagation();
            }
        }, this);

        //mini.on(this.pageSelect, "change", this.__OnPageSelectChanged, this);
        this.sizeCombo.on("valuechanged", this.__OnPageSelectChanged, this);
    },
    doLayout: function () {
        if (!this.canLayout()) return;
        mini.layout(this._leftEl);
        mini.layout(this._rightEl);
    },
    setPageIndex: function (value) {
        if (isNaN(value)) return;
        this.pageIndex = value;
        this.update();
    },
    getPageIndex: function () {
        return this.pageIndex;
    },
    setPageSize: function (value) {
        if (isNaN(value)) return;
        this.pageSize = value;
        this.update();
    },
    getPageSize: function () {
        return this.pageSize;
    },
    setTotalCount: function (value) {
        value = parseInt(value);
        if (isNaN(value)) return;
        this.totalCount = value;
        this.update();
    },
    getTotalCount: function () {
        return this.totalCount;
    },
    setSizeList: function (value) {
        if (!mini.isArray(value)) return;
        this.sizeList = value;
        this.update();
    },
    getSizeList: function () {
        return this.sizeList;
    },

    pageSizeWidth: null,
    setPageSizeWidth: function (value) {
        value = parseInt(value);
        if (isNaN(value)) return;
        if (this.pageSizeWidth != value) {
            this.pageSizeWidth = value;
            this.sizeCombo.setWidth(value);
        }
    },
    getPageSizeWidth: function () {
        return this.pageSizeWidth;
    },


    setShowPageSize: function (value) {
        this.showPageSize = value;
        this.update();
    },
    getShowPageSize: function () {
        return this.showPageSize;
    },
    setShowPageIndex: function (value) {
        this.showPageIndex = value;
        this.update();
    },
    getShowPageIndex: function () {
        return this.showPageIndex;
    },
    setShowTotalCount: function (value) {
        this.showTotalCount = value;
        this.update();
    },
    getShowTotalCount: function () {
        return this.showTotalCount;
    },
    setShowPageInfo: function (value) {
        this.showPageInfo = value;
        this.update();
    },
    getShowPageInfo: function () {
        return this.showPageInfo;
    },
    setShowReloadButton: function (value) {
        this.showReloadButton = value;
        this.update();
    },
    getShowReloadButton: function () {
        return this.showReloadButton;
    },


    setShowButtonText: function (value) {
        this.showButtonText = value;
        this.update();
    },
    getShowButtonText: function () {
        return this.showButtonText;
    },
    setShowButtonIcon: function (value) {

        this.showButtonIcon = value;
        this.update();
    },
    getShowButtonIcon: function () {
        return this.showButtonIcon;
    },



    getTotalPage: function () {
        return this.totalPage;
    },
    update: function (index, size, total) {

        if (mini.isNumber(index)) this.pageIndex = parseInt(index);
        if (mini.isNumber(size)) this.pageSize = parseInt(size);
        if (mini.isNumber(total)) this.totalCount = parseInt(total);

        this.totalPage = parseInt(this.totalCount / this.pageSize) + 1;
        if ((this.totalPage - 1) * this.pageSize == this.totalCount) {
            this.totalPage -= 1;
        }
        if (this.totalCount == 0) this.totalPage = 0;

        if (this.totalCount >= 0) {
            if (this.pageIndex > this.totalPage - 1) {
                this.pageIndex = this.totalPage - 1;
            }
        }
        if (this.pageIndex <= 0) this.pageIndex = 0;
        if (this.totalPage <= 0) this.totalPage = 0;

        this.firstButton.enable();
        this.prevButton.enable();
        this.nextButton.enable();
        this.lastButton.enable();

        if (this.pageIndex == 0) {
            this.firstButton.disable();
            this.prevButton.disable();
        }
        if (this.pageIndex >= this.totalPage - 1) {
            this.nextButton.disable();
            this.lastButton.disable();
        }

        var pageIndex = this.pageIndex > -1 ? this.pageIndex + 1 : 0;
        if (this.totalCount == 0) pageIndex = 0;

        this.numInput.value = pageIndex;
        this.pagesLabel.innerHTML = "/ " + this.totalPage;

        var sizeList = this.sizeList.clone();
        if (sizeList.indexOf(this.pageSize) == -1) {
            sizeList.push(this.pageSize);
            sizeList = sizeList.sort(function (a, b) {
                return a > b;
            });
        }
        var sizes = [];
        for (var i = 0, l = sizeList.length; i < l; i++) {
            var num = sizeList[i];
            var option = {};
            option.text = num;
            option.id = num;
            sizes.push(option);
        }
        this.sizeCombo.setData(sizes);
        this.sizeCombo.setValue(this.pageSize);


        this.sizeTextEl.innerHTML = this.sizeText;
        this.sizeTextEl.style.display = this.sizeText ? "" : "none";

        var firstText = this.firstText, prevText = this.prevText, nextText = this.nextText, lastText = this.lastText, reloadText = this.reloadText;
        if (this.showButtonText == false) {
            firstText = prevText = nextText = lastText = reloadText = "";
        }
        this.firstButton.setText(firstText);
        this.prevButton.setText(prevText);
        this.nextButton.setText(nextText);
        this.lastButton.setText(lastText);
        this.reloadButton.setText(reloadText);

        var firstText = this.firstText, prevText = this.prevText, nextText = this.nextText, lastText = this.lastText;
        if (this.showButtonText) {
            this.firstButton.setTooltip(firstText);
            this.prevButton.setTooltip(prevText);
            this.nextButton.setTooltip(nextText);
            this.lastButton.setTooltip(lastText);
            this.reloadButton.setTooltip(reloadText);
        }

        this.firstButton.setIconCls(this.showButtonIcon ? "mini-pager-first" : "");
        this.prevButton.setIconCls(this.showButtonIcon ? "mini-pager-prev" : "");
        this.nextButton.setIconCls(this.showButtonIcon ? "mini-pager-next" : "");
        this.lastButton.setIconCls(this.showButtonIcon ? "mini-pager-last" : "");
        this.reloadButton.setIconCls(this.showButtonIcon ? "mini-pager-reload" : "");
        this.reloadButton.setVisible(this.showReloadButton);

        var s = this.reloadButton.el.previousSibling;
        if (s) {
            s.style.display = this.showReloadButton ? "" : "none";
        }


        this._rightEl.innerHTML = String.format(this.pageInfoText, this.pageSize, this.totalCount);

        this.indexEl.style.display = this.showPageIndex ? "" : "none";
        this.sizeEl.style.display = this.showPageSize ? "" : "none";
        this._rightEl.style.display = this.showPageInfo ? "" : "none";


        //@新增：用于处理 totalPage < 0 的场合
        this.firstButton.setVisible(this.totalCount >= 0);
        this.lastButton.setVisible(this.totalCount >= 0);

        if (this.totalCount < 0) {
            this.firstButton.enable();
            this.nextButton.enable();
            if (this.pageIndex == 0) {
                this.firstButton.disable();
            }
            //this.indexEl.style.display = "none";
        }
    },
    __OnPageSelectChanged: function (e) {
        var size = parseInt(this.sizeCombo.getValue());
        this._OnPageChanged(0, size);
    },
    _OnPageChanged: function (index, size) {

        var e = {
            pageIndex: mini.isNumber(index) ? index : this.pageIndex,
            pageSize: mini.isNumber(size) ? size : this.pageSize,
            cancel: false
        };

        if (this.totalCount >= 0) {
            if (e.pageIndex > this.totalPage - 1) {
                e.pageIndex = this.totalPage - 1;
            }
        }
        if (e.pageIndex < 0) e.pageIndex = 0;

        this.fire("beforepagechanged", e);
        if (e.cancel == true) {
            return;
        }

        this.fire("pagechanged", e);
        this.update(e.pageIndex, e.pageSize);

    },
    onPageChanged: function (fn, scope) {
        this.on("pagechanged", fn, scope);
    },
    getAttrs: function (el) {
        var attrs = mini.Pager.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["onpagechanged", "sizeList", "onbeforepagechanged", "buttons", "sizeText"
                ]
        );
        mini._ParseBool(el, attrs,
            ["showPageIndex", "showPageSize", "showTotalCount", "showPageInfo", "showReloadButton", "showButtonText", "showButtonIcon"
                ]
        );
        mini._ParseInt(el, attrs,
            ["pageIndex", "pageSize", "totalCount", "pageSizeWidth"
                ]
        );
        //        var cs = mini.getChildNodes(el, true);
        //        attrs.body = cs;

        if (typeof attrs.sizeList == "string") {
            attrs.sizeList = window["ev" + "al"](attrs.sizeList);
        }
        if (attrs.buttons) {
            attrs.buttons = mini.byId(attrs.buttons);

        }



        return attrs;
    }

});
mini.regClass(mini.Pager, "pager");
/**
* jQuery MiniUI v3.0
* 
* Web Site : http://www.miniui.com
*
* Commercial License : http://www.miniui.com/license
*
* Copyright(c) 2012 All Rights Reserved. Shanghai PusSoft Co., Ltd (上海普加软件有限公司) [ services@plusoft.com.cn ]. 
* 
*/

mini.DataBinding = function () {
    this._bindFields = [];
    this._bindForms = [];
    mini.DataBinding.superclass.constructor.apply(this, arguments);
}
mini.extend(mini.DataBinding, mini.Component, {
    bindField: function (control, source, field, mode, convert) {
        control = mini.get(control);
        source = mini.get(source);
        if (!control || !source || !field) return;
        var bind = { control: control, source: source, field: field, convert: convert, mode: mode };
        this._bindFields.push(bind);

        source.on("currentchanged", this.__OnCurrentChanged, this);
        control.on("valuechanged", this.__OnValueChanged, this);
    },
    bindForm: function (form, source, mode, convert) {
        form = mini.byId(form);
        source = mini.get(source);
        if (!form || !source) return;

        var form = new mini.Form(form);
        var controls = form.getFields();
        for (var i = 0, l = controls.length; i < l; i++) {
            var control = controls[i];
            this.bindField(control, source, control.getName(), mode, convert);
        }
    },
    //////////////////////////////////////////////////
    __OnCurrentChanged: function (e) {
        if (this._doSetting) return;
        this._doSetting = true;

        this._currentRecord = e.record;

        var source = e.sender;
        var record = e.record;

        //field
        for (var i = 0, l = this._bindFields.length; i < l; i++) {
            var bind = this._bindFields[i];
            if (bind.source != source) continue;

            var control = bind.control;
            var field = bind.field;
            if (control.setValue) {
                if (record) {
                    //var value = record[field];
                    var value = mini._getMap(field, record);
                    control.setValue(value);
                } else {
                    control.setValue("");
                }
            }

            if (control.setText && control.textName) {
                if (record) {
                    control.setText(record[control.textName]);
                } else {
                    control.setText("");
                }
            }
        }

        var me = this;
        setTimeout(function () {
            me._doSetting = false;
        }, 10);
    },
    __OnValueChanged: function (e) {

        if (this._doSetting) return;
        this._doSetting = true;

        var control = e.sender;
        var value = control.getValue();


        //field
        for (var i = 0, l = this._bindFields.length; i < l; i++) {
            var bind = this._bindFields[i];

            if (bind.control != control || bind.mode === false) continue;
            var source = bind.source;
            var current = this._currentRecord; //source.getCurrent();
            if (!current) continue;

            var obj = {};
            obj[bind.field] = value;

            if (control.getText && control.textName) {
                obj[control.textName] = control.getText();
            }

            source.updateRow(current, obj);

        }

        var me = this;
        setTimeout(function () {
            me._doSetting = false;
        }, 10);
    }
});
mini.regClass(mini.DataBinding, "databinding");
/**
* jQuery MiniUI v3.0
* 
* Web Site : http://www.miniui.com
*
* Commercial License : http://www.miniui.com/license
*
* Copyright(c) 2012 All Rights Reserved. Shanghai PusSoft Co., Ltd (上海普加软件有限公司) [ services@plusoft.com.cn ]. 
* 
*/

mini.DataSet = function () {
    this._sources = {};
    this._data = {};
    this._links = [];

    this._originals = {};

    mini.DataSet.superclass.constructor.apply(this, arguments);
}
mini.extend(mini.DataSet, mini.Component, {
    add: function (name, listControl) {
        if (!name || !listControl) return;
        this._sources[name] = listControl;

        this._data[name] = [];

        //自动创建新行id
        listControl._set_autoCreateNewID(true);
        listControl._set_originalIdField(listControl.getIdField());
        listControl._set_clearOriginals(false);

        listControl.on("addrow", this.__OnRowChanged, this);
        listControl.on("updaterow", this.__OnRowChanged, this);
        listControl.on("deleterow", this.__OnRowChanged, this);
        listControl.on("removerow", this.__OnRowChanged, this);
        listControl.on("preload", this.__OnDataPreLoad, this);

        listControl.on("selectionchanged", this.__OnDataSelectionChanged, this);
    },
    addLink: function (name, childName, parentField) {
        if (!name || !childName || !parentField) return;
        if (!this._sources[name] || !this._sources[childName]) return;

        var link = {
            parentName: name,
            childName: childName,
            parentField: parentField
        };
        this._links.push(link);
    },
    clearData: function () {
        this._data = {};
        this._originals = {};
        for (var name in this._sources) {
            this._data = [];
        }
    },
    getData: function () {
        return this._data;
    },
    _getNameByListControl: function (listControl) {
        for (var name in this._sources) {
            var c = this._sources[name];
            if (c == listControl) return name;
        }
    },
    _getRecord: function (name, record, idField) {
        var rows = this._data[name];
        if (!rows) return false;
        for (var i = 0, l = rows.length; i < l; i++) {
            var row = rows[i];
            if (row[idField] == record[idField]) return row;
        }
        return null;
    },
    /////////////////////////////////////
    __OnRowChanged: function (e) {
        var type = e.type;
        var record = e.record;
        var name = this._getNameByListControl(e.sender);

        var oldRow = this._getRecord(name, record, e.sender.getIdField());

        var rows = this._data[name];
        if (oldRow) {
            var rows = this._data[name];
            rows.remove(oldRow);
        }
        //

        //原来的
        //        if (type == "removerow" && record._state == "added") {
        //        } else {
        //            rows.push(record);
        //        }
        
        if (type == "removerow" && record._state == "added") {
        } else {

            if (type == "beforeremove" && record._state == "added") {       //@ 2017-7-12 
            } else {
                rows.push(record);
            }
        }

        //        if (record._state == "added") {
        //            if (!oldRow) {
        //                rows.push(record);
        //            }
        //        }
        //        if (record._state == "modified") {
        //            rows.push(record);
        //        }
        //        if (record._state == "removed") {
        //            rows.push(record);
        //        }
        //        if (record._state == "deleted") {
        //            rows.push(record);
        //        }

        //this._originals[name] = e.sender._originals;
        this._originals[name] = e.sender._get_originals();

        //处理_parent
        if (record._state == "added") {
            var parentSource = this._getParentSource(e.sender);
            if (parentSource) {
                var current = parentSource.getSelected();
                if (current) {
                    record._parentId = current[parentSource.getIdField()];
                } else {
                    rows.remove(record);    //如果有父source，必须有current才能加入
                }
            }
        }
    },
    __OnDataPreLoad: function (e) {
        var source = e.sender;
        var name = this._getNameByListControl(source);
        var idField = e.sender.getIdField();

        var rows = this._data[name];
        var maps = {};
        for (var i = 0, l = rows.length; i < l; i++) {
            var row = rows[i];
            maps[row[idField]] = row;
        }

        //修改的记录：对应ID为idField！
        var ors = this._originals[name]

        if (ors) {

            //source._originals = ors;
            source._set_originals(ors);
        }

        //数据更新: modified, delete, 
        var nowData = e.data || [];
        for (var i = 0, l = nowData.length; i < l; i++) {
            var row = nowData[i];
            var old = maps[row[idField]];
            if (old) {
                delete old._uid;
                mini.copyTo(row, old);
            }
        }

        //added
        var parentSource = this._getParentSource(source);

        if (source.getPageIndex && source.getPageIndex() == 0) {
            var adds = [];
            for (var i = 0, l = rows.length; i < l; i++) {
                var row = rows[i];
                if (row._state == "added") {
                    if (parentSource) {
                        var current = parentSource.getSelected();
                        if (current && current[parentSource.getIdField()] == row._parentId) {
                            adds.push(row);
                        }
                    } else {
                        adds.push(row);
                    }
                }
            }
            adds.reverse();
            nowData.insertRange(0, adds);
        }

        //removed
        var removes = [];
        for (var i = nowData.length - 1; i >= 0; i--) {
            var row = nowData[i];
            var old = maps[row[idField]];
            if (old && old._state == "removed") {
                nowData.removeAt(i);
                removes.push(old);
            }
        }


        //如果source有前置source，则需要根据id来对应记录。。。

    },
    /////////////////////////////////////////
    _getParentSource: function (source) {
        var childName = this._getNameByListControl(source);
        for (var i = 0, l = this._links.length; i < l; i++) {
            var link = this._links[i];
            if (link.childName == childName) {
                return this._sources[link.parentName];
            }
        }
    },
    _getLinks: function (source) {
        var name = this._getNameByListControl(source);
        var links = [];
        for (var i = 0, l = this._links.length; i < l; i++) {
            var link = this._links[i];
            if (link.parentName == name) {
                links.push(link);
            }
        }
        return links;
    },
    __OnDataSelectionChanged: function (e) {
        var grid1 = e.sender;
        var record = grid1.getSelected();

        var links = this._getLinks(grid1);
        for (var i = 0, l = links.length; i < l; i++) {
            var link = links[i];
            var grid2 = this._sources[link.childName];

            if (record) {
                var args = {};
                args[link.parentField] = record[grid1.getIdField()];
                grid2.load(args);
            } else {
                grid2.loadData([]);
            }
        }
    }
});
mini.regClass(mini.DataSet, "dataset");
/*

1.getSource()           原始数据。数据结构：数组、树形。
2.getList()             原始数据。数据结构：数组。（树形转为数组）
3.getDataView()         数据视图。客户端排序、过滤后。数据结构：数组。
4.getVisibleRows()      可视数据视图。在DataView基础上，增加了树折叠处理。

*/

if (typeof mini_doload == "undefined") {
    mini_doload = function (e) {
        
        //e.result = mini.decode(e.text);

    }
}

mini.DataSource = function () {
    mini.DataSource.superclass.constructor.apply(this, arguments);
    this._init();
};
mini.extend(mini.DataSource, mini.Component, {
    idField: "id",
    textField: "text",

    loaded: false,

    destroy: function () {
        this.source = [];
        this.dataview = [];
        this.visibleRows = null;
        this.list = null;

        this._ids = {};
        this._removeds = [];
        if (this._clearOriginals) {
            this._originals = {};
        }
        this._errors = {};

        this._selected = null;
        this._selecteds = [];
        this._idSelecteds = {};

        this._filterInfo = null;
        this._sortInfo = null;

        this.root = { _id: -1, _level: -1 };
        this.viewNodes = null;
        this.dataview = null;
        this.visibleRows = null;
        this.list = null;

        mini.DataSource.superclass.destroy.call(this);
    },

    _originalIdField: "_id",
    _clearOriginals: true,
    _autoCreateNewID: false,
    _init: function () {
        this.source = [];
        this.dataview = [];
        this.visibleRows = null;
        this.list = null;

        this._ids = {};
        this._removeds = [];
        if (this._clearOriginals) {
            this._originals = {};
        }
        this._errors = {};

        this._selected = null;
        this._selecteds = [];
        this._idSelecteds = {};

        this.__changeCount = 0;
    },
    getSource: function () {
        return this.source;
    },
    getList: function () {
        return this.source.clone();
        //return this.source;
    },
    getDataView: function () {
        return this.dataview.clone();
        //return this.dataview;
    },
    getVisibleRows: function () {
        //可以根据row的_visible，显示或隐藏
        if (!this.visibleRows) {

            this.visibleRows = this.getDataView().clone();
        }
        return this.visibleRows;
    },
    setData: function (data) {
        this.loadData(data);
    },
    loadData: function (data) {
        if (!mini.isArray(data)) data = [];
        //        var e = {
        //            data: data,
        //            cancel: false
        //        };
        //        this.fire("beforeloaddata", e);
        //        if (e.cancel == true) return false;

        this._init();
        this._doLoadData(data);

        this._dataChanged("loaddata");
        this.fire("loaddata");
        return true;
    },
    _doLoadData: function (data) {
        this.source = data;
        this.dataview = data;

        var ds = this.source, ids = this._ids;
        for (var i = 0, l = ds.length; i < l; i++) {
            var record = ds[i];
            //if (!record._id) record._id = mini.DataSource.RecordId++;
            record._id = mini.DataSource.RecordId++;
            ids[record._id] = record;

            //历史问题
            record._uid = record._id;
        }
    },
    clearData: function () {
        this._init();
        this._dataChanged();
        this.fire("cleardata");
    },
    clear: function () {
        this.clearData();
    },
    //updateRecord(record, field, value);
    //updateRecord(record, keyValues);
    updateRecord: function (record, field, value) {
        if (mini.isNull(record)) return;
        var getMap = mini._getMap, setMap = mini._setMap;

        this.fire("beforeupdate", { record: record });

        if (typeof field == 'string') {
            //var oldValue = record[field];
            var oldValue = getMap(field, record); //record[p];
            if (mini.isEquals(oldValue, value)) {
                //this.endChange(false);
                return false;
            }
            this.beginChange();
            //record[field] = value;
            setMap(field, value, record);
            this._setModified(record, field, oldValue);
            this.endChange();
            //this._dataChanged();
            //this.ValidateCell(record, field);
        } else {
            this.beginChange();
            for (var p in field) {
                var oldValue = getMap(p, record); //record[p];
                var value = field[p];
                if (mini.isEquals(oldValue, value)) continue;
                //record[p] = value;
                setMap(p, value, record);
                this._setModified(record, p, oldValue);
            }
            this.endChange("update");
            //this.ValidateRecord(record);
        }

        this.fire("update", { record: record });
    },
    deleteRecord: function (record) {
        this._setDeleted(record);

        this._dataChanged();
        this.fire("delete", { record: record });
    },
    getby_id: function (id) {
        id = typeof id == "object" ? id._id : id;
        return this._ids[id];
    },
    getbyId: function (id) {
        var t = typeof id;
        if (t == "number") return this.getAt(id);
        if (typeof id == "object") {
            if (this.getby_id(id)) return id;
            id = id[this.idField];
        }
        //!!!
        id = String(id);

        var idMap = this.ids;
        if (!idMap) {
            idMap = this.ids = {};
            var data = this.getList();
            for (var i = 0, l = data.length; i < l; i++) {
                var o = data[i];
                var oid = o[this.idField];
                if (!mini.isNull(oid)) idMap[oid] = o;
            }
        }
        return idMap[id];
    },

    //    getbyId: function (id) {
    //        var t = typeof id;
    //        if (t == "number") return this.getAt(id);
    //        if (typeof id == "object") {
    //            if (this.getby_id(id)) return id;
    //            id = id[this.idField];
    //        }
    //        var data = this.getList();
    //        id = String(id);
    //        for (var i = 0, l = data.length; i < l; i++) {
    //            var o = data[i];
    //            var _id = !mini.isNull(o[this.idField]) ? String(o[this.idField]) : null;
    //            if (_id == id) return o;
    //        }
    //        return null;
    //    },
    getsByIds: function (value) {
        if (mini.isNull(value)) value = "";
        value = String(value);
        var nodes = [];
        var ids = String(value).split(",");
        for (var i = 0, l = ids.length; i < l; i++) {
            var node = this.getbyId(ids[i]);
            if (node) nodes.push(node);
        }
        return nodes;
    },
    getRecord: function (id) {
        if (typeof id == 'object') return id;
        return this.getRow(id);
    },
    getRow: function (index) {
        var t = typeof index;
        if (t == "string") return this.getbyId(index);
        else if (t == "number") return this.getAt(index);
        else if (t == "object") return index;
    },
    delimiter: ",",
    getValueAndText: function (records, delimiter) {
        if (mini.isNull(records)) records = [];
        delimiter = delimiter || this.delimiter;

        if (typeof records == "string" || typeof records == "number") {
            records = this.getsByIds(records);
        } else if (!mini.isArray(records)) {
            records = [records];
        }
        var values = [];
        var texts = [];
        for (var i = 0, l = records.length; i < l; i++) {
            var record = records[i];
            if (record) {
                values.push(this.getItemValue(record));
                texts.push(this.getItemText(record));
            }
        }

        return [values.join(delimiter), texts.join(delimiter)];
    },
    getItemValue: function (item) {
        if (!item) return "";
        var t = mini._getMap(this.idField, item);
        return mini.isNull(t) ? '' : String(t);
    },
    getItemText: function (item) {
        if (!item) return "";
        //var t = item[this.textField];
        var t = mini._getMap(this.textField, item);
        return mini.isNull(t) ? '' : String(t);
    },
    ////////////////////////////
    //getOriginalValue: function(record, field)
    isModified: function (reocrd, field) {
        var or = this._originals[reocrd[this._originalIdField]];
        if (!or) return false;
        if (mini.isNull(field)) return false;
        return or.hasOwnProperty(field);
    },
    hasRecord: function (record) {
        return !!this.getby_id(record);
    },
    findRecords: function (property, value) {
        var ifFn = typeof property == "function";
        var fn = property;
        var scope = value || this;
        var data = this.source;
        var records = [];
        for (var i = 0, l = data.length; i < l; i++) {
            var o = data[i];
            if (ifFn) {
                var ret = fn.call(scope, o);
                if (ret == true) {
                    records[records.length] = o;
                }
                if (ret === 1) break;
            } else {
                if (o[property] == value) {
                    records[records.length] = o;
                }


            }
        }
        return records;
    },
    findRecord: function (property, value) {
        var records = this.findRecords(property, value);
        return records[0];
    },
    each: function (fn, scope) {
        var data = this.getDataView().clone();
        scope = scope || this;
        mini.forEach(data, fn, scope);
    },
    getCount: function () {
        return this.getDataView().length;
        //return this.dataview.length;
    },
    setIdField: function (value) {
        this.idField = value;
    },
    setTextField: function (value) {
        this.textField = value;
    },
    /////////////////////////////////////////////////////
    __changeCount: 0,
    beginChange: function () {
        this.__changeCount++;
    },
    endChange: function (action, raise) {
        this.__changeCount--;
        if (this.__changeCount < 0) this.__changeCount = 0;
        if ((raise !== false && this.__changeCount == 0) || raise == true) {
            this.__changeCount = 0;
            this._dataChanged(action);
        }
    },
    _dataChanged: function (action) {
        this.ids = null;                //!!!
        this.visibleRows = null;
        this.list = null;
        if (this.__changeCount == 0) {
            this.fire("datachanged");
        }
    },
    /////////////////////////////////////////////////////
    //记录状态修改
    _setAdded: function (record) {
        record._id = mini.DataSource.RecordId++;

        //自动创建idField
        if (this._autoCreateNewID && !record[this.idField]) {
            record[this.idField] = UUID();
        }

        //历史问题
        record._uid = record._id;

        //if (!record._id) record._id = mini.DataSource.RecordId++;
        record._state = "added";
        this._ids[record._id] = record;
        delete this._originals[record[this._originalIdField]];
    },
    _setModified: function (record, field, oldValue) {
        if (record._state != "added"
            && record._state != "deleted"
            && record._state != "removed"
        ) {
            record._state = "modified";
            var or = this._getOriginal(record);
            if (!or.hasOwnProperty(field)) {
                or[field] = oldValue;
            }
        }
    },
    _setDeleted: function (record) {
        if (record._state != "added"
            && record._state != "deleted"
            && record._state != "removed"
        ) {
            record._state = "deleted";
        }
    },
    _setRemoved: function (record) {
        delete this._ids[record._id];
        if (record._state != "added" && record._state != "removed") {
            record._state = "removed";
            delete this._originals[record[this._originalIdField]];
            this._removeds.push(record);
        }
    },
    _getOriginal: function (record) {
        var rid = record[this._originalIdField];
        var or = this._originals[rid];
        if (!or) {
            or = this._originals[rid] = {};
        }
        return or;
    },
    /////////////////////////////////////////////////////    
    _selected: null,    //current
    _selecteds: [],
    _idSelecteds: null,
    multiSelect: false,
    isSelected: function (id) {
        if (!id) return false;
        if (typeof id != "string") id = id._id;
        return !!this._idSelecteds[id];
    },
    setSelected: function (record) {         //@@不开放
        record = this.getby_id(record);
        var selected = this.getSelected();
        if (selected != record) {
            this._selected = record;
            if (record) {
                this.select(record);
            } else {
                this.deselect(this.getSelected());
            }
            //this.fire("currentchanged"); //选择、修改、删除，都是currentchanged
            this._OnCurrentChanged(record);
        }
    },
    getSelected: function () {
        if (this.isSelected(this._selected)) return this._selected;
        return this._selecteds[0];
    },
    setCurrent: function (record) {
        this.setSelected(record);
    },
    getCurrent: function () {
        return this.getSelected();
    },
    getSelecteds: function () {
        return this._selecteds.clone();
    },
    select: function (record, fireEvent) {
        if (mini.isNull(record)) return;
        this.selects([record], fireEvent);
    },
    deselect: function (record, fireEvent) {
        if (mini.isNull(record)) return;

        this.deselects([record], fireEvent);
    },
    selectAll: function (fireEvent) {
        this.selects(this.getList(), fireEvent);
    },
    deselectAll: function (fireEvent) {
        this.deselects(this.getSelecteds(), fireEvent);
    },
    _fireSelect: function (record, name) {
        var e = { record: record, cancel: false };
        this.fire(name, e);
        return !e.cancel;
    },
    selects: function (records, fireEvent) {
        if (!mini.isArray(records)) return;
        records = records.clone();

        //single select
        if (this.multiSelect == false) {
            this.deselects(this.getSelecteds());
            if (records.length > 0) records.length = 1;
            this._selecteds = [];
            this._idSelecteds = {};
        }

        var _records = [];
        for (var i = 0, l = records.length; i < l; i++) {
            var record = this.getbyId(records[i]);
            //var record = records[i];
            if (!record) continue;
            if (!this.isSelected(record)) {

                if (fireEvent !== false) {

                    if (!this._fireSelect(record, 'beforeselect')) continue;
                }

                this._selecteds.push(record);
                this._idSelecteds[record._id] = record;
                _records.push(record);
                if (fireEvent !== false) {
                    this.fire("select", { record: record });
                }
            }
        }
        this._OnSelectionChanged(records, true, _records, fireEvent);
    },
    deselects: function (records, fireEvent) {

        if (!mini.isArray(records)) return;
        records = records.clone();
        var _records = [];
        for (var i = records.length - 1; i >= 0; i--) {
            var record = this.getbyId(records[i]);
            if (!record) continue;
            if (this.isSelected(record)) {
                if (fireEvent !== false) {
                    if (!this._fireSelect(record, 'beforedeselect')) continue;
                }

                //this._selecteds.remove(record);   //优化性能
                delete this._idSelecteds[record._id];
                _records.push(record);

                //                if (fireEvent !== false) {
                //                    this.fire("deselect", { record: record });
                //                }
            }
        }
        //_selecteds
        this._selecteds = [];
        var _idSelecteds = this._idSelecteds;
        for (var i in _idSelecteds) {
            var o = _idSelecteds[i];
            if (o._id) this._selecteds.push(o);
        }

        //deselect在这里激发
        for (var i = records.length - 1; i >= 0; i--) {
            var record = this.getbyId(records[i]);
            if (!record) continue;

            if (fireEvent !== false) {
                this.fire("deselect", { record: record });
            }

        }
        this._OnSelectionChanged(records, false, _records, fireEvent);
    },
    _OnSelectionChanged: function (records, select, _records, fireEvent) {
        var e = {
            fireEvent: fireEvent,
            records: records,
            select: select,
            selected: this.getSelected(),
            selecteds: this.getSelecteds(),
            _records: _records
        };
        this.fire("SelectionChanged", e);

        var current = this._current;
        var now = this.getCurrent();
        if (current != now) {
            this._current = now;
            this._OnCurrentChanged(now);
        }
    },
    _OnCurrentChanged: function (record) {
        if (this._currentTimer) {
            clearTimeout(this._currentTimer);
        }
        var me = this;
        this._currentTimer = setTimeout(function () {
            me._currentTimer = null;
            var e = { record: record };
            me.fire("CurrentChanged", e);
        }, 30);
    },
    _checkSelecteds: function () {
        for (var i = this._selecteds.length - 1; i >= 0; i--) {
            var record = this._selecteds[i];
            var r = this.getby_id(record._id);
            if (!r) {
                this._selecteds.removeAt(i);
                delete this._idSelecteds[record._id];
            }
        }
        if (this._selected && this.getby_id(this._selected._id) == null) {
            this._selected = null;
        }
    },
    setMultiSelect: function (value) {
        if (this.multiSelect != value) {
            this.multiSelect = value;
            if (value == false) {
                //...
            }
        }
    },
    getMultiSelect: function () {
        return this.multiSelect;
    },
    selectPrev: function () {
        var record = this.getSelected();
        if (!record) {
            record = this.getAt(0);
        } else {
            var index = this.indexOf(record);
            record = this.getAt(index - 1);
        }
        if (record) {
            this.deselectAll();
            this.select(record);
            this.setCurrent(record);
        }
    },
    selectNext: function () {
        var record = this.getSelected();
        if (!record) {
            record = this.getAt(0);
        } else {
            var index = this.indexOf(record);
            record = this.getAt(index + 1);
        }
        if (record) {
            this.deselectAll();
            this.select(record);
            this.setCurrent(record);
        }
    },
    selectFirst: function () {
        var record = this.getAt(0);
        if (record) {
            this.deselectAll();
            this.select(record);
            this.setCurrent(record);
        }
    },
    selectLast: function () {
        var data = this.getVisibleRows();
        var record = this.getAt(data.length - 1);
        if (record) {
            this.deselectAll();
            this.select(record);
            this.setCurrent(record);
        }
    },
    getSelectedsId: function (delimiter) {
        var nodes = this.getSelecteds();
        var vts = this.getValueAndText(nodes, delimiter);
        return vts[0];
    },
    getSelectedsText: function (delimiter) {
        var nodes = this.getSelecteds();
        var vts = this.getValueAndText(nodes, delimiter);
        return vts[1];
    },
    ////////////////////////////////////////    
    _filterInfo: null,
    _sortInfo: null,
    filter: function (fn, scope) {

        if (typeof fn != "function") return;
        scope = scope || this;

        this._filterInfo = [fn, scope];
        //alert(this.getVisibleRows().length);
        this._doFilter();
        //alert(this.getVisibleRows().length);
        this._doSort();

        this._dataChanged();

        this.fire("filter");
    },
    clearFilter: function () {
        if (!this._filterInfo) return;
        this._filterInfo = null;
        this._doFilter();
        this._doSort();
        this._dataChanged();
        this.fire("filter");
    },
    sort: function (fn, scope, reverse) {
        if (typeof fn != "function") return;
        scope = scope || this;
        this._sortInfo = [fn, scope, reverse];
        this._doSort();
        this._dataChanged();
        this.fire("sort");
    },
    clearSort: function () {
        this._sortInfo = null;

        this.sortField = this.sortOrder = "";

        this._doFilter();
        this._dataChanged();

        if (this.sortMode == "server") {
            var params = this.getLoadParams();
            params.sortField = "";
            params.sortOrder = "";
            //params.pageIndex = this.pageIndex;
            this.load(params);
        } else {

        }

        this.fire("filter");
    },

    _sortMulti: function (fields) {
        //...
    },

    _doClientSortField: function (sortField, sortOrder, dataType) {

        //        if (!dataType) {
        //            var first = this.getAt(0);
        //            if (first) {
        //                var value = first[sortField];

        //                if (mini.isDate(value)) {
        //                    dataType = "date";
        //                } else if (mini.isNumber(value)) {
        //                    dataType = "float";
        //                } else {
        //                    dataType = "string";
        //                }
        //            }
        //        }

        var sortFn = this._getSortFnByField(sortField, dataType);
        if (!sortFn) return;

        //        this.sortField = sortField;
        //        this.sortOrder = sortOrder;

        //debugger
        var reverse = sortOrder == "desc";
        this.sort(sortFn, this, reverse);
    },
    _getSortFnByField: function (field, sortType) {
        //默认逻辑：从小到大

        if (!field) return null;
        var sortFn = null;
        var typeFn = mini.sortTypes[sortType];
        if (!typeFn) typeFn = mini.sortTypes["string"];

        function sortBy(a, b) {

            var a1 = mini._getMap(field, a), b1 = mini._getMap(field, b);

            var nullA = mini.isNull(a1) || a1 === "";
            var nullB = mini.isNull(b1) || b1 === "";
            if (nullA) return 0;
            if (nullB) return 1;

            if (sortType == "chinese") {
                return a1.localeCompare(b1, "zh");
            }

            var v1 = typeFn(a1);
            var v2 = typeFn(b1);
            if (v1 > v2) return 1;      //从小到大：前面比后面小，则互换
            else return 0;
            //            else if (v1 == v2) return 0;
            //            else return 0;
        }

        sortFn = sortBy;
        return sortFn;
    },
    ////////////////////////////////////////////////////////////////////
    // Pager Load
    ////////////////////////////////////////////////////////////////////


    ajaxOptions: null,
    autoLoad: false,
    url: "",

    pageSize: 10,
    pageIndex: 0,
    totalCount: 0,
    totalPage: 0,

    sortField: "",
    sortOrder: "",

    loadParams: null,
    getLoadParams: function () {
        return this.loadParams || {};
    },

    //serverSorting: false,
    sortMode: "server", //server,client,none

    pageIndexField: "pageIndex",
    pageSizeField: "pageSize",
    sortFieldField: "sortField",
    sortOrderField: "sortOrder",
    totalField: "total",
    dataField: "data",

    startField: '',     //start
    limitField: '',     //limit

    errorField: 'error',
    errorMsgField: 'errorMsg',
    stackTraceField: 'stackTrace',

    load: function (params, success, error, complete) {
        if (typeof params == "string") {
            this.setUrl(params);
            return;
        }

        if (this._loadTimer) clearTimeout(this._loadTimer);
        this.loadParams = params || {};
        if (!mini.isNumber(this.loadParams.pageIndex)) this.loadParams.pageIndex = 0;

        if (this._xhr) {
            this._xhr.abort();
        }
        if (this.ajaxAsync && mini_ajaxAsyncInvoke) {  //mini_ajaxAsyncInvoke = false，不会异步调用_doLoadAjax方法。
            var me = this;
            this._loadTimer = setTimeout(function () {
                me._doLoadAjax(me.loadParams, success, error, complete);
                me._loadTimer = null;
            }, 1);
        } else {
            this._doLoadAjax(this.loadParams, success, error, complete);
        }
    },
    reload: function (success, error, complete) {

        this.load(this.loadParams, success, error, complete);
    },
    gotoPage: function (index, size) {
        var params = this.loadParams || {};
        if (mini.isNumber(index)) params.pageIndex = index;
        if (mini.isNumber(size)) params.pageSize = size;
        this.load(params);
    },

    sortBy: function (sortField, sortOrder) {
        this.sortField = sortField;
        this.sortOrder = sortOrder == "asc" ? "asc" : "desc";
        if (this.sortMode == "server") {
            var params = this.getLoadParams();
            params.sortField = sortField;
            params.sortOrder = sortOrder;
            params.pageIndex = this.pageIndex;
            this.load(params);
        } else {
            //alert("client sort");
            //this._doClientSort(sortField, sortOrder);
        }
    },

    setSortField: function (value) {
        this.sortField = value;
        if (this.sortMode == "server") {
            var params = this.getLoadParams();
            params.sortField = value;
        }
    },
    setSortOrder: function (value) {
        this.sortOrder = value;
        if (this.sortMode == "server") {
            var params = this.getLoadParams();
            params.sortOrder = value;
        }
    },

    checkSelectOnLoad: true,    //重新加载，是否保持原选中记录状态
    selectOnLoad: false,

    ajaxData: null,
    ajaxAsync: true,        //表格异步，tree、combobox同步
    ajaxType: '',           //get|post    
    //    ajaxDataType: "text",
    //    ajaxContentType: "application/x-www-form-urlencoded; charset=UTF-8",
    _doLoadAjax: function (params, success, errorFn, complete, _successHandler) {

        params = params || {};
        if (mini.isNull(params.pageIndex)) params.pageIndex = this.pageIndex;
        if (mini.isNull(params.pageSize)) params.pageSize = this.pageSize;

        if (params.sortField) this.sortField = params.sortField;
        if (params.sortOrder) this.sortOrder = params.sortOrder;
        params.sortField = this.sortField;
        params.sortOrder = this.sortOrder;

        this.loadParams = params;

        var url = this._evalUrl();
        var type = this._evalType(url);

        var obj = mini._evalAjaxData(this.ajaxData, this);
        //mini.copyTo(params, obj);
        jQuery.extend(true, params, obj);

        var e = {               //options
            url: url,
            async: this.ajaxAsync,
            type: type,
            data: params,
            params: params,
            cache: false,
            cancel: false
        };

        //ajaxOptions：async, type, dateType, contentType等都能在beforeload前修改。                

        //mini.copyTo(e, this.ajaxOptions);
        jQuery.extend(true, e, this.ajaxOptions);

        this._OnBeforeLoad(e);
        if (e.cancel == true) {
            params.pageIndex = this.getPageIndex();
            params.pageSize = this.getPageSize();
            return;
        }

        //历史遗留问题：兼容e.params参数
        if (e.data != e.params && e.params != params) {
            e.data = e.params;
        }

        if (e.url != url && e.type == type) {
            e.type = this._evalType(e.url);
        }

        //处理自定义field
        var o = {};
        o[this.pageIndexField] = params.pageIndex;
        o[this.pageSizeField] = params.pageSize;
        if (params.sortField) o[this.sortFieldField] = params.sortField;
        if (params.sortOrder) o[this.sortOrderField] = params.sortOrder;

        if (this.startField && this.limitField) {
            o[this.startField] = params.pageIndex * params.pageSize;
            o[this.limitField] = params.pageSize;
        }

        //        delete params.pageIndex;
        //        delete params.pageSize;
        //        delete params.sortField;
        //        delete params.sortOrder;
        //mini.copyTo(params, o);
        //mini.copyTo(e.data, o);
        jQuery.extend(true, params, o);
        jQuery.extend(true, e.data, o);


        if (this.sortMode == 'client') {
            params[this.sortFieldField] = "";
            params[this.sortOrderField] = "";
        }

        //保存记录值
        //        var selected = this.getSelected();
        //        this._selectedValue = selected ? selected[this.idField] : null;
        //        if (mini.isNumber(this._selectedValue)) this._selectedValue = String(this._selectedValue);

        //保存“当前选中”
        var selected = this.getSelected();
        this._currentSelectValue = selected ? selected[this.idField] : null; ;
        if (mini.isNumber(this._currentSelectValue)) this._currentSelectValue = String(this._currentSelectValue);

        //保存“所有选中”
        var selecteds = this.getSelecteds();
        var _selectsArr = [];
        for (var i = 0, l = selecteds.length; i < l; i++) {
            var id = selecteds[i][this.idField];
            if (!mini.isNull(id)) id = String(id);
            _selectsArr.push(id)
        }
        this._selectedValue = _selectsArr.length == 0 ? null : _selectsArr;
        if (mini.isNumber(this._selectedValue)) this._selectedValue = String(this._selectedValue);


        var me = this;
        me._resultObject = null;
        /*
        e.textStatus
        success     交互成功
        error       网络交互失败：404,500
        timeout     交互超时
        abort       交互终止
        servererror 网络交互成功，返回json，但是业务逻辑错误
        e.errorCode     服务端错误码
        e.errorMsg      错误描述信息
        e.stackTrace    错误定位信息
        */

        var async = e.async;
        mini.copyTo(e, {
            success: function (text, textStatus, xhr) {

                //return;
                if (!text || text == "null") {
                    text = '{ total: 0, data: [] }';
                }

                delete e.params;
                var obj = { text: text, result: null, sender: me, options: e, xhr: xhr };
                var result = null;
                try {
                    mini_doload(obj);
                    result = obj.result;
                    if (!result) {
                        result = mini.decode(text);
                    }
                } catch (ex) {
                    if (mini_debugger == true) {
                        alert(url + "\n json is error.");
                    }
                }

                if (result && !mini.isArray(result)) {
                    result.total = parseInt(mini._getMap(me.totalField, result)); //result[me.totalField];
                    result.data = mini._getMap(me.dataField, result); //result[me.dataField];
                } else {
                    if (result == null) {
                        result = {};
                        result.data = [];
                        result.total = 0;
                    } else if (mini.isArray(result)) {
                        var r = {};
                        r.data = result;
                        r.total = result.length;
                        result = r;
                    }
                }
                if (!result.data) result.data = [];
                if (!result.total) result.total = 0;
                me._resultObject = result;

                if (!mini.isArray(result.data)) {
                    result.data = [result.data];
                }

                var ex = {
                    xhr: xhr,
                    text: text,
                    textStatus: textStatus,
                    result: result,
                    total: result.total,
                    data: result.data.clone(),

                    pageIndex: params[me.pageIndexField],
                    pageSize: params[me.pageSizeField]
                };


                var error = mini._getMap(me.errorField, result);
                var errorMsg = mini._getMap(me.errorMsgField, result);
                var stackTrace = mini._getMap(me.stackTraceField, result);

                if (mini.isNumber(error) && error != 0 || error === false) {
                    //server error
                    ex.textStatus = "servererror";
                    ex.errorCode = error;
                    ex.stackTrace = stackTrace || "";
                    ex.errorMsg = errorMsg || "";
                    if (mini_debugger == true) {
                        alert(url + "\n" + ex.textStatus + "\n" + ex.errorMsg + "\n" + ex.stackTrace);
                    }
                    me.fire("loaderror", ex);
                    if (errorFn) errorFn.call(me, ex);
                } else {

                    //if (ex.total >= 0) {
                    //当页码大于0，数据为空
                    if (ex.pageIndex > 0 && ex.data.length == 0) {
                        //me.reload();
                        me.gotoPage(ex.pageIndex - 1);
                        return;
                    }
                    //}

                    if (_successHandler) {
                        _successHandler(ex);
                    } else {



                        //pager
                        me.pageIndex = ex.pageIndex;
                        me.pageSize = ex.pageSize;
                        me.setTotalCount(ex.total);

                        //success
                        me._OnPreLoad(ex);

                        me.loaded = true;

                        var sss = new Date();
                        //data
                        me.setData(ex.data);
                        //alert(new Date() - sss);
                        //                        //checkSelectOnLoad
                        //                        if (me._selectedValue && me.checkSelectOnLoad) {
                        //                            var o = me.getbyId(me._selectedValue);
                        //                            if (o) {
                        //                                me.select(o);
                        //                            }
                        //                        }
                        //checkSelectOnLoad
                        //将之前选中的记录，在加载后，判断并重新选中，达到保持选中的效果
                        if (me._selectedValue && me.checkSelectOnLoad) {
                            var selects = [];
                            var _selects = me._selectedValue;
                            if (_selects.length > 0) {
                                for (var i = 0, l = _selects.length; i < l; i++) {

                                    var o = me.getbyId(_selects[i]);
                                    if (o) {
                                        selects.push(o);
                                    }
                                }

                                // var o = me.getbyId(me._selectedValue);
                                //                            if (o) {
                                //                                me.select(o);
                                //
                                //                            }
                                if (selects.length) me.selects(selects);

                                me._selected = me.getbyId(me._currentSelectValue);

                            }
                        }



                        //selectOnLoad                    
                        if (me.getSelected() == null && me.selectOnLoad && me.getDataView().length > 0) {
                            me.select(0);
                        }
                        me.fire("load", ex);

                        if (success) {
                            if (async) {
                                setTimeout(function () {
                                    success.call(me, ex);
                                }, 20);
                            } else {
                                success.call(me, ex);
                            }
                        }



                    }
                }
            },
            error: function (xhr, textStatus, errorThrown) {
                if (textStatus == "abort") return;

                var ex = {
                    xhr: xhr,
                    text: xhr.responseText,
                    textStatus: textStatus
                };
                ex.errorMsg = xhr.responseText;
                ex.errorCode = xhr.status;


                if (mini_debugger == true) {
                    alert(url + "\n" + ex.errorCode + "\n" + ex.errorMsg);
                }

                me.fire("loaderror", ex);
                if (errorFn) errorFn.call(me, ex);
            },
            complete: function (xhr, textStatus) {
                var ex = {
                    xhr: xhr,
                    text: xhr.responseText,
                    textStatus: textStatus
                };
                me.fire("loadcomplete", ex);
                if (complete) complete.call(me, ex);
                me._xhr = null;
            }
        });
        if (this._xhr) {
            //this._xhr.abort();
        }
        this._xhr = mini.ajax(e);
    },
    _OnBeforeLoad: function (e) {
        this.fire("beforeload", e);
    },
    _OnPreLoad: function (e) {
        this.fire("preload", e); //加载前夕，处理更复杂数据
    },
    _evalUrl: function () {
        var url = this.url;
        if (typeof url == "function") {
            url = url();
        } else {
            try {
                url = window["ev" + "al"](url);
            } catch (ex) {
                url = this.url;
            }
            if (!url) {
                url = this.url;
            }
        }
        return url;
    },
    _evalType: function (url) {
        var type = this.ajaxType;
        if (!type) {
            type = 'post';
            if (url) {
                if (url.indexOf(".txt") != -1 || url.indexOf(".json") != -1) {
                    type = "get";
                }
            } else {
                type = "get";
            }
        }
        return type;
    },
    setSortMode: function (value) {
        this.sortMode = value;
    },
    getSortMode: function () {
        return this.sortMode;
    },
    setAjaxOptions: function (value) {
        this.ajaxOptions = value;
    },
    getAjaxOptions: function () {
        return this.ajaxOptions;
    },
    setAutoLoad: function (value) {
        this.autoLoad = value;
    },
    getAutoLoad: function () {
        return this.autoLoad;
    },
    setUrl: function (value) {
        this.url = value;
        if (this.autoLoad) {
            this.load();
        }
    },
    getUrl: function () {
        return this.url;
    },
    setPageIndex: function (value) {
        this.pageIndex = value;

        var params = this.loadParams || {};
        if (mini.isNumber(value)) params.pageIndex = value;

        this.fire("pageinfochanged");
    },
    getPageIndex: function () {
        return this.pageIndex;
    },
    setPageSize: function (value) {
        this.pageSize = value;

        var params = this.loadParams || {};
        if (mini.isNumber(value)) params.pageSize = value;

        this.fire("pageinfochanged");
    },
    getPageSize: function () {
        return this.pageSize;
    },
    setTotalCount: function (value) {
        this.totalCount = parseInt(value);
        this.fire("pageinfochanged");
    },
    getTotalCount: function () {
        return this.totalCount;
    },
    getTotalPage: function () {
        return this.totalPage;
    },
    setCheckSelectOnLoad: function (value) {
        this.checkSelectOnLoad = value;
    },
    getCheckSelectOnLoad: function () {
        return this.checkSelectOnLoad;
    },
    setSelectOnLoad: function (value) {
        this.selectOnLoad = value;
    },
    getSelectOnLoad: function () {
        return this.selectOnLoad;
    }

});
mini.DataSource.RecordId = 1;






/* DataTable
-----------------------------------------------------------------------------*/

mini.DataTable = function () {
    mini.DataTable.superclass.constructor.apply(this, arguments);
};
mini.extend(mini.DataTable, mini.DataSource, {
    _init: function () {
        mini.DataTable.superclass._init.call(this);
        this._filterInfo = null;
        this._sortInfo = null;
    },
    add: function (record) {
        return this.insert(this.source.length, record);
    },
    addRange: function (records) {
        this.insertRange(this.source.length, records);
    },
    insert: function (index, record) {
        if (!record) return null;

        if (!mini.isNumber(index)) {
            var insertRow = this.getRecord(index);
            if (insertRow) {
                index = this.indexOf(insertRow);
            } else {
                //index = this.getDataView().length;
                index = this.dataview.length;
            }
            //return null;
        }

        var e = {
            index: index,
            record: record
        };

        this.fire("beforeadd", e);  //if(this._events.beforeadd) 

        var target = this.dataview[index];
        if (target) {
            this.dataview.insert(index, record);
        } else {
            this.dataview.add(record);
        }

        if (this.dataview != this.source) {
            if (target) {
                var sourceIndex = this.source.indexOf(target);
                this.source.insert(sourceIndex, record);
            } else {
                this.source.add(record);
            }
        }

        this._setAdded(record);

        this._dataChanged();


        this.fire("add", e);
    },
    insertRange: function (index, records) {
        if (!mini.isArray(records)) return;

        //debugger
        if (!mini.isNumber(index)) index = this.dataview.length;

        this.beginChange();
        records = records.clone();
        for (var i = 0, l = records.length; i < l; i++) {
            var record = records[i];
            this.insert(index + i, record);
        }
        this.endChange();
    },
    remove: function (record, autoSelect) {
        var index = this.indexOf(record);
        return this.removeAt(index, autoSelect);
    },
    removeAt: function (index, autoSelect) {
        var record = this.getAt(index);
        if (!record) return null;

        var e = {
            record: record
        };
        this.fire("beforeremove", e);

        var isSelected = this.isSelected(record);

        //this.source.removeAt(index);
        this.source.remove(record);
        if (this.dataview !== this.source) {
            this.dataview.removeAt(index);
        }

        this._setRemoved(record);

        this._checkSelecteds();

        this._dataChanged();

        this.fire("remove", e);

        if (isSelected && autoSelect) {
            var newSelected = this.getAt(index);
            if (!newSelected) newSelected = this.getAt(index - 1);
            this.deselectAll();
            this.select(newSelected);
        }
    },

    removeRange: function (records, autoSelect) {
        if (!mini.isArray(records)) return;
        this.beginChange();
        records = records.clone();

        //debugger
        for (var i = 0, l = records.length; i < l; i++) {
            var o = records[i];
            this.remove(o, autoSelect);
            //this.remove(o, false);
        }


        this._dataChanged();

        this.endChange();
    },
    move: function (record, newIndex) {
        if (!record || !mini.isNumber(newIndex)) return;
        if (newIndex < 0) return;
        if (mini.isArray(record)) {
            this.beginChange();

            var rs = record, targetRecord = this.getAt(newIndex);
            var sf = this;
            mini.sort(rs, function (a, b) {
                return sf.indexOf(a) > sf.indexOf(b);
            }, this);
            for (var i = 0, l = rs.length; i < l; i++) {
                var r = rs[i];
                var index = this.indexOf(targetRecord);
                this.move(r, index);
            }
            this.endChange();
            return;
        }

        var e = {
            index: newIndex,
            record: record
        };
        this.fire("beforemove", e);

        var target = this.dataview[newIndex];

        this.dataview.remove(record);

        var _index = this.dataview.indexOf(target);
        if (_index != -1) {
            newIndex = _index;
        }
        if (target) {
            this.dataview.insert(newIndex, record);
        } else {
            this.dataview.add(record);
        }

        if (this.dataview != this.source) {
            this.source.remove(record);
            var _index = this.source.indexOf(target);
            if (_index != -1) {
                newIndex = _index;
            }
            if (target) {
                this.source.insert(newIndex, record);
            } else {
                this.source.add(record);
            }
        }

        this._dataChanged();


        this.fire("move", e);
    },
    indexOf: function (record) {
        return this.getVisibleRows().indexOf(record);
    },
    getAt: function (index) {
        //return this.dataview[index];
        return this.getVisibleRows()[index];
    },
    getRange: function (start, end) {
        if (start > end) {
            var t = start;
            start = end;
            end = t;
        }
        var range = [];
        for (var i = start, l = end; i <= l; i++) {
            var o = this.dataview[i];
            range.push(o);
        }
        return range;
    },
    selectRange: function (start, end) {
        if (!mini.isNumber(start)) start = this.indexOf(start);
        if (!mini.isNumber(end)) end = this.indexOf(end);
        if (mini.isNull(start) || mini.isNull(end)) return;

        var rs = this.getRange(start, end);
        this.selects(rs);
    },
    toArray: function () {
        return this.source.clone();
    },
    //////////////////////////////////////////////
    isChanged: function () {
        return this.getChanges().length > 0;
    },
    /*
    使用rowState获得不同状态的行对象数组:
    新增的
    删除的
    修改的
    */
    getChanges: function (rowState, onlyField) {
        var changes = [];
        if (rowState == "removed" || rowState == null) {
            changes.addRange(this._removeds.clone());
        }
        for (var i = 0, l = this.source.length; i < l; i++) {
            var record = this.source[i];
            if (!record._state) continue;
            if (record._state == rowState || rowState == null) {
                changes[changes.length] = record;
            }
        }
        var rows = changes;
        if (onlyField) {
            for (var i = 0, l = rows.length; i < l; i++) {
                var row = rows[i];
                if (row._state == "modified") {
                    var newRow = {};
                    newRow._state = row._state;
                    newRow[this.idField] = row[this.idField];
                    for (var field in row) {
                        var modifed = this.isModified(row, field);
                        if (modifed) {
                            newRow[field] = row[field];
                        }
                    }
                    rows[i] = newRow;
                }
            }
        }
        //按序号排序
        var grid = this;
        mini.sort(changes, function (a, b) {
            var index1 = grid.indexOf(a);
            var index2 = grid.indexOf(b);
            if (index1 > index2) return 1;
            if (index1 < index2) return -1;
            return 0;
        });
        return changes;
    },
    //acceptChanges和rejectChanges都能清空DataTable的增/删/改/错误等标记信息, 但是一个是"提交", 一个是"撤销"处理
    accept: function () {
        this.beginChange();
        for (var i = 0, l = this.source.length; i < l; i++) {
            var record = this.source[i];
            this.acceptRecord(record);
        }
        this._removeds = [];  //被删除行集合
        this._originals = {}; //被修改行集合        
        this.endChange();
    },
    reject: function () {
        this.beginChange();
        var data = this.source.clone();
        for (var i = 0, l = data.length; i < l; i++) {
            var record = data[i];
            this.rejectRecord(record);
        }
        this._removeds = [];  //被删除行集合
        this._originals = {}; //被修改行集合
        this.endChange();
    },
    acceptRecord: function (node) {
        if (!node._state) return;
        delete this._originals[node[this._originalIdField]];
        if (node._state == "deleted") {  //如果是"删除", 则提交修改时, 实现真正移除
            this.remove(node);
        } else {
            delete node._state;
            delete this._originals[node[this._originalIdField]];
            this._dataChanged();
        }
        this.fire("update", { record: node });
    },
    rejectRecord: function (node) {
        if (!node._state) return;
        if (node._state == "added") {   //如果是新增撤销, 则删除之                                   
            this.remove(node);
        } else if (node._state == "modified" || node._state == "deleted") {
            var or = this._getOriginal(node);

            //old
            //mini.copyTo(node, or);

            //new
            for (var field in or) {
                var val = or[field];
                mini._setMap(field, val, node);
            }


            delete node._state;
            delete this._originals[node[this._originalIdField]];
            this._dataChanged();
            this.fire("update", { record: node });
        }
    },
    //////////////////////////////////////////////  
    _doFilter: function () {
        if (!this._filterInfo) {
            this.dataview = this.source;
            return;
        }
        var fn = this._filterInfo[0], scope = this._filterInfo[1];
        var view = [];
        var data = this.source;
        for (var i = 0, l = data.length; i < l; i++) {
            var r = data[i];
            var add = fn.call(scope, r, i, this);
            if (add !== false) {
                view.push(r);
            }
        }
        this.dataview = view;
    },
    _doSort: function () {
        if (!this._sortInfo) return;
        var fn = this._sortInfo[0], scope = this._sortInfo[1], reverse = this._sortInfo[2];
        var dv = this.getDataView().clone();
        mini.sort(dv, fn, scope);
        if (reverse) dv.reverse();
        this.dataview = dv;
    }
});
mini.regClass(mini.DataTable, "datatable");

/*
    root == source  :原始树形数据对象。
    viewNodes       :哈希结构，存放“过滤、排序”后的子节点数组。 (Tree控件)
    dataview        :列表数据视图。“过滤、排序、折叠”后的数组。 (SuperTree控件)    
*/

/* DataTree
-----------------------------------------------------------------------------*/

mini.DataTree = function () {
    mini.DataTree.superclass.constructor.apply(this, arguments);
};
mini.extend(mini.DataTree, mini.DataSource, {
    isTree: true,

    expandOnLoad: false,            //默认全部收缩

    idField: "id",
    parentField: "pid",
    nodesField: "children",
    checkedField: "checked",
    resultAsTree: true,

    dataField: "",

    checkModel: "cascade",          //multiple|single|cascade
    autoCheckParent: false,         //1.选子，选父；2.选父，全选子；3.全取消子，取消父
    onlyLeafCheckable: false,       //只显示子节点checkbox


    setExpandOnLoad: function (value) {
        this.expandOnLoad = value;
    },
    getExpandOnLoad: function () {
        return this.expandOnLoad;
    },
    setParentField: function (value) {
        this.parentField = value;
    },
    setNodesField: function (value) {
        if (this.nodesField != value) {
            var data = this.root[this.nodesField];
            this.nodesField = value;
            this._doLoadData(data);
        }
    },
    setResultAsTree: function (value) {
        this.resultAsTree = value;
    },
    setCheckRecursive: function (value) {
        this.checkModel = value ? "cascade" : "multiple";
    },
    getCheckRecursive: function () {
        return this.checkModel == "cascade";
    },
    setShowFolderCheckBox: function (value) {
        this.onlyLeafCheckable = !value;
    },
    getShowFolderCheckBox: function () {
        return !this.onlyLeafCheckable;
    },
    _doExpandOnLoad: function (nodes) {
        //expandOnLoad
        var nodesField = this.nodesField;
        var expandOnLoad = this.expandOnLoad;

        function eachNodes(nodes, level) {
            for (var i = 0, l = nodes.length; i < l; i++) {
                var node = nodes[i];

                if (mini.isNull(node.expanded)) {
                    if (expandOnLoad === true
                    || (mini.isNumber(expandOnLoad) && level <= expandOnLoad)) {
                        node.expanded = true;
                    } else {
                        node.expanded = false;
                    }
                } else {
                    //node.expanded = false;
                }

                var childs = node[nodesField];
                if (childs) {
                    eachNodes(childs, level + 1);
                }
            }
        }
        eachNodes(nodes, 0);
    },
    ///////////////////////////////////////////////////////////

    _OnBeforeLoad: function (e) {
        var node = this._loadingNode || this.root;
        e.node = node;

        if (this._isNodeLoading()) {
            e.async = true;
            e.isRoot = e.node == this.root;
            if (!e.isRoot) {
                e.data[this.idField] = this.getItemValue(e.node);
            }
        }
        this.fire("beforeload", e);
    },
    _OnPreLoad: function (e) {
        //resultAsTree
        if (this.resultAsTree == false) {
            e.data = mini.arrayToTree(e.data, this.nodesField, this.idField, this.parentField)
        }
        this.fire("preload", e);




    },
    _init: function () {
        mini.DataTree.superclass._init.call(this);
        this.root = { _id: -1, _level: -1 };
        this.source = this.root[this.nodesField] = [];
        this.viewNodes = null;  //当排序、过滤后，viewNodes才有对象
        this.dataview = null;
        this.visibleRows = null;
        this.list = null;

        this._ids[this.root._id] = this.root;
    },
    _doLoadData: function (data) {
        data = data || [];

        this._doExpandOnLoad(data);

        this.source = this.root[this.nodesField] = data;
        this.viewNodes = null;
        this.dataview = null;
        this.visibleRows = null;
        this.list = null;

        var sss = new Date();

        //处理_id映射
        var ds = mini.treeToArray(data, this.nodesField);


        var ids = this._ids;
        ids[this.root._id] = this.root;

        var RecordId = mini.DataSource.RecordId;
        for (var i = 0, l = ds.length; i < l; i++) {
            var node = ds[i];
            //if (!node._id) node._id = mini.DataSource.RecordId++;
            node._id = RecordId++;
            ids[node._id] = node;

            //历史问题
            node._uid = node._id;
        }
        mini.DataSource.RecordId = RecordId;
        //遍历树形，设置父子关系

        var checkedField = this.checkedField;
        var ds = mini.treeToArray(data, this.nodesField, "_id", "_pid", this.root._id);

        this.list = ds;

        var ids = this._ids,
			node, parentNode, checked;
        for (var i = 0, l = ds.length; i < l; i++) {
            node = ds[i];
            //var parentNode = this.getParentNode(node);
            parentNode = ids[node._pid];
            //node._pid = parentNode._id;
            node._level = parentNode._level + 1;
            if (node._state) delete node._state;


            //node[this.parentField] = parentNode[this.idField];

            checked = node[checkedField];
            if (checked) {
                node.checked = checked;
                if (node.checked) {
                    node.checked = node.checked != 'false';
                }
            }

            //			if (this.isLeafNode(node) == false) {
            //				var cs = node[this.nodesField];
            //				if (cs && cs.length > 0) {
            //					//delete node.isLeaf;
            //				}
            //			}
        }



        //同步checked
        this._doUpdateLoadedCheckedNodes();
        //alert(new Date() - sss);
    },
    _setAdded: function (node) {
        var parentNode = this.getParentNode(node);  //设置父节点Id
        node._id = mini.DataSource.RecordId++;

        //自动创建idField
        if (this._autoCreateNewID && !node[this.idField]) {
            node[this.idField] = UUID();
        }

        //历史问题
        node._uid = node._id;

        //if (!node._id) node._id = mini.DataSource.RecordId++;
        node._pid = parentNode._id;
        if (parentNode[this.idField]) {
            node[this.parentField] = parentNode[this.idField];
        }
        node._level = parentNode._level + 1;
        node._state = "added";
        this._ids[node._id] = node;
        delete this._originals[node[this._originalIdField]];
    },
    _createNodes: function (node) {
        var nodes = node[this.nodesField];
        if (!nodes) {
            nodes = node[this.nodesField] = [];

        }
        if (this.viewNodes && !this.viewNodes[node._id]) {
            this.viewNodes[node._id] = [];
        }
        return nodes;
    },
    ///////////////////////////////////////    
    addNode: function (node, parentNode) {
        if (!node) return;
        return this.insertNode(node, -1, parentNode);
    },
    addNodes: function (nodes, parentNode, action) {
        if (!mini.isArray(nodes)) return;
        if (mini.isNull(action)) action = "add";
        for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];
            this.insertNode(node, action, parentNode);
        }
    },
    insertNodes: function (nodes, index, parentNode) {
        if (!mini.isNumber(index)) return;
        if (!mini.isArray(nodes)) return;
        if (!parentNode) parentNode = this.root;
        this.beginChange();

        var pnodes = this._createNodes(parentNode);
        if (index < 0 || index > pnodes.length) index = pnodes.length;

        nodes = nodes.clone();
        for (var i = 0, l = nodes.length; i < l; i++) {
            this.insertNode(nodes[i], index + i, parentNode);
        }

        this.endChange();
        return nodes;
    },
    removeNode: function (node) {
        var parentNode = this.getParentNode(node);
        if (!parentNode) return;
        var index = this.indexOfNode(node);
        return this.removeNodeAt(index, parentNode);
    },
    removeNodes: function (nodes) {
        if (!mini.isArray(nodes)) return;
        this.beginChange();
        nodes = nodes.clone();
        for (var i = 0, l = nodes.length; i < l; i++) {
            this.removeNode(nodes[i]);
        }
        this.endChange();
    },
    moveNodes: function (nodes, targetNode, action) {
        if (!nodes || nodes.length == 0 || !targetNode || !action) return;
        this.beginChange();
        var sf = this;
        mini.sort(nodes, function (a, b) {
            return sf.indexOf(a) > sf.indexOf(b);
        }, this);
        for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];
            this.moveNode(node, targetNode, action);
            if (i != 0) {
                targetNode = node;
                action = "after";
            }
            //alert(node.Name);
        }
        this.endChange();
    },
    /*
    node: 要移动的节点
    targetNode: 目标节点
    action:
    1.  index   这时候, targetNode作为父节点
    2.  before, after, add/append 移动的方式
    */
    moveNode: function (node, targetNode, action) {
        if (!node || !targetNode || mini.isNull(action)) return;



        //如果有viewNodes，同时也发生变化
        if (this.viewNodes) {
            var parentNode = targetNode;
            var index = action;
            if (index == 'before') {
                parentNode = this.getParentNode(targetNode);
                index = this.indexOfNode(targetNode);
            } else if (index == 'after') {
                parentNode = this.getParentNode(targetNode);
                index = this.indexOfNode(targetNode) + 1;
            } else if (index == 'add' || index == "append") {
                if (!parentNode[this.nodesField]) parentNode[this.nodesField] = [];
                index = parentNode[this.nodesField].length;
            } else if (!mini.isNumber(index)) {
                return;
            }
            if (this.isAncestor(node, parentNode)) {  //如果目标父节点, 是节点的子节点, 则不能加入
                return false;
            }

            var childNodes = this.viewNodes[parentNode._id];
            if (!childNodes) childNodes = this.viewNodes[parentNode._id] = [];

            var childNodes = this.getChildNodes(parentNode);
            if (index < 0 || index > childNodes.length) index = childNodes.length;

            //加入新父节点下(假节点)
            var ___node = {};
            childNodes.insert(index, ___node);

            //node从原来的父节点中移除
            var oldParentNode = this.getParentNode(node);
            var oldChildNodes = this.getChildNodes(oldParentNode);
            oldChildNodes.remove(node);

            //真正节点加入
            index = childNodes.indexOf(___node);
            childNodes[index] = node;

        }

        var parentNode = targetNode;
        var index = action;
        var childNodes = this._createNodes(parentNode);

        if (index == 'before') {
            parentNode = this.getParentNode(targetNode);
            childNodes = this._createNodes(parentNode);
            index = childNodes.indexOf(targetNode);
        } else if (index == 'after') {
            parentNode = this.getParentNode(targetNode);
            childNodes = this._createNodes(parentNode);
            index = childNodes.indexOf(targetNode) + 1;
        } else if (index == 'add' || index == "append") {
            index = childNodes.length;
        } else if (!mini.isNumber(index)) {
            return;
        }
        if (this.isAncestor(node, parentNode)) {  //如果目标父节点, 是节点的子节点, 则不能加入
            return false;
        }

        if (index < 0 || index > childNodes.length) index = childNodes.length;

        //加入新父节点下(假节点)
        var ___node = {};
        childNodes.insert(index, ___node);

        //node从原来的父节点中移除
        var oldParentNode = this.getParentNode(node);
        oldParentNode[this.nodesField].remove(node);

        //真正节点加入
        index = childNodes.indexOf(___node);
        childNodes[index] = node;

        //_ParentId和_Level会改变
        this._updateParentAndLevel(node, parentNode);

        this._dataChanged();
        var e = {
            oldParentNode: oldParentNode,
            parentNode: parentNode,
            index: index,
            node: node
        };

        this.fire("movenode", e);
    },
    //insertNode(task, action, targetTask) //action: before, after, append/add
    insertNode: function (node, index, parentNode) {
        if (!node) return;
        if (!parentNode) {
            parentNode = this.root;
            index = "add";
        }
        if (!mini.isNumber(index)) {
            switch (index) {
                case "before":
                    index = this.indexOfNode(parentNode);
                    parentNode = this.getParentNode(parentNode);
                    node = this.insertNode(node, index, parentNode);
                    break;
                case "after":
                    index = this.indexOfNode(parentNode);
                    parentNode = this.getParentNode(parentNode);
                    node = this.insertNode(node, index + 1, parentNode);
                    break;
                case "append":
                case "add":
                    node = this.addNode(node, parentNode);
                    break;
                default:
                    break;
            }
            return node;
        };

        var nodes2 = this._createNodes(parentNode); //原始节点组
        var nodes = this.getChildNodes(parentNode);      //视图节点组
        if (index < 0 || index > nodes.length) index = nodes.length;

        nodes.insert(index, node);  //view

        //index = nodes.indexOf(node);            //@@@ 2017-01-06

        if (this.viewNodes) {
            var preNode = nodes[index - 1];
            if (preNode) {
                var index2 = nodes2.indexOf(preNode);
                nodes2.insert(index2 + 1, node);
            } else {
                nodes2.insert(0, node);
            }
        }

        node._pid = parentNode._id;
        this._setAdded(node);

        //        if (node[this.nodesField]) {
        //            this.cascadeChild(node, function (n, i, p) {
        //                n._pid = p._id;
        //                this._setAdded(n);
        //            }, this);
        //        }

        var me = this;
        var children = node[this.nodesField];
        if (children) {
            function each(children, p) {
                for (var i = 0, l = children.length; i < l; i++) {
                    var n = children[i];
                    n._pid = p._id;
                    me._setAdded(n);
                    if (n[me.nodesField]) each(n[me.nodesField])
                }
            }
            each(children, node);
        }

        this._dataChanged();
        var e = {
            parentNode: parentNode,
            index: index,
            node: node
        };
        this.fire("addnode", e);
        return node;
    },
    removeNodeAt: function (index, parentNode) {

        if (!parentNode) parentNode = this.root;
        var nodes = this.getChildNodes(parentNode);
        var node = nodes[index];
        if (!node) return null;

        nodes.removeAt(index);
        if (this.viewNodes) {
            var nodes2 = parentNode[this.nodesField];
            nodes2.remove(node);
        }

        this._setRemoved(node);
        this.cascadeChild(node, function (n, i, p) {
            this._setRemoved(n);
        }, this);

        this._checkSelecteds();

        this._dataChanged();
        var e = {
            parentNode: parentNode,
            index: index,
            node: node
        };
        this.fire("removenode", e);

        return node;
    },
    ///////////////////////////////////////////////////////
    //由当前节点开始一直上溯到根节点,对于每个节点应用fn,直到有一个fn返回假为止
    bubbleParent: function (node, fn, scope) {
        scope = scope || this;
        if (node) fn.call(this, node);
        var parentNode = this.getParentNode(node);
        if (parentNode && parentNode != this.root) {
            this.bubbleParent(parentNode, fn, scope);
        }
    },
    //遍历所有层次的子节点, 直到返回false
    cascadeChild: function (node, fn, scope) {
        if (!fn) return;
        if (!node) node = this.root;
        //var nodes = node[this.nodesField];
        var nodes = this.getChildNodes(node);
        if (nodes) {
            nodes = nodes.clone();
            for (var i = 0, l = nodes.length; i < l; i++) {
                var c = nodes[i];
                if (fn.call(scope || this, c, i, node) === false) return;
                this.cascadeChild(c, fn, scope);
            }
        }
    },
    //遍历下一级子节点
    eachChild: function (node, fn, scope) {
        if (!fn || !node) return;
        var nodes = node[this.nodesField];
        if (nodes) {
            var list = nodes.clone();
            for (var i = 0, l = list.length; i < l; i++) {
                var o = list[i];
                if (fn.call(scope || this, o, i, node) === false) break;
            }
        }
    },

    collapse: function (node, deep) {
        node = this.getNode(node);
        if (!node) return;
        this.beginChange();

        node.expanded = false;
        if (deep) {
            this.eachChild(node, function (o) {
                if (o[this.nodesField] != null) {
                    this.collapse(o, deep);
                }
            }, this);
        }

        this.endChange("collapse");

        var e = {
            node: node
        };
        this.fire("collapse", e);
    },
    expand: function (node, deep) {
        node = this.getNode(node);
        if (!node) return;
        this.beginChange();

        node.expanded = true;
        if (deep) {
            this.eachChild(node, function (o) {
                if (o[this.nodesField] != null) {
                    this.expand(o, deep);
                }
            }, this);
        }

        this.endChange("expand");

        var e = {
            node: node
        };
        this.fire("expand", e);
    },
    toggle: function (node) {
        if (this.isExpandedNode(node)) this.collapse(node);
        else this.expand(node);
    },
    expandNode: function (node) {
        this.expand(node);
    },
    collapseNode: function (node) {
        this.collapse(node);
    },
    collapseAll: function () {
        this.collapse(this.root, true);
    },
    expandAll: function () {
        this.expand(this.root, true);
    },
    collapseLevel: function (level, deep) {
        this.beginChange();
        this.each(function (node) {
            var nodeLevel = this.getLevel(node);
            if (level == nodeLevel) {
                this.collapse(node, deep);
            }
        }, this);
        this.endChange();
    },
    expandLevel: function (level, deep) {
        this.beginChange();
        this.each(function (node) {
            var nodeLevel = this.getLevel(node);
            if (level == nodeLevel) {
                this.expand(node, deep);
            }
        }, this);
        this.endChange();
    },
    expandPath: function (node) {
        node = this.getNode(node);
        if (!node) return;
        var ans = this.getAncestors(node);
        for (var i = 0, l = ans.length; i < l; i++) {
            this.expandNode(ans[i]);
        }
    },
    collapsePath: function (node) {
        node = this.getNode(node);
        if (!node) return;
        var ans = this.getAncestors(node);
        for (var i = 0, l = ans.length; i < l; i++) {
            this.collapseNode(ans[i]);
        }
    },
    ///////////////////////////////////////////////////////
    //判断parentNode是否是node的父级节点
    isAncestor: function (parentNode, node) {
        if (parentNode == node) return true;
        if (!parentNode || !node) return false;
        if (parentNode == this.getRootNode()) return true;
        var as = this.getAncestors(node);
        for (var i = 0, l = as.length; i < l; i++) {
            if (as[i] == parentNode) return true;
        }
        return false;
    },
    //获取父级链
    getAncestors: function (node) {
        var as = [];
        while (1) {
            var parentNode = this.getParentNode(node);
            if (!parentNode || parentNode == this.root) break;
            as[as.length] = parentNode;
            node = parentNode;
        }
        as.reverse();
        return as;
    },
    getNode: function (node) {
        if (typeof node == 'object') return node;
        return this.getRecord(node);
    },
    getRootNode: function () {
        return this.root;
    },
    getParentNode: function (node) {
        //if (this.root._id == node._pid) return this.root;
        if (!node) return null;
        return this.getby_id(node._pid);
    },
    getAllChildNodes: function (node, source) {
        return this.getChildNodes(node, true, source);
    },
    getChildNodes: function (node, all, useView) {
        node = this.getNode(node);
        if (!node) node = this.getRootNode();
        var nodes = node[this.nodesField];

        //如果有过滤、排序，则从viewNodes中获取
        if (this.viewNodes && useView !== false) {
            nodes = this.viewNodes[node._id];
        }
        //        else if (nodes) {
        //            nodes = nodes.clone();
        //        }

        if (all === true && nodes) {
            var view = [];
            for (var i = 0, l = nodes.length; i < l; i++) {
                var cnode = nodes[i];
                view[view.length] = cnode;
                var cnodes = this.getChildNodes(cnode, all, useView);
                if (cnodes && cnodes.length > 0) {
                    view.addRange(cnodes);
                }
            }
            nodes = view;
        }
        return nodes || [];
    },
    getChildNodeAt: function (index, node) {
        var nodes = this.getChildNodes(node);
        if (nodes) return nodes[index];
        return null;
    },
    //是否有子节点
    hasChildNodes: function (node) {
        var nodes = this.getChildNodes(node);
        return nodes.length > 0;
    },
    getLevel: function (node) {
        return node._level;
    },

    //是否叶子节点(没有子节点的)
    //注意: 是否有子节点, 跟是否是叶子节点没有必然的关系    一般我们用IsLeaf来显示+-号, 在懒加载的时候管用
    //    _is_true: function (v) {
    //        return v === true || v === 1 || v === 'Y' || v === 'y'
    //    },
    //    _is_false: function (v) {
    //        return v === false || v === 0 || v === 'N' || v === 'n';
    //    },
    _is_true: function (v) {
        return String(v) == "true" || v === 1 || v === 'Y' || v === 'y'
    },
    _is_false: function (v) {
        return String(v) == "false" || v === 0 || v === 'N' || v === 'n';
    },
    leafField: 'isLeaf',
    isLeafNode: function (node) {
        return this.isLeaf(node);
    },
    isLeaf: function (node) {
        if (!node) return false;
        var v = node[this.leafField];
        if (!node || this._is_false(v)) return false;
        var nodes = this.getChildNodes(node, false, false);
        if (nodes.length > 0) return false;
        return true;
    },
    hasChildren: function (node) {
        var subNodes = this.getChildNodes(node);
        return !!(subNodes && subNodes.length > 0);
    },
    isFirstNode: function (node) {
        if (node == this.root) return true;
        var parentNode = this.getParentNode(node);
        if (!parentNode) return false;
        return this.getFirstNode(parentNode) == node;
    },
    isLastNode: function (node) {
        if (node == this.root) return true;
        var parentNode = this.getParentNode(node);
        if (!parentNode) return false;
        return this.getLastNode(parentNode) == node;
    },
    isCheckedNode: function (node) {
        return node.checked === true;
    },
    isExpandedNode: function (node) {
        return node.expanded == true || node.expanded == 1 || mini.isNull(node.expanded);
    },
    isEnabledNode: function (node) {
        return node.enabled !== false;
    },
    isVisibleNode: function (node) {  //根据父节点折叠, 判断本节点是否可视
        if (node.visible == false) return false;
        var pnode = this._ids[node._pid];
        if (!pnode || pnode == this.root) return true;
        if (pnode.expanded === false) return false;
        return this.isVisibleNode(pnode);
    },
    getNextNode: function (node) {
        var parentNode = this.getby_id(node._pid);
        if (!parentNode) return null;
        var index = this.indexOfNode(node);
        return this.getChildNodes(parentNode)[index + 1];
    },
    getPrevNode: function (node) {
        var parentNode = this.getby_id(node._pid);
        if (!parentNode) return null;
        var index = this.indexOfNode(node);
        return this.getChildNodes(parentNode)[index - 1];
    },
    getFirstNode: function (parentNode) {
        return this.getChildNodes(parentNode)[0];
    },
    getLastNode: function (parentNode) {
        var nodes = this.getChildNodes(parentNode);
        return nodes[nodes.length - 1];
    },
    indexOfNode: function (node) {
        var parentNode = this.getby_id(node._pid);
        if (parentNode) {
            return this.getChildNodes(parentNode).indexOf(node);
        }
        return -1;
    },
    indexOfList: function (node) {
        return this.getList().indexOf(node);
    },
    getAt: function (index) {
        //return this.getDataView()[index];
        return this.getVisibleRows()[index];
    },
    indexOf: function (record) {
        return this.getVisibleRows().indexOf(record);
    },
    getRange: function (start, end) {
        if (start > end) {
            var t = start;
            start = end;
            end = t;
        }
        var data = this.getChildNodes(this.root, true);
        var range = [];
        for (var i = start, l = end; i <= l; i++) {
            var o = data[i];
            if (o) {
                range.push(o);
            }
        }
        return range;
    },
    selectRange: function (start, end) {
        var data = this.getChildNodes(this.root, true);
        if (!mini.isNumber(start)) start = data.indexOf(start);
        if (!mini.isNumber(end)) end = data.indexOf(end);
        if (mini.isNull(start) || mini.isNull(end)) return;

        var rs = this.getRange(start, end);
        this.selects(rs);
    },
    findRecords: function (property, value) {
        var data = this.toArray();

        var ifFn = typeof property == "function";
        var fn = property;
        var scope = value || this;
        var records = [];

        if (!mini.isNull(value)) value = String(value);

        for (var i = 0, l = data.length; i < l; i++) {
            var o = data[i];

            if (ifFn) {
                var ret = fn.call(scope, o);
                if (ret == true) {
                    records[records.length] = o;
                }
                if (ret === 1) break;
            } else {
                //                if (o[property] == value) {
                //                    records[records.length] = o;
                //                }

                if (value.indexOf(",") != -1) {
                    var vls = value.split(",");
                    for (var j = 0, len = vls.length; j < len; j++) {
                        var v = vls[j];
                        if (o[property] == v) {
                            records[records.length] = o;
                        }
                    }
                } else {
                    if (o[property] == value) {
                        records[records.length] = o;
                    }
                }
            }
        }
        return records;
    },
    ////////////////////////////////////
    _dataChangedCount: 0,
    _dataChanged: function (action) {

        this._dataChangedCount++;
        if (action != "update") {
            this.ids = null;                //!!!
            this.dataview = null;
            this.visibleRows = null;

            if (action == "collapse" || action == "expand" || action == "loaddata") {
            } else {
                this.list = null;
            }

            //document.title = new Date().getTime();
        }
        if (this.__changeCount == 0) {
            this.fire("datachanged");
        }
    },

    //    _createDataView: function () {
    //        //获取所有排序、过滤后的节点列表
    //        var data = this.getChildNodes(this.root, true);
    //        return data;
    //    },
    //    _createVisibleRows: function () {
    //        //获取所有排序、过滤后的节点列表
    //        var data = this.getChildNodes(this.root, true);
    //        //根据isVisibleNode, 再次筛选
    //        var view = [];
    //        for (var i = 0, l = data.length; i < l; i++) {
    //            var node = data[i];
    //            if (this.isVisibleNode(node)) view[view.length] = node;
    //        }
    //        return view;
    //    },

    _createDataView: function () {
        //获取所有排序、过滤后的节点列表
        var data = !this.viewNodes ? this.getList() : this.getChildNodes(this.root, true);
        return data;
    },
    //	_createVisibleRows: function () {
    //		//获取所有排序、过滤后的节点列表
    //		var data = !this.viewNodes ? this.getList() : this.getChildNodes(this.root, true);	  //this.getListView()
    //		//根据isVisibleNode, 再次筛选
    //		var view = [];
    //		for (var i = 0, l = data.length; i < l; i++) {
    //			var node = data[i];
    //			if (this.isVisibleNode(node)) view[view.length] = node;
    //		}
    //		return view;
    //	},
    _createVisibleRows: function () {
        var data = [],
			nodesField = this.nodesField,
			viewNodes = this.viewNodes,
			inView = !!viewNodes,
			node, children;

        function getChildren(node) {
            return inView ? viewNodes[node._id] : node[nodesField];
        }

        function each(nodes) {
            for (var i = 0, l = nodes.length; i < l; i++) {
                node = nodes[i];
                data[data.length] = node;

                if (node.expanded === false) {
                } else {
                    children = getChildren(node);
                    if (children) each(children);
                }

            }
        }

        each(getChildren(this.root));
        return data;

        //		//获取所有排序、过滤后的节点列表
        //		var data = !this.viewNodes ? this.getList() : this.getChildNodes(this.root, true);   //this.getListView()
        //		//根据isVisibleNode, 再次筛选
        //		var view = [];
        //		for (var i = 0, l = data.length; i < l; i++) {
        //			var node = data[i];
        //			if (this.isVisibleNode(node)) view[view.length] = node;
        //		}
        //		return view;
    },

    //ccc: 0,
    getList: function () {
        //
        if (!this.list) {

            //document.title = this.ccc++;
            this.list = mini.treeToList(this.source, this.nodesField);
        }
        return this.list;


        //return mini.treeToList(this.source, this.nodesField);
    },
    getDataView: function () {

        if (!this.dataview) {

            this.dataview = this._createDataView();
        }
        return this.dataview; //.clone();
    },
    getVisibleRows: function () {
        if (!this.visibleRows) {

            this.visibleRows = this._createVisibleRows();
        }
        return this.visibleRows;
    },
    //过滤、排序，生成viewNodes
    _doFilter: function () {
        if (!this._filterInfo) {
            this.viewNodes = null;
            return;
        }

        var fn = this._filterInfo[0], scope = this._filterInfo[1];

        var viewNodes = this.viewNodes = {}, nodesField = this.nodesField;
        function filter(node) {
            var nodes = node[nodesField];
            if (!nodes) return false;
            var id = node._id;
            var views = viewNodes[id] = [];

            for (var i = 0, l = nodes.length; i < l; i++) {
                var r = nodes[i];
                var cadd = filter(r);
                var add = fn.call(scope, r, i, this);
                if (add === true || cadd) {
                    views.push(r);
                }

            }
            return views.length > 0;
        }
        filter(this.root);
    },
    _doSort: function () {
        if (!this._filterInfo && !this._sortInfo) {
            this.viewNodes = null;
            return;
        }
        if (!this._sortInfo) return;
        var fn = this._sortInfo[0], scope = this._sortInfo[1], reverse = this._sortInfo[2];


        var nodesField = this.nodesField;
        if (!this.viewNodes) {
            var viewNodes = this.viewNodes = {};
            //如果没有viewNodes，则一一创建
            viewNodes[this.root._id] = this.root[nodesField].clone();
            this.cascadeChild(this.root, function (node, i, p) {
                var nodes = node[nodesField];
                if (nodes) {
                    viewNodes[node._id] = nodes.clone();
                }
            });
        }

        var sf = this;
        function sort(node) {
            var nodes = sf.getChildNodes(node);
            mini.sort(nodes, fn, scope);
            if (reverse) nodes.reverse();
            for (var i = 0, l = nodes.length; i < l; i++) {
                var r = nodes[i];
                sort(r);
            }
        };
        sort(this.root);
    },
    ////////////////////////////////////////////////////////

    toArray: function () {
        //return this.getChildNodes(this.root, true, false);

        if (!this._array || this._dataChangedCount != this._dataChangedCount2) {
            this._dataChangedCount2 = this._dataChangedCount;
            this._array = this.getChildNodes(this.root, true, false);
        }

        //1)节省掉性能开销；2）在大树形数据下，少生成对象，节省内存

        return this._array;
    },
    toTree: function () {
        return this.root[this.nodesField];
    },
    isChanged: function () {
        return this.getChanges().length > 0;
    },
    /*
    使用rowState获得不同状态的行对象数组:
    新增的
    删除的
    修改的
    */
    getChanges: function (rowState, onlyField) {
        var me = this,
            changes = [];
        if (rowState == "removed" || rowState == null) {
            changes.addRange(this._removeds.clone());
        }

        var allNodes = this.getAllChildNodes(this.root, false);

        for (var i = 0, l = allNodes.length; i < l; i++) {
            var record = allNodes[i];
            if (record._state == null || record._state == "") continue;
            if (record._state == rowState || rowState == null) {
                changes[changes.length] = record;
            }
        }

        //        this.cascadeChild(this.root, function (record, i, p) {
        //            if (record._state == null || record._state == "") return;
        //            if (record._state == rowState || rowState == null) {
        //                changes[changes.length] = record;
        //            }
        //        }, this);

        var rows = changes;
        if (onlyField) {
            for (var i = 0, l = rows.length; i < l; i++) {
                var row = rows[i];
                if (row._state == "modified") {
                    var newRow = {};
                    newRow._state = row._state;
                    newRow[this.idField] = row[this.idField];
                    for (var field in row) {
                        var modifed = this.isModified(row, field);
                        if (modifed) {
                            newRow[field] = row[field];
                        }
                    }
                    rows[i] = newRow;
                }
            }
        }
        return changes;
    },
    //acceptChanges和rejectChanges都能清空DataTable的增/删/改/错误等标记信息, 但是一个是"提交", 一个是"撤销"处理
    accept: function (node) {
        node = node || this.root;
        this.beginChange();
        this.cascadeChild(this.root, function (node) {
            this.acceptRecord(node);
        }, this);
        this._removeds = [];  //被删除行集合
        this._originals = {}; //被修改行集合
        this.endChange();
    },
    reject: function (node) {
        this.beginChange();
        this.cascadeChild(this.root, function (node) {
            this.rejectRecord(node);
        }, this);
        this._removeds = [];  //被删除行集合
        this._originals = {}; //被修改行集合
        this.endChange();
    },
    acceptRecord: function (node) {
        if (!node._state) return;
        delete this._originals[node[this._originalIdField]];
        if (node._state == "deleted") {  //如果是"删除", 则提交修改时, 实现真正移除
            this.removeNode(node);
        } else {
            delete node._state;
            delete this._originals[node[this._originalIdField]];
            this._dataChanged();
            this.fire("update", { record: node });
        }

    },
    rejectRecord: function (node) {
        if (!node._state) return;
        if (node._state == "added") {   //如果是新增撤销, 则删除之                                   
            this.removeNode(node);
        } else if (node._state == "modified" || node._state == "deleted") {
            var or = this._getOriginal(node);
            mini.copyTo(node, or);
            delete node._state;
            delete this._originals[node[this._originalIdField]];
            this._dataChanged();
            this.fire("update", { record: node });
        }
    },
    ///////////////////////////////////////////////
    ////升级/降级方法, 不公开, 给甘特图用
    upGrade: function (task) {
        var parentTask = this.getParentNode(task);
        if (parentTask == this.root || task == this.root) {
            return false;
        }

        //任务的当前位置
        var pNodes = parentTask[this.nodesField];

        var index = pNodes.indexOf(task);
        var appendIndex = task[this.nodesField] ? task[this.nodesField].length : 0;
        //删除父任务下,index之后的元素,并将删除的元素增加给选中元素
        for (var i = pNodes.length - 1; i >= index; i--) {
            var o = pNodes[i];
            pNodes.removeAt(i);
            if (o != task) {
                if (!task[this.nodesField]) task[this.nodesField] = [];
                task[this.nodesField].insert(appendIndex, o);
            }
        }
        //将task加入到原父任务之后位置
        var pparentTask = this.getParentNode(parentTask);
        var ppNodes = pparentTask[this.nodesField];
        var index = ppNodes.indexOf(parentTask);
        ppNodes.insert(index + 1, task);

        //_ParentId和_Level会改变
        this._updateParentAndLevel(task, pparentTask);

        this._doFilter();

        this._dataChanged();
    },
    downGrade: function (node) {
        //如果node是数组的第一个元素,则不能降级
        if (this.isFirstNode(node)) {
            return false;
        }

        var oldParentNode = this.getParentNode(node);

        var opNodes = oldParentNode[this.nodesField];

        var index = opNodes.indexOf(node);

        var parentNode = opNodes[index - 1];

        //从旧父节点中删除, 并插入到新父节点下
        opNodes.removeAt(index);
        if (!parentNode[this.nodesField]) parentNode[this.nodesField] = [];
        parentNode[this.nodesField].add(node);

        //_ParentId和_Level会改变
        this._updateParentAndLevel(node, parentNode);

        //如果有viewNodes，同时也发生变化

        this._doFilter();

        this._dataChanged();


    },

    _updateParentAndLevel: function (node, parentNode) {
        var that = this;
        node._pid = parentNode._id;
        node._level = parentNode._level + 1;
        node[that.parentField] = parentNode[that.idField];
        if (!node[that.parentField]) node[that.parentField] = parentNode._id;

        this.cascadeChild(node, function (n, i, p) {
            n._pid = p._id;
            n._level = p._level + 1;

            n[that.parentField] = p[that.idField];
        }, this);
        this._setModified(node);
    },
    //////////////////////////////////////////////////////////////
    // Check Node
    //////////////////////////////////////////////////////////////
    setCheckModel: function (value) {
        this.checkModel = value;
    },
    getCheckModel: function () {
        return this.checkModel;
    },
    setOnlyLeafCheckable: function (value) {
        this.onlyLeafCheckable = value;
    },
    getOnlyLeafCheckable: function () {
        return this.onlyLeafCheckable;
    },
    setAutoCheckParent: function (value) {
        this.autoCheckParent = value;
    },
    getAutoCheckParent: function () {
        return this.autoCheckParent;
    },
    _doUpdateLoadedCheckedNodes: function () {  //加载后调用，同步checked

        //var nodes = this.getAllChildNodes(this.root);
        var nodes = this.getList();


        for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];
            if (node.checked == true) {
                if (this.autoCheckParent == false || !this.hasChildNodes(node)) {
                    this._doUpdateNodeCheckState(node);
                }
            }
        }

    },
    _doUpdateNodeCheckState: function (node) {
        //遍历节点，根据设置，关联选择：checkModel(cascade)，
        //判断：onlyLeafCheckable，node.checkable
        if (!node) return;

        var checked = this.isChecked(node);
        if (this.checkModel == "cascade" || this.autoCheckParent) {
            //反选子节点            
            this.cascadeChild(node, function (cnode) {
                //                var checkable = this.getCheckable(cnode);
                //                if (checkable) {
                this.doCheckNodes(cnode, checked);
                //                }
            }, this);
            //三态父节点
            if (!this.autoCheckParent) {
                var ans = this.getAncestors(node);
                ans.reverse();
                for (var i = 0, l = ans.length; i < l; i++) {
                    var pnode = ans[i];
                    //                    var checkable = this.getCheckable(pnode);
                    //                    if (checkable == false) return;
                    var childNodes = this.getChildNodes(pnode);
                    var checkAll = true;
                    for (var ii = 0, ll = childNodes.length; ii < ll; ii++) {
                        var cnode = childNodes[ii];
                        if (!this.isCheckedNode(cnode)) {
                            checkAll = false;
                        }
                    }
                    if (checkAll) this.doCheckNodes(pnode, true);
                    else {
                        this.doCheckNodes(pnode, false);
                    }
                    //父节点数据不多，激发下
                    this.fire("checkchanged", { nodes: [pnode], _nodes: [pnode] });
                }
            }
        }
        var that = this;
        //if (this.autoCheckParent && checked) {
        function hasCheckedChildNode(pnode) {
            var childNodes = that.getChildNodes(pnode);
            for (var ii = 0, ll = childNodes.length; ii < ll; ii++) {
                var cnode = childNodes[ii];
                if (that.isCheckedNode(cnode)) {
                    return true;
                }
            }
            return false;
        }
        if (this.autoCheckParent) {
            //1)有子节点选中就选中；2)所有子节点都没选中，取消选中
            var ans = this.getAncestors(node);
            ans.reverse();
            for (var i = 0, l = ans.length; i < l; i++) {
                var pnode = ans[i];
                //                var checkable = this.getCheckable(pnode);
                //                if (checkable == false) return;
                pnode.checked = hasCheckedChildNode(pnode);
                this.fire("checkchanged", { nodes: [pnode], _nodes: [pnode] });
            }
        }
    },
    doCheckNodes: function (nodes, checked, cascade) {

        //cascade: 是否关联选择
        if (!nodes) return;
        if (typeof nodes == "string") {
            nodes = nodes.split(",");
        }
        if (!mini.isArray(nodes)) nodes = [nodes];
        nodes = nodes.clone();
        var _nodes = [];
        checked = checked !== false;

        if (cascade === true) {
            if (this.checkModel == "single") {
                this.uncheckAllNodes();
            }
        }
        for (var i = nodes.length - 1; i >= 0; i--) {
            var node = this.getRecord(nodes[i]);
            if (
                !node
                || (checked && node.checked === true)
                || (!checked && node.checked !== true)
            ) {
                if (node) {
                    //if(node.text == 'Base') debugger
                    //if(!checked 
                    if (cascade === true) {
                        this._doUpdateNodeCheckState(node);
                    }
                    if (!checked && !this.isLeaf(node)) {
                        _nodes.push(node);
                    }

                }
                continue;
            }
            node.checked = checked;
            _nodes.push(node);
            if (cascade === true) {
                this._doUpdateNodeCheckState(node);
            }
            //if (checked) delete node.checkState;
        }

        var me = this;
        setTimeout(function () {
            me.fire("_checkchanged", { nodes: nodes, _nodes: _nodes, checked: checked });
        }, 1);
    },
    checkNode: function (node, cascade) {

        this.doCheckNodes([node], true, cascade !== false);
    },
    uncheckNode: function (node, cascade) {
        this.doCheckNodes([node], false, cascade !== false);
    },
    checkNodes: function (nodes, cascade) {
        if (!mini.isArray(nodes)) nodes = [];
        this.doCheckNodes(nodes, true, cascade !== false);
    },
    uncheckNodes: function (nodes, cascade) {
        if (!mini.isArray(nodes)) nodes = [];
        this.doCheckNodes(nodes, false, cascade !== false);
    },
    checkAllNodes: function () {
        var nodes = this.getList();
        this.doCheckNodes(nodes, true, false);
    },
    uncheckAllNodes: function () {
        var nodes = this.getList();
        this.doCheckNodes(nodes, false, false);
    },

    doGetCheckedNodes: function (sourceNodes, mode) {
        if (mode === false) mode = 'leaf';
        var nodes = [];
        var maps = {};

        for (var j = 0, k = sourceNodes.length; j < k; j++) {
            var node = sourceNodes[j];
            var isLeaf = this.isLeafNode(node);
            if (mode === true) {
                //nodes.push(node);
                if (!maps[node._id]) {
                    maps[node._id] = node;
                    nodes.push(node);
                }
                var ans = this.getAncestors(node);
                for (var i = 0, l = ans.length; i < l; i++) {
                    var anode = ans[i];
                    if (!maps[anode._id]) {
                        maps[anode._id] = anode;
                        nodes.push(anode);
                    }
                }
            } else if (mode === "parent") {
                if (!isLeaf) {
                    //nodes.push(node);
                    if (!maps[node._id]) {
                        maps[node._id] = node;
                        nodes.push(node);
                    }
                }
            } else if (mode === "leaf") {
                if (isLeaf) {
                    //nodes.push(node);
                    if (!maps[node._id]) {
                        maps[node._id] = node;
                        nodes.push(node);
                    }
                }
            } else {
                //nodes.push(node);
                if (!maps[node._id]) {
                    maps[node._id] = node;
                    nodes.push(node);
                }
            }

        }
        return nodes;
    },

    getCheckedNodes: function (mode) {  //parent, leaf, true(包含父节点）, 不传递（当前选中）
        var nodes = [];

        this.cascadeChild(this.root, function (node) {
            if (node.checked == true) nodes.push(node);
        });

        nodes = this.doGetCheckedNodes(nodes, mode);

        return nodes;
    },

    //    getCheckedNodes: function (mode) {  //parent, leaf, true(包含父节点）, 不传递（当前选中）
    //        if (mode === false) mode = 'leaf';
    //        var nodes = [];
    //        var maps = {};
    //        this.cascadeChild(this.root, function (node) {
    //            if (node.checked == true) {
    //                var isLeaf = this.isLeafNode(node);
    //                if (mode === true) {
    //                    //nodes.push(node);
    //                    if (!maps[node._id]) {
    //                        maps[node._id] = node;
    //                        nodes.push(node);
    //                    }
    //                    var ans = this.getAncestors(node);
    //                    for (var i = 0, l = ans.length; i < l; i++) {
    //                        var anode = ans[i];
    //                        if (!maps[anode._id]) {
    //                            maps[anode._id] = anode;
    //                            nodes.push(anode);
    //                        }
    //                    }
    //                } else if (mode === "parent") {
    //                    if (!isLeaf) {
    //                        //nodes.push(node);
    //                        if (!maps[node._id]) {
    //                            maps[node._id] = node;
    //                            nodes.push(node);
    //                        }
    //                    }
    //                } else if (mode === "leaf") {
    //                    if (isLeaf) {
    //                        //nodes.push(node);
    //                        if (!maps[node._id]) {
    //                            maps[node._id] = node;
    //                            nodes.push(node);
    //                        }
    //                    }
    //                } else {
    //                    //nodes.push(node);
    //                    if (!maps[node._id]) {
    //                        maps[node._id] = node;
    //                        nodes.push(node);
    //                    }
    //                }
    //            }
    //        }, this);
    //        return nodes;
    //    },
    getCheckedNodesId: function (mode, delimiter) {
        var nodes = this.getCheckedNodes(mode);
        var vts = this.getValueAndText(nodes, delimiter);
        return vts[0];
    },
    getCheckedNodesText: function (mode, delimiter) {
        var nodes = this.getCheckedNodes(mode);
        var vts = this.getValueAndText(nodes, delimiter);
        return vts[1];
    },
    isChecked: function (node) {
        node = this.getRecord(node);
        if (!node) return null;
        return node.checked === true || node.checked === 1;
    },
    getCheckState: function (node) {    //更新三态时，只获取父节点

        node = this.getRecord(node);
        if (!node) return null;
        if (node.checked === true) return "checked";
        if (!node[this.nodesField]) return "unchecked";

        if (node.indeterminate) return "indeterminate";

        var children = this.getChildNodes(node, true); 			//@@@ 要死了
        for (var i = 0, l = children.length; i < l; i++) {
            var node = children[i];
            if (node.checked === true) return "indeterminate";
        }
        return "unchecked";
    },
    getUnCheckableNodes: function () {
        var nodes = [];
        this.cascadeChild(this.root, function (node) {
            var checkable = this.getCheckable(node);
            if (checkable == false) {
                nodes.push(node);
            }
        }, this);
        return nodes;
    },
    setCheckable: function (nodes, checkable) {  //disableCheckbox方法就不提供了
        if (!nodes) return;
        if (!mini.isArray(nodes)) nodes = [nodes];
        nodes = nodes.clone();
        checkable = !!checkable;
        for (var i = nodes.length - 1; i >= 0; i--) {
            var node = this.getRecord(nodes[i]);
            if (!node) {
                continue;
            }
            node.checkable = checked;
        }
        //        this.fire("checkchanged", {nodes: [node]);
    },
    getCheckable: function (node) {
        node = this.getRecord(node);
        if (!node) return false;
        if (node.checkable === true) return true;
        if (node.checkable === false) return false;
        return this.isLeafNode(node) ? true : !this.onlyLeafCheckable;
    },
    showNodeCheckbox: function (node, show) {

    },
    ///////////////////////////////////
    reload: function (success, error, complete) {

        this._loadingNode = null;


        this.load(this.loadParams, success, error, complete);
    },
    _isNodeLoading: function () {
        return !!this._loadingNode;
    },
    loadNode: function (node, expand) {

        this._loadingNode = node;
        var e = { node: node };
        this.fire("beforeloadnode", e);
        //

        var time = new Date();

        var me = this;
        me._doLoadAjax(me.loadParams, null, null, null, function (e) {
            var t = new Date() - time;
            if (t < 60) t = 60 - t;

            setTimeout(function () {

                //success
                e.node = node;
                me._OnPreLoad(e);

                //e.node = me._loadingNode;
                me._loadingNode = null;
                if (me.loadParams) delete me.loadParams[me.idField];

                var oldNodes = node[me.nodesField];
                me.removeNodes(oldNodes);

                var nodes = e.data;
                if (nodes && nodes.length > 0) {

                    me.collapse(node);  //addNodes之前    优化！！！

                    me.addNodes(nodes, node);

                    //清楚新增痕迹
                    var all = me.getAllChildNodes(node);
                    for (var i = 0, l = all.length; i < l; i++) {
                        var treeNode = all[i];
                        //me.acceptRecord(treeNode);
                        delete treeNode._state;         //优化！！！
                    }

                    if (expand !== false) {
                        me.expand(node, true);
                    } else {
                        me.collapse(node, true);
                    }
                } else {
                    delete node[me.leafField];
                    me.expand(node, true);
                }


                me.fire("loadnode", e);
                me.fire("load", e);
            }, t);
        }, true);
    }
});
mini.regClass(mini.DataTree, "datatree");



//==========================================================================
/* DataTable/DateTree Applys
-----------------------------------------------------------------------------*/
mini._DataTableApplys = {
    /////////////////////////////////////////////
    idField: "id",
    textField: "text",
    setAjaxData: function (value) {
        this._dataSource.ajaxData = value;
    },
    getby_id: function (id) {
        return this._dataSource.getby_id(id);
    },
    getValueAndText: function (records, delimiter) {
        return this._dataSource.getValueAndText(records, delimiter);
    },
    setIdField: function (value) {
        this._dataSource.setIdField(value);
        this.idField = value;
    },
    getIdField: function () {
        return this._dataSource.idField;
    },
    setTextField: function (value) {
        this._dataSource.setTextField(value);
        this.textField = value;
    },
    getTextField: function () {
        return this._dataSource.textField;
    },
    //////////////////////////////
    getLoadParams: function () {
        return this._dataSource.loadParams;
    },
    clearData: function () {
        this._dataSource.clearData();
    },
    loadData: function (data) {
        this._dataSource.loadData(data);
    },
    setData: function (data) {
        this._dataSource.loadData(data);
    },
    getData: function () {
        return this._dataSource.getSource().clone();
    },
    getList: function () {
        return this._dataSource.getList();
    },
    getDataView: function () {
        return this._dataSource.getDataView();
    },
    getVisibleRows: function () {
        if (this._useEmptyView) return [];
        return this._dataSource.getVisibleRows();
    },
    toArray: function () {
        return this._dataSource.toArray();
    },
    getRecord: function (id) {
        if (typeof id == 'object') return id;
        return this._dataSource.getRecord(id);
    },
    getRow: function (index) {
        if (typeof index == 'object') return index;
        return this._dataSource.getRow(index);
    },
    getRange: function (start, end) {
        if (mini.isNull(start) || mini.isNull(end)) return;
        return this._dataSource.getRange(start, end);
    },
    getAt: function (index) {
        return this._dataSource.getAt(index);
    },
    indexOf: function (record) {
        return this._dataSource.indexOf(record);
    },
    getRowByUID: function (uid) {
        return this._dataSource.getby_id(uid);
    },
    getRowByUid: function (uid) {
        return this.getRowByUID(uid);
    },
    getRowById: function (id) {
        return this._dataSource.getbyId(id);
    },
    ///////////////////////////////
    clearRows: function () {
        this._dataSource.clearData();
    },
    //    getRows: function () {
    //        return this._dataSource.toArray();
    //    },
    updateRow: function (record, field, value) {
        this._dataSource.updateRecord(record, field, value);
    },
    addRow: function (record, index) {
        var o = this._dataSource.insert(index, record);
        
        if (this.validateOnAdd) this.validateRow(record);
        return o;
    },
    removeRow: function (record, autoSelect) {

        return this._dataSource.remove(record, autoSelect);
    },
    removeRows: function (records, autoSelect) {
        return this._dataSource.removeRange(records, autoSelect);
    },
    removeSelected: function () {
        var row = this.getSelected();
        if (row) {
            this.removeRow(row, true);
        }
    },
    removeRowAt: function (index, autoSelect) {
        return this._dataSource.removeAt(index, autoSelect);
    },
    moveRow: function (row, index) {
        this._dataSource.move(row, index);
    },
    addRows: function (records, index) {
        return this._dataSource.insertRange(index, records);
    },
    findRows: function (field, value) {
        return this._dataSource.findRecords(field, value);
    },
    findRow: function (field, value) {
        return this._dataSource.findRecord(field, value);
    },
    //    removeSelected: function (select) {
    //        var row = this.getSelected();
    //        var index = this.indexOf(row);
    //        this.removeRecord(row);
    //        if (select !== false) {
    //            row = this.getAt(index);
    //            this.select(row ? index : index - 1);
    //        }
    //    },
    //////////////////////////////////////////////////
    multiSelect: false,
    setMultiSelect: function (value) {
        this._dataSource.setMultiSelect(value);
        this.multiSelect = value;
    },
    getMultiSelect: function () {
        return this._dataSource.getMultiSelect();
    },
    setCurrent: function (record) {
        this._dataSource.setCurrent(record);
    },
    getCurrent: function () {
        return this._dataSource.getCurrent();
    },
    isSelected: function (record) {
        return this._dataSource.isSelected(record);
    },
    setSelected: function (record) {
        this._dataSource.setSelected(record);
    },
    getSelected: function () {
        return this._dataSource.getSelected();
    },
    getSelecteds: function () {
        return this._dataSource.getSelecteds();
    },
    select: function (record, fireEvent) {

        this._dataSource.select(record, fireEvent);
    },
    selects: function (records, fireEvent) {
        this._dataSource.selects(records, fireEvent);
    },
    deselect: function (record, fireEvent) {
        this._dataSource.deselect(record, fireEvent);
    },
    deselects: function (records, fireEvent) {
        this._dataSource.deselects(records, fireEvent);
    },
    selectAll: function (fireEvent) {
        this._dataSource.selectAll(fireEvent);
    },
    deselectAll: function (fireEvent) {
        this._dataSource.deselectAll(fireEvent);
    },
    clearSelect: function (fireEvent) {
        this.deselectAll(fireEvent);
    },
    selectPrev: function () {
        this._dataSource.selectPrev();
    },
    selectNext: function () {
        this._dataSource.selectNext();
    },
    selectFirst: function () {
        this._dataSource.selectFirst();
    },
    selectLast: function () {
        this._dataSource.selectLast();
    },
    selectRange: function (start, end) {
        this._dataSource.selectRange(start, end);
    },
    //////////////////////////////////////////////////
    filter: function (fn, scope) {
        this._dataSource.filter(fn, scope);
    },
    clearFilter: function () {
        this._dataSource.clearFilter();
    },
    sort: function (fn, scope, reverse) {
        this._dataSource.sort(fn, scope, reverse);
    },
    clearSort: function () {
        this._dataSource.clearSort();
    },
    findItems: function (a, b, c) {
        return this._dataSource.findRecords(c, b, c);
    },
    ////////////////////////////////////////
    getResultObject: function () {
        return this._dataSource._resultObject || {};
    },
    isChanged: function () {
        return this._dataSource.isChanged();
    },
    getChanges: function (state, onlyField) {
        return this._dataSource.getChanges(state, onlyField);
    },
    accept: function () {
        this._dataSource.accept();
    },
    reject: function () {
        this._dataSource.reject();
    },
    acceptRecord: function (record) {
        this._dataSource.acceptRecord(record);
    },
    rejectRecord: function (record) {
        this._dataSource.rejectRecord(record);
    }
};


mini._DataTreeApplys = {
    addRow: null,
    removeRow: null,
    removeRows: null,
    removeRowAt: null,
    moveRow: null,

    /////////////////////////////////////////////
    setExpandOnLoad: function (value) {
        this._dataSource.setExpandOnLoad(value);
    },
    getExpandOnLoad: function () {
        return this._dataSource.getExpandOnLoad();
    },
    /////////////////////////////////////////////
    isSelectedNode: function (node) {
        node = this.getNode(node);
        return this.getSelectedNode() === node;
    },
    selectNode: function (node, fireEvent) {
        if (node) {
            this._dataSource.select(node, fireEvent);
        } else {
            this._dataSource.deselect(this.getSelectedNode(), fireEvent);
        }
    },
    getSelectedNode: function () {
        return this.getSelected();
    },
    getSelectedNodes: function () {
        return this.getSelecteds();
    },
    updateNode: function (node, field, value) {
        this._dataSource.updateRecord(node, field, value);
    },
    addNode: function (node, action, parentNode) {
        return this._dataSource.insertNode(node, action, parentNode);
    },
    removeNodeAt: function (index, parentNode) {
        return this._dataSource.removeNodeAt(index, parentNode);
        this._changed = true;
    },
    removeNode: function (node) {
        return this._dataSource.removeNode(node);
    },
    moveNode: function (node, action, targetNode) {
        this._dataSource.moveNode(node, action, targetNode);
    },
    addNodes: function (nodes, parentNode, action) {
        return this._dataSource.addNodes(nodes, parentNode, action);
    },
    insertNodes: function (nodes, index, parentNode) {
        return this._dataSource.insertNodes(index, nodes, parentNode);
    },
    moveNodes: function (nodes, targetNode, action) {
        this._dataSource.moveNodes(nodes, targetNode, action);
    },
    removeNodes: function (nodes) {
        return this._dataSource.removeNodes(nodes);
    },
    ////////////////////////////////////////    

    expandOnLoad: false,            //默认全部收缩
    checkRecursive: true,
    autoCheckParent: false,
    showFolderCheckBox: true,

    idField: "id",
    textField: "text",
    parentField: "pid",
    nodesField: "children",
    checkedField: "checked",
    leafField: 'isLeaf',
    resultAsTree: true,

    //    _changed: false,
    //    isChanged: function () {
    //        return this._changed;
    //    },

    setShowFolderCheckBox: function (value) {
        this._dataSource.setShowFolderCheckBox(value);
        if (this.doUpdate) this.doUpdate();
        this.showFolderCheckBox = value;
    },
    getShowFolderCheckBox: function () {
        return this._dataSource.getShowFolderCheckBox();
    },
    setCheckRecursive: function (value) {
        this._dataSource.setCheckRecursive(value);
        this.checkRecursive = value;
    },
    getCheckRecursive: function () {
        return this._dataSource.getCheckRecursive();
    },
    setResultAsTree: function (value) {
        this._dataSource.setResultAsTree(value);
    },
    getResultAsTree: function (value) {
        return this._dataSource.resultAsTree;
    },
    setParentField: function (value) {
        this._dataSource.setParentField(value);
        this.parentField = value;
    },
    getParentField: function () {
        return this._dataSource.parentField;
    },
    setLeafField: function (value) {
        this._dataSource.leafField = value;
        this.leafField = value;
    },
    getLeafField: function () {
        return this._dataSource.leafField;
    },
    setNodesField: function (value) {
        this._dataSource.setNodesField(value);
        this.nodesField = value;
    },
    getNodesField: function () {
        return this._dataSource.nodesField;
    },
    setCheckedField: function (value) {
        this._dataSource.checkedField = value;
        this.checkedField = value;
    },
    getCheckedField: function () {
        return this.checkedField;
    },
    /////////////////////////////
    findNodes: function (field, value) {
        return this._dataSource.findRecords(field, value);
    },
    getLevel: function (node) {
        return this._dataSource.getLevel(node);
    },
    isVisibleNode: function (node) {
        return this._dataSource.isVisibleNode(node);
    },

    isEnabledNode: function (node) {
        return this._dataSource.isEnabledNode(node);
    },
    isExpandedNode: function (node) {
        return this._dataSource.isExpandedNode(node);
    },
    isCheckedNode: function (node) {
        return this._dataSource.isCheckedNode(node);
    },
    isLeaf: function (node) {
        return this._dataSource.isLeafNode(node);
    },
    hasChildren: function (node) {
        return this._dataSource.hasChildren(node);
    },
    isAncestor: function (pnode, node) {
        return this._dataSource.isAncestor(pnode, node);
    },
    getNode: function (node) {
        return this._dataSource.getRecord(node);
    },
    getRootNode: function () {
        return this._dataSource.getRootNode();
    },
    getParentNode: function (node) {
        return this._dataSource.getParentNode.apply(this._dataSource, arguments);
    },
    getAncestors: function (node) {
        return this._dataSource.getAncestors(node);
    },
    getAllChildNodes: function (node) {
        return this._dataSource.getAllChildNodes.apply(this._dataSource, arguments);
    },
    getChildNodes: function (node, all) {
        return this._dataSource.getChildNodes.apply(this._dataSource, arguments);
    },
    getChildNodeAt: function (index, node) {
        return this._dataSource.getChildNodeAt.apply(this._dataSource, arguments);
    },
    indexOfNode: function (node) {
        return this._dataSource.indexOfNode.apply(this._dataSource, arguments);
    },
    hasChildNodes: function (node) {
        return this._dataSource.hasChildNodes.apply(this._dataSource, arguments);
    },
    isFirstNode: function (node) {
        return this._dataSource.isFirstNode.apply(this._dataSource, arguments);
    },
    isLastNode: function (node) {
        return this._dataSource.isLastNode.apply(this._dataSource, arguments);
    },
    getNextNode: function (node) {
        return this._dataSource.getNextNode.apply(this._dataSource, arguments);
    },
    getPrevNode: function (node) {
        return this._dataSource.getPrevNode.apply(this._dataSource, arguments);
    },
    getFirstNode: function (parentNode) {
        return this._dataSource.getFirstNode.apply(this._dataSource, arguments);
    },
    getLastNode: function (parentNode) {
        return this._dataSource.getLastNode.apply(this._dataSource, arguments);
    },

    ///////////////////////////////////
    toggleNode: function (node) {
        this._dataSource.toggle(node);
    },
    collapseNode: function (node, deep) {
        this._dataSource.collapse(node, deep);
    },
    expandNode: function (node, deep) {
        this._dataSource.expand(node, deep);
    },
    collapseAll: function () {
        this.useAnimation = false;
        this._dataSource.collapseAll();
        this.useAnimation = true;
    },
    expandAll: function () {
        this.useAnimation = false;
        this._dataSource.expandAll();
        this.useAnimation = true;
    },
    expandLevel: function (level) {
        this.useAnimation = false;
        this._dataSource.expandLevel(level);
        this.useAnimation = true;
    },
    collapseLevel: function (level) {
        this.useAnimation = false;
        this._dataSource.collapseLevel(level);
        this.useAnimation = true;
    },
    expandPath: function (node) {
        this.useAnimation = false;
        this._dataSource.expandPath(node);
        this.useAnimation = true;
    },
    collapsePath: function (node) {
        this.useAnimation = false;
        this._dataSource.collapsePath(node);
        this.useAnimation = true;
    },
    ////////////////////////////////
    loadNode: function (node, options) {
        this._dataSource.loadNode(node, options);
    },
    ////////////////////////////////
    setCheckModel: function (value) {
        this._dataSource.setCheckModel(value);
    },
    getCheckModel: function () {
        return this._dataSource.getCheckModel();
    },
    setOnlyLeafCheckable: function (value) {
        this._dataSource.setOnlyLeafCheckable(value);
    },
    getOnlyLeafCheckable: function () {
        return this._dataSource.getOnlyLeafCheckable();
    },
    setAutoCheckParent: function (value) {
        this._dataSource.setAutoCheckParent(value);
    },
    getAutoCheckParent: function () {
        return this._dataSource.getAutoCheckParent();
    },
    checkNode: function (node, cascade) {
        this._dataSource.checkNode(node, cascade);
    },
    uncheckNode: function (node, cascade) {
        this._dataSource.uncheckNode(node, cascade);
    },
    checkNodes: function (nodes, cascade) {
        this._dataSource.checkNodes(nodes, cascade);
    },
    uncheckNodes: function (nodes, cascade) {
        this._dataSource.uncheckNodes(nodes, cascade);
    },
    checkAllNodes: function () {
        this._dataSource.checkAllNodes();
    },
    uncheckAllNodes: function () {
        this._dataSource.uncheckAllNodes();
    },
    getCheckedNodes: function () {
        return this._dataSource.getCheckedNodes.apply(this._dataSource, arguments);
    },
    getCheckedNodesId: function () {
        return this._dataSource.getCheckedNodesId.apply(this._dataSource, arguments);
    },
    getCheckedNodesText: function () {
        return this._dataSource.getCheckedNodesText.apply(this._dataSource, arguments);
    },
    getNodesByValue: function (value) {
        if (mini.isNull(value)) value = "";
        value = String(value);
        var nodes = [];
        var ids = String(value).split(",");
        for (var i = 0, l = ids.length; i < l; i++) {
            var node = this.getNode(ids[i]);
            if (node) nodes.push(node);
        }
        return nodes;
    },
    isChecked: function (node) {
        return this._dataSource.isChecked.apply(this._dataSource, arguments);
    },
    getCheckState: function (node) {
        return this._dataSource.getCheckState.apply(this._dataSource, arguments);
    },
    setCheckable: function (nodes, checkable) {
        this._dataSource.setCheckable.apply(this._dataSource, arguments);
    },
    getCheckable: function (node) {
        return this._dataSource.getCheckable.apply(this._dataSource, arguments);
    },
    ///////////////////////////
    bubbleParent: function (node, fn, scope) {
        this._dataSource.bubbleParent.apply(this._dataSource, arguments);
    },
    cascadeChild: function (node, fn, scope) {
        this._dataSource.cascadeChild.apply(this._dataSource, arguments);
    },
    eachChild: function (node, fn, scope) {
        this._dataSource.eachChild.apply(this._dataSource, arguments);
    }
};



/*
    ColumnModel 列模型
        多表头
        隐藏列
        锁定列
        分组列
    事件：columnschanged   :   add/remove/resize/move

    列模型数据：
        原始列：columns
            简单：列数组
            复杂：列属性
        列视图：_columnsRow（多行列）、_visibleColumns显示的单行列。
            隐藏列：减少列，改变_visibleColumnsRow和_visibleColumns
            锁定列：不增加、不减少列，不改变_visibleColumnsRow和_visibleColumns。
                  _frozenStartColumn和_frozenEndColumn，约定一个表格显示的左右列区域。
                  生成表头、行的时候，根据这两个参数来处理下就可以了。
            行号列：创建时自己设置列
            //分组列：在GridView层次增加虚列，与ColumnModel无关
*/
mini.ColumnModel = function (grid) {
    this.owner = grid;
    mini.ColumnModel.superclass.constructor.apply(this, arguments);
    this._init();
}
mini.ColumnModel_ColumnID = 1;
mini.extend(mini.ColumnModel, mini.Component, {

    _defaultColumnWidth: 100,

    _init: function () {
        this.columns = [];                  //原始列（全）

        this._columnsRow = [];              //多表头数组(全）
        this._visibleColumnsRow = [];       //多表头数组（可视，去除隐藏列）

        this._bottomColumns = [];           //底行列数组（全）
        this._visibleColumns = [];          //可视的底行列数组（去除隐藏列）

        this._idColumns = {};
        this._nameColumns = {};
        this._fieldColumns = {};
    },
    getColumns: function () {
        return this.columns;
    },
    getAllColumns: function () {
        var columns = [];
        for (var id in this._idColumns) {
            var column = this._idColumns[id];
            columns.push(column);
        }
        return columns;
    },
    getColumnsRow: function () {
        return this._columnsRow;
    },
    getVisibleColumnsRow: function () {
        return this._visibleColumnsRow;
    },
    getBottomColumns: function () {
        return this._bottomColumns;
    },
    getVisibleColumns: function () {
        return this._visibleColumns;
    },
    _getBottomColumnsByColumn: function (column) {
        //获取某列最底层的列数组
        column = this.getColumn(column);
        var columns = this._bottomColumns;
        var cs = [];
        for (var i = 0, l = columns.length; i < l; i++) {
            var c = columns[i];
            if (this.isAncestorColumn(column, c)) cs.push(c);
        }
        return cs;
    },
    _getVisibleColumnsByColumn: function (column) {
        //获取某列最底层的可视列数组
        column = this.getColumn(column);
        var columns = this._visibleColumns;
        var cs = [];
        for (var i = 0, l = columns.length; i < l; i++) {
            var c = columns[i];
            if (this.isAncestorColumn(column, c)) cs.push(c);
        }
        return cs;
    },
    setColumns: function (columns) {
        if (!mini.isArray(columns)) columns = [];
        this._init();
        this.columns = columns;
        this._columnsChanged();
    },
    _columnsChanged: function () {
        this._updateColumnsView();
        this.fire("columnschanged");
    },

    columnDefaults: {
        allowCellWrap: false
    },

    _updateColumnsView: function () {
        //_id, _pid, _level, 
        this._maxColumnLevel = 0;
        var level = 0;
        function init(column, index, parentColumn) {
            if (column.type) {
                if (!mini.isNull(column.header) && typeof column.header !== "function") {
                    if (column.header.trim() == "") {
                        delete column.header;
                    }
                }
                var col = mini._getColumn(column.type);
                if (col) {
                    var _column = mini.copyTo({}, column);
                    mini.copyTo(column, col);
                    mini.copyTo(column, _column);
                }
            }

            //_id, _pid
            if (!column._id) column._id = mini.ColumnModel_ColumnID++;
            column._pid = parentColumn == this ? -1 : parentColumn._id;
            this._idColumns[column._id] = column;
            if (column.name) this._nameColumns[column.name] = column;

            //level
            column._level = level;
            level += 1;
            this.eachColumns(column, init, this);
            level -= 1;
            if (column._level > this._maxColumnLevel) this._maxColumnLevel = column._level;

            //width
            var width = parseInt(column.width);
            if (mini.isNumber(width) && String(width) == column.width) column.width = width + "px";
            if (mini.isNull(column.width)) column.width = this._defaultColumnWidth + "px";
            if (String(column.width).indexOf('px')) {
                column.pxWidth = parseInt(column.width);
            }

            column.visible = column.visible !== false;
            column.allowResize = column.allowResize !== false;
            column.allowMove = column.allowMove !== false;      //列移动
            column.allowSort = column.allowSort === true;       //列排序
            column.allowDrag = !!column.allowDrag;              //行移动
            column.readOnly = !!column.readOnly;
            //column.autoEscape = column.autoEscape !== false;
            column.autoEscape = !!column.autoEscape;
            column.enabled = column.enabled !== false;

            column.showCellTip = column.showCellTip !== false;

            //if(column.header == '姓名') debugger

            column.valueFromSelect = column.valueFromSelect !== false;

            column.vtype = column.vtype || "";



            //column.allowCellWrap = column.allowCellWrap == true;

            if (column.allowCellWrap == null) column.allowCellWrap = this.columnDefaults.allowCellWrap;


            //editor

            //filter
            if (typeof column.filter == "string") {
                column.filter = window["ev" + "al"]('(' + column.filter + ')');
            }
            if (column.filter && !column.filter.el) {
                column.filter = mini.create(column.filter);
            }

            //init
            if (typeof column.init == "function" && column.inited != true) {
                column.init(this.owner);
            }
            column.inited = true;   //如果移除column，将inited去除，这样到新表格，才正常。一般也不会那么复杂。

            //历史问题
            column._gridUID = this.owner.uid;
            column._rowIdField = this.owner._rowIdField;
        }
        this.eachColumns(this, init, this);

        //多表头行
        this._createColumnsRow();

        //底部显示的列集合
        var index = 0;
        var view = this._visibleColumns = [];
        var bottoms = this._bottomColumns = [];
        this.cascadeColumns(this, function (column) {
            if (!column.columns || column.columns.length == 0) {
                bottoms.push(column);
                if (this.isVisibleColumn(column)) {
                    view.push(column);
                    column._index = index++;
                }
            }
        }, this);

        this._fieldColumns = {};
        var columns = this.getAllColumns();
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            if (column.field && !this._fieldColumns[column.field]) {
                this._fieldColumns[column.field] = column;
            }
        }

        //计算锁定colspan1、非锁定colspan2
        this._createFrozenColSpan();
    },
    //////////////////////////////////////////////////
    _frozenStartColumn: -1,
    _frozenEndColumn: -1,
    isFrozen: function () {
        return this._frozenStartColumn >= 0 && this._frozenEndColumn >= this._frozenStartColumn;
    },
    isFrozenColumn: function (column) {
        if (!this.isFrozen()) return false;
        column = this.getColumn(column);
        if (!column) return false;
        var index = this.getVisibleColumns().indexOf(column);
        return this._frozenStartColumn <= index && index <= this._frozenEndColumn;
    },
    frozen: function (startColumn, finishColumn) {
        startColumn = this.getColumn(startColumn);
        finishColumn = this.getColumn(finishColumn);

        var columns = this.getVisibleColumns();
        this._frozenStartColumn = columns.indexOf(startColumn);
        this._frozenEndColumn = columns.indexOf(finishColumn);

        if (startColumn && finishColumn) {
            this._columnsChanged();
        }
    },
    unFrozen: function () {
        this._frozenStartColumn = -1;
        this._frozenEndColumn = -1;
        this._columnsChanged();
    },
    setFrozenStartColumn: function (value) {
        this.frozen(value, this._frozenEndColumn);
    },
    setFrozenEndColumn: function (value) {
        this.frozen(this._frozenStartColumn, value);
    },
    getFrozenColumns: function () {
        var columns = [], isFrozen = this.isFrozen();
        for (var i = 0, l = this._visibleColumns.length; i < l; i++) {
            if (isFrozen && this._frozenStartColumn <= i && i <= this._frozenEndColumn) {
                columns.push(this._visibleColumns[i]);
            }
        }
        return columns;
    },
    getUnFrozenColumns: function () {
        var columns = [], isFrozen = this.isFrozen();
        for (var i = 0, l = this._visibleColumns.length; i < l; i++) {
            if ((isFrozen && i > this._frozenEndColumn) || !isFrozen) {
                columns.push(this._visibleColumns[i]);
            }
        }
        return columns;
    },
    getFrozenColumnsRow: function () {
        return this.isFrozen() ? this._columnsRow1 : [];
    },
    getUnFrozenColumnsRow: function () {
        return this.isFrozen() ? this._columnsRow2 : this.getVisibleColumnsRow();
    },
    //////////////////////////////////////////////////
    _createFrozenColSpan: function () {
        //计算锁定前的colspan0、锁定colspan1、非锁定colspan2：一共有3个区段
        //步骤：从visibleColumns遍历，向上计算父column的colspan
        var me = this;
        var visibleColumns = this.getVisibleColumns();
        var start = this._frozenStartColumn, end = this._frozenEndColumn;

        function isViewIndex(column, viewIndex) {
            var columns = me.isBottomColumn(column) ? [column] : me._getVisibleColumnsByColumn(column);
            for (var i = 0, l = columns.length; i < l; i++) {
                var c = columns[i];
                var index = visibleColumns.indexOf(c);
                if (viewIndex == 0 && index < start) return true;
                if (viewIndex == 1 && start <= index && index <= end) return true;
                if (viewIndex == 2 && index > end) return true;
            }
            return false;
        }

        function getColSpan(col, viewIndex) {
            var subColumns = mini.treeToList(col.columns, "columns");
            var colSpan = 0;
            for (var i = 0, l = subColumns.length; i < l; i++) {
                var c = subColumns[i];
                if (me.isVisibleColumn(c) == false || isViewIndex(c, viewIndex) == false) continue;
                if (!c.columns || c.columns.length == 0) {//只处理最底层的列
                    colSpan += 1;
                }
            }
            return colSpan;
        }

        var list = mini.treeToList(this.columns, "columns");
        for (var i = 0, l = list.length; i < l; i++) {
            var column = list[i];
            //if (column.header == 'Order') debugger
            delete column.colspan0;
            delete column.colspan1;
            delete column.colspan2;

            delete column.viewIndex0;
            delete column.viewIndex1;
            delete column.viewIndex2;

            if (this.isFrozen()) {
                if (column.columns && column.columns.length > 0) {
                    column.colspan1 = getColSpan(column, 1);
                    column.colspan2 = getColSpan(column, 2);
                    column.colspan0 = getColSpan(column, 0);
                } else {
                    column.colspan1 = 1;
                    column.colspan2 = 1;
                    column.colspan0 = 1;
                }
                //确定列属于什么区域
                if (isViewIndex(column, 0)) {
                    column["viewIndex" + 0] = true;
                }
                if (isViewIndex(column, 1)) {
                    column["viewIndex" + 1] = true;
                }
                if (isViewIndex(column, 2)) {
                    column["viewIndex" + 2] = true;
                }
            }
        }

        //创建锁定列、非锁定列的列行数组
        var maxLevel = this._getMaxColumnLevel();
        this._columnsRow1 = [];
        this._columnsRow2 = [];
        for (var i = 0, l = this._visibleColumnsRow.length; i < l; i++) {
            var columns = this._visibleColumnsRow[i];
            var columns1 = [];
            var columns2 = [];
            this._columnsRow1.push(columns1);
            this._columnsRow2.push(columns2);

            for (var j = 0, k = columns.length; j < k; j++) {
                var c = columns[j];
                if (c.viewIndex1) columns1.push(c);
                if (c.viewIndex2) columns2.push(c);
            }
        }
    },
    _createColumnsRow: function () {
        //创建列行数组：可视的。
        var maxLevel = this._getMaxColumnLevel();

        var columnsRow = [];
        var visibleColumnsRow = [];
        for (var i = 0, l = maxLevel; i <= l; i++) {
            columnsRow.push([]);
            visibleColumnsRow.push([]);
        }

        var me = this;
        function getColSpan(col) {
            var subColumns = mini.treeToList(col.columns, "columns");
            var colSpan = 0;
            for (var i = 0, l = subColumns.length; i < l; i++) {
                var c = subColumns[i];
                if (me.isVisibleColumn(c) == false) continue;
                if (!c.columns || c.columns.length == 0) {
                    colSpan += 1;
                }
            }
            return colSpan;
        }

        var list = mini.treeToList(this.columns, "columns");

        for (var i = 0, l = list.length; i < l; i++) {
            var column = list[i];
            var cols = columnsRow[column._level];
            var vcols = visibleColumnsRow[column._level];

            delete column.rowspan;
            delete column.colspan;

            if (column.columns && column.columns.length > 0) {
                column.colspan = getColSpan(column);
            }
            if ((!column.columns || column.columns.length == 0) && column._level < maxLevel) {
                column.rowspan = maxLevel - column._level + 1;
            }
            //if (column.header == '工作信息') debugger
            cols.push(column);
            if (this.isVisibleColumn(column)) {
                vcols.push(column);
            }
        }
        //debugger
        this._columnsRow = columnsRow;
        this._visibleColumnsRow = visibleColumnsRow;
    },
    _getMaxColumnLevel: function () {
        return this._maxColumnLevel;
    },
    cascadeColumns: function (node, fn, scope) {
        if (!fn) return;
        var nodes = node.columns;
        if (nodes) {
            nodes = nodes.clone();
            for (var i = 0, l = nodes.length; i < l; i++) {
                var c = nodes[i];
                if (fn.call(scope || this, c, i, node) === false) return;
                this.cascadeColumns(c, fn, scope);
            }
        }
    },
    eachColumns: function (column, fn, scope) {
        var columns = column.columns;
        if (columns) {
            var list = columns.clone();
            for (var i = 0, l = list.length; i < l; i++) {
                var o = list[i];
                if (fn.call(scope, o, i, column) === false) break;
            }
        }
    },
    getColumn: function (index) {
        var t = typeof index;
        if (t == "number") return this._bottomColumns[index];
        else if (t == "object") return index;
        else {
            return this._nameColumns[index];
        }
    },
    getColumnByField: function (field) {
        if (!field) return null;
        return this._fieldColumns[field];
    },
    _getColumnById: function (id) {
        return this._idColumns[id];
    },
    _getDataTypeByField: function (field) {
        var sortType = "string";
        var columns = this.getBottomColumns();
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            if (column.field == field) {
                if (column.sortType) {
                    sortType = column.sortType.toLowerCase();
                } else if (column.dataType) sortType = column.dataType.toLowerCase();
                break;
            }
        }

        //        var first = 
        //        if(!sortType 

        return sortType;
    },
    getParentColumn: function (column) {
        column = this.getColumn(column);
        var pid = column._pid;
        if (pid == -1) return this;
        return this._idColumns[pid];
    },
    getAncestorColumns: function (node) {
        var as = [node];
        while (1) {
            var parentNode = this.getParentColumn(node);
            if (!parentNode || parentNode == this) break;
            as[as.length] = parentNode;
            node = parentNode;
        }
        as.reverse();
        return as;
    },
    isAncestorColumn: function (parentNode, node) {
        if (parentNode == node) return true;
        if (!parentNode || !node) return false;
        var as = this.getAncestorColumns(node);
        for (var i = 0, l = as.length; i < l; i++) {
            if (as[i] == parentNode) return true;
        }
        return false;
    },
    isVisibleColumn: function (column) {
        column = this.getColumn(column);
        if (column.visible == false) return false;

        var columns = this.getAncestorColumns(column);
        for (var i = 0, l = columns.length; i < l; i++) {
            if (columns[i].visible == false) return false;
        }

        var nodes = column.columns;
        if (nodes) {
            var allHide = true;
            for (var i = 0, l = nodes.length; i < l; i++) {
                var node = nodes[i];
                if (this.isVisibleColumn(node)) {
                    allHide = false;
                    break;
                }
            }
            if (allHide) return false;
        }

        return true;
    },
    isBottomColumn: function (column) {
        column = this.getColumn(column);
        return !(column.columns && column.columns.length > 0);
    },
    ////////////////////////////////
    updateColumn: function (column, options) {
        column = this.getColumn(column);
        if (!column) return;
        mini.copyTo(column, options);
        this._columnsChanged();
    },
    moveColumn: function (column, targetColumn, action) {
        column = this.getColumn(column);
        targetColumn = this.getColumn(targetColumn);
        if (!column || !targetColumn || !action || column == targetColumn) return;

        if (this.isAncestorColumn(column, targetColumn)
            ) {
            return;
        }

        //先删除column
        var pcolumn = this.getParentColumn(column);
        if (pcolumn) {
            pcolumn.columns.remove(column);
        }

        //后加入到新位置
        var parentColumn = targetColumn;
        var index = action;
        if (index == 'before') {
            parentColumn = this.getParentColumn(targetColumn);
            index = parentColumn.columns.indexOf(targetColumn);
        } else if (index == 'after') {
            parentColumn = this.getParentColumn(targetColumn);
            index = parentColumn.columns.indexOf(targetColumn) + 1;
        } else if (index == 'add' || index == "append") {
            if (!parentColumn.columns) parentColumn.columns = [];
            index = parentColumn.columns.length;
        } else if (!mini.isNumber(index)) {
            return;
        }

        parentColumn.columns.insert(index, column);

        this._columnsChanged();
    },
    addColumn: function (column) {
        if (!column) return;
        delete column._id;
        this._columnsChanged();
    },
    removeColumn: function () {
        this._columnsChanged();
    }
});
/*
============================================================
描述：        
1.实现ColumnModal、DataSource
2.实现Pager：客户端分页、服务端分页
3.实现FilterRow、SummaryRow、BottomPager
4.实现TableView渲染视图模式
5.实现FitColumns、FixedColumns两种列宽显示模式
============================================================
GridView（基础表格视图）
->  FrezonGridView（锁定列视图）
->  ScrollGridView（动态表格视图）
->  DataGrid（数据表格）
->  TreeGrid（树形表格）
->  Tree（树控件）
============================================================
1.getData()             原始数据。数据结构：数组、树形。
2.getList()             原始数据。数据结构：数组。（树形转为数组）
3.getDataView()         数据视图。客户端排序、过滤后。数据结构：数组。
4.getVisibleRows()      可视数据视图。在DataView基础上，增加了树折叠处理。（是否加分组处理呢？）
5.getGroupingView()     分组数据视图。[group, group, ...]
*/
mini.GridView = function () {
    this._createTime = new Date();  //控件的创建时间

    //columnModel
    this._createColumnModel();
    this._bindColumnModel();

    //dataSource
    this.data = [];
    this._createSource();
    this._bindSource();

    this._initData();

    mini.GridView.superclass.constructor.apply(this, arguments);


    this._doUpdateFilterRow();
    this._doUpdateSummaryRow();

    this.doUpdate();


    if (mini.isNull(this._paddingTop)) {

        if (mini.isNull(mini.GridView._paddingTop)) {
            var d = jQuery('<div class="mini-grid-cell-inner" style="position:absolute;left:-1000px;top:-1000px;"></div>').appendTo('body');
            var p = mini.getPaddings(d);
            mini.GridView._paddingTop = p.top;
            mini.GridView._paddingBottom = p.bottom;
        }
        this._paddingTop = mini.GridView._paddingTop;
        this._paddingBottom = mini.GridView._paddingBottom;
    }

    this._rowClsHash = {};

}
mini.extend(mini.GridView, mini.Panel, {
    _displayStyle: "block",

    _rowIdField: "_id",

    width: "100%",

    showSortIcon: false,

    showColumns: true,
    showFilterRow: false,
    showSummaryRow: false,
    summaryRows: 1,
    showPager: false,

    allowCellWrap: false,
    allowHeaderWrap: false,

    showModified: true,
    showNewRow: true,

    showEmptyText: false,
    emptyText: "No data returned.",

    showHGridLines: true,
    showVGridLines: true,

    _rowCls: "mini-grid-row",
    _cellCls: "mini-grid-cell",
    _headerCellCls: "mini-grid-headerCell",

    _rowSelectedCls: "mini-grid-row-selected",
    _rowHoverCls: "mini-grid-row-hover",

    _cellSelectedCls: "mini-grid-cell-selected",

    defaultRowHeight: 25,
    fixedRowHeight: false,
    isFixedRowHeight: function () {
        return this.fixedRowHeight;
    },

    fitColumns: true,
    isFitColumns: function () {
        return this.fitColumns;
    },

    allowAlternating: false,
    _alternatingCls: "mini-grid-row-alt",
    getAllowAlternating: function () {
        return this.allowAlternating;
    },
    setAllowAlternating: function (value) {
        this.allowAlternating = value;
        this.doUpdate();
    },

    showGroupSummary: false,
    getShowGroupSummary: function () {
        return this.showGroupSummary;
    },
    setShowGroupSummary: function (value) {
        this.showGroupSummary = value;
    },

    summaryPosition: "bottom",      //top, flow?
    getSummaryPosition: function () {
        return this.summaryPosition;
    },
    setSummaryPosition: function (value) {

        this.summaryPosition = value;


        //alert(this.summaryPosition);
        if (this.summaryPosition == "top") {
            mini.before(this._rowsEl, this._summaryEl);
            mini.before(this._summaryViewEl, this._summaryLockEl);
        }

        jQuery(this.el).toggleClass('mini-grid-summary-top', value == 'top');

    },

    uiCls: "mini-gridview",
    _create: function () {

        mini.GridView.superclass._create.call(this);
        var el = this.el;
        mini.addClass(el, 'mini-grid');
        mini.addClass(this._borderEl, 'mini-grid-border');
        mini.addClass(this._viewportEl, 'mini-grid-viewport');

        var bottomPager = '<div class="mini-grid-pager"></div>';
        var filter = '<div class="mini-grid-filterRow"><div class="mini-grid-filterRow-view"></div><div class="mini-grid-scrollHeaderCell"></div></div>';
        var summary = '<div class="mini-grid-summaryRow"><div class="mini-grid-summaryRow-view"></div><div class="mini-grid-scrollHeaderCell"></div></div>';
        var columns = '<div class="mini-grid-columns"><div class="mini-grid-columns-view"></div><div class="mini-grid-scrollHeaderCell"></div></div>';


        this._columnsEl = mini.after(this._toolbarEl, columns);
        this._filterEl = mini.after(this._columnsEl, filter);
        this._rowsEl = this._bodyEl;
        mini.addClass(this._rowsEl, "mini-grid-rows");

        this._summaryEl = mini.after(this._rowsEl, summary);



        this._bottomPagerEl = mini.after(this._summaryEl, bottomPager);

        this._columnsViewEl = this._columnsEl.childNodes[0];
        //this._topRightCellEl = this._columnsEl.childNodes[1];

        //内嵌一个div(zoom:1)，消除ie7下横向滚动条BUG
        this._rowsViewEl = mini.append(this._rowsEl, '<div class="mini-grid-rows-view"><div class="mini-grid-rows-content"></div></div>')
        this._rowsViewContentEl = this._rowsViewEl.firstChild;

        //filter
        this._filterViewEl = this._filterEl.childNodes[0];
        //summary
        this._summaryViewEl = this._summaryEl.childNodes[0];

        var s = '<a href="#" class="mini-grid-focus" style="position:absolute;left:0px;top:0px;width:0px;height:0px;outline:none;" hideFocus onclick="return false" ></a>';
        this._focusEl = mini.append(this._borderEl, s);

        //        if (mini.isChrome) {
        //            $(this._focusEl).remove();

        //            var s = '<div tabindex=0 class="mini-grid-focus" style="position:absolute;left:0px;top:0px;width:0px;height:0px;outline:none;" hideFocus onclick="return false" ></div>';
        //            this._focusEl = mini.append(this._borderEl, s);

        //            
        //        }

        //this._focusEl.onfocus = function
        //        mini.on(this._focusEl, "focus", function (e) {
        //            e.preventDefault();
        //        });
        var me = this;
        mini.on(this._filterViewEl, "scroll", function (e) {
            if (me._filterViewEl.scrollLeft > 0) {
                me._filterViewEl.scrollLeft = 0;
            }
        });
    },
    destroy: function (removeEl) {

        if (this._dataSource) {
            this._dataSource.destroy();
            this._dataSource = null;
        }
        if (this._columnModel) {
            this._columnModel.destroy();
            this._columnModel = null;
        }
        if (this._pagers) {
            var ps = this._pagers.clone();
            for (var i = 0, l = ps.length; i < l; i++) {
                ps[i].destroy(removeEl);
            }

            this._pagers = null;
        }
        if (this._viewportEl) {
            mini.clearEvent(this._viewportEl);
        }

        if (this._rowsViewEl) {
            mini.clearEvent(this._rowsViewEl);
        }
        if (this._rowsEl) {                      //FrozenGridView
            mini.clearEvent(this._rowsEl);
        }
        if (this._vscrollEl) {                   //ScrollGridView
            mini.clearEvent(this._vscrollEl)
        }

        if (this._headerEl) {                     //_Sorter
            mini.clearEvent(this._headerEl)
        }
        if (this._columnsEl) {
            jQuery(this._columnsEl).unbind("mouseenter");    //_Grid_Select
            jQuery(this._columnsEl).unbind("mouseleave");
        }

        this._columnsEl = this._rowsEl = this._filterEl = this._summaryEl = this._bottomPagerEl = null;
        this._columnsViewEl = this._topRightCellEl = this._rowsViewEl = this._rowsViewContentEl = null;
        this._filterViewEl = this._summaryViewEl = this._focusEl = null;
        this._viewportEl = this._vscrollEl = this._bottomPager = null;

        mini.GridView.superclass.destroy.call(this, removeEl);
    },
    _initEvents: function () {
        mini.GridView.superclass._initEvents.call(this);

        this._bindScrollEvent();

        //this._unbindScrollEvent();
    },

    //    count1: 0,
    //    count2: 0,

    _bindScrollEvent: function () {
        var me = this;
        this._unbindScrollEvent();
        this._scrollBindTimer = setTimeout(function () {
            //$("#div1").html(me.count1++);
            mini.on(me._rowsViewEl, "scroll", me.__OnRowViewScroll, me);
        }, 100);
    },

    _unbindScrollEvent: function () {
        var me = this;
        if (this._scrollBindTimer) {
            clearTimeout(this._scrollBindTimer);
            this._scrollBindTimer = null;
        }
        //$("#div2").html(me.count2++);
        mini.un(this._rowsViewEl, "scroll", this.__OnRowViewScroll, this);
    },

    _syncScrollOffset: function (left, top) {
        this._unbindScrollEvent();
        if (left != null) {
            this._rowsViewEl.scrollLeft = left;
        }
        if (top != null) {

            //debugger
            this._rowsViewEl.scrollTop = top;
            if (this._vscrollEl) {
            }
        }
        this._bindScrollEvent();
    },

    //    _sizeChanged: function () {
    //        this.deferLayout();
    //    },
    _sizeChanged: function () {
        mini.GridView.superclass._sizeChanged.call(this);
        /*if (this.isAutoHeight()) {
        mini.addClass(this.el, 'mini-grid-autoheight');
        } else {
        mini.removeClass(this.el, 'mini-grid-autoheight');
        }*/

        var autoHeight = this.isAutoHeight();
        if (mini.isIE) {
            if (autoHeight) {
                mini.addClass(this._rowsViewEl, 'mini-grid-hidden-y');
            } else {
                mini.removeClass(this._rowsViewEl, 'mini-grid-hidden-y');
            }
        }

    },
    _setBodyWidth: false,

    doLayoutCardView: function () {
        var me = this,
            hasVScroll = this._rowsViewEl.scrollHeight > this._rowsViewEl.clientHeight + 1,
            hdTable = this._columnsViewEl.firstChild,
            paddingRight = hasVScroll ? mini.getScrollOffset() : 0;

        //        var bodyWidth = this._rowsViewContentEl.parentNode.offsetWidth;
        //        var tableWidth = bodyWidth - (hasVScroll ? mini.getScrollOffset() : 0);
        //        hdTable.style.width = tableWidth + "px";

        hdTable.parentNode.style["paddingRight"] = paddingRight + "px";
        hdTable.style.width = "100%";

    },

    doLayout: function () {
        var that = this;
        if (!this.canLayout()) return;
        mini.GridView.superclass.doLayout.call(this);

        //alert("layout:" + this.id);

        this._stopLayout();

        if (this.viewType == "cardview") {
            this.doLayoutCardView();
            return;
        }

        var autoHeight = this._autoHeight; // this.isAutoHeight();

        if (mini.isIE) {
            if (autoHeight) {
                mini.addClass(this._rowsViewEl, 'mini-grid-hidden-y');
            } else {
                mini.removeClass(this._rowsViewEl, 'mini-grid-hidden-y');
            }
        }

        var hdTable = this._columnsViewEl.firstChild;
        var bdTable = this._rowsViewContentEl.firstChild;

        var filterTable = this._filterViewEl.firstChild;
        var summaryTable = this._summaryViewEl.firstChild;

        var columnHeight = jQuery(this._columnsViewEl).height();
        var filterRowHeight = filterTable.offsetHeight;

        var hasVScroll = this._rowsViewEl.scrollHeight > this._rowsViewEl.clientHeight + 1;
        var hasHScroll = this._rowsViewEl.scrollWidth > this._rowsViewEl.clientWidth + 1;

        //alert(hasVScroll + "," + hasHScroll);

        var bodyWidth = this._rowsViewContentEl.parentNode.offsetWidth;
        //var tableWidth = bdTable.parentNode.offsetWidth;
        var tableWidth = bodyWidth - (hasVScroll ? mini.getScrollOffset() : 0);
        //alert(tableWidth);
        //document.title = tableWidth;

        //        if (autoHeight) {
        //            mini.addClass(this.el, 'mini-grid-autoHeight');
        //        } else {
        //            mini.removeClass(this.el, 'mini-grid-autoHeight');
        //        }

        //alert(mini.isChrome);

        function doLayout(hdTable) {
            //fitColumns

            if (this.isFitColumns()) {
                bdTable.style.width = "100%";
                //if(that.id == 'employee_grid') debugger

                //                if (mini.isChrome) {                   
                //                    if (hasVScroll) {
                //                        if (filterTable != hdTable) {
                //                            hdTable.style["paddingRight"] = mini.getScrollOffset() + "px";
                //                        }
                //                    } else {
                //                        hdTable.style["paddingRight"] = "0px";
                //                    }
                //                } else 
                if (mini.isSafari || mini.isIE6) {
                    //alert(bdTable.offsetWidth);
                    //                    if (mini.isIE6) {
                    //                        hdTable.style.width = (bdTable.offsetWidth + 2) + "px";
                    //                    } else {
                    //hdTable.style.width = bdTable.offsetWidth + "px";
                    hdTable.style.width = tableWidth + "px";
                    //}

                } else {
                    //alert(hasVScroll);
                    //if (this._rowsViewEl.scrollHeight > this._rowsViewEl.clientHeight + 1) {
                    if (hasVScroll) {

                        hdTable.style.width = "100%";
                        hdTable.parentNode.style.width = "auto";
                        //hdTable.parentNode.style["paddingRight"] = "17px";
                        if (filterTable != hdTable) {
                            hdTable.parentNode.style["paddingRight"] = mini.getScrollOffset() + "px";
                        }
                        //var 

                        if (mini.isIE8) mini.removeClass(this._rowsViewEl, 'mini-grid-hidden-y');
                    } else {
                        hdTable.style.width = "100%";
                        hdTable.parentNode.style.width = "auto";
                        hdTable.parentNode.style["paddingRight"] = "0px";

                        if (mini.isIE8) mini.addClass(this._rowsViewEl, 'mini-grid-hidden-y');
                    }
                    //alert(hdTable.parentNode.style["paddingRight"]);
                    // mini.repaint(hdTable.parentNode);
                }
            } else {
                bdTable.style.width = "0px";
                hdTable.style.width = "0px";
                if (mini.isSafari || mini.isChrome || mini.isIE6) {
                    //hdTable.style.width = bdTable.offsetWidth + "px";
                } else {
                    hdTable.parentNode.style.width = "100%";
                    hdTable.parentNode.style["paddingRight"] = "0px";
                }
            }

        }

        //if(hasVScroll) debugger
        doLayout.call(this, hdTable);

        doLayout.call(this, filterTable);
        doLayout.call(this, summaryTable);


        //
        this._syncScroll();

        var me = this;
        setTimeout(function () {
            mini.layout(me._filterEl);
            mini.layout(me._summaryEl);


        }, 10);

        if (mini.isIE6) {
            setTimeout(function () {
                doLayout.call(that, hdTable);
            }, 1);
        }

        //if (mini.isIE10 && this.isFrozen()) {
        if (mini.isIE10) {
            //fix ie10
            setTimeout(function () {
                if (me.isFitColumns()) {
                    hdTable.style.width = 'auto';
                    hdTable.offsetWidth;
                    hdTable.style.width = '100%';
                } else {
                    hdTable.style.width = '0px';

                }
            }, 0);
            mini.repaint(bdTable);
        }


        this._topRightCellEl = this._columnsViewEl.childNodes[1];

        if (mini.isIE6) {
            this._topRightCellEl.style.height = columnHeight; //jQuery(this._columnsViewEl).height() + "px";
        }
        //alert("grid layout");


        //ie6, ie7 有横向滚动条，且高度auto时
        if (mini.isIE6 || mini.isIE7) {
            this._rowsViewContentEl.style["paddingBottom"] = "0px";
            if (autoHeight) {
                //var hasHScroll = this._rowsViewEl.scrollWidth > this._rowsViewEl.clientWidth + 1;
                if (hasHScroll) {
                    this._rowsViewContentEl.style["paddingBottom"] = "17px";
                }
            }
        }

        this._filterViewEl.style.height = filterRowHeight + "px";

        filterTable.style.width = this.isFitColumns() ? (tableWidth + "px") : "";          //@@@

        //alert(filterTable.style.width);

        //filterTable.parentNode.style["paddingRight"] = summaryTable.parentNode.style.paddingRight;

    },
    setBody: function () { },
    /////////////////////////
    //------------  Update/Layout -----------//

    //    _hasSpaceTd: function () {
    //        return true;
    //    },

    _createTopRowHTML: function (columns, flag, data) {
        var s = "";
        if (mini.isIE) {
            if (mini.isIE6 || mini.isIE7 || !mini.boxModel) {
                //if (mini.isIE6 || mini.isIE7) {
                s += '<tr style="display:none;height:0px;">';
            } else {
                s += '<tr style="height:0px;">';
            }
            //s += '<tr style="height:0px;">';
        } else {

            if (mini.isChrome && data && data.length == 0) {
                s += '<tr style="height:1px;">';
            } else {
                s += '<tr style="height:0px;">';
            }
        }

        if (this._userEmptyTd !== false) s += '<td style="height:0px;width:0;"></td>';


        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            var width = column.width;
            var id = column._id;
            s += '<td id="' + id + '" style="padding:0;border:0;margin:0;height:0px;';


            if (column.width) s += 'width:' + column.width;


            if (column.minWidth) s += ';min-width:' + column.minWidth + "px";

            s += '" ></td>';
        }
        s += '<td style="width:0px;"></td>';
        s += "</tr>";
        return s;
    },

    _createColumnsHTML: function (rows, viewIndex, visibleColumns) {
        var visibleColumns = visibleColumns ? visibleColumns : this.getVisibleColumns();
        var sb = ['<table class="mini-grid-table" cellspacing="0" cellpadding="0" border="0">'];
        sb.push(this._createTopRowHTML(visibleColumns));


        var sortField = this.getSortField();
        var sortOrder = this.getSortOrder();

        for (var j = 0, k = rows.length; j < k; j++) {
            var columns = rows[j];
            sb[sb.length] = '<tr>';
            sb[sb.length] = '<td style="width:0;"></td>';
            for (var i = 0, l = columns.length; i < l; i++) {
                var column = columns[i];
                var _sortField = column.sortField || column.field;

                var headerText = this._createHeaderText(column, viewIndex);

                var columnId = this._createHeaderCellId(column, viewIndex)

                //if(column.name == "name1") debugger

                var sortCls = "";
                if (sortField && sortField == _sortField) {
                    sortCls = sortOrder == "asc" ? "mini-grid-asc" : "mini-grid-desc";
                }
                var cls = "";
                if (this.allowHeaderWrap == false) {
                    cls = " mini-grid-headerCell-nowrap ";
                }

                sb[sb.length] = '<td id="';
                sb[sb.length] = columnId;
                sb[sb.length] = '" class="mini-grid-headerCell ' + sortCls + ' ' + (column.headerCls || "") + ' ';

                var isButtom = !(column.columns && column.columns.length > 0)
                if (isButtom) sb[sb.length] = ' mini-grid-bottomCell ';
                if (i == l - 1) sb[sb.length] = ' mini-grid-rightCell ';

                sb[sb.length] = '" style="';
                if (column.headerStyle) {

                    sb[sb.length] = column.headerStyle + ';';
                }
                if (column.headerAlign) {
                    sb[sb.length] = 'text-align:' + column.headerAlign + ';';
                }

                sb[sb.length] = '" ';

                if (column.rowspan) {
                    sb[sb.length] = 'rowspan="' + column.rowspan + '" ';
                }
                this._createColumnColSpan(column, sb, viewIndex);

                sb[sb.length] = '><div class="mini-grid-headerCell-outer"><div class="mini-grid-headerCell-inner ' + cls + '">';

                sb[sb.length] = headerText;

                if (sortCls) {
                    sb[sb.length] = '<span class="mini-grid-sortIcon mini-icon"></span>';
                } else {
                    if (this.showSortIcon) {
                        if (column.allowSort) {
                            sb[sb.length] = '<span class="mini-grid-allowsort mini-icon"></span>';
                        }
                    }
                }

                sb[sb.length] = '</div><div id="' + column._id + '" class="mini-grid-column-splitter"></div>';

                sb[sb.length] = '</div></td>';
            }

            //space column
            if (this.isFrozen() && viewIndex == 1) {
                sb[sb.length] = '<td class="mini-grid-headerCell" style="width:0;"><div class="mini-grid-headerCell-inner" style="';

                //sb[sb.length] = '">&nbsp;</div></td>';
                sb[sb.length] = '">0</div></td>';
            }

            sb[sb.length] = '</tr>';
        }
        sb.push('</table>');
        return sb.join('');
    },
    _createHeaderText: function (column, viewIndex) {
        var header = column.header;
        if (typeof header == "function") header = header.call(this, column);
        if (mini.isNull(header) || header === "") header = "&nbsp;";
        return header;
    },
    _createColumnColSpan: function (column, sb, viewIndex) {
        if (column.colspan) {
            sb[sb.length] = 'colspan="' + column.colspan + '" ';
        }
    },
    doUpdateColumns: function () {
        var scrollLeft = this._columnsViewEl.scrollLeft;

        var columnRows = this.getVisibleColumnsRow();
        var html = this._createColumnsHTML(columnRows, 2);
        var s = '<div class="mini-grid-topRightCell"></div>';
        html += s;
        this._columnsViewEl.innerHTML = html;

        this._columnsViewEl.scrollLeft = scrollLeft;
    },
    doUpdate: function () {
        if (this.canUpdate() == false) return;
        var that = this;

        //创建组件100毫秒内，rows延迟创建，提升初始化时性能表现（避免了多次setColumns/setData时的重新创建整个表格开销）
        var defer = this._isCreating();

        var sss = new Date();

        this._doUpdateSummaryRow();

        var me = this;

        var scrollLeft = this.getScrollLeft();


        //alert(1);

        function doUpdate() {
            if (!me.el) return;
            me.doUpdateColumns();

            //rows            


            if (that.viewType == "cardview") {
                me.updateCardView();
            } else {
                me.doUpdateRows();
            }

            me.doLayout();
            me._doUpdateTimer = null;
            //alert(new Date() - sss);


        }

        //columns
        me.doUpdateColumns();

        //        if (this._doUpdateTimer) {
        //            this.doLayout();
        //            return;
        //        }

        //EmptyView
        if (defer) {
            this._useEmptyView = true;
        }

        //移除行
        //        if (this._rowsViewContentEl && this._rowsViewContentEl.firstChild) {
        //            this._rowsViewContentEl.removeChild(this._rowsViewContentEl.firstChild);
        //        }
        //        if (this._rowsLockContentEl && this._rowsLockContentEl.firstChild) {
        //            this._rowsLockContentEl.removeChild(this._rowsLockContentEl.firstChild);
        //        }
        this._doRemoveRowContent();

        //var sss = new Date();

        if (that.viewType == "cardview") {
            me.updateCardView();
        } else {
            me.doUpdateRows();
        }

        //alert(new Date() - sss);

        if (scrollLeft > 0 && me.isVirtualScroll()) {
            //me.setScrollLeft(scrollLeft);
            me._syncScrollOffset(scrollLeft);
        }

        if (defer) {
            this._useEmptyView = false;
        }
        me.doLayout();
        if (defer && !this._doUpdateTimer) {
            this._doUpdateTimer = setTimeout(doUpdate, 15);
        }
        this.unmask();

        if (that._fireUpdateTimer) {
            clearTimeout(that._fireUpdateTimer);
            that._fireUpdateTimer = null;
        }
        that._fireUpdateTimer = setTimeout(function () {
            that._fireUpdateTimer = null;
            that.fire("update");
        }, 100);

    },

    _doRemoveRowContent: function () {
        if (this._rowsViewContentEl && this._rowsViewContentEl.firstChild) {
            this._rowsViewContentEl.removeChild(this._rowsViewContentEl.firstChild);
        }
        if (this._rowsLockContentEl && this._rowsLockContentEl.firstChild) {
            this._rowsLockContentEl.removeChild(this._rowsLockContentEl.firstChild);
        }
    },

    /////////////////////////////////////////
    _isCreating: function () {
        return (new Date() - this._createTime) < 1000;
    },
    deferUpdate: function (time) {

        if (!time) time = 5;
        if (this._updateTimer || this._doUpdateTimer) return;
        var me = this;
        this._updateTimer = setTimeout(function () {
            me._updateTimer = null;
            me.doUpdate();
        }, time);
    },
    _stopDeferUpdate: function () {
        if (this._updateTimer) {
            clearTimeout(this._updateTimer);
            this._updateTimer = null;
        }
    },
    _pushUpdateCallback: function (fn, scope, args) {
        var time = 0;

        if (this._doUpdateTimer || this._updateTimer) time = 20;
        //alert(time);
        if (time == 0) {
            fn.apply(scope, args);
        } else {
            setTimeout(function () {
                fn.apply(scope, args);
            }, time);
        }
    },
    _updateCount: 0,
    beginUpdate: function () {
        this._updateCount++;
    },
    endUpdate: function (raise) {
        this._updateCount--;
        if (this._updateCount == 0 || raise === true) {
            this._updateCount = 0;
            this.doUpdate();
        }
    },
    canUpdate: function () {
        //return this._updateCount == 0 && this.isRender();
        return this._updateCount == 0;
    },
    /////////////////////////////////////////
    setDefaultRowHeight: function (value) {
        this.defaultRowHeight = value;
    },
    getDefaultRowHeight: function () {
        return this.defaultRowHeight;
    },
    _getRowHeight: function (record) {

        //if(

        var h = this.defaultRowHeight;
        if (record._height) {
            h = parseInt(record._height);
            if (isNaN(parseInt(record._height))) h = rowHeight;
        }
        //h -= 4; //padding-top/padding-bottom

        h = h - this._paddingTop - this._paddingBottom;

        //if (!mini.isOpera) {
        h -= 1;
        //}
        return h;
    },
    _createGroupingHTML: function (columns, viewIndex) {

        var groups = this.getGroupingView();
        var showGroupSummary = this.showGroupSummary;

        var isFrozen = this.isFrozen();

        var rowIndex = 0;
        var me = this;
        function createRows(rows, group) {
            sb.push('<table class="mini-grid-table" cellspacing="0" cellpadding="0" border="0">');
            if (columns.length > 0) {
                sb.push(me._createTopRowHTML(columns));
                for (var j = 0, k = rows.length; j < k; j++) {
                    var row = rows[j];
                    me._createRowHTML(row, rowIndex++, columns, viewIndex, sb);
                }
            }

            sb.push('</table>');
        }

        var groupTitleCollapsible = this.groupTitleCollapsible !== false;

        var sb = ['<table class="mini-grid-table" cellspacing="0" cellpadding="0" border="0">'];
        sb.push(this._createTopRowHTML(columns));
        for (var j = 0, k = groups.length; j < k; j++) {

            if (viewIndex == 1 && !this.isFrozen()) continue;

            var group = groups[j];
            var id = this._createRowGroupId(group, viewIndex);
            var rowid = this._createRowGroupRowsId(group, viewIndex);
            var e = this._OnDrawGroup(group);
            var cls = group.expanded ? '' : ' mini-grid-group-collapse ';

            //group header
            sb[sb.length] = '<tr id="';
            sb[sb.length] = id;
            sb[sb.length] = '" class="mini-grid-groupRow';
            sb[sb.length] = cls;
            //sb[sb.length] = '"><td class="mini-grid-groupCell ';
            sb[sb.length] = '"><td style="width:0;"></td><td class="mini-grid-groupCell ';

            sb[sb.length] = e.cls;
            sb[sb.length] = '" style="';
            sb[sb.length] = e.style;
            sb[sb.length] = '" colspan="';
            sb[sb.length] = columns.length;
            //sb[sb.length] = '"><div class="mini-grid-groupHeader">';
            sb[sb.length] = '"><div class="mini-grid-groupHeader ';
            if (groupTitleCollapsible) {
                sb[sb.length] = 'mini-grid-groupHeader-collapsible';
            }
            sb[sb.length] = '">';


            if (!isFrozen || (isFrozen && viewIndex == 1)) {
                sb[sb.length] = '<div class="mini-grid-group-ecicon"></div>';
                sb[sb.length] = '<div class="mini-grid-groupTitle">' + e.cellHtml + '</div>';
            } else {
                sb[sb.length] = "&nbsp;";
            }
            sb[sb.length] = '</div></td></tr>';

            //group.expanded = false;

            var style = group.expanded ? "" : "display:none";
            sb[sb.length] = '<tr class="mini-grid-groupRows-tr" style="';



            //if (mini.isIE) sb[sb.length] = style;
            //sb[sb.length] = '"><td class="mini-grid-groupRows-td" colspan="';
            sb[sb.length] = '"><td style="width:0;"></td><td class="mini-grid-groupRows-td" colspan="';

            sb[sb.length] = columns.length;
            sb[sb.length] = '"><div id="';
            sb[sb.length] = rowid;
            sb[sb.length] = '" class="mini-grid-groupRows" style="';
            if (mini.isChrome) sb[sb.length] = 'margin-left:-1px;';
            sb[sb.length] = style;
            sb[sb.length] = '">';
            createRows(group.rows, group);
            sb[sb.length] = '</div></td></tr>';

            //分组汇总
            if (showGroupSummary) {
                //sb.push('<table class="mini-grid-table" cellspacing="0" cellpadding="0" border="0">');
                if (columns.length > 0) {
                    //                    sb.push(me._createTopRowHTML(columns));
                    //                    for (var j = 0, k = rows.length; j < k; j++) {
                    //                        var row = rows[j];
                    //                        me._createRowHTML(row, rowIndex++, columns, viewIndex, sb);
                    //                    }



                    sb[sb.length] = '<tr class="mini-grid-groupFooter">';
                    sb[sb.length] = '<td style="width:0;"></td>';
                    for (var i = 0, l = columns.length; i < l; i++) {
                        var column = columns[i];
                        var id = ""; //this._createSummaryCellId(column);

                        //if(column.field == 'age') debugger

                        var e = this._OnDrawSummaryCell(group.rows, column, group);

                        sb[sb.length] = '<td id="';
                        sb[sb.length] = id;
                        sb[sb.length] = '" class="mini-grid-cell ' + e.cellCls + '" style="' + e.cellStyle + ';';
                        sb[sb.length] = '"><div class="mini-grid-cell-inner">';
                        sb[sb.length] = e.cellHtml;
                        sb[sb.length] = '</div></td>';
                    }
                    sb[sb.length] = '</tr>';

                }

                //sb.push('</table>');
            }

        }
        sb.push('</table>');
        return sb.join('');
    },

    _isFastCreating: function () {
        //return false;
        var data = this.getVisibleRows();
        if (data.length > 50) {
            return this._isCreating() || this.getScrollTop() < 50 * this._defaultRowHeight;
        }
        return false;
    },
    isShowRowDetail: function (row) {
        return false;
    },
    isCellValid: function (record, column) {
        return true;
    },


    /////////////////////////////////////////////////////////

    //创建cardview视图
    updateCardView: function () {

        var me = this,
            data = this.getVisibleRows(),
            columns = this.getVisibleColumns(),
            sb = [];

        for (var i = 0, l = data.length; i < l; i++) {
            var record = data[i];
            var meta = { rowCls: "", rowStyle: "" };
            var html = me.itemRenderer(record, i, meta, me);
            sb[sb.length] = '<div class="mini-grid-row ';
            sb[sb.length] = meta.rowCls;
            sb[sb.length] = '" style="';
            sb[sb.length] = meta.rowStyle;
            sb[sb.length] = '" id="';
            sb[sb.length] = me._createRowId(record, 1);
            sb[sb.length] = '">';
            sb[sb.length] = html;
            sb[sb.length] = '</div>';
        }

        me._rowsViewContentEl.innerHTML = sb.join('');

    },

    itemRenderer: function (record, rowIndex, meta, grid) {
        return "";
    },

    /////////////////////////////////////////////////////////

    _createRowHTML: function (record, rowIndex, columns, viewIndex, sb) {
        var isReturn = !sb;
        if (!sb) sb = [];
        var rowHeight = "";
        var isFixedRowHeight = this.isFixedRowHeight();
        if (isFixedRowHeight) {
            rowHeight = this._getRowHeight(record);
        }
        var defaultRowHeight = this.defaultRowHeight - 1;

        var rowClsIndex = -1;
        var rowCls = " ";
        var rowStyleIndex = -1;
        var rowStyle = " ";

        sb[sb.length] = '<tr class="mini-grid-row ';

        if (record._state == "added" && this.showNewRow) sb[sb.length] = "mini-grid-newRow ";
        if (this.isShowRowDetail(record)) sb[sb.length] = "mini-grid-expandRow ";

        if (this.allowAlternating && rowIndex % 2 == 1) {
            sb[sb.length] = this._alternatingCls;
            sb[sb.length] = " ";
        }

        //if (record._id == 1) debugger

        var _rowClsSb = this._rowClsHash[record._id];
        if (_rowClsSb) {

            sb[sb.length] = _rowClsSb.join(' ');
            sb[sb.length] = " ";
        }

        //选择的样式不在_rowClsHash中处理
        //if (!_rowClsSb || _rowClsSb.indexOf(this._rowSelectedCls) == -1) {
        var isSelected = this._dataSource.isSelected(record);
        if (isSelected) {
            sb[sb.length] = this._rowSelectedCls;
            sb[sb.length] = " ";
        }
        //}

        rowClsIndex = sb.length;
        sb[sb.length] = rowCls;
        sb[sb.length] = '" style="';
        rowStyleIndex = sb.length;
        sb[sb.length] = rowStyle;

        //@ 2017-11-06 是否不应该修改？
        //        if (record.visible === false) {
        //            sb[sb.length] = ";display:none;";
        //        }

        sb[sb.length] = '" id="';
        sb[sb.length] = this._createRowId(record, viewIndex);
        sb[sb.length] = '">';

        if (this._userEmptyTd !== false) sb[sb.length] = '<td style="width:0;"></td>';

        var _currentCell = this._currentCell;

        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            var cellId = this._createCellId(record, column);

            var cls = "";

            //var e = this._OnDrawCell(record, column, rowIndex, column._index, i, columns.length, isFrozen, viewIndex);
            var e = this._OnDrawCell(record, column, rowIndex, column._index);
            if (e.cellHtml === null || e.cellHtml === undefined || e.cellHtml === "") {
                e.cellHtml = "&nbsp;";
            }

            sb[sb.length] = '<td ';
            if (e.rowSpan) {
                sb[sb.length] = 'rowspan="' + e.rowSpan + '"';
            }
            if (e.colSpan) {
                sb[sb.length] = 'colspan="' + e.colSpan + '"';
            }
            sb[sb.length] = ' id="';
            sb[sb.length] = cellId;

            sb[sb.length] = '" class="mini-grid-cell ';

            if (!this.isCellValid(record, column)) sb[sb.length] = ' mini-grid-cell-error ';

            if (i == l - 1) sb[sb.length] = ' mini-grid-rightCell ';

            if (e.cellCls) sb[sb.length] = ' ' + e.cellCls + ' ';
            if (cls) sb[sb.length] = cls;

            if (_currentCell && _currentCell[0] == record && _currentCell[1] == column) {
                sb[sb.length] = " ";
                sb[sb.length] = this._cellSelectedCls;
            }

            sb[sb.length] = '" style="';
            if (e.showHGridLines == false) {
                sb[sb.length] = 'border-bottom:0;';
            }
            if (e.showVGridLines == false) {
                sb[sb.length] = 'border-right:0;';
            }

            if (!e.visible) sb[sb.length] = "display:none;";

            if (column.align) {
                sb[sb.length] = 'text-align:';
                sb[sb.length] = column.align;
                sb[sb.length] = ';';
            }

            if (e.cellStyle) sb[sb.length] = e.cellStyle;

            sb[sb.length] = '">';
            sb[sb.length] = '<div class="mini-grid-cell-inner ';

            var cellWrap = column.allowCellWrap;
            if (!cellWrap) cellWrap = e.allowCellWrap;
            if (!cellWrap) {
                //if (!e.allowCellWrap || !column.allowCellWrap) {
                //if (!e.allowCellWrap) {
                //if (!column.allowCellWrap) {
                sb[sb.length] = ' mini-grid-cell-nowrap ';
            }


            if (e.cellInnerCls) {
                sb[sb.length] = e.cellInnerCls;
            }

            var isModified = column.field ? this._dataSource.isModified(record, column.field) : false;
            if (isModified && this.showModified) {
                sb[sb.length] = ' mini-grid-cell-dirty';
            }


            sb[sb.length] = '" style="';
            if (isFixedRowHeight) {

                sb[sb.length] = 'height:';
                //sb[sb.length] = rowHeight;

                if (!column.name || this._treeColumn !== column.name) {
                    sb[sb.length] = rowHeight;
                } else {
                    sb[sb.length] = defaultRowHeight;
                }

                sb[sb.length] = 'px;';
                sb[sb.length] = 'line-height:';
                //sb[sb.length] = rowHeight;

                if (!column.name || this._treeColumn !== column.name) {
                    sb[sb.length] = rowHeight;
                } else {
                    sb[sb.length] = defaultRowHeight;
                }

                sb[sb.length] = 'px;';
            }
            if (e.cellInnerStyle) {
                sb[sb.length] = e.cellInnerStyle;
            }
            sb[sb.length] = '">';
            sb[sb.length] = e.cellHtml;
            sb[sb.length] = '</div>';
            sb[sb.length] = '</td>';

            if (e.rowCls) rowCls = e.rowCls;
            if (e.rowStyle) rowStyle = e.rowStyle;
        }
        //space column
        if (this.isFrozen() && viewIndex == 1) {
            sb[sb.length] = '<td class="mini-grid-cell" style="width:0;';
            if (this.showHGridLines == false) {
                sb[sb.length] = 'border-bottom:0;';
            }
            sb[sb.length] = '"><div class="mini-grid-cell-inner" style="';
            if (isFixedRowHeight) {
                sb[sb.length] = 'height:';
                sb[sb.length] = rowHeight;
                sb[sb.length] = 'px;';
            }
            //sb[sb.length] = '">&nbsp;</div></td>';
            sb[sb.length] = '">0</div></td>';
        }

        sb[rowClsIndex] = rowCls;
        sb[rowStyleIndex] = rowStyle;

        sb[sb.length] = '</tr>';

        if (isReturn) {
            var s = sb.join('');
            //var reg = /<script[^>]*>.*(?=<\/script(\s)*>)<\/script(\s)*>/gi;
            //var reg = /(<script(.*)<\/script(\s*)>)/i;
            var reg = /(<script(.*)<\/script(\s*)>)/i;
            s = s.replace(reg, "");

            return s;
        }
    },
    _createRowsHTML: function (columns, viewIndex, data, bottomHtml) {

        data = data || this.getVisibleRows();

        var sb = ['<table class="mini-grid-table mini-grid-rowstable" cellspacing="0" cellpadding="0" border="0">'];
        sb.push(this._createTopRowHTML(columns, true, data));

        var emptyId = this.uid + "$emptytext" + viewIndex;
        if (viewIndex == 2 && (this._dataSource.loaded || this.alwaysShowEmptyText)) {
            var style = (this.showEmptyText && data.length == 0) ? '' : 'display:none;';
            sb.push('<tr id="' + emptyId + '" style="' + style + '"><td style="width:0"></td><td class="mini-grid-emptyText" colspan="' + columns.length + '">' + this.emptyText + '</td></tr>');
        }

        var startIndex = 0;
        if (data.length > 0) {
            var first = data[0];
            startIndex = this.getVisibleRows().indexOf(first);

        }
        for (var j = 0, k = data.length; j < k; j++) {
            var rowIndex = startIndex + j;
            var record = data[j];
            this._createRowHTML(record, rowIndex, columns, viewIndex, sb);
        }

        if (bottomHtml) {
            sb.push(bottomHtml);
        }

        sb.push('</table>');

        return sb.join('');
    },

    doUpdateRows: function () {
        var data = this.getVisibleRows();

        var sss = new Date();

        var columns = this.getVisibleColumns();
        if (this.isGrouping()) {
            var html = this._createGroupingHTML(columns, 2);
            this._rowsViewContentEl.innerHTML = html;
        } else {
            var html = this._createRowsHTML(columns, 2, data);
            this._rowsViewContentEl.innerHTML = html;
        }

    },



    /////////////////////////////////////////////////////
    _createFilterRowHTML: function (columns, viewIndex) {
        var sb = ['<table class="mini-grid-table" cellspacing="0" cellpadding="0" border="0" style="position:absolute;top:0;left:0;height:100%;">'];
        sb.push(this._createTopRowHTML(columns));
        sb[sb.length] = '<tr>';
        sb[sb.length] = '<td style="width:0;"></td>';
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            var id = this._createFilterCellId(column);
            sb[sb.length] = '<td id="';
            sb[sb.length] = id;
            sb[sb.length] = '" class="mini-grid-filterCell" style="';
            sb[sb.length] = '">&nbsp;</td>';
        }
        sb[sb.length] = '</tr></table><div class="mini-grid-scrollHeaderCell"></div>';
        var s = sb.join('');
        return s;
    },
    _doRenderFilters: function () {
        //遍历columns，如果有filter对象，则render加入
        var columns = this.getVisibleColumns();
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            if (column.filter) {
                //if (column.field == 'name') debugger
                var cellEl = this.getFilterCellEl(column);
                if (cellEl) {
                    cellEl.innerHTML = "";
                    column.filter.render(cellEl);
                }
            }
        }
    },
    _doUpdateFilterRow: function () {
        if (this._filterViewEl.firstChild) {
            this._filterViewEl.removeChild(this._filterViewEl.firstChild);
        }
        var isFrozen = this.isFrozen();
        var columns = this.getVisibleColumns();

        var html = this._createFilterRowHTML(columns, 2);
        this._filterViewEl.innerHTML = html;

        this._doRenderFilters();
    },
    /////////////////////////////////////////////////////
    _createSummaryRowHTML: function (columns, viewIndex) {
        var records = this.getDataView();

        var sb = ['<table class="mini-grid-table" cellspacing="0" cellpadding="0" border="0">'];
        sb.push(this._createTopRowHTML(columns));

        for (var j = 0, k = this.summaryRows; j < k; j++) {
            sb[sb.length] = '<tr>';
            sb[sb.length] = '<td style="width:0;"></td>';
            for (var i = 0, l = columns.length; i < l; i++) {
                var column = columns[i];
                var id = this._createSummaryCellId(column, j);

                var e = this._OnDrawSummaryCell(records, column, null, j);

                sb[sb.length] = '<td id="';
                sb[sb.length] = id;
                sb[sb.length] = '" class="mini-grid-summaryCell ' + e.cellCls + '" style="' + e.cellStyle + ';';
                sb[sb.length] = '">';
                sb[sb.length] = e.cellHtml;
                sb[sb.length] = '</td>';
            }
            sb[sb.length] = '</tr>';
        }

        sb[sb.length] = '</table><div class="mini-grid-scrollHeaderCell"></div>';
        var s = sb.join('');
        return s;
    },
    _doUpdateSummaryRow: function () {
        if (!this.showSummaryRow) return;
        var columns = this.getVisibleColumns();
        var html = this._createSummaryRowHTML(columns, 2);
        this._summaryViewEl.innerHTML = html;
    },
    /////////////////////////////////////////////////////
    _doSortByField: function (sortField, sortOrder) {
        if (!sortField) return null;
        var dataType = this._columnModel._getDataTypeByField(sortField);
        this._dataSource._doClientSortField(sortField, sortOrder, dataType);
    },
    _expandGroupOnLoad: true,
    _GroupID: 1,
    _groupField: "",
    _groupDir: "",
    groupBy: function (field, dir) {
        if (!field) return;
        this._groupField = field;
        if (typeof dir == "string") dir = dir.toLowerCase();
        this._groupDir = dir;
        this._createGroupingView();
        this.deferUpdate();
    },
    clearGroup: function () {
        this._groupField = "";
        this._groupDir = "";
        this._groupDataView = null;
        this.deferUpdate();
    },
    setGroupField: function (value) {
        this.groupBy(value);
    },

    getGroupField: function () {
        return this._groupField;
    },

    getGroupDir: function () {
        return this._groupDir;
    },

    setGroupDir: function (value) {
        this._groupDir = field;
        this.groupBy(this._groupField, value);
    },
    isGrouping: function () {
        return this._groupField != "";
    },
    getGroupingView: function () {
        return this._groupDataView;
    },

    enableGroupOrder: true,
    _createGroupingView: function () {
        if (this.isGrouping() == false) return;
        this._groupDataView = null;

        var source = this._dataSource;

        var field = this._groupField, dir = this._groupDir;

        //1）分组排序

        if (this.enableGroupOrder || dir) {

            this._doSortByField(field, dir);          //分组时应该可以不用排序
        }

        //2）得到分组数据
        var data = this.getVisibleRows();
        var groups = [];
        var groupMaps = {};
        for (var i = 0, l = data.length; i < l; i++) {
            var o = data[i];
            var v = o[field];    //string, number, boolean, date
            var p = mini.isDate(v) ? v.getTime() : v;
            var group = groupMaps[p];
            if (!group) {
                group = groupMaps[p] = {};
                group.field = field,
                group.dir = dir;
                group.value = v;
                group.rows = [];
                groups.push(group);
                group.id = "g" + this._GroupID++;
                group.expanded = this._expandGroupOnLoad;
            }
            group.rows.push(o);
        }

        //3) groups 排序
        var sortField = source.sortField,
            sortOrder = source.sortOrder;

        if (sortField) {
            var dataType = this._columnModel._getDataTypeByField(sortField);
            var sortFn = source._getSortFnByField(sortField, dataType);
            if (sortFn) {
                var reverse = sortOrder == "desc";

                for (var i = 0, l = groups.length; i < l; i++) {
                    var group = groups[i];

                    mini.sort(group.rows, sortFn);
                    if (reverse) group.rows.reverse();
                }
                //this.sort(sortFn, this, reverse);
            }
        }

        this._groupDataView = groups;
    },
    _OnDrawGroup: function (group) {
        var e = {
            group: group,
            rows: group.rows,
            field: group.field,
            dir: group.dir,
            value: group.value,
            cls: "",
            style: "",
            cellHtml: group.field + " (" + group.rows.length + " Items)"
        };
        this.fire("drawgroup", e);
        return e;
    },
    getRowGroup: function (id) {
        var t = typeof id;
        if (t == "number") return this.getGroupingView()[id];
        if (t == "string") return this._getRowGroupById(id);
        return id;
    },
    _getRowGroupByEvent: function (e) {
        var t = mini.findParent(e.target, 'mini-grid-groupRow')
        if (t) {
            var ids = t.id.split("$");
            if (ids[0] != this._id) return null;
            var id = ids[ids.length - 1];
            return this._getRowGroupById(id);
        }
        return null;
    },
    _getRowGroupById: function (id) {
        var groups = this.getGroupingView();
        for (var i = 0, l = groups.length; i < l; i++) {
            var g = groups[i];
            if (g.id == id) return g;
        }
        return null;
    },
    _createRowGroupId: function (group, viewIndex) {
        return this._id + "$group" + viewIndex + "$" + group.id;
    },
    _createRowGroupRowsId: function (group, viewIndex) {
        return this._id + "$grouprows" + viewIndex + "$" + group.id;
    },
    ////////////////////////////////////
    _createRowId: function (row, index) {
        var id = this._id + "$row" + index + "$" + row._id;
        return id;
    },
    _createHeaderCellId: function (column, index) {
        var id = this._id + "$headerCell" + index + "$" + column._id;
        return id;
    },
    _createCellId: function (row, column) {
        var id = row._id + "$cell$" + column._id;
        return id;
    },
    _createFilterCellId: function (column) {
        return this._id + "$filter$" + column._id;
    },
    _createSummaryCellId: function (column, rowIndex) {
        return this._id + "$summary$" + column._id + "_" + rowIndex;
    },
    /////////////////////////
    getFilterCellEl: function (column) {
        column = this.getColumn(column);
        if (!column) return null;
        return document.getElementById(this._createFilterCellId(column));
    },
    getSummaryCellEl: function (column, rowIndex) {
        if (!rowIndex) rowIndex = 0;
        column = this.getColumn(column);
        if (!column) return null;
        return document.getElementById(this._createSummaryCellId(column, rowIndex));
    },
    /////////////////////////
    _doVisibleEls: function () {
        mini.GridView.superclass._doVisibleEls.call(this);
        this._columnsEl.style.display = this.showColumns ? "block" : "none";
        this._filterEl.style.display = this.showFilterRow ? "block" : "none";
        this._summaryEl.style.display = this.showSummaryRow ? "block" : "none";
        this._bottomPagerEl.style.display = this.showPager ? "block" : "none";

        //alert(this._summaryEl.offsetHeight);
    },
    setShowColumns: function (value) {
        this.showColumns = value;
        this._doVisibleEls();
        this.deferLayout();
    },
    setShowFilterRow: function (value) {
        this.showFilterRow = value;
        this._doVisibleEls();
        this.deferLayout();
    },
    setShowSummaryRow: function (value) {
        this.showSummaryRow = value;
        this._doVisibleEls();
        this.deferLayout();
    },
    setShowPager: function (value) {

        this.showPager = value;
        this._doVisibleEls();
        this.deferLayout();
    },
    setFitColumns: function (value) {
        this.fitColumns = value;
        mini.removeClass(this.el, 'mini-grid-fixwidth');
        if (this.fitColumns == false) {
            mini.addClass(this.el, 'mini-grid-fixwidth');
        }
        this.deferLayout();
    },
    getBodyHeight: function (content) {
        //if(this.id == "datagrid2") debugger
        var h = mini.GridView.superclass.getBodyHeight.call(this, content);
        h = h - this.getColumnsHeight() - this.getFilterHeight()
            - this.getSummaryHeight() - this.getPagerHeight();
        return h;
    },
    getColumnsHeight: function () {
        if (!this.showColumns) return 0;
        var h = mini.getHeight(this._columnsEl);
        //        if (this.isFrozen()) {
        //            var h2 = mini.getHeight(this._columnsLockEl);
        //            if (h2 > h) h = h2;
        //        }
        return h;
    },
    getFilterHeight: function () {
        //return this.showFilterRow ? mini.getHeight(this._filterEl) : 0;
        //return this.showFilterRow ? mini.getHeight(this._filterEl.lastChild.lastChild) : 0;
        return this.showFilterRow ? mini.getHeight(this._filterViewEl.firstChild) : 0;

    },
    getSummaryHeight: function () {
        //alert(this._summaryEl.offsetHeight);
        return this.showSummaryRow ? mini.getHeight(this._summaryEl) : 0;
    },
    getPagerHeight: function () {
        return this.showPager ? mini.getHeight(this._bottomPagerEl) : 0;
    },
    getGridViewBox: function (content) {
        var box = mini.getBox(this._columnsEl);
        var bodyBox = mini.getBox(this._bodyEl);
        box.height = bodyBox.bottom - box.top;
        box.bottom = box.top + box.height;
        return box;
    },
    getSortField: function (value) {
        return this._dataSource.sortField;
    },
    getSortOrder: function (value) {
        return this._dataSource.sortOrder;
    },
    ////////////////////////////////////////////////////////////////////////////////////////
    // DataSource 
    ////////////////////////////////////////////////////////////////////////////////////////    
    _createSource: function () {
        this._dataSource = new mini.DataTable();
    },
    _bindSource: function () {
        var source = this._dataSource;
        //table
        source.on("loaddata", this.__OnSourceLoadData, this);
        source.on("cleardata", this.__OnSourceClearData, this);

    },
    __OnSourceLoadData: function (e) {

        this._initData();

        

        var grid = this,
            sortField = grid.getSortField(),
            sortOrder = grid.getSortOrder();
        if (grid.sortMode == "client" && sortField && sortOrder) {
            grid.sortBy(sortField, sortOrder);
        }

        this.doUpdate();

        //this.deferUpdate();   //不能做这个，会有影响

    },
    __OnSourceClearData: function (e) {
        this._initData();
        this.doUpdate();
    },
    _initData: function () {

    },
    ////////////////////////////////////////////////////////////////////////////////////////
    // ColumnModel  
    ////////////////////////////////////////////////////////////////////////////////////////
    isFrozen: function () {
        var sc = this._columnModel._frozenStartColumn, fc = this._columnModel._frozenEndColumn;
        //return this.isTableView() && !this.isGrouping() && sc >= 0 && fc >= sc;
        return this._columnModel.isFrozen();
    },
    _createColumnModel: function () {
        this._columnModel = new mini.ColumnModel(this);
    },
    _bindColumnModel: function () {
        this._columnModel.on("columnschanged", this.__OnColumnsChanged, this);
    },
    __OnColumnsChanged: function (e) {
        this.columns = this._columnModel.columns;
        this._doUpdateFilterRow();
        this._doUpdateSummaryRow();

        this.doUpdate();
        this.fire("columnschanged");

    },
    setColumns: function (columns) {
        this._columnModel.setColumns(columns);
        this.columns = this._columnModel.columns;
    },
    getColumns: function () {
        return this._columnModel.getColumns();
    },
    getBottomColumns: function () {
        return this._columnModel.getBottomColumns();
    },
    getVisibleColumnsRow: function () {
        //获取可视列多行数组。多表头时。
        var rows = this._columnModel.getVisibleColumnsRow().clone();
        return rows;
    },
    getVisibleColumns: function () {
        //获取可视列数组。底行。
        var columns = this._columnModel.getVisibleColumns().clone();
        return columns;
    },
    getFrozenColumns: function () {
        //获取锁定列数组。底行。
        var columns = this._columnModel.getFrozenColumns().clone();
        //alert(columns.length);
        return columns;
    },
    getUnFrozenColumns: function () {
        //获取非锁定列数组。底行。
        var columns = this._columnModel.getUnFrozenColumns().clone();
        return columns;
    },
    getColumn: function (name) {
        //根据列的name和index获取列对象
        return this._columnModel.getColumn(name);
    },
    updateColumn: function (column, options) {
        this._columnModel.updateColumn(column, options);
    },
    showColumns: function (columns) {
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = this.getColumn(columns[i]);
            if (!column) continue;
            column.visible = true;
        }
        this._columnModel._columnsChanged();
        //this.setColumns(this.columns);
    },
    hideColumns: function (columns) {
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = this.getColumn(columns[i]);
            if (!column) continue;
            column.visible = false;
        }
        this._columnModel._columnsChanged();
        //this.setColumns(this.columns);
    },
    showColumn: function (column) {
        this.updateColumn(column, { visible: true });
    },
    hideColumn: function (column) {
        this.updateColumn(column, { visible: false });
    },
    moveColumn: function (column, targetColumn, action) {
        this._columnModel.moveColumn(column, targetColumn, action);
    },
    removeColumn: function (column) {
        column = this.getColumn(column);
        if (!column) return;
        var pcolumn = this.getParentColumn(column);
        if (column && pcolumn) {
            pcolumn.columns.remove(column);
            //this.setColumns(this.columns);
            this._columnModel._columnsChanged();
        }
        return column;
    },
    //    insertColumn: function (column) {
    //        
    //    },
    setDefaultColumnWidth: function (value) {
        this._columnModel._defaultColumnWidth = value;
    },
    getDefaultColumnWidth: function () {
        return this._columnModel._defaultColumnWidth;
    },
    setColumnWidth: function (column, width) {
        this.updateColumn(column, { width: width });
    },
    getColumnWidth: function (column) {
        var box = this.getColumnBox(column);
        return box.width;
    },
    getParentColumn: function (column) {
        return this._columnModel.getParentColumn(column);
    },
    getMaxColumnLevel: function () {
        return this._columnModel._getMaxColumnLevel();
    },
    /////////////////////////////////////////////////////
    _isCellVisible: function (rowIndex, columnIndex) {
        return true;
    },
    _createDrawCellEvent: function (record, column, rowIndex, columnIndex) {
        //if(rowIndex == 0 && column.field == "Extends.loginname") debugger

        //var field = this.getKeyField(column.field);

        var value = mini._getMap(column.field, record);
        var e = {
            sender: this,
            //rowType: record._rowType,
            rowIndex: rowIndex,
            columnIndex: columnIndex,
            record: record,
            row: record,
            column: column,
            field: column.field,
            value: value,
            cellHtml: value,
            rowCls: "",
            rowStyle: null,
            cellCls: column.cellCls || '',
            cellStyle: column.cellStyle || '',
            allowCellWrap: this.allowCellWrap,
            showHGridLines: this.showHGridLines,
            showVGridLines: this.showVGridLines,
            cellInnerCls: "",
            cellInnnerStyle: "",
            autoEscape: column.autoEscape
        };
        e.visible = this._isCellVisible(rowIndex, columnIndex);
        if (e.visible == true && this._mergedCellMaps) {
            var cell = this._mergedCellMaps[rowIndex + ":" + columnIndex];
            if (cell) {
                e.rowSpan = cell.rowSpan;
                e.colSpan = cell.colSpan;
            }
        }
        return e;
    },

    defaultColumnDateFormat: 'yyyy-MM-dd',      //dateType="date"

    _OnDrawCell: function (record, column, rowIndex, columnIndex) {
        var e = this._createDrawCellEvent(record, column, rowIndex, columnIndex);
        var value = e.value;

        var dateFormat = column.dateFormat || (column.dataType == "date" ? this.defaultColumnDateFormat : "");
        if (dateFormat) {


            if (mini.isDate(e.value)) {
                //日期格式化，有点慢！已经做了特别优化：yyyy-MM-dd, MM/dd/yyyy
                e.cellHtml = mini.formatDate(value, dateFormat);
            }
            else e.cellHtml = value;
        }


        if (column.dataType == "float") {
            var value = parseFloat(e.value);
            if (!isNaN(value)) {
                decimalPlaces = parseInt(column.decimalPlaces);
                if (isNaN(decimalPlaces)) decimalPlaces = 2;

                e.cellHtml = value.toFixed(decimalPlaces);
            }
        }

        if (column.dataType == "currency") {        //dtype, vtype, xtype?
            e.cellHtml = mini.formatCurrency(e.value, column.currencyUnit);
        }

        if (column.displayField) {
            e.cellHtml = mini._getMap(column.displayField, record); //record[column.displayField];
        }
        if (column.numberFormat) {
            var number = parseFloat(e.cellHtml);
            if (!isNaN(number)) {
                e.cellHtml = mini.formatNumber(number, column.numberFormat);
            }
        }
        if (e.autoEscape == true) {     //e.htmlEncode = true       代码升级，更新换代 
            e.cellHtml = mini.htmlEncode(e.cellHtml);
            //e.cellHtml = 1;
        }

        var renderer = column.renderer;
        if (renderer) {
            //            var fn = null;
            //            if (typeof renderer == "function") {
            //                fn = renderer;
            //            } else {
            //                fn = mini._getFunctoin(renderer);
            //            }
            var fn = typeof renderer == "function" ? renderer : mini._getFunctoin(renderer);
            if (fn) {
                e.cellHtml = fn.call(column, e);
            }
        }

        //e.cellHtml = e.cellHtml ? String(e.cellHtml).trim() : "";

        //e.cellHtml = (e.cellHtml === 0 || e.cellHtml) ? String(e.cellHtml).trim() : "";

        e.cellHtml = (e.cellHtml === 0 || e.cellHtml === false || e.cellHtml) ? String(e.cellHtml).trim() : "";

        //e.cellHtml = (e.cellHtml === 0 || !mini.isNull(e.cellHtml)) ? String(e.cellHtml).trim() : "";


        this.fire("drawcell", e);

        if (e.cellHtml && !!e.cellHtml.unshift && e.cellHtml.length == 0) {
            e.cellHtml = "&nbsp;";
        }
        if (e.cellHtml === null || e.cellHtml === undefined || e.cellHtml === "") e.cellHtml = "&nbsp;";

        return e;
    },
    _OnDrawSummaryCell: function (records, column, group, row) {
        var e = {
            row: row,
            group: group,
            result: this.getResultObject(),
            sender: this,
            data: records,
            column: column,
            field: column.field,
            value: "",
            cellHtml: "",
            cellCls: column.cellCls || '',
            cellStyle: column.cellStyle || '',
            allowCellWrap: this.allowCellWrap
        };

        if (column.summaryType) {
            var fn = mini.summaryTypes[column.summaryType];
            if (fn) {
                e.value = fn(records, column.field);
            }
        }

        var value = e.value;
        e.cellHtml = e.value;

        if (e.value && parseInt(e.value) != e.value && e.value.toFixed) {
            decimalPlaces = parseInt(column.decimalPlaces);
            if (isNaN(decimalPlaces)) decimalPlaces = 2;

            e.cellHtml = parseFloat(e.value.toFixed(decimalPlaces));
        }

        if (column.dateFormat) {
            if (mini.isDate(e.value)) {
                //日期格式化，有点慢！已经做了特别优化：yyyy-MM-dd, MM/dd/yyyy
                e.cellHtml = mini.formatDate(value, column.dateFormat);
            }
            else e.cellHtml = value;
        }
        if (e.cellHtml) {
            if (column.dataType == "currency") {
                e.cellHtml = mini.formatCurrency(e.cellHtml, column.currencyUnit);
            }
        }

        var renderer = column.summaryRenderer;
        if (renderer) {
            fn = typeof renderer == "function" ? renderer : window[renderer];
            if (fn) {
                e.cellHtml = fn.call(column, e);
            }
        }
        column.summaryValue = e.value;

        this.fire("drawsummarycell", e);

        if (e.cellHtml === null || e.cellHtml === undefined || e.cellHtml === "") e.cellHtml = "&nbsp;";

        return e;
    },
    /////////////////////////////////////////
    getScrollTop: function () {
        return this._rowsViewEl.scrollTop;
    },
    setScrollTop: function (value) {
        this._rowsViewEl.scrollTop = value;
    },
    getScrollLeft: function () {
        return this._rowsViewEl.scrollLeft;
    },
    setScrollLeft: function (value) {

        this._rowsViewEl.scrollLeft = value;
    },
    _syncScroll: function () {
        var scrollLeft = this._rowsViewEl.scrollLeft;

        //this._filterViewEl.scrollLeft = scrollLeft;
        var filterTable = this._filterViewEl.firstChild;
        filterTable.style.left = -scrollLeft + "px";



        this._summaryViewEl.scrollLeft = scrollLeft;
        this._columnsViewEl.scrollLeft = scrollLeft;
    },
    __OnRowViewScroll: function (e) {
        this._syncScroll();
    },
    //////////////////////////////////////////////////////////////////////////////////////////
    // Pager
    //////////////////////////////////////////////////////////////////////////////////////////  
    pagerType: "pager",
    getPagerType: function () {
        return this.pagerType;
    },
    setPagerType: function (value) {
        this.pagerType = value;

        var pager = mini.create({ type: this.pagerType });
        if (pager) this._setBottomPager(pager);
    },

    _pagers: [],
    _createPagers: function () {


        this._pagers = [];
        var bottomPager = new mini.Pager();
        this._setBottomPager(bottomPager);
    },

    _setBottomPager: function (pager) {
        pager = mini.create(pager);
        if (!pager) return;
        if (this._bottomPager) {
            this.unbindPager(this._bottomPager);
            this._bottomPagerEl.removeChild(this._bottomPager.el);
        }
        this._bottomPager = pager;
        pager.render(this._bottomPagerEl);
        this.bindPager(pager);
    },

    bindPager: function (pager) {
        this._pagers.add(pager);
    },
    unbindPager: function (pager) {
        this._pagers.remove(pager);
    },
    ////////////////////////////////////////////////////////

    alwaysShowEmptyText: false,
    setAlwaysShowEmptyText: function (value) {
        this.alwaysShowEmptyText = value;
    },
    getAlwaysShowEmptyText: function () {
        return this.alwaysShowEmptyText;
    },


    setShowEmptyText: function (value) {
        this.showEmptyText = value;
        if (this.data.length == 0) this.deferUpdate();
    },
    getShowEmptyText: function () {
        return this.showEmptyText;
    },
    setEmptyText: function (value) {
        this.emptyText = value;
    },
    getEmptyText: function () {
        return this.emptyText;
    },
    setShowModified: function (value) {
        this.showModified = value;
    },
    getShowModified: function () {
        return this.showModified;
    },
    setShowNewRow: function (value) {
        this.showNewRow = value;
    },
    getShowNewRow: function () {
        return this.showNewRow;
    },
    setAllowCellWrap: function (value) {
        this.allowCellWrap = value;
    },
    getAllowCellWrap: function () {
        return this.allowCellWrap;
    },
    setAllowHeaderWrap: function (value) {
        this.allowHeaderWrap = value;
    },
    getAllowHeaderWrap: function () {
        return this.allowHeaderWrap;
    },
    setEnableGroupOrder: function (value) {
        this.enableGroupOrder = value;
    },
    getEnableGroupOrder: function () {
        return this.enableGroupOrder;
    },

    /////////////////////////////////////////////////////////////////////
    //Grid Lines
    /////////////////////////////////////////////////////////////////////
    setShowHGridLines: function (value) {
        if (this.showHGridLines != value) {
            this.showHGridLines = value;
            this.deferUpdate();
        }
    },
    getShowHGridLines: function () {
        return this.showHGridLines;
    },
    setShowVGridLines: function (value) {
        if (this.showVGridLines != value) {
            this.showVGridLines = value;
            this.deferUpdate();
        }
    },
    getShowVGridLines: function () {
        return this.showVGridLines;
    },

    setShowSortIcon: function (value) {
        if (this.showSortIcon != value) {
            this.showSortIcon = value;
            this.deferUpdate();
        }
    },
    getShowSortIcon: function () {
        return this.showSortIcon;
    }


});

mini.copyTo(mini.GridView.prototype, mini._DataTableApplys);

mini.regClass(mini.GridView, "gridview");


//(function () {
//    var inited = false;
//    function init(){
//        var grid = this;
//        grid.on("drawcell", function(e){
//            
//        });
//    }

//    var set = mini.DataGrid.prototype.set;
//    mini.DataGrid.prototype.set = function(){
//        if(!inited){
//            init.call(this);
//            inited = true;
//        }
//        set.apply(this, arguments);
//    }
//})();





/*   
    1.实现锁定列

*/

mini.FrozenGridView = function () {    
    mini.FrozenGridView.superclass.constructor.apply(this, arguments);
};
mini.extend(mini.FrozenGridView, mini.GridView, {

    //锁定列后，行高固定
    isFixedRowHeight: function () {
        //return this.fixedRowHeight || this.isFrozen();
        //return this.fixedRowHeight || !this.allowCellWrap;
        return this.fixedRowHeight;
    },

    frozenPosition: 'left',
    isRightFrozen: function () {
        return this.frozenPosition == 'right';
    },
    //    setFrozenPosition: function (value) {
    //        this.frozenPosition = value;
    //        this.deferLayout();
    //    },
    //    getFrozenPosition: function (value) {
    //        return this.frozenPosition;
    //    },

    _create: function () {
        mini.FrozenGridView.superclass._create.call(this);
        var el = this.el;

        var lockColumns = '<div class="mini-grid-columns-lock"></div>';
        var lockRows = '<div class="mini-grid-rows-lock"><div class="mini-grid-rows-content"></div></div>';

        this._columnsLockEl = mini.before(this._columnsViewEl, lockColumns);
        this._rowsLockEl = mini.before(this._rowsViewEl, lockRows);

        this._rowsLockContentEl = this._rowsLockEl.firstChild;

        //filter
        var lockFilter = '<div class="mini-grid-filterRow-lock" style="height:100%;"></div>';
        this._filterLockEl = mini.before(this._filterViewEl, lockFilter);
        //summary
        var lockSummary = '<div class="mini-grid-summaryRow-lock"></div>';
        this._summaryLockEl = mini.before(this._summaryViewEl, lockSummary);

    },
    _initEvents: function () {
        mini.FrozenGridView.superclass._initEvents.call(this);

        mini.on(this._rowsEl, "mousewheel", this.__OnMouseWheel, this);

    },
    _createHeaderText: function (column, viewIndex) {
        var header = column.header;
        if (typeof header == "function") header = header.call(this, column);
        if (mini.isNull(header) || header === "") header = "&nbsp;";
        if (this.isFrozen() && viewIndex == 2) {
            if (column.viewIndex1) {
                header = "&nbsp;";
            }
        }
        return header;
    },
    _createColumnColSpan: function (column, sb, viewIndex) {
        if (this.isFrozen()) {
            var colspan = column["colspan" + viewIndex];
            if (colspan) {
                sb[sb.length] = 'colspan="' + colspan + '" ';
            }
        } else {
            if (column.colspan) {
                sb[sb.length] = 'colspan="' + column.colspan + '" ';
            }
        }
    },
    doUpdateColumns: function () {
        var scrollLeft = this._columnsViewEl.scrollLeft;

        var frozenColumnsRow = this.isFrozen() ? this.getFrozenColumnsRow() : [];
        var unFrozenColumnsRow = this.isFrozen() ? this.getUnFrozenColumnsRow() : this.getVisibleColumnsRow();

        var frozenColumns = this.isFrozen() ? this.getFrozenColumns() : [];
        var unfrozenColumns = this.isFrozen() ? this.getUnFrozenColumns() : this.getVisibleColumns();


        var lockHtml = this._createColumnsHTML(frozenColumnsRow, 1, frozenColumns);
        var html = this._createColumnsHTML(unFrozenColumnsRow, 2, unfrozenColumns);
        var s = '<div class="mini-grid-topRightCell"></div>';

        lockHtml += s;
        html += s;

        this._columnsLockEl.innerHTML = lockHtml;
        this._columnsViewEl.innerHTML = html;

        var lockTable = this._columnsLockEl.firstChild;
        lockTable.style.width = "0px";


        this._columnsViewEl.scrollLeft = scrollLeft;
    },
    doUpdateRows: function () {

        var data = this.getVisibleRows();


        var columns1 = this.getFrozenColumns();
        var columns2 = this.getUnFrozenColumns();


        if (this.isGrouping()) {
            var lockHtml = this._createGroupingHTML(columns1, 1);
            var html = this._createGroupingHTML(columns2, 2);

            this._rowsLockContentEl.innerHTML = lockHtml;
            this._rowsViewContentEl.innerHTML = html;
        } else {
            //if (data.length > 1) data.length = 1;
            var lockHtml = this._createRowsHTML(columns1, 1, this.isFrozen() ? data : []);
            var html = this._createRowsHTML(columns2, 2, data);

            //            mini.removeChilds(this._rowsLockContentEl);
            //            mini.removeChilds(this._rowsViewContentEl);

            //            jQuery(this._rowsLockContentEl).empty();
            //            jQuery(this._rowsViewContentEl).empty();

            this._rowsLockContentEl.innerHTML = lockHtml;
            this._rowsViewContentEl.innerHTML = html;
        }
        var lockTable = this._rowsLockContentEl.firstChild;
        lockTable.style.width = "0px";

        //this._syncRowsHeight();
    },
    _doUpdateFilterRow: function () {

        if (this._filterLockEl.firstChild) {
            this._filterLockEl.removeChild(this._filterLockEl.firstChild);
        }
        if (this._filterViewEl.firstChild) {
            this._filterViewEl.removeChild(this._filterViewEl.firstChild);
        }

        var columns1 = this.getFrozenColumns();
        var columns2 = this.getUnFrozenColumns();

        var html1 = this._createFilterRowHTML(columns1, 1);
        var html2 = this._createFilterRowHTML(columns2, 2);

        this._filterLockEl.innerHTML = html1;
        this._filterViewEl.innerHTML = html2;

        this._doRenderFilters();
    },
    _doUpdateSummaryRow: function () {

        var columns1 = this.getFrozenColumns();
        var columns2 = this.getUnFrozenColumns();

        var html1 = this._createSummaryRowHTML(columns1, 1);
        var html2 = this._createSummaryRowHTML(columns2, 2);

        this._summaryLockEl.innerHTML = html1;
        this._summaryViewEl.innerHTML = html2;
    },
    _syncRowsHeightTimer: null,
    //只在doUpdateRows方法内调用?

    syncRowDetail: function (row) {
        var row1 = this._getRowDetailEl(row, 1);
        var row2 = this._getRowDetailEl(row, 2);
        if (row1 && row2) this._doSyncRowHeight(row1, row2);
    },

    _doSyncRowHeight: function (row1, row2) {

        //        row1.style.height = row2.style.height = "auto";

        //        var h1 = row1.offsetHeight;
        //        var h2 = row2.offsetHeight;
        //        if (h1 < h2) h1 = h2;

        //        row1.style.height = row2.style.height = h1 + "px";

        row1.style.height = row2.style.height = "auto";

        var td1 = row1.cells[0],
            td2 = row2.cells[0];


        var h1 = td1.offsetHeight;
        var h2 = td2.offsetHeight;

        if (h1 < h2) h1 = h2;

        row1.style.height = row2.style.height = h1 + "px";

    },

    _syncRowsHeight: function () {
        //同步锁定区、非锁定区的所有行高。优化方案：在doUpdate的时候调用一次，其他的时候不调用。
        var me = this;

        function autoRow(row1, row2) {
            row1.style.height = row2.style.height = "auto";
        }

        function measureRow(row1, row2) {
            var td1 = row1.cells[0],
            td2 = row2.cells[0];

            var h1 = td1.offsetHeight;
            var h2 = td2.offsetHeight;

            if (h1 < h2) h1 = h2;

            return h1;
        }

        function arrangeRow(row1, row2, height) {
            row1.style.height = row2.style.height = height + "px";
        }

        function doSync() {
            var sss = new Date();
            //return;
            //优化：1）分2次同步；2）只在doUpdate调用一次
            var d = document;
            var data = me.getDataView();

            //1) auto
            var rowMap = {};
            for (var i = 0, l = data.length; i < l; i++) {
                var row = data[i];
                var row1 = me._getRowEl(row, 1);
                var row2 = me._getRowEl(row, 2);
                if (!row1 || !row2) continue;

                //me._doSyncRowHeight(row1, row2);

                autoRow(row1, row2);
                rowMap[i] = { row1: row1, row2: row2 };
            }
            //2) measure
            for (var i = 0, l = data.length; i < l; i++) {
                var row = data[i];
                var map = rowMap[i];
                if (!map) continue;
                map.height = measureRow(map.row1, map.row2);
            }
            //2) arrange
            for (var i = 0, l = data.length; i < l; i++) {
                var row = data[i];
                var map = rowMap[i];
                if (!map) continue;
                arrangeRow(map.row1, map.row2, map.height);
            }

            me._syncRowsHeightTimer = null;

            //alert(new Date() - sss);
        }

        if (this.isFrozen() && this.isFixedRowHeight() == false) {
            if (this._syncRowsHeightTimer) clearTimeout(this._syncRowsHeightTimer);
            this._syncRowsHeightTimer = setTimeout(doSync, 2);
        }
    },
    _syncColumnHeight: function () {

        var lock = this._columnsLockEl, view = this._columnsViewEl;
        lock.style.height = view.style.height = 'auto';
        if (this.isFrozen()) {
            var h = lock.offsetHeight;
            var h2 = view.offsetHeight;
            h = h > h2 ? h : h2;
            lock.style.height = view.style.height = h + 'px';
        }

        //summary
        var lock = this._summaryLockEl, view = this._summaryViewEl;
        lock.style.height = view.style.height = 'auto';
        if (this.isFrozen()) {
            var h = lock.offsetHeight;
            var h2 = view.offsetHeight;
            h = h > h2 ? h : h2;
            lock.style.height = view.style.height = h + 'px';
        }
    },

    _layoutColumns: function () {
        //if(mini.isChrome) return; //暂不实现
        function getHeight(el) {
            return el.offsetHeight;
        }
        function getTds(tr) {
            var tds = [];
            for (var i = 0, l = tr.cells.length; i < l; i++) {
                var td = tr.cells[i];
                if (td.style.width == "0px") continue;
                tds.push(td);
            }
            return tds;
        }
        function clearHeight(tr) {
            var tds = getTds(tr);
            for (var i = 0, l = tds.length; i < l; i++) {
                var td = tds[i];
                td.style.height = "auto";
            }
        }
        function clearHeights() {
            table1.style.height = table1.style.height = "auto";
            for (var i = 0, l = table1.rows.length; i < l; i++) {
                var row1 = table1.rows[i];
                var row2 = table2.rows[i];
                clearHeight(row1);
                clearHeight(row2);
            }
        }
        function getRowHeight(tr, nospan) {
            var h = 0;
            var tds = getTds(tr);
            for (var i = 0, l = tds.length; i < l; i++) {
                var td = tds[i];
                var rowspan = parseInt(td.rowSpan) > 1;
                if (rowspan && nospan) continue;

                var th = td.offsetHeight;
                if (th > h) h = th;

            }
            return h;
        }


        if (!this.isFrozen()) return;
        var table1 = this._columnsLockEl.firstChild,
                    table2 = this._columnsViewEl.firstChild;

        /*
        多表头+换行+锁定列同步高度算法：
        1.首先对比tr的height
        2.然后，设置小的td高度
        3.
        1.先找正常td，设置正常高度
        2.然后找rowspan的td，设置最大高度
        */

        function syncNoRowSpan(tr, tr2) {
            var h = getRowHeight(tr2, true);
            //if (h == 0) return;
            var tds = getTds(tr);
            for (var i = 0, l = tds.length; i < l; i++) {
                var td = tds[i];
                var rowspan = parseInt(td.rowSpan) > 1;
                //if (td.id == "mini-3$headerCell1$25") debugger
                if (rowspan) {

                } else {
                    mini.setHeight(td, h);
                }
            }
        }
        function syncRowSpan(tr, tr2) {
            var h = getRowHeight(tr2);
            //if (h == 0) return;
            var tds = getTds(tr);
            for (var i = 0, l = tds.length; i < l; i++) {
                var td = tds[i];
                var rowspan = parseInt(td.rowSpan) > 1;
                //if(td.id == "mini-3$headerCell1$25") debugger
                if (rowspan) {
                    mini.setHeight(td, h);
                } else {

                }
            }
        }

        clearHeights();

        //处理只有一个单元格的情况

        for (var i = 0, l = table1.rows.length; i < l; i++) {
            var row1 = table1.rows[i];
            var row2 = table2.rows[i];
            var h1 = getRowHeight(row1), h2 = getRowHeight(row2);

            if (h1 == h2) {

                //} else if (h1 < h2 || row1.cells.length == 2) {//row1.cells.length == 2 表示只有一列
            } else if (h1 < h2) {
                syncNoRowSpan(row1, row2);
                syncRowSpan(row1, row2);
                //} else if (h1 > h2 || row2.cells.length == 2) {
            } else if (h1 > h2) {
                syncNoRowSpan(row2, row1);
                syncRowSpan(row2, row1);
            }
        }

        //同步下表格高度
        var h1 = getHeight(table1), h2 = getHeight(table2);
        if (h1 < h2) {
            mini.setHeight(table1, h2);
        } else if (h1 > h2) {
            mini.setHeight(table2, h1);
        }
    },
    doLayout: function () {
        if (this.canLayout() == false) return;
        this._doLayoutScroll = false;


        //debugger

        //var autoHeight = this.isAutoHeight();
        var isFrozen = this.isFrozen();
        var viewportWidth = this.getViewportWidth(true);
        var lockedWidth = this.getLockedWidth();
        var viewWidth = viewportWidth - lockedWidth;

        //alert(lockedWidth);

        this._doEmptyText();



        var marginStyle = this.isRightFrozen() ? 'marginRight' : 'marginLeft';
        var leftStyle = this.isRightFrozen() ? 'right' : 'left';
        //        this._filterLockEl.style.left = "auto";
        //        this._summaryLockEl.style.left = "auto";
        //        this._columnsLockEl.style.left = "auto";
        //        this._rowsLockEl.style.left = "auto";

        if (isFrozen) {

            this._filterViewEl.style[marginStyle] = lockedWidth + "px";
            this._summaryViewEl.style[marginStyle] = lockedWidth + "px";
            this._columnsViewEl.style[marginStyle] = lockedWidth + "px";
            this._rowsViewEl.style[marginStyle] = lockedWidth + "px";

            if (mini.isSafari || mini.isChrome || mini.isIE6) {

                this._filterViewEl.style["width"] = viewWidth + "px";
                this._summaryViewEl.style["width"] = viewWidth + "px";
                this._columnsViewEl.style["width"] = viewWidth + "px";
            } else {
                this._filterViewEl.style["width"] = "auto";
                this._summaryViewEl.style["width"] = "auto";
                this._columnsViewEl.style["width"] = "auto";
            }
            //            if (mini.isIE6 || !mini.isIE)  this._columnsViewEl.style["width"] = viewWidth + "px";
            if (mini.isSafari || mini.isChrome || mini.isIE6) this._rowsViewEl.style["width"] = viewWidth + "px";

            mini.setWidth(this._filterLockEl, lockedWidth);
            mini.setWidth(this._summaryLockEl, lockedWidth);
            mini.setWidth(this._columnsLockEl, lockedWidth);
            mini.setWidth(this._rowsLockEl, lockedWidth);

            this._filterLockEl.style[leftStyle] = "0px";
            this._summaryLockEl.style[leftStyle] = "0px";
            this._columnsLockEl.style[leftStyle] = "0px";
            this._rowsLockEl.style[leftStyle] = "0px";

            //            //锁定列区域偏移
            //            this._columnsLockEl.firstChild.style.left = -leftLockedOffset + "px";
            //            this._columnsViewEl.firstChild.style.left = -rightLockedOffset + "px";

        } else {
            this._doClearFrozen();
        }

        //处理td的高度
        this._layoutColumns();
        //同步左右两个column高度
        this._syncColumnHeight();


        mini.FrozenGridView.superclass.doLayout.call(this);

        var autoHeight = this._autoHeight;

        if (isFrozen) {
            if (mini.isChrome || mini.isIE6) {
                //处理td的高度
                this._layoutColumns();
                //同步左右两个column高度
                this._syncColumnHeight();
                mini.FrozenGridView.superclass.doLayout.call(this);
            }
        }


        //        if (isFrozen) {

        //            this._filterViewEl.style["marginLeft"] = lockedWidth + "px";
        //            this._summaryViewEl.style["marginLeft"] = lockedWidth + "px";
        //            this._columnsViewEl.style["marginLeft"] = lockedWidth + "px";
        //            this._rowsViewEl.style["marginLeft"] = lockedWidth + "px";

        //            if (mini.isSafari || mini.isChrome || mini.isIE6) {
        //                
        //                this._filterViewEl.style["width"] = viewWidth + "px";
        //                this._summaryViewEl.style["width"] = viewWidth + "px";
        //                this._columnsViewEl.style["width"] = viewWidth + "px";
        //            } else {
        //                this._filterViewEl.style["width"] = "auto";
        //                this._summaryViewEl.style["width"] = "auto";
        //                this._columnsViewEl.style["width"] = "auto";
        //            }
        //            //            if (mini.isIE6 || !mini.isIE)  this._columnsViewEl.style["width"] = viewWidth + "px";
        //            if (mini.isSafari || mini.isChrome || mini.isIE6) this._rowsViewEl.style["width"] = viewWidth + "px";

        //            mini.setWidth(this._filterLockEl, lockedWidth);
        //            mini.setWidth(this._summaryLockEl, lockedWidth);
        //            mini.setWidth(this._columnsLockEl, lockedWidth);
        //            mini.setWidth(this._rowsLockEl, lockedWidth);

        //            this._filterLockEl.style["left"] = "0px";
        //            this._summaryLockEl.style["left"] = "0px";
        //            this._columnsLockEl.style["left"] = "0px";
        //            this._rowsLockEl.style["left"] = "0px";

        //            //            //锁定列区域偏移
        //            //            this._columnsLockEl.firstChild.style.left = -leftLockedOffset + "px";
        //            //            this._columnsViewEl.firstChild.style.left = -rightLockedOffset + "px";

        //        } else {
        //            this._doClearFrozen();
        //        }

        if (autoHeight) {
            this._rowsLockEl.style.height = "auto";
        } else {
            this._rowsLockEl.style.height = "100%";
        }

        this._syncRowsHeight();

        //        this._layoutScroll();
        //        var me = this;
        //        setTimeout(function () {
        //            me._layoutScroll();
        //        }, 1);
    },
    _doEmptyText: function () {
        //        var d1 = document.getElementById(this.uid + "$emptytext" + 1);
        //        var d2 = document.getElementById(this.uid + "$emptytext" + 2);        
        //        if (this.getDataView().length == 0 && this.showEmptyText) {            
        //            d1.style.display = d2.style.display = "";
        //        } else {
        //            d1.style.display = d2.style.display = "none";
        //        }
    },
    //count: 0,
    _getRowEl: function (row, index) {
        row = this.getRecord(row);
        var id = this._createRowId(row, index);
        var el = document.getElementById(id);
        return el;
    },

    ///////////////////////////////////////////////////
    _doClearFrozen: function () {

        var marginStyle = this.isRightFrozen() ? 'marginRight' : 'marginLeft';
        var leftStyle = this.isRightFrozen() ? 'right' : 'left';

        this._filterLockEl.style.left = "-10px";
        this._summaryLockEl.style.left = "-10px";
        this._columnsLockEl.style.left = "-10px";
        this._rowsLockEl.style.left = "-10px";

        this._filterLockEl.style["width"] = "0px";
        this._summaryLockEl.style["width"] = "0px";
        this._columnsLockEl.style["width"] = "0px";
        this._rowsLockEl.style["width"] = "0px";

        this._filterViewEl.style["marginLeft"] = "0px";
        this._summaryViewEl.style["marginLeft"] = "0px";
        this._columnsViewEl.style["marginLeft"] = "0px";
        this._rowsViewEl.style["marginLeft"] = "0px";

        this._filterViewEl.style["width"] = "auto";
        this._summaryViewEl.style["width"] = "auto";
        this._columnsViewEl.style["width"] = "auto";
        this._rowsViewEl.style["width"] = "auto";

        if (mini.isSafari || mini.isChrome || mini.isIE6) {
            this._filterViewEl.style["width"] = "100%";
            this._summaryViewEl.style["width"] = "100%";
            this._columnsViewEl.style["width"] = "100%";
            this._rowsViewEl.style["width"] = "100%";
        }

        //        //取消锁定列区域偏移
        //        this._columnsLockEl.firstChild.style.left = "0px";
        //        this._columnsViewEl.firstChild.style.left = "0px";
    },
    frozenColumns: function (startColumn, finishColumn) {
        this.frozen(startColumn, finishColumn);
    },
    unFrozenColumns: function () {
        this.unFrozen();
    },
    frozen: function (startColumn, finishColumn) {
        this._doClearFrozen();
        this._columnModel.frozen(startColumn, finishColumn);
    },
    unFrozen: function () {
        this._doClearFrozen();
        this._columnModel.unFrozen();
    },
    setFrozenStartColumn: function (value) {
        this._columnModel.setFrozenStartColumn(value);
    },
    setFrozenEndColumn: function (value) {
        return this._columnModel.setFrozenEndColumn(value);
    },
    getFrozenStartColumn: function (value) {
        return this._columnModel._frozenStartColumn;
    },
    getFrozenEndColumn: function (value) {
        return this._columnModel._frozenEndColumn;
    },
    getFrozenColumnsRow: function () {
        return this._columnModel.getFrozenColumnsRow();
    },
    getUnFrozenColumnsRow: function () {
        return this._columnModel.getUnFrozenColumnsRow();
    },
    ////////////////////////////////////////////////////
    getLockedWidth: function () {

        if (!this.isFrozen()) return 0;

        var table = this._rowsLockContentEl.firstChild.firstChild;
        //var table = this._columnsLockEl.firstChild.firstChild;
        var width = table ? table.offsetWidth : 0;
        return width;
    },
    ////////////////////////////////////////
    _canDeferSyncScroll: function () {
        return this.isFrozen();
    },
    _syncScroll: function () {
        var scrollLeft = this._rowsViewEl.scrollLeft;
        //if(scrollLeft != 0) alert(scrollLeft);

        //this._filterViewEl.scrollLeft = scrollLeft;
        var filterTable = this._filterViewEl.firstChild;
        //        filterTable.style.position = "absolute";
        //        filterTable.style.top = "0px";
        filterTable.style.left = -scrollLeft + "px";

        //        document.title = new Date().getTime();
        //        if (this._filterViewEl.scrollLeft > 0) debugger
        //this._filterViewEl.scrollLeft = 0;

        this._summaryViewEl.scrollLeft = scrollLeft;
        this._columnsViewEl.scrollLeft = scrollLeft;

        var me = this;
        var scrollTop = me._rowsViewEl.scrollTop;
        me._rowsLockEl.scrollTop = scrollTop;

        //document.title = new Date().getTime();

        //@ 2017-11-27  注释掉
//        if (this._canDeferSyncScroll()) {

//            setTimeout(function () {
//                //                if (scrollTop > me._rowsLockEl.scrollTop) {
//                //                }

//                //me._rowsViewEl.scrollTop = me._rowsLockEl.scrollTop;
//                me._syncScrollOffset(null, me._rowsLockEl.scrollTop);  //@ 2017-11-20 

//                //me._rowsViewEl.scrollTop = me._rowsLockEl.scrollTop = scrollTop;
//            }, 50);
//        }
    },
    //    _syncScrollOffset: function () {
    //        var scrollLeft = this._hscrollEl.scrollLeft;
    //        this._rowsViewEl.scrollLeft = scrollLeft;
    //        this._columnsViewEl.scrollLeft = this._rowsViewEl.scrollLeft;

    //        var me = this;
    //        me._rowsLockEl.scrollTop = me._rowsViewEl.scrollTop;
    //        setTimeout(function () {
    //            if (me.isFrozen()) {
    //                me._rowsViewEl.scrollTop = me._rowsLockEl.scrollTop;
    //            }
    //        }, 60);
    //    },
    //    __OnRowsViewScroll: function (e) {
    //        this._syncScrollOffset();
    //    },
    __OnMouseWheel: function (e) {
        var scrollTop = this.getScrollTop() - e.wheelDelta;
        var top = this.getScrollTop();
        this.setScrollTop(scrollTop);
        if (top != this.getScrollTop()) {
            e.preventDefault();
        }
    }


});
mini.regClass(mini.FrozenGridView, "FrozenGridView");


/*
    1.动态刷新表格
*/

mini.ScrollGridView = function () {
    mini.ScrollGridView.superclass.constructor.apply(this, arguments);
};
mini.extend(mini.ScrollGridView, mini.FrozenGridView, {

    virtualScroll: true,
    virtualRows: 25,

    defaultRowHeight: 25,

    virtualColumns: false,

    ///////////////////////////
    _canDeferSyncScroll: function () {
        return this.isFrozen() && !this.isVirtualScroll();
    },
    setVirtualScroll: function (value) {
        this.virtualScroll = value;
        this.doUpdate();
    },
    getVirtualScroll: function (value) {
        return this.virtualScroll;
    },
    isFitColumns: function () {
        return this.fitColumns && !this.virtualColumns;
    },
    setVirtualColumns: function (value) {
        this.virtualColumns = value;
        //mini.addCls(this.el, 'mini-grid-virtualcolumns');
        this.doUpdate();
    },
    getVirtualColumns: function (value) {
        return this.virtualColumns;
    },

    isFixedRowHeight: function () {
        //return this.fixedRowHeight || this.isVirtualScroll() || this.isFrozen();
        //return this.fixedRowHeight || this.isVirtualScroll() || !this.allowCellWrap;
        //return this.fixedRowHeight || this.isVirtualScroll();
        return this.fixedRowHeight || this.virtualScroll;
    },
    isVirtualScroll: function () {
        if (this.virtualScroll) {
            return this.isAutoHeight() == false && this.isGrouping() == false;
        }
        return false;
    },
    _getScrollView: function () {
        var data = this.getVisibleRows();
        return data;
    },
    _getScrollViewCount: function () {
        return this._getScrollView().length;
    },

    //    _getRowHeight: function (row) {
    //        return this._getScrollRowHeight(0, row);
    //    },

    _getScrollRowHeight: function (index, row) {
        if (row && row._height) {
            var h = parseInt(row._height);
            if (!isNaN(h)) return h;
        }
        return this.defaultRowHeight;

        //        var data = this._getScrollView();
        //        var record = data[index];
        //        if (!record) return 0;
        //        var h = parseInt(record._height);
        //        if (isNaN(parseInt(record._height))) h = this.defaultRowHeight;
        //        return h;
    },
    _getRangeHeight: function (start, end) {

        return (end - start) * this.defaultRowHeight;

//        		var height = 0;
//        		var data = this._getScrollView();
//        		for (var i = start; i < end; i++) {
//        			var row = data[i];
//        			var h = this._getScrollRowHeight(i, row);
//        			height += h;
//        		}
//        		return height;
    },
    _getIndexByScrollTop: function (scrollTop) {

        var count = parseInt(scrollTop / this.defaultRowHeight);
        return count;

//        		var height = 0;
//        		var data = this._getScrollView();
//        		var count = this._getScrollViewCount();
//        		for (var i = 0, l = count; i < l; i++) {
//        			var row = data[i];
//        			var h = this._getScrollRowHeight(i, row);
//        			height += h;
//        			if (height >= scrollTop) return i;
//        		}
//        		return count;
    },
    //	_getRangeHeight: function (start, end) {
    //		var height = 0;
    //		var data = this._getScrollView();
    //		for (var i = start; i < end; i++) {
    //			var row = data[i];
    //			var h = this._getScrollRowHeight(i, row);
    //			height += h;
    //		}
    //		return height;
    //	},
    //	_getIndexByScrollTop: function (scrollTop) {
    //		var height = 0;
    //		var data = this._getScrollView();
    //		var count = this._getScrollViewCount();
    //		for (var i = 0, l = count; i < l; i++) {
    //			var row = data[i];
    //			var h = this._getScrollRowHeight(i, row);
    //			height += h;
    //			if (height >= scrollTop) return i;
    //		}
    //		return count;
    //	},
    __getScrollViewRange: function (start, end) {
        var data = this._getScrollView();
        return data.getRange(start, end);
    },

    _getColumnByScrollLeft: function (scrollLeft) {

        var width = 0;
        var columns = this.getUnFrozenColumns();
        var count = columns.length;
        for (var i = 0, l = count; i < l; i++) {
            var col = columns[i];
            var w = col.pxWidth;
            if (!isNaN(w)) {
                width += w;
            }
            if (width >= scrollLeft) return i;
        }
        return count;
    },
    _getRangeWidth: function (start, end) {

        var width = 0;
        var columns = this.getUnFrozenColumns();
        for (var i = start; i < end; i++) {
            var col = columns[i];
            if (col) {
                var w = col.pxWidth;
                if (!isNaN(w)) {
                    width += w;
                }
            }
        }
        return width;
    },
    _getColumnAllWidth: function () {

        var width = 0;
        var columns = this.getUnFrozenColumns();
        var count = columns.length;
        for (var i = 0, l = count; i < l; i++) {
            var col = columns[i];
            var w = col.pxWidth;
            if (!isNaN(w)) {
                width += w;
            }
        }
        return width;
    },

    _getViewRegion: function () {


        //根据virtualRows，返回严格限制的区域范围：start, end
        var data = this._getScrollView();

        if (this.isVirtualScroll() == false) {
            var region = {
                top: 0,
                bottom: 0,
                rows: data,
                start: 0,
                end: 0
            };
            return region;
        }

        var rowHeight = this.defaultRowHeight;

        var nowRegion = this._getViewNowRegion();

        var scrollTop = this.getScrollTop();
        var bodyHeight = this._vscrollEl.offsetHeight;

        var count = this._getScrollViewCount();

        var start = nowRegion.start, end = nowRegion.end;

        for (var i = 0, l = count; i < l; i += this.virtualRows) {
            var i2 = i + this.virtualRows;
            if (i <= start && start < i2) {
                start = i;
            }
            if (i < end && end <= i2) {
                end = i2;
            }
        }
        if (end > count) end = count;
        if (end == 0) end = this.virtualRows;
        //if (start > end) start = end;

        var top = this._getRangeHeight(0, start);
        var bottom = this._getRangeHeight(end, this._getScrollViewCount());
        var data = this.__getScrollViewRange(start, end); //data.getRange(start, end);

        var region = {
            top: top,
            bottom: bottom,
            rows: data,
            start: start,
            end: end,
            viewStart: start,
            viewEnd: end
            //            viewStart: nowRegion.start,
            //            viewEnd: nowRegion.end
        };
        //document.title = start + ":" + end + " (" + region.viewStart + ":" + region.viewEnd + ")";

        region.viewTop = this._getRangeHeight(0, region.viewStart);
        region.viewBottom = this._getRangeHeight(region.viewEnd, this._getScrollViewCount());


        //virtualColumns
        if (this.virtualColumns) {

            var scrollLeft = this.getScrollLeft();
            var bodyWidth = this._rowsViewEl.offsetWidth;
            region.startColumn = this._getColumnByScrollLeft(scrollLeft);
            region.endColumn = this._getColumnByScrollLeft(scrollLeft + bodyWidth);
            region.columns = this.getUnFrozenColumns().slice(region.startColumn, region.endColumn + 1);

            region.right = this._getColumnAllWidth();
            region.viewLeft = this._getRangeWidth(0, region.startColumn); ;
        } else {
            region.columns = this.getUnFrozenColumns();
        }

        return region;
    },
    _getViewNowRegion: function () {
        //根据当前scrllTop和bodyHeight，获取当前的start~end范围
        var rowHeight = this.defaultRowHeight;
        var scrollTop = this.getScrollTop();
        //var bodyHeight = this._vscrollEl.offsetHeight;
        var bodyHeight = this._rowsViewEl.offsetHeight;

        //@@@
        var startRow = this._getIndexByScrollTop(scrollTop); //parseInt(scrollTop / rowHeight);
        var endRow = this._getIndexByScrollTop(scrollTop + bodyHeight + 30);
        //var endRow = parseInt((scrollTop + bodyHeight) / rowHeight) + 1;

        var count = this._getScrollViewCount();
        if (endRow > count) endRow = count;

        var region = { start: startRow, end: endRow };
        return region;
    },
    _canVirtualUpdate: function () {
        if (!this._viewRegion) return true;
        var region = this._getViewNowRegion();

        if (this._viewRegion.start <= region.start && region.end <= this._viewRegion.end) return false;
        return true;
    },
    ////////////////////////////////////////////////////////////
    //    __OnSourceAdd: function (e) {

    //        mini.ScrollGridView.superclass.__OnSourceAdd.call(this, e);
    //        
    //        this._viewRegion = this._getViewRegion();
    //    },
    __OnColumnsChanged: function (e) {
        var that = this;
        //var scrollLeft = this.getScrollLeft();

        this.columns = this._columnModel.columns;
        this._doUpdateFilterRow();
        this._doUpdateSummaryRow();
        if (this.getVisibleRows().length == 0) {
            //this.doUpdateColumns();
            this.doUpdate();
        } else {
            this.deferUpdate();
        }
        if (this.isVirtualScroll()) {
            this.__OnVScroll();

            //that.setScrollLeft(scrollLeft);

        }
        this.fire("columnschanged");
    },
    doLayout: function () {
        if (this.canLayout() == false) return;
        //alert(1);
        mini.ScrollGridView.superclass.doLayout.call(this);
        this._layoutScroll();

        //this._scrollTop = this._vscrollEl.scrollTop;
        if (mini.isNumber(this._scrollTop) && this._vscrollEl.scrollTop != this._scrollTop) {
            //alert(1);
            this._vscrollEl.scrollTop = this._scrollTop;
        }
        //alert(this._scrollTop);
    },
    _createRowsHTML: function (columns, viewIndex, data, top, bottom, rowIndex) {
        var isVirtualScroll = this.isVirtualScroll();
        if (!isVirtualScroll) {
            return mini.ScrollGridView.superclass._createRowsHTML.apply(this, arguments);
        }

        //document.title = new Date().getTime();


        //var region = isVirtualScroll ? this._getViewRegion() : null;  _viewRegion
        var region = isVirtualScroll ? this._viewRegion : null;

        var sb = ['<table class="mini-grid-table" cellspacing="0" cellpadding="0" border="0" >'];
        sb.push(this._createTopRowHTML(columns));
        if (this.isVirtualScroll()) {
            var style = top == 0 ? "display:none;" : "";
            sb.push('<tr class="mini-grid-virtualscroll-top" style="padding:0;border:0;' + style + '"><td colspan="' + columns.length + '" style="height:' + top + 'px;padding:0;border:0;' + style + '"></td></tr>');
        }

        var sss = new Date();


        if (viewIndex == 1 && this.isFrozen() == false) {
            //如果非锁定，且绘制锁定区域，则不创建

        } else {

            //alert(columns.length);

            for (var j = 0, k = data.length; j < k; j++) {
                //var rowIndex = startIndex + j;            
                var record = data[j];
                //if (!record) continue;//???????????????????????
                this._createRowHTML(record, rowIndex, columns, viewIndex, sb);
                rowIndex++;
            }
        }

        //if (viewIndex == 2) document.title = "a:" + (new Date() - sss);

        if (this.isVirtualScroll()) {
            sb.push('<tr class="mini-grid-virtualscroll-bottom" style="padding:0;border:0;"><td colspan="' + columns.length + '" style="height:' + bottom + 'px;padding:0;border:0;"></td></tr>');
        }
        sb.push('</table>');



        return sb.join('');
    },
    //更优化：先显示view区域，然后在填补top和bottom部分
    doUpdateRows: function () {

        if (this.isVirtualScroll() == false) {
            mini.ScrollGridView.superclass.doUpdateRows.call(this);
            return;
        }

        var region = this._getViewRegion();

        this._viewRegion = region;  //当创建时刻的region，才是viewRegion

        var columns1 = this.getFrozenColumns();
        var columns2 = region.columns; // this.getUnFrozenColumns();

        var rowIndex = region.viewStart;
        var rowIndexTop = region.start;
        var rowIndexBottom = region.viewEnd;
        if (this._scrollPaging) {
            var index = this.getPageIndex() * this.getPageSize();
            rowIndex -= index;
            rowIndexTop -= index;
            rowIndexBottom -= index;
        }
        //var sss = new Date();
        var lockHtml = this._createRowsHTML(columns1, 1, region.rows, region.viewTop, region.viewBottom, rowIndex);

        
        //var sss = new Date();
        var html = this._createRowsHTML(columns2, 2, region.rows, region.viewTop, region.viewBottom, rowIndex);
        //document.title = new Date() - sss;
        //if (this.getVisibleRows().length > 0) alert(new Date() - sss);

        this._rowsLockContentEl.innerHTML = lockHtml;
        this._rowsViewContentEl.innerHTML = html;

        var table = this._rowsViewContentEl.firstChild;
        if (this.virtualColumns) {

            var html = '<div style="position:absolute;top:0px;left:' + region.right + 'px;width:1px;height:1px;overflow:hidden;"></div>';
            jQuery(html).appendTo(this._rowsViewContentEl);

            table.style.width = "0px";
            table.style.position = "absolute";
            table.style.top = "0px";
            table.style.left = region.viewLeft + "px";
        }

        var scrollTop = this.getScrollTop();
        if (this._rowsViewEl.scrollTop != scrollTop) {
            //this._rowsViewEl.scrollTop = scrollTop;

            this._syncScrollOffset(null, scrollTop);
        }


    },

    ////////////////////////////////////////////////////////////
    _create: function () {
        mini.ScrollGridView.superclass._create.call(this);
        //vscroll
        this._vscrollEl = mini.append(this._rowsEl, '<div class="mini-grid-vscroll"><div class="mini-grid-vscroll-content"></div></div>');
        this._vscrollContentEl = this._vscrollEl.firstChild;
    },
    _initEvents: function () {
        mini.ScrollGridView.superclass._initEvents.call(this);

        var me = this;
        mini.on(this._vscrollEl, "scroll", this.__OnVScroll, this);
        mini._onScrollDownUp(this._vscrollEl, function (e) {
            //document.title = 'down:' +new Date().getTime();
            me._VScrollMouseDown = true;
        }, function (e) {
            //document.title = 'up:' + new Date().getTime();
            me._VScrollMouseDown = false;
        });
    },

    _layoutScroll: function () {

        var isVirtualScroll = this.isVirtualScroll();

        if (isVirtualScroll) {

            var scrollHeight = this.getScrollHeight();

            var outHeight = scrollHeight > this._rowsViewEl.offsetHeight;

            if (isVirtualScroll && outHeight) {
                this._vscrollEl.style.display = 'block';
                this._vscrollContentEl.style.height = scrollHeight + "px";
            } else {
                this._vscrollEl.style.display = 'none';
            }

            if (this._rowsViewEl.scrollWidth > this._rowsViewEl.clientWidth + 1) {
                var h = this.getBodyHeight(true) - 18;
                if (h < 0) h = 0;
                this._vscrollEl.style.height = h + 'px';
            } else {
                this._vscrollEl.style.height = '100%';
            }

            //alert(scrollHeight);

        } else {

            this._vscrollEl.style.display = "none";
        }

    },
    ////////////////////
    getScrollHeight: function () {
        var data = this.getVisibleRows();
        return this._getRangeHeight(0, data.length);
    },
    setScrollTop: function (value) {
        if (this.isVirtualScroll()) {
            this._vscrollEl.scrollTop = value;
        } else {
            this._rowsViewEl.scrollTop = value;
        }
    },
    getScrollTop: function () {
        if (this.isVirtualScroll()) {
            return this._vscrollEl.scrollTop;
        } else {
            return this._rowsViewEl.scrollTop;
        }
    },
    __OnVScroll: function (e) {

        //当滚动条滚动，禁止刷新top/bottom
        //this._stopUpdateTableView();

        var isVirtualScroll = this.isVirtualScroll();
        if (isVirtualScroll) {

            this._scrollTop = this._vscrollEl.scrollTop;

            var me = this;
            setTimeout(function () {
                //me._rowsViewEl.scrollTop = me._scrollTop;
                me._syncScrollOffset(null, me._scrollTop);
                me.__scrollTimer = null;
            }, 8);

            if (this._scrollTopTimer) {
                clearTimeout(this._scrollTopTimer);
            }
            this._scrollTopTimer = setTimeout(function () {
                me._scrollTopTimer = null;

                me._tryUpdateScroll();

                //me._rowsViewEl.scrollTop = me._scrollTop;
                me._syncScrollOffset(null, me._scrollTop);
                //document.title = new Date().getTime();
            }, 150);
        }
    },

    wheelIncrement: 0,

    setWheelIncrement: function (val) {
        this.wheelIncrement = val;
    },
    getWheelIncrement: function () {
        return this.wheelIncrement;
    },

    __OnMouseWheel: function (e) {
        var ev = e.wheelDelta ? e : e.originalEvent;
        var detail = ev.wheelDelta || -ev.detail * 40;

        //document.title = detail;
        if (detail > 0) {
            detail = detail + this.wheelIncrement;
        } else {
            detail = detail - this.wheelIncrement;
        }
        //detail = detail - this.wheelIncrement;

        var scrollTop = this.getScrollTop() - detail;

        var top = this.getScrollTop();
        this.setScrollTop(scrollTop);
        if (top != this.getScrollTop() || this.isVirtualScroll()) {
            e.preventDefault();
        }
        //e.preventDefault();
    },
    /////////////////////////////////////////
    _tryUpdateScroll: function () {
        //设置一个布尔值，reload成功后取消
        var doUpdate = this._canVirtualUpdate();
        if (doUpdate) {
            if (this._scrollPaging) {
                var me = this;
                //this._doGetScrollPaging = true;
                this.reload(null, null, function (e) {
                    //me._doGetScrollPaging = false;
                });
            } else {

                var sss = new Date();

                var scrollLeft = this._rowsViewEl.scrollLeft;

                this._doRemoveRowContent();
                this.doUpdateRows();         //30条，55ms                
                this.deferLayout(50);

                //this.doUpdate();
                //                alert(new Date() - sss);
                //document.title = scrollLeft;
                //this._rowsViewEl.scrollLeft = scrollLeft;
                this._syncScrollOffset(scrollLeft);
            }
        } else {
            //this._doUpdateTopBottom();
        }
    },
    //////////////////////////////////////////////////////////////

    //立刻刷新scrollTop
    _updateScrollTop: function (top) {
        this._syncScrollOffset(null, top);
        this._tryUpdateScroll();
    },

    //////////////////////////////////////////////////////////////

    __OnRowViewScroll: function (e) {

        this._syncScroll();

        if (this.virtualColumns) {
            this.doVirtualColumns();
        }
    },

    doVirtualColumns: function () {
        //var scrollLeft = this.getScrollLeft();

        var me = this;
        if (me._virtualColumnTimer) {
            clearTimeout(me._virtualColumnTimer);
            me._virtualColumnTimer = null;
        }
        me._virtualColumnTimer = setTimeout(function () {
            me._virtualColumnTimer = null;

            //debugger

            me._doRemoveRowContent();

            me.doUpdateRows();         //30条，55ms                
            me.deferLayout(50);

        }, 500);

    }



});
mini.regClass(mini.ScrollGridView, "ScrollGridView");

mini._onScrollDownUp = function (el, mousedown, mouseup) {
    function onmousedown(e) {
        if (mini.isFirefox) {
            mini.on(document, 'mouseup', onmouseup);
        } else {
            mini.on(document, 'mousemove', onmousemove);
        }
        mousedown(e);
    }
    function onmousemove(e) {
        //no ff
        mini.un(document, 'mousemove', onmousemove);
        mouseup(e);
    }
    function onmouseup(e) {
        //ff
        mini.un(document, 'mouseup', onmouseup);
        mouseup(e);
    }

    mini.on(el, 'mousedown', onmousedown);
}



mini.mousewheelEditable = false;

//Selection
mini._Grid_Select = function (grid) {

    this.owner = grid, el = grid.el;

    //return;

    //row hover        
    grid.on("rowmousemove", this.__OnRowMouseMove, this);
    mini.on(grid._viewportEl, "mouseout", this.__OnMouseOut, this);
    mini.on(grid._viewportEl, "mousewheel", this.__OnMouseWheel, this);

    mini.on(document, "mousewheel", this.__OnMouseWheel, this);


    //cell select/ cell edit

    grid.on("cellmousedown", this.__OnCellMouseDown, this);

    //grid.on("cellclick", this.__OnGridCellClick, this);
    grid.on("cellmouseup", this.__OnGridCellClick, this);
    grid.on("celldblclick", this.__OnGridCellClick, this);

    mini.on(grid.el, "keydown", this.__OnGridKeyDown, this);

    jQuery(grid._columnsEl).on("mouseenter", ".mini-grid-headerCell", function (e) {
        jQuery(e.currentTarget).addClass("mini-grid-header-over");
    });
    jQuery(grid._columnsEl).on("mouseleave", ".mini-grid-headerCell", function (e) {
        jQuery(e.currentTarget).removeClass("mini-grid-header-over");
    });
    //    jQuery(grid._columnsEl).hover(function () {
    //        jQuery(this).addClass("");
    //    }, function () {
    //        jQuery(this).removeClass("");
    //    });
}
mini._Grid_Select.prototype = {
    __OnGridKeyDown: function (e) {

        var grid = this.owner;

        var p = mini.findParent(e.target, 'mini-grid-detailRow');
        var inGrid = p ? mini.isAncestor(grid.el, p) : false;

        if (mini.isAncestor(grid._filterEl, e.target)
            || mini.isAncestor(grid._summaryEl, e.target)
            || mini.isAncestor(grid._toolbarEl, e.target)
            || mini.isAncestor(grid._footerEl, e.target)
            || (mini.findParent(e.target, 'mini-grid-detailRow') && inGrid)
            || mini.findParent(e.target, 'mini-grid-rowEdit')
            || mini.findParent(e.target, 'mini-tree-editinput')
            ) {
            return;
        }

        var currentCell = grid.getCurrentCell();

        if (e.shiftKey || e.ctrlKey || e.altKey) {
            return;
        }

        if (e.keyCode == 37 || e.keyCode == 38 || e.keyCode == 39 || e.keyCode == 40) {
            e.preventDefault();
        }
        var columns = grid.getVisibleColumns();

        //////////////////////////////////////
        function getAt(index) {
            return grid.getVisibleRows()[index];
        }
        function indexOf(row) {
            return grid.getVisibleRows().indexOf(row);
        }
        function getCount() {
            return grid.getVisibleRows().length;
        }

        var column = currentCell ? currentCell[1] : null,
            record = currentCell ? currentCell[0] : null;
        if (!currentCell) record = grid.getCurrent();
        var columnIndex = columns.indexOf(column);

        var rowIndex = indexOf(record);
        var count = getCount();

        switch (e.keyCode) {
            case 9:     //tab
                if (grid.allowCellEdit && grid.editOnTabKey) {
                    e.preventDefault();
                    grid._beginEditNextCell(e.shiftKey == false, true);
                    return;
                }
                //                if (column) {
                //                    if (columnIndex > 0) {
                //                        columnIndex += 1;
                //                    }
                //                } else {
                //                    columnIndex = 0;
                //                }
                //                e.preventDefault();
                break;
            case 27:        //esc

                break;
            case 13:     //enter
                if (grid.allowCellEdit && grid.editNextOnEnterKey) {
                    if (column) {
                        if (grid.isEditingCell(currentCell) || !column.editor) {
                            grid._beginEditNextCell(e.shiftKey == false);
                            return;
                        }
                    }
                }
                if (grid.allowCellEdit && currentCell && !column.readOnly && !grid.isReadOnly()) {
                    grid.beginEditCell();
                }
                break;
            case 37:    //left
                if (column) {
                    if (columnIndex > 0) {
                        columnIndex -= 1;
                    }
                } else {
                    columnIndex = 0;
                }
                break;
            case 38:    //top      
                if (record) {
                    if (rowIndex > 0) rowIndex -= 1;
                } else {
                    rowIndex = 0;
                }
                if (rowIndex != 0 && grid.isVirtualScroll()) {
                    /* @ 之前的虚拟滚动不支持超过边界，现在可以
                    if (grid._viewRegion.start > rowIndex) {
                        return;
                        //                        grid._bodyEl.scrollTop -= grid.defaultRowHeight;
                        //                        grid._tryUpdateScroll();
                    }
                    */
                }
                break;
            case 39:    //right
                if (column) {
                    if (columnIndex < columns.length - 1) {
                        columnIndex += 1;
                    }
                } else {
                    columnIndex = 0;
                }
                break;
            case 40:    //bottom                   
                if (record) {
                    if (rowIndex < count - 1) rowIndex += 1;
                } else {
                    rowIndex = 0;
                }
                /* @ 之前的虚拟滚动不支持超过边界，现在可以
                if (grid.isVirtualScroll()) {
                    if (grid._viewRegion.end < rowIndex) {
                        return;
                        grid.setScrollTop(grid.getScrollTop() + grid.defaultRowHeight);
                        //                        setTimeout(function () {
                        //                            grid.scrollIntoView(record, column);
                        //                        }, 100);
                        //grid._bodyEl.scrollTop += grid.defaultRowHeight;
                        //grid._tryUpdateScroll();
                    }
                }*/
                break;
            default:
                return;
                break;
        }

        column = columns[columnIndex];

        record = getAt(rowIndex);
        //current cell
        if (column && record && grid.allowCellSelect) {
            var currentCell = [record, column];
            grid.setCurrentCell(currentCell);
            grid.scrollIntoView(record, column, false);
        }


        //current row
        if (!grid.onlyCheckSelection) {
            if (e.keyCode != 37 && e.keyCode != 39) {       //当左右键不执行选中

                if (record && grid.allowRowSelect) {

                    var ex = { record: record, selected: record, cancel: false, htmlEvent: e };
                    if (record) {
                        grid.fire("beforerowselect", ex);
                        grid.fire("beforeselect", ex);
                    }
                    if (ex.cancel) return;


                    grid.deselectAll();
                    grid.setCurrent(record);
                    if (record) {

                        grid.scrollIntoView(record, null, false);
                        //grid.scrollIntoView(record, null);
                    } 
                }
            }
        }
    },
    __OnMouseWheel: function (e) {
        var grid = this.owner;

        //e.preventDefault();
        e.stopPropagation();

        if (mini.mousewheelEditable) return;

        //        var gridEl = mini.findParent(e.target, 'mini-datagrid');
        //        if (gridEl != grid.el) {
        //            e.preventDefault();
        //            return
        //        }




        var editor = grid._editingControl;
        if (editor && editor.within(e)) return;

        if (grid.allowCellEdit) {
            grid.commitEdit();
        }
    },
    __OnGridCellClick: function (e) {
        var grid = this.owner,
            type = e.type;
        var sss = new Date();
        //return;
        if (type == "cellmouseup") type = "cellclick";

        if (grid.allowCellEdit == false) return;
        if (grid.cellEditAction != type) return;

        var record = e.record, column = e.column;

        if (!column.readOnly && !grid.isReadOnly()) {
            if (e.htmlEvent.shiftKey || e.htmlEvent.ctrlKey) {
            } else {


                grid.beginEditCell();


            }
        }


    },
    __OnCellMouseDown: function (e) {
        //return;
        var me = this;

        if (!me.owner.selectOnRightClick) {
            if (e.htmlEvent.which == 3) return;  //阻止右键选中行
        }

        setTimeout(function () {    //!!必须延迟1秒（不能删除）
            me.__doSelect(e);
        }, 1);
    },
    __OnRowMouseMove: function (e) {
        var grid = this.owner;
        var record = e.record;

        if (!grid.enabled || grid.enableHotTrack == false) return;

        grid.focusRow(record);
    },
    __OnMouseOut: function (e) {
        if (this.owner.allowHotTrackOut) {
            this.owner.focusRow(null);
        }
    },
    __doSelect: function (e) {

        //debugger
        //return;

        var record = e.record, column = e.column;
        var grid = this.owner;
        if (record.enabled === false) return;


        //cell select
        if (grid.allowCellSelect) {
            var cell = [record, column];
            grid.setCurrentCell(cell);
        }

        if (grid.onlyCheckSelection && !column._multiRowSelect) return;

        //row select 

        //        function isOnlyCheckSelection() {
        //            return grid.onlyCheckSelection && !column._multiRowSelect;
        //        }

        if (grid.allowRowSelect) {
            var ex = { record: record, selected: record, cancel: false, htmlEvent: e };


            if (record) {
                if (!grid.isSelected(record)) {
                    grid.fire("beforerowselect", ex);
                    grid.fire("beforeselect", ex);
                }
            }

//            if (record) {
//                grid.fire("beforerowselect", ex);
//                grid.fire("beforeselect", ex);
//            }


            if (ex.cancel) return;

            if (grid.getMultiSelect()) {

                grid.el.onselectstart = function () { };

                if (e.htmlEvent.shiftKey) {
                    grid.el.onselectstart = function () { return false };
                    try {
                        e.htmlEvent.preventDefault();
                    } catch (ex) { }

                    var current = grid.getCurrent();
                    if (current) {

                        grid.deselectAll();
                        grid.selectRange(current, record);
                        grid.setCurrent(current);
                    } else {
                        grid.select(record);
                        grid.setCurrent(record);
                    }

                } else {

                    grid.el.onselectstart = function () { };
                    if (e.htmlEvent.ctrlKey) {
                        grid.el.onselectstart = function () { return false };
                        try {
                            e.htmlEvent.preventDefault();
                        } catch (ex) { }
                    }

                    if (e.column._multiRowSelect === true || e.htmlEvent.ctrlKey || grid.allowUnselect) {
                        if (grid.isSelected(record)) {
                            grid.deselect(record);
                        } else {
                            grid.select(record);
                            grid.setCurrent(record);
                        }
                    } else {
                        if (grid.isSelected(record)) {
                            //                            grid.deselectAll();
                            //                            grid.select(record);
                        } else {
                            grid.deselectAll();
                            grid.select(record);
                            grid.setCurrent(record);
                        }
                    }
                }
            } else {
                //alert(grid.isSelected(record));
                //if (grid.isSelected(record)) return;
                if (!grid.isSelected(record)) {
                    grid.deselectAll();
                    grid.select(record);
                } else {
                    if (e.htmlEvent.ctrlKey || grid.allowUnselect) {
                        grid.deselectAll();
                    }
                }
            }
        }
    }
};


/* RowGroup
-----------------------------------------------------------------------------*/

mini._Grid_RowGroup = function (grid) {
    this.owner = grid, el = grid.el;    
    mini.on(grid._bodyEl, "click", this.__OnClick, this);
}
mini._Grid_RowGroup.prototype = {
    __OnClick: function (e) {
        var grid = this.owner;
        var group = grid._getRowGroupByEvent(e);
        if (group) {

            if (!grid.groupTitleCollapsible && !mini.hasClass(e.target, "mini-grid-group-ecicon")) {
                return;
            }


            var ev = { htmlEvent: e, cancel: false, group: group };
            grid.fire("beforegroupclick", ev);
            if (ev.cancel === true) return;

            grid.toggleRowGroup(group);
        }
    }
};


/* ColumnsMenu
-----------------------------------------------------------------------------*/
mini._Grid_ColumnsMenu = function (grid) {
    this.owner = grid;
    this.menu = this.createMenu();
    mini.on(grid.el, "contextmenu", this.__OnContextMenu, this);    
    grid.on("destroy", this.__OnGridDestroy, this);
}
mini._Grid_ColumnsMenu.prototype = {
    __OnGridDestroy: function (e) {
        if (this.menu) this.menu.destroy();
        this.menu = null;
    },
    createMenu: function () {
        var menu = mini.create({ type: "menu", hideOnClick: false });
        menu.on("itemclick", this.__OnItemClick, this);
        jQuery(menu.el).addClass("mini-menu-open");
        return menu;
    },
    updateMenu: function () {
        var grid = this.owner, menu = this.menu;
        var columns = grid.getBottomColumns();
        var items = [];
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            if (column.hideable) continue;
            var item = {};
            item.checked = column.visible;
            item.checkOnClick = true;
            item.text = grid._createHeaderText(column);
            if (item.text == "&nbsp;") {
                if (column.type == "indexcolumn") item.text = "序号";
                if (column.type == "checkcolumn") item.text = "选择";
            }
            items.push(item);
            //enabled
            item.enabled = column.enabled;

            item._column = column;
        }
        menu.setItems(items);
    },
    __OnContextMenu: function (e) {
        var grid = this.owner;
        if (grid.showColumnsMenu == false) return;
        if (mini.isAncestor(grid._columnsEl, e.target) == false) return;
        this.updateMenu();
        this.menu.showAtPos(e.pageX, e.pageY);
        return false;
    },
    __OnItemClick: function (e) {
        var grid = this.owner, menu = this.menu;
        var columns = grid.getBottomColumns();
        var items = menu.getItems();
        var item = e.item, column = item._column;

        var checkedCount = 0;
        for (var i = 0, l = items.length; i < l; i++) {
            var it = items[i];
            if (it.getChecked()) checkedCount++;
        }
        if (checkedCount < 1) {
            item.setChecked(true);
        }

        var checked = item.getChecked();
        if (checked) grid.showColumn(column);
        else grid.hideColumn(column);
    }
}


/* _CellToolTip
-----------------------------------------------------------------------------*/

mini._Grid_CellToolTip = function (grid) {
    this.owner = grid;
    mini.on(this.owner.el, "mousemove", this.__OnGridMouseMove, this);
};
mini._Grid_CellToolTip.prototype = {
    __OnGridMouseMove: function (e) {
        var grid = this.owner;

        if (mini.hasClass(e.target, "mini-grid-headerCell-inner")) {
            var cellEl = e.target;

            if (cellEl.scrollWidth > cellEl.clientWidth) {
                var s = cellEl.innerText || cellEl.textContent || "";
                cellEl.title = s.trim();
            } else {
                cellEl.title = "";
            }

            return;
        }

        var cell = grid._getCellByEvent(e);

        var cellEl = grid._getCellEl(cell[0], cell[1]);
        //if (cell.record && cell.column && cell.column.vtype) debugger

        var error = grid.getCellError(cell[0], cell[1]);
        if (cellEl) {
            //if(cellEl.id == '3$cell$2') debugger
            if (error) {
                setTimeout(function () {
                    cellEl.title = error.errorText;
                }, 10);
                return;
            }
            setTimeout(function () {
                var innerEl = cellEl;
                if (cellEl.firstChild) {
                    if (mini.hasClass(cellEl.firstChild, "mini-grid-cell-inner")) {
                        innerEl = cellEl.firstChild;
                    }
                    if (mini.hasClass(cellEl.firstChild, "mini-tree-nodetitle")) {
                        innerEl = cellEl.firstChild;
                    }
                }
                if (innerEl.scrollWidth > innerEl.clientWidth && grid.getShowCellTip() && cell[1].showCellTip) {
                    var s = innerEl.innerText || innerEl.textContent || "";
                    cellEl.title = s.trim();
                } else {
                    cellEl.title = "";
                }
            }, 10);
        }
    }
};


/* Sorter
-----------------------------------------------------------------------------*/

mini._Grid_Sorter = function (grid) {

    this.owner = grid;
    this.owner.on("headercellclick", this.__OnGridHeaderCellClick, this);
    this.owner.on("headercelldblclick", this.__OnGridHeaderCellClick, this);
    //this.owner.on("headercellmousedown", this.__OnGridHeaderCellMouseDown, this);

    mini.on(grid._headerEl, "mousemove", this.__OnGridHeaderMouseMove, this);
    mini.on(grid._headerEl, "mouseout", this.__OnGridHeaderMouseOut, this);
};
mini._Grid_Sorter.prototype = {
    __OnGridHeaderMouseOut: function (e) {
        if (this._focusedColumnEl) {
            mini.removeClass(this._focusedColumnEl, "mini-grid-headerCell-hover");
        }
    },
    __OnGridHeaderMouseMove: function (e) {
        var t = mini.findParent(e.target, "mini-grid-headerCell");
        if (t) {
            mini.addClass(t, "mini-grid-headerCell-hover");
            this._focusedColumnEl = t;
        }
    },
    __OnGridHeaderCellClick: function (e) {
        var grid = this.owner;

        var type = e.htmlEvent.type;
        if (type == 'dblclick' && !grid.sortDblClick) return;
        if (type == 'click' && grid.sortDblClick) return;


        //if (!mini.hasClass(e.htmlEvent.target, "mini-grid-column-splitter")) {
        if (mini.hasClass(e.htmlEvent.target, "mini-grid-headerCell-inner")) {
            if (grid.allowSortColumn && grid.isEditing() == false) {

                var column = e.column;
                if (!column.columns || column.columns.length == 0) {
                    var sortField = column.sortField || column.field;

                    if (sortField && column.allowSort !== false) {

                        if (grid.allowCancelSort && grid.getSortOrder() == "desc") {
                            grid.clearSort();
                        } else {
                            var sortOrder = "asc";
                            if (grid.getSortField() == sortField) {
                                sortOrder = grid.getSortOrder() == "asc" ? "desc" : "asc";
                            }

                            grid.sortBy(sortField, sortOrder);
                        }
                    }
                }
            }
        }
    }
};


/* _ColumnMove
-----------------------------------------------------------------------------*/

mini._Grid_ColumnMove = function (grid) {
    this.owner = grid;
    mini.on(this.owner.el, "mousedown", this.__onGridMouseDown, this);
};
mini._Grid_ColumnMove.prototype = {
    __onGridMouseDown: function (e) {

        var grid = this.owner;
        
        if (grid.isEditing()) return;
        if (mini.hasClass(e.target, "mini-grid-column-splitter")) return;

        if (e.button == mini.MouseButton.Right) return;
        var t = mini.findParent(e.target, grid._headerCellCls);
        if (t) {
            this._remove();
            var column = grid._getColumnByEvent(e);
            if (grid.allowMoveColumn && column && column.allowMove) {
                this.dragColumn = column;
                this._columnEl = t;
                this.getDrag().start(e);
            }
        }
    },
    getDrag: function () {
        if (!this.drag) {
            this.drag = new mini.Drag({
                capture: false,
                onStart: mini.createDelegate(this._OnDragStart, this),
                onMove: mini.createDelegate(this._OnDragMove, this),
                onStop: mini.createDelegate(this._OnDragStop, this)
            });
        }
        return this.drag;
    },
    _OnDragStart: function (drag) {
        function createHeaderCell(column) {
            var header = column.header;
            if (typeof header == "function") header = header.call(grid, column);
            if (mini.isNull(header) || header === "") header = "&nbsp;";
            return header;
        }

        var grid = this.owner;
        this._dragProxy = mini.append(document.body, '<div class="mini-grid-columnproxy"></div>');
        this._dragProxy.innerHTML = '<div class="mini-grid-columnproxy-inner" style="height:26px;">' + createHeaderCell(this.dragColumn) + '</div>';
        mini.setXY(this._dragProxy, drag.now[0] + 15, drag.now[1] + 18);
        mini.addClass(this._dragProxy, "mini-grid-no");

        this.moveTop = mini.append(document.body, '<div class="mini-grid-movetop"></div>');
        this.moveBottom = mini.append(document.body, '<div class="mini-grid-movebottom"></div>');
    },
    _OnDragMove: function (drag) {
        var grid = this.owner;
        var x = drag.now[0];

        mini.setXY(this._dragProxy, x + 15, drag.now[1] + 18);

        this.targetColumn = this.insertAction = null;
        var t = mini.findParent(drag.event.target, grid._headerCellCls);
        if (t) {
            var column = grid._getColumnByEvent(drag.event);
            if (column && column != this.dragColumn) {
                var p1 = grid.getParentColumn(this.dragColumn);
                var p2 = grid.getParentColumn(column);
                if (p1 == p2) {

                    this.targetColumn = column;
                    this.insertAction = "before";
                    var columnBox = grid.getColumnBox(this.targetColumn);

                    if (x > columnBox.x + columnBox.width / 2) {

                        this.insertAction = "after";
                    }
                }
            }
        }

        if (this.targetColumn) {

            mini.addClass(this._dragProxy, "mini-grid-ok");
            mini.removeClass(this._dragProxy, "mini-grid-no");

            var box = grid.getColumnBox(this.targetColumn);

            this.moveTop.style.display = 'block';
            this.moveBottom.style.display = 'block';
            if (this.insertAction == "before") {

                mini.setXY(this.moveTop, box.x - 4, box.y - 9);
                mini.setXY(this.moveBottom, box.x - 4, box.bottom);
            } else {

                mini.setXY(this.moveTop, box.right - 4, box.y - 9);
                mini.setXY(this.moveBottom, box.right - 4, box.bottom);
            }
        } else {
            mini.removeClass(this._dragProxy, "mini-grid-ok");
            mini.addClass(this._dragProxy, "mini-grid-no");

            this.moveTop.style.display = 'none';
            this.moveBottom.style.display = 'none';
        }
    },
    _remove: function () {
        var grid = this.owner;
        mini.removeNode(this._dragProxy);
        mini.removeNode(this.moveTop);
        mini.removeNode(this.moveBottom);
        this._dragProxy = this.moveTop = this.moveBottom = this.dragColumn = this.targetColumn = null;
    },
    _OnDragStop: function (drag) {
        var grid = this.owner;
        
        grid.moveColumn(this.dragColumn, this.targetColumn, this.insertAction);
        this._remove();
    }
};



/* _ColumnSplitter
-----------------------------------------------------------------------------*/

mini._Grid_ColumnSplitter = function (grid) {           //ColumnResizable
    this.owner = grid;    
    mini.on(grid.el, "mousedown", this.__OnMouseDown, this);
};
mini._Grid_ColumnSplitter.prototype = {
    __OnMouseDown: function (e) {
        var grid = this.owner;
        var t = e.target;

        if (mini.hasClass(t, "mini-grid-column-splitter")) {
            var column = grid._getColumnById(t.id);
            if (grid.isEditing()) return;
            if (grid.allowResizeColumn && column && column.allowResize) {
                this.splitterColumn = column;
                this.getDrag().start(e);
            }
        }
    },
    getDrag: function () {
        if (!this.drag) {
            this.drag = new mini.Drag({
                capture: true,
                onStart: mini.createDelegate(this._OnDragStart, this),
                onMove: mini.createDelegate(this._OnDragMove, this),
                onStop: mini.createDelegate(this._OnDragStop, this)
            });
        }
        return this.drag;
    },
    _OnDragStart: function (drag) {
        var grid = this.owner;
        var columnBox = grid.getColumnBox(this.splitterColumn);

        this.columnBox = columnBox;
        this._dragProxy = mini.append(document.body, '<div class="mini-grid-proxy"></div>');
        var box = grid.getGridViewBox();
        box.x = columnBox.x;
        box.width = columnBox.width;
        box.right = columnBox.right;
        mini.setBox(this._dragProxy, box);

        grid._ignoreClick = true;
    },
    _OnDragMove: function (drag) {
        var grid = this.owner;
        var box = mini.copyTo({}, this.columnBox);
        var width = box.width + (drag.now[0] - drag.init[0]);
        if (width < grid.columnMinWidth) width = grid.columnMinWidth;
        if (width > grid.columnMaxWidth) width = grid.columnMaxWidth;

        mini.setWidth(this._dragProxy, width);
    },
    _OnDragStop: function (drag) {
        var grid = this.owner;
        var box = mini.getBox(this._dragProxy);
        var sf = this;
        var allowSort = grid.allowSortColumn;
        grid.allowSortColumn = false;
        setTimeout(function () {
            jQuery(sf._dragProxy).remove();
            sf._dragProxy = null;
            grid.allowSortColumn = allowSort;
        }, 10);

        var column = this.splitterColumn;

        var columnWidth = parseInt(column.width);
        if (columnWidth + "%" != column.width) {
            var width = grid.getColumnWidth(column);
            var w = parseInt(columnWidth / width * box.width);
            if (w < grid.columnMinWidth) w = grid.columnMinWidth;
            grid.setColumnWidth(column, w);
        }

        setTimeout(function () {
            grid._ignoreClick = false;
        }, 100);
    }
};


/* DragDrop
-----------------------------------------------------------------------------*/

/*
控制行/节点的拖拽拖放行为    
Grid 行拖拽事件:
    RowDragStart可以控制是否可拖拽此行
    RowDragDrop 可以控制是否执行默认的投放操作(移动)
    从而改成自己的投放行为(调用Project.MoveTask方法)    
*/
mini._Grid_DragDrop = function (grid) {
    this.owner = grid;
    this.owner.on('CellMouseDown', this.__OnGridCellMouseDown, this);
}
mini._Grid_DragDrop.prototype = {
    __OnGridCellMouseDown: function (e) {

        if (e.htmlEvent.button == mini.MouseButton.Right) return;
        var grid = this.owner;
        if (grid._dragging) return;

        this.dropObj = grid;

        if (mini.findParent(e.htmlEvent.target, 'mini-tree-editinput')) return;

        if (grid.isReadOnly() || grid.isAllowDrag(e.record, e.column) == false) return;
        //alert(grid._getDragData().length);

        var ex = grid._OnDragStart(e.record, e.column);
        if (ex.cancel) return;
        this.dragText = ex.dragText;

        var record = e.record;

        this.isTree = !!grid.isTree;

        this.beginRecord = record;
        //alert(grid._getDragData().length);
        var drag = this._getDrag();
        drag.start(e.htmlEvent);
    },
    _OnDragStart: function (drag) {
        var grid = this.owner;
        grid._dragging = true;

        var record = this.beginRecord;
        this.dragData = grid._getDragData();

        if (this.dragData.indexOf(record) == -1) {
            this.dragData.push(record);
        }
        //grid.select(record);

        this.feedbackEl = mini.append(document.body, '<div class="mini-feedback"></div>');
        this.feedbackEl.innerHTML = this.dragText;
        this.lastFeedbackClass = "";

        this.enableHotTrack = grid.getEnableHotTrack();
        grid.setEnableHotTrack(false);
    },
    _getDropTargetObj: function (event) {
        var dom = mini.findParent(event.target, "mini-grid", 500);
        if (dom) {
            return mini.get(dom);
        }
    },
    _OnDragMove: function (drag) {
        var grid = this.owner;
        var dropObj = this._getDropTargetObj(drag.event);
        this.dropObj = dropObj;

        var x = drag.now[0], y = drag.now[1];
        mini.setXY(this.feedbackEl, x + 15, y + 18);

        if (dropObj && dropObj.allowDrop) {
            this.isTree = dropObj.isTree;

            var targetRecord = dropObj._getRecordByEvent(drag.event);
            this.dropRecord = targetRecord;

            if (targetRecord) {
                if (this.isTree) {
                    this.dragAction = this.getFeedback(targetRecord, y, 3);
                } else {
                    this.dragAction = this.getFeedback(targetRecord, y, 2);
                }
            } else {
                this.dragAction = "no";
            }

        } else {
            this.dragAction = "no";
        }

        //empty
        if (dropObj && dropObj.allowDrop && !targetRecord && dropObj.getData().length == 0) {
            this.dragAction = "add";
        }

        this.lastFeedbackClass = "mini-feedback-" + this.dragAction;
        this.feedbackEl.className = "mini-feedback " + this.lastFeedbackClass;
        if (this.dragAction == "no") targetRecord = null;
        this.setRowFeedback(targetRecord, this.dragAction);
    },
    _OnDragStop: function (drag) {

        var grid = this.owner;
        var dropObj = this.dropObj;

        grid._dragging = false;
        mini.removeNode(this.feedbackEl);


        grid.setEnableHotTrack(this.enableHotTrack);

        this.feedbackEl = null;
        this.setRowFeedback(null);

        //如果是树形数据源, 只能选择一个父节点, 子节点去除掉
        if (this.isTree) {
            var dragRecords = [];
            for (var i = 0, l = this.dragData.length; i < l; i++) {
                var dragRecord = this.dragData[i];
                var hasParent = false;
                for (var j = 0, k = this.dragData.length; j < k; j++) {
                    var dr = this.dragData[j];
                    if (dr != dragRecord) {
                        hasParent = grid.isAncestor(dr, dragRecord);
                        if (hasParent) break;
                    }
                }

                if (!hasParent) {
                    dragRecords.push(dragRecord);
                }
            }
            this.dragData = dragRecords;
        }

        if (this.dragAction == 'add' && !this.dropRecord) {
            this.dropRecord = dropObj.getRootNode ? dropObj.getRootNode() : { __root: true };
        }

        //alert(dragRecords[0].Name + ":" + dragRecords[1].Name);
        if (this.dropRecord && dropObj && this.dragAction != "no") {
            //var e = grid._OnDragDrop(this.dragData, this.dropRecord, this.dragAction);
            var e = dropObj._OnDragDrop(this.dragData, this.dropRecord, this.dragAction);       //beforedrop
            if (!e.cancel) {
                var dragRecords = e.dragNodes, targetRecord = e.targetNode, action = e.action;

                if (dropObj.isTree) {

                
                    
                    if (grid == dropObj) {
                        dropObj.moveNodes(dragRecords, targetRecord, action);
                    } else {
                        if (dropObj.dropAction == "move") {
                            grid.removeNodes(dragRecords);
                        } else if (dropObj.dropAction == "copy") {
                            dragRecords = mini.clone(dragRecords);
                        }
                        dropObj.addNodes(dragRecords, targetRecord, action);
                    }

                } else {
                    var index = dropObj.indexOf(targetRecord);
                    if (action == "after") index += 1;

                    if (grid == dropObj) {
                        dropObj.moveRow(dragRecords, index);
                    } else {
                        
                        if (dropObj.dropAction == "move") {
                            grid.removeRows(dragRecords);
                        } else if (dropObj.dropAction == "copy") {
                            dragRecords = mini.clone(dragRecords);
                        }

                        if (this.dragAction == "add") {
                            dropObj.addRows(dragRecords);
                        } else {
                            dropObj.addRows(dragRecords, index);
                        }
                    }
                }

                var e = {
                    dragNode: e.dragNodes[0],
                    dropNode: e.targetNode,
                    dragAction: e.action,

                    dragNodes: e.dragNodes,
                    targetNode: e.targetNode
                };
                dropObj.fire("drop", e);
            }

        }

        this.dropRecord = null;
        this.dragData = null;
    },
    setRowFeedback: function (record, feedback) {
        //        if (this.lastRowFeedback != -1) {
        //            
        //        }
        var grid = this.owner;
        var dropObj = this.dropObj;

        if (this.lastAddDomRow && dropObj) {
            dropObj.removeRowCls(this.lastAddDomRow, "mini-tree-feedback-add");
        }
        if (record == null || this.dragAction == "add") {
            mini.removeNode(this.feedbackLine);
            this.feedbackLine = null;
        }

        this.lastRowFeedback = record;

        if (record != null) {
            if (feedback == "before" || feedback == "after") {
                if (!this.feedbackLine) {
                    this.feedbackLine = mini.append(document.body, "<div class='mini-feedback-line'></div>");
                }
                this.feedbackLine.style.display = "block";
                var rowBox = dropObj.getRowBox(record);
                var x = rowBox.x, y = rowBox.y - 1;
                if (feedback == "after") {
                    y += rowBox.height;
                }
                mini.setXY(this.feedbackLine, x, y);

                var box = dropObj.getBox(true);
                mini.setWidth(this.feedbackLine, box.width);
            } else {
                dropObj.addRowCls(record, "mini-tree-feedback-add");
                this.lastAddDomRow = record;

                //mini.repaint(grid.el);
            }
        }
    },
    getFeedback: function (dropRecord, y, way) {
        //way : 2, 3
        var grid = this.owner;

        var dropObj = this.dropObj;

        var rowBox = dropObj.getRowBox(dropRecord);
        //var rowPoint = grid.PointToViewport({ X: rowBounds.Left, Y: rowBounds.Top });

        var h = rowBox.height;
        var t = y - rowBox.y;

        var effect = null;

        //如果dropRecord属于dragData之一, 则"no"
        if (this.dragData.indexOf(dropRecord) != -1) return "no";
        var IsLeaf = false;
        if (way == 3) {
            IsLeaf = dropObj.isLeaf(dropRecord);

            //遍历DragRecords, dropRecord不能是其子节点
            for (var i = 0, l = this.dragData.length; i < l; i++) {
                var dragRecord = this.dragData[i];

                var isAncestor = dropObj.isAncestor(dragRecord, dropRecord);
                if (isAncestor) {
                    effect = "no";
                    break;
                }
            }
        }
        if (effect == null) {
            if (way == 2) {
                if (t > h / 2) effect = "after";
                else effect = "before";
            } else {
                if (IsLeaf && dropObj.allowLeafDropIn === false) {
                    if (t > h / 2) effect = "after";
                    else effect = "before";
                } else {
                    if (t > (h / 3) * 2) effect = "after";
                    else if (h / 3 <= t && t <= (h / 3 * 2)) effect = "add";
                    else effect = "before";
                }
            }
        }
        var e = dropObj._OnGiveFeedback(effect, this.dragData, dropRecord, grid);
        return e.effect;
    },
    _getDrag: function () {
        if (!this.drag) {
            this.drag = new mini.Drag({
                //capture: false,
                onStart: mini.createDelegate(this._OnDragStart, this),
                onMove: mini.createDelegate(this._OnDragMove, this),
                onStop: mini.createDelegate(this._OnDragStop, this)
            });
        }
        return this.drag;
    }
};


//Events
mini._Grid_Events = function (grid) {
    this.owner = grid, el = grid.el;

    mini.on(el, 'click', this.__OnClick, this);
    mini.on(el, 'dblclick', this.__OnDblClick, this);

    mini.on(el, 'mousedown', this.__OnMouseDown, this);
    mini.on(el, 'mouseup', this.__OnMouseUp, this);
    mini.on(el, 'mousemove', this.__OnMouseMove, this);
    mini.on(el, 'mouseover', this.__OnMouseOver, this);
    mini.on(el, 'mouseout', this.__OnMouseOut, this);

    mini.on(el, 'keydown', this.__OnKeyDown, this);
    mini.on(el, 'keyup', this.__OnKeyUp, this);

    mini.on(el, 'contextmenu', this.__OnContextMenu, this);

    //rowmouseenter, rowmouseout
    grid.on("rowmousemove", this.__OnRowMouseMove, this);


    mini.on(window, "resize", this.__windowResize, this);
}
mini._Grid_Events.prototype = {

    __windowResize: function () {
        var grid = this.owner;

        function layoutEditor() {
            var editor = grid._getEditingControl();
            if (editor) {
                var currentCell = grid.getCurrentCell();
                var cellBox = grid.getCellBox(currentCell[0], currentCell[1]);
                grid._getEditWrap(cellBox, editor);
                grid._setEditorBox(editor, cellBox); //_setEdiorBox
            }
        }

        //if (grid._editWrap) grid._editWrap.style.left = "-10000px";
        setTimeout(function () {
            layoutEditor();
        }, 100);

    },


    _row: null,
    __OnRowMouseMove: function (e) {
        var grid = this.owner;
        var row = e.record;

        if (this._row != row) {
            //            if (this._row) {
            //                e.record = this._row;
            //                e.row = this._row;
            //                grid.fire("rowmouseleave", e);
            //            }
            e.record = row;
            e.row = row;
            grid.fire("rowmouseenter", e);
        }
        this._row = row;
    },


    __OnClick: function (e) {
        if (this.owner._ignoreClick) return;
        this._fireEvent(e, 'Click');
    },
    __OnDblClick: function (e) {
        this._fireEvent(e, 'Dblclick');
    },
    __OnMouseDown: function (e) {
        var grid = this.owner;
        if (mini.findParent(e.target, 'mini-tree-editinput')) return;
        if (mini.findParent(e.target, "mini-tree-node-ecicon")) return;

        this._fireEvent(e, 'MouseDown');

        //if(e.target.tagName
        var timer = 300;
        if (e.target.tagName.toLowerCase() == "a" && e.target.href) {
            timer = 10;
        }

        function fn() {
            var p = mini.findParent(e.target, 'mini-grid-detailRow');
            if (mini.isAncestor(grid.el, p)) return;
            if (!!grid._editingCell) return;

            grid._tryFocus(e);
        }

        //        if (mini.isChrome) {
        //            fn();
        //        } else {
        setTimeout(function () {
            fn();
        }, timer);
        //}
    },
    __OnMouseUp: function (e) {
        if (mini.findParent(e.target, 'mini-tree-editinput')) return;
        if (mini.findParent(e.target, "mini-tree-node-ecicon")) return;
        if (mini.findParent(e.target, "mini-tree-checkbox")) return;

        var grid = this.owner;
        if (mini.isAncestor(grid.el, e.target)) {
            //            setTimeout(function () {
            //                grid._tryFocus(e);
            //            }, 30);
            //this.owner._tryFocus(e);
            this._fireEvent(e, 'MouseUp');
        }
    },
    __OnMouseMove: function (e) {
        this._fireEvent(e, 'MouseMove');
    },
    __OnMouseOver: function (e) {
        this._fireEvent(e, 'MouseOver');
    },
    __OnMouseOut: function (e) {
        this._fireEvent(e, 'MouseOut');
    },
    __OnKeyDown: function (e) {
        this._fireEvent(e, 'KeyDown');
    },
    __OnKeyUp: function (e) {
        this._fireEvent(e, 'KeyUp');
    },
    __OnContextMenu: function (e) {
        this._fireEvent(e, 'ContextMenu');
    },
    _fireEvent: function (e, name) {
        //if (name == "Dblclick") debugger
        //if (!this.enabled) return;

        //if(name == "Click") debugger

        var grid = this.owner;

        var cell = grid._getCellByEvent(e);
        var record = cell[0], column = cell[1];
        if (record) {
            var eve = {
                record: record,
                row: record,
                htmlEvent: e
            };

            var fn = grid['_OnRow' + name];
            if (fn) {
                fn.call(grid, eve);
            } else {
                grid.fire("row" + name, eve);
            }
        }
        if (column) {
            var eve = {
                column: column,
                field: column.field,
                htmlEvent: e
            };

            var fn = grid['_OnColumn' + name];
            if (fn) {
                fn.call(grid, eve);
            } else {
                grid.fire("column" + name, eve);
            }
        }

        if (record && column) {
            var eve = {
                sender: grid,
                record: record,
                row: record,
                column: column,
                field: column.field,
                htmlEvent: e
            };

            var fn = grid['_OnCell' + name];
            if (fn) {
                fn.call(grid, eve);
            } else {
                //if(name == "Click") debugger
                grid.fire("cell" + name, eve);
            }

            if (column["onCell" + name]) {
                column["onCell" + name].call(column, eve);
            }

        }
        if (!record && column && mini.findParent(e.target, 'mini-grid-headerCell')) {
            var eve = {
                column: column,
                htmlEvent: e
            };
            var fn = grid['_OnHeaderCell' + name];
            if (fn) {
                fn.call(grid, eve);
            } else {

                var evName = "onheadercell" + name.toLowerCase();
                if (column[evName]) {
                    eve.sender = grid;
                    column[evName](eve);
                }

                grid.fire("headercell" + name, eve);
            }
        }
    }
}
/*
描述：DataGrid
功能：
选择模型：
行选择
单元格选择
编辑模型：
单元格编辑
行编辑
分页模型：
服务端分页
top/bottom分页
自定义分页
*/

mini.DataGrid = function (el) {
    mini.DataGrid.superclass.constructor.call(this, null);

    this._Events = new mini._Grid_Events(this);
    this._Select = new mini._Grid_Select(this);
    this._DragDrop = new mini._Grid_DragDrop(this);

    this._RowGroup = new mini._Grid_RowGroup(this);

    this._Splitter = new mini._Grid_ColumnSplitter(this);
    this._ColumnMove = new mini._Grid_ColumnMove(this);
    this._Sorter = new mini._Grid_Sorter(this);
    this._CellToolTip = new mini._Grid_CellToolTip(this);
    this._ColumnsMenu = new mini._Grid_ColumnsMenu(this);

    this._createPagers();

    if (el) mini.applyTo.call(this, el);


//    if (mini.isIE || mini.isIE11) {
//    } else {
//        $(this.el).bind('focus', function (e) {
//            e.preventDefault();
//        });
//    }
};
mini.extend(mini.DataGrid, mini.ScrollGridView, {

    uiCls: "mini-datagrid",

    selectOnLoad: false,

    showHeader: false,
    showPager: true,

    validateOnAdd: false,
    getValidateOnAdd: function () {
        return this.validateOnAdd;
    },
    setValidateOnAdd: function (value) {
        this.validateOnAdd = value;
    },

    dropAction: "move",         //move,copy

    onlyCheckSelection: false,  //只运行checkcolumn选择
    _$onlyCheckSelection: true,
    allowUnselect: false,       //单选时点击能取消选择；多选的时候能直接点击多选
    allowRowSelect: true,
    allowCellSelect: false,
    allowCellEdit: false,
    cellEditAction: "cellclick",
    allowCellValid: false,

    allowResizeColumn: true,
    allowSortColumn: true,
    allowMoveColumn: true,

    showColumnsMenu: false,

    virtualScroll: false,
    enableHotTrack: true,       //启动移动高亮显示行
    allowHotTrackOut: true,   //允许高亮显示行移开消失
    showLoading: true,

    columnMinWidth: 8,

    _expandLoad: function () {
    },

    set: function (kv) {
        if (typeof kv == 'string') {
            return this;
        }

        var value = kv.value;
        delete kv.value;
        var url = kv.url;
        delete kv.url;
        var data = kv.data;
        delete kv.data;
        var columns = kv.columns;
        delete kv.columns;


        var defaultColumnWidth = kv.defaultColumnWidth;
        delete kv.defaultColumnWidth;
        if (defaultColumnWidth) {
            this.setDefaultColumnWidth(defaultColumnWidth);
        }

        if (!mini.isNull(columns)) {
            this.setColumns(columns);
        }

        mini.DataGrid.superclass.set.call(this, kv);

        if (!mini.isNull(data)) {
            this.setData(data);
        }
        if (!mini.isNull(url)) {

            this.setUrl(url);
        }
        if (!mini.isNull(value)) {
            this.setValue(value);
        }

        return this;
    },
    doUpdate: function () {
        //return;

        this._destroyEditors();
        mini.DataGrid.superclass.doUpdate.apply(this, arguments);
    },
    _destroyEditors: function () {
        var controls = mini.getChildControls(this);
        var editors = [];
        for (var i = 0, l = controls.length; i < l; i++) {
            var ui = controls[i];
            if (ui.el && mini.findParent(ui.el, this._rowCls)) {
                editors.push(ui);
                ui.destroy();
            }
        }
        //alert(editors.length);
    },
    /////////////////////////////////////////////////
    _OnDrawCell: function () {
        var e = mini.DataGrid.superclass._OnDrawCell.apply(this, arguments);
        //        var error = this.getCellError(e.record, e.column);
        //        if (error) {
        //            if (!e.cellCls) e.cellCls = "";
        //            e.cellCls += " mini-grid-cell-error ";
        //        }

        return e;
    },
    /////////////////////////////////////////////////
    _bindSource: function () {
        var source = this._dataSource;
        //table
        source.on("beforeload", this.__OnSourceBeforeLoad, this);
        source.on("preload", this.__OnSourcePreLoad, this);
        source.on("load", this.__OnSourceLoadSuccess, this);
        source.on("loaderror", this.__OnSourceLoadError, this);


        source.on("loaddata", this.__OnSourceLoadData, this);
        source.on("cleardata", this.__OnSourceClearData, this);
        source.on("sort", this.__OnSourceSort, this);
        source.on("filter", this.__OnSourceFilter, this);

        source.on("pageinfochanged", this.__OnPageInfoChanged, this);
        source.on("selectionchanged", this.__OnSelectionChanged, this);
        source.on("currentchanged", function (e) {
            this.fire("currentchanged", e);
        }, this);

        //
        source.on("add", this.__OnSourceAdd, this);
        source.on("update", this.__OnSourceUpdate, this);
        source.on("remove", this.__OnSourceRemove, this);
        source.on("move", this.__OnSourceMove, this);

        source.on("beforeadd", function (e) {
            this.fire("beforeaddrow", e);
        }, this);
        source.on("beforeupdate", function (e) {
            this.fire("beforeupdaterow", e);
        }, this);
        source.on("beforeremove", function (e) {
            this.fire("beforeremoverow", e);
        }, this);
        source.on("beforemove", function (e) {
            this.fire("beforemoverow", e);
        }, this);

        //select
        source.on("beforeselect", function (e) {
            this.fire("beforeselect", e);
        }, this);


        source.on("beforedeselect", function (e) {

            this.fire("beforedeselect", e);
        }, this);
        source.on("select", function (e) {
            this.fire("select", e);
        }, this);
        source.on("deselect", function (e) {
            this.fire("deselect", e);
        }, this);
    },
    _getMaskWrapEl: function () {
        return this.el;
    },
    _initData: function () {

        this.data = this._dataSource.getSource();
        this.pageIndex = this.getPageIndex();
        this.pageSize = this.getPageSize();
        this.totalCount = this.getTotalCount();
        this.totalPage = this.getTotalPage();
        this.sortField = this.getSortField();
        this.sortOrder = this.getSortOrder();
        this.url = this.getUrl();

        this._mergedCellMaps = {};
        this._mergedCells = {};

        this._cellErrors = [];
        this._cellMapErrors = {};

        if (this.isGrouping()) {
            this.groupBy(this._groupField, this._groupDir);

            if (this.collapseGroupOnLoad) {

                this.collapseGroups();
            }
        }
    },
    __OnSourceBeforeLoad: function (e) {
        this.fire("beforeload", e);
        if (e.cancel == true) {

            return;
        }
        if (this.showLoading) {
            this.loading();
        }
    },
    __OnSourcePreLoad: function (e) {
        this.fire("preload", e);
    },

    __OnSourceLoadSuccess: function (e) {

        this.fire("load", e);
        this.unmask();
    },
    __OnSourceLoadError: function (e) {
        this.fire("loaderror", e);
        this.unmask();
    },

    __OnSourceSort: function (e) {
        this.deferUpdate();
        this.fire("sort", e);
    },
    __OnSourceFilter: function (e) {
        this.deferUpdate();
        this.fire("filter", e);
    },

    __OnSourceAdd: function (e) {

        this._doAddRowEl(e.record, e.index);

        var me = this;
        if (!me._addTimer) {
            me._addTimer = setTimeout(function () {
                me._addTimer = null;

                me._doUpdateSummaryRow();
                me._viewRegion = me._getViewRegion();
            }, 10);
        }


        this.fire("addrow", e);
    },
    __OnSourceUpdate: function (e) {

        this._doUpdateRowEl(e.record);
        this._doUpdateSummaryRow();

        this.fire("updaterow", e);
    },
    __OnSourceRemove: function (e) {
        var me = this;
        this._doRemoveRowEl(e.record);

        if (!me._toSummary) {
            me._toSummary = setTimeout(function () {
                me._toSummary = null;
                me._doUpdateSummaryRow();
                //alert(1);
            }, 10);
        }

        this.fire("removerow", e);

        if (this.isVirtualScroll()) {
            this.deferUpdate();
        }
    },
    __OnSourceMove: function (e) {
        this._doMoveRowEl(e.record, e.index);
        this._doUpdateSummaryRow();
        this.fire("moverow", e);
    },
    __OnSelectionChanged: function (e) {
        //return

        if (e.fireEvent !== false) {
            if (e.select) {
                this.fire("rowselect", e);
            } else {
                this.fire("rowdeselect", e);
            }
        }

        var me = this;
        if (this._selectionTimer) {
            clearTimeout(this._selectionTimer);
            this._selectionTimer = null;
        }
        this._selectionTimer = setTimeout(function () {
            me._selectionTimer = null;

            if (e.fireEvent !== false) {
                me.fire("SelectionChanged", e);
            }

            me.fire("_selectchange", e);

            //            //滚动第一个
            //            var first = me.getSelected();
            //            if(first) 
        }, 1);
        //alert(e.records.length);
        var sss = new Date();

        this._doRowSelect(e._records, e.select);

        //        if (e.select) {
        //            setTimeout(function () {
        //                alert(new Date() - sss);
        //            }, 1);
        //        }
        //this.fire("_SelectionChanged", e);
    },
    __OnPageInfoChanged: function (e) {
        this._updatePagesInfo();
    },
    _updatePagesInfo: function () {
        var pageIndex = this.getPageIndex();
        var pageSize = this.getPageSize();
        var totalCount = this.getTotalCount();
        var totalPages = this.getTotalPage();

        var pagers = this._pagers;
        for (var i = 0, l = pagers.length; i < l; i++) {
            var pager = pagers[i];
            pager.update(pageIndex, pageSize, totalCount);
            this._dataSource.totalPage = pager.totalPage;
        }
    },
    setPagerButtons: function (value) {
        this._bottomPager.setButtons(value);
    },
    setPager: function (value) {
        if (typeof value == "string") {
            var el = mini.byId(value);
            if (!el) return;
            mini.parse(value);
            value = mini.get(value);
        }
        if (value) {
            this.bindPager(value);
        }
    },
    bindPager: function (pager) {
        if (!pager) return;
        this.unbindPager(pager);
        this._pagers.add(pager);
        pager.on("beforepagechanged", this.__OnPageChanged, this);
    },
    unbindPager: function (pager) {
        if (!pager) return;
        this._pagers.remove(pager);
        pager.un("pagechanged", this.__OnPageChanged, this);
    },
    __OnPageChanged: function (e) {
        e.cancel = true;
        this.gotoPage(e.pageIndex, e.pageSize);
        //this._dataSource.gotoPage(e.pageIndex, e.pageSize);
    },
    ///////////////////////////////////////////////
    _canUpdateRowEl: true,
    _doUpdateRowEl: function (row) {

        var columns1 = this.getFrozenColumns();
        var columns2 = this.getUnFrozenColumns();

        var rowEl1, rowEl2;

        var rowIndex = this.indexOf(row);

        var s = this._createRowHTML(row, rowIndex, columns2, 2);
        var rowEl = this._getRowEl(row, 2);
        if (!rowEl) return;


        jQuery(rowEl).before(s);
        rowEl1 = rowEl.previousSibling;
        //mini.before(rowEl, s);
        if (rowEl) rowEl.parentNode.removeChild(rowEl);

        if (this.isFrozen()) {
            var s = this._createRowHTML(row, rowIndex, columns1, 1);
            var rowEl = this._getRowEl(row, 1);
            jQuery(rowEl).before(s);
            rowEl2 = rowEl.previousSibling;
            //rowEl.parentNode.removeChild(rowEl);
            jQuery(rowEl).remove();
        }

        this.deferLayout();

        if (rowEl1 && rowEl2) {
            this._doSyncRowHeight(rowEl1, rowEl2);
            //var row
        }
    },
    _doAddRowEl: function (row, index) {

        var columns1 = this.getFrozenColumns();
        var columns2 = this.getUnFrozenColumns();

        var bdTable1 = this._rowsLockContentEl.firstChild;
        var bdTable2 = this._rowsViewContentEl.firstChild;

        //var rowIndex = this.indexOf(row);
        var rowIndex = mini.isNumber(index) ? index : this.indexOf(row);
        var insertRow = this.getAt(rowIndex + 1);

        function doAdd(row, viewIndex, columns, bdTable) {
            var s = this._createRowHTML(row, rowIndex, columns, viewIndex);
            if (insertRow) {
                var inertRowEl = this._getRowEl(insertRow, viewIndex);
                jQuery(inertRowEl).before(s);
            } else {
                mini.append(bdTable, s);
            }
        }

        doAdd.call(this, row, 2, columns2, bdTable2);
        if (this.isFrozen()) {
            doAdd.call(this, row, 1, columns1, bdTable1);
        }

        this.deferLayout();

        if (this.showEmptyText) {
            var el = jQuery(".mini-grid-emptyText", this._bodyEl)[0];
            if (el) {
                //mini.removeNode(el.parentNode);           
                el.style.display = "none";
                el.parentNode.style.display = "none";
            }
        }
    },
    _doRemoveRowEl: function (row) {
        var rowEl = this._getRowEl(row, 1);
        var rowEl2 = this._getRowEl(row, 2);
        if (rowEl) rowEl.parentNode.removeChild(rowEl);
        if (rowEl2) rowEl2.parentNode.removeChild(rowEl2);
        if (!rowEl2) return;

        //详细行
        var tr = this._getRowDetailEl(row, 1);
        var tr2 = this._getRowDetailEl(row, 2);
        if (tr) tr.parentNode.removeChild(tr);
        if (tr2) tr2.parentNode.removeChild(tr2);

        this.deferLayout();

        if (this.showEmptyText && this.getVisibleRows().length == 0) {
            var el = jQuery(".mini-grid-emptyText", this._bodyEl)[0];
            if (el) {
                //mini.removeNode(el.parentNode);           
                el.style.display = "";
                el.parentNode.style.display = "";
            }
        }
    },
    _doMoveRowEl: function (row, index) {
        this._doRemoveRowEl(row);
        this._doAddRowEl(row);
    },
    ///////////////////////////////////////////////
    _getRowGroupEl: function (group, index) {
        if (index == 1 && !this.isFrozen()) return null;
        var id = this._createRowGroupId(group, index);
        var el = mini.byId(id, this.el);   //是否优化此方法？
        return el;
    },
    _getRowGroupRowsEl: function (group, index) {
        if (index == 1 && !this.isFrozen()) return null;
        var id = this._createRowGroupRowsId(group, index);
        var el = mini.byId(id, this.el);   //是否优化此方法？
        return el;
    },
    _getRowEl: function (row, index) {
        if (index == null) index = 2;
        if (index == 1 && !this.isFrozen()) return null;
        row = this.getRecord(row);
        var id = this._createRowId(row, index);
        var el = mini.byId(id, this.el);   //是否优化此方法？
        return el;
    },
    _getHeaderCellEl: function (column, index) {
        if (index == null) index = 2;
        if (index == 1 && !this.isFrozen()) return null;
        column = this.getColumn(column);
        var id = this._createHeaderCellId(column, index);
        var el = mini.byId(id, this.el);
        return el;
    },

    getRowEl: function (row, index) {
        return this._getRowEl(row, index);
    },

    getHeaderCellEl: function (column, index) {
        return this._getHeaderCellEl(column, index);
    },

    _getCellEl: function (row, column) {
        row = this.getRecord(row);
        column = this.getColumn(column);
        if (!row || !column) return null;
        var id = this._createCellId(row, column);
        var el = mini.byId(id, this.el);
        return el;
    },
    getCellEl: function (row, column) {
        return this._getCellEl(row, column);
    },
    getRecordByEvent: function (e) {
        return this._getRecordByEvent(e);
    },
    _getRecordByEvent: function (e) {
        var t = mini.findParent(e.target, this._rowCls);
        if (!t) return null;
        var ids = t.id.split("$");
        var uid = ids[ids.length - 1];
        return this._getRowByID(uid);
    },
    getColumnByEvent: function (e) {
        if (!e) return null;
        return this._getColumnByEvent(e);
    },

    _getColumnByEvent: function (e) {
        var t = mini.findParent(e.target, this._cellCls);
        if (!t) t = mini.findParent(e.target, this._headerCellCls);
        if (t) {
            var ids = t.id.split("$");
            var id = ids[ids.length - 1];
            return this._getColumnById(id);
        }
        return null;
    },
    _getCellByEvent: function (e) {
        var record = this._getRecordByEvent(e);
        var column = this._getColumnByEvent(e);
        return [record, column];
    },

    getColumnFromEvent: function (e) {
        if (!e) return null;
        return this._getColumnByEvent(e);
    },
    getCellFromEvent: function (e) {
        return this._getCellByEvent(e);
    },
    getRowFromEvent: function (e) {
        var cell = this._getCellByEvent(e);
        return cell ? cell[0] : null;
    },

    getRowByEvent: function (e) {
        return this.getRowFromEvent(e);
    },
    getColumnByEvent: function (e) {
        return this.getColumnFromEvent(e);
    },
    getCellByEvent: function (e) {
        return this.getCellFromEvent(e);
    },

    _getRowByID: function (id) {
        return this._dataSource.getby_id(id);
    },
    _getColumnById: function (id) {
        return this._columnModel._getColumnById(id);
    },

    //    getRowCls: function (row) {
    //        return row ? this._rowClsHash[row._id] : null;
    //    },

    hasRowCls: function (row, cls) {

        var sb = this._rowClsHash[row._id];
        if (sb) return sb.indexOf(cls) != -1;
        return false;
    },

    addRowCls: function (row, cls, _marked) {

        var d1 = this._getRowEl(row, 1);
        var d2 = this._getRowEl(row, 2);
        if (d1) mini.addClass(d1, cls);
        if (d2) mini.addClass(d2, cls);

        if (row && _marked !== false) {
            var sb = this._rowClsHash[row._id];
            if (!sb) sb = this._rowClsHash[row._id] = [];
            else sb.remove(cls);
            sb.push(cls);
        }

    },
    removeRowCls: function (row, cls) {
        var d1 = this._getRowEl(row, 1);
        var d2 = this._getRowEl(row, 2);
        if (d1) mini.removeClass(d1, cls);
        if (d2) mini.removeClass(d2, cls);

        if (row) {
            var sb = this._rowClsHash[row._id];
            if (sb) {
                sb.remove(cls);
                if (sb.length == 0) delete this._rowClsHash[row._id];
            }
        }
    },
    getCellBox: function (row, column) {
        row = this.getRow(row);
        column = this.getColumn(column);
        if (!row || !column) return null;
        var cellEl = this._getCellEl(row, column);
        if (!cellEl) return null;
        return mini.getBox(cellEl);
    },
    getColumnBox: function (column) {
        var id = this._createHeaderCellId(column, 2);
        var el = document.getElementById(id);
        if (!el) {
            id = this._createHeaderCellId(column, 1);
            el = document.getElementById(id);
        }
        if (el) {
            //if (el.style.display == "none") return null;
            var box = mini.getBox(el);
            box.x -= 1;
            box.left = box.x;
            box.right = box.x + box.width;
            return box;
        }
    },
    getRowBox: function (row) {
        var rowEl = this._getRowEl(row, 1);
        var rowEl2 = this._getRowEl(row, 2);
        if (!rowEl2) return null;
        var box = mini.getBox(rowEl2);
        if (rowEl) {
            var box1 = mini.getBox(rowEl);
            box.x = box.left = box1.left;
            box.width = box.right - box.x;
        }
        return box;
    },
    ///////////////////

    //    _isRenderedRow: function (record) {
    //        
    //    },

    _doRowSelect: function (rows, select) {

        var virtual = this.isVirtualScroll(),
            region = this._viewRegion,
            start = virtual ? region.start : -1,
            end = virtual ? region.end : -1,
            map = {};
        if (start != -1) {
            var data = this.getVisibleRows();
            for (var i = start, l = end; i < l; i++) {
                var row = data[i];
                if (row) map[row._id] = true;
            }
        }

        var sss = new Date();
        for (var i = 0, l = rows.length; i < l; i++) {
            var record = rows[i];

            //continue;
            if (start != -1) {
                if (!map[record._id]) {

                    continue;
                }
            }

            if (select) {
                this.addRowCls(record, this._rowSelectedCls, false);
            } else {
                this.removeRowCls(record, this._rowSelectedCls);
            }
        }
    },
    _tryFocus: function (e) {

        try {
            var tagName = e.target.tagName.toLowerCase();
            if (tagName == "input" || tagName == "textarea" || tagName == "select") return;
            if (mini.hasClass(e.target, 'mini-placeholder-label')) return;

            if (mini.findParent(e.target, 'mini-grid-rows-content')) {

                mini.setXY(this._focusEl, e.pageX, e.pageY);

                this.focus(false);
            }
            //            if (mini.isAncestor(this._filterEl, e.target)
            //            || mini.isAncestor(this._summaryEl, e.target)
            //            || mini.isAncestor(this._footerEl, e.target)
            //            || mini.findParent(e.target, "mini-grid-rowEdit")
            //            || mini.findParent(e.target, "mini-grid-detailRow")
            //            ) {

            //            } else {
            //                var me = this;

            //                //setTimeout(function () {
            //                me.focus();
            //                //}, 100);
            //            }
        } catch (ex) { }
    },
    //    focus: function () {
    //        var that = this;
    //        try {
    //            that.el.focus();

    //            if (mini.isIE) {
    //                var cell = this.getCurrentCell();
    //                if (cell) {
    //                    var el = this._getCellEl(cell[0], cell[1]);
    //                    el.focus();
    //                    var box = this.getCellBox(cell[0], cell[1]);
    //                    mini.setX(this._focusEl, box.x);
    //                }
    //            }

    //        } catch (e) { }
    //    },
    focus: function (_fixFocus) {


        //alert(1);
        try {
            var that = this;
            var cell = this.getCurrentCell();
            if (cell && _fixFocus !== false) {
                var box = this.getCellBox(cell[0], cell[1]);
                mini.setX(this._focusEl, box.x);
            }

            var row = this.getCurrent();
            if (row) {

                var rowEl = this._getRowEl(row, 2);
                if (rowEl) {
                    if (_fixFocus !== false) {
                        var rowBox = mini.getBox(rowEl);
                        mini.setY(that._focusEl, rowBox.top);
                    }
                    if (mini.isIE || mini.isIE11 || mini.isChrome) {
                        if (mini.isChrome) {
                            //that._focusEl.focus();
                            that.el.focus();          //chrome60可能需要修改下。
                            //rowEl.focus();
                        } else {
                            that._focusEl.focus();
                        }
                        //that.el.focus();
                    } else {
                        that.el.focus();
                    }
                }
            } else {
                if (mini.isIE || mini.isIE11 || mini.isChrome) {

                    that._focusEl.focus();
                    //that.el.focus();
                } else {
                    that.el.focus();

                    //that._focusEl.focus();
                }
            }

        } catch (e) { }
    },
    focusRow: function (row) {
        if (this._focusRow == row) return;
        if (this._focusRow) {
            this.removeRowCls(this._focusRow, this._rowHoverCls);
        }
        this._focusRow = row;
        if (row) this.addRowCls(row, this._rowHoverCls, false);

        if (mini.isIE6) mini.repaint();
    },
    scrollIntoView: function (row, column, virtualScroll) {
        row = this.getRow(row);
        if (!row) return;

        var virtualScroll = this.isVirtualScroll()

        try {

            if (column) {

                if (this._columnModel.isFrozenColumn(column)) {
                    column = null;
                }
            }

            if (column) {
                var cellEl = this._getCellEl(row, column);
                mini.scrollIntoView(cellEl, this._rowsViewEl, true, virtualScroll != true);

                this._syncScroll();
            }


            if (this.isVirtualScroll()) {       //@ 虚拟滚动时不处理滚动条偏移调整

                virtualScroll = true;

                var scrollTop = this.getScrollTop(),
                        offsetHeight = this._vscrollEl.offsetHeight;

                //alert(scrollTop);

                //@ 虚拟滚动新方案
                var region = this._getViewRegion();
                var visibleRows = this.getVisibleRows();
                var index = visibleRows.indexOf(row)
                var offset = this._getRangeHeight(0, index),
                        rowHeight = row._height || this.defaultRowHeight,
                        offsetBottom = offset + rowHeight;

                if (offset < scrollTop) {
                    //alert("up");
                    //this._updateScrollTop(offset);

                    //if(index == 49 || index == 50) debugger

                    this.setScrollTop(offset);
                    this._updateScrollTop(offset);      //@立刻更新
                    //document.title = offset;
                } else if (offsetBottom > scrollTop + offsetHeight) {
                    //alert("down");

                    //offsetBottom  - x = scrollTop + offsetHeight + x;

                    offset = scrollTop + offsetBottom - (scrollTop + offsetHeight)

                    this.setScrollTop(offset);
                    this._updateScrollTop(offset);      //@立刻更新
                }


                //this.setScrollTop(offset);

                //                    debugger
                //                    alert(offset);

                //@旧方案先暂搁置
                //                    if (virtualScroll != false) {
                //                        
                //                        var region = this._getViewRegion();
                //                        //var index = this.indexOf(row);

                //                        var visibleRows = this.getVisibleRows();
                //                        var index = visibleRows.indexOf(row)

                //                        //                    if (region.start <= index && index <= region.end) {
                //                        //                    } else {

                //                        var offset = this._getRangeHeight(0, index);
                //                        //判断下间距，决定是否偏移

                //                        this.setScrollTop(offset);

                //                    }
            } else {
                var rowEl = this._getRowEl(row, 2);
                mini.scrollIntoView(rowEl, this._rowsViewEl, false);

                this._syncScroll();
            }

        } catch (e) { }
    },
    /////////////////////////////////////////////////////////////

    setShowLoading: function (value) {
        this.showLoading = value;
    },
    getShowLoading: function () {
        return this.showLoading;
    },
    setEnableHotTrack: function (value) {
        this.enableHotTrack = value;
    },
    getEnableHotTrack: function () {
        return this.enableHotTrack;
    },
    setAllowHotTrackOut: function (value) {
        this.allowHotTrackOut = value;
    },
    getAllowHotTrackOut: function () {
        return this.allowHotTrackOut;
    },

    setOnlyCheckSelection: function (value) {
        this.onlyCheckSelection = value;
    },
    getOnlyCheckSelection: function () {
        return this.onlyCheckSelection;
    },
    setAllowUnselect: function (value) {
        this.allowUnselect = value;
    },
    getAllowUnselect: function () {
        return this.allowUnselect;
    },
    setAllowRowSelect: function (value) {
        this.allowRowSelect = value;
    },
    getAllowRowSelect: function () {
        return this.allowRowSelect;
    },
    setAllowCellSelect: function (value) {
        this.allowCellSelect = value;
    },
    getAllowCellSelect: function () {
        return this.allowCellSelect;
    },
    setAllowCellEdit: function (value) {
        this.allowCellEdit = value;
    },
    getAllowCellEdit: function () {
        return this.allowCellEdit;
    },
    setCellEditAction: function (value) {
        this.cellEditAction = value;
    },
    getCellEditAction: function () {
        return this.cellEditAction;
    },
    setAllowCellValid: function (value) {
        this.allowCellValid = value;
    },
    getAllowCellValid: function () {
        return this.allowCellValid;
    },
    setAllowResizeColumn: function (value) {
        this.allowResizeColumn = value;
        mini.removeClass(this.el, "mini-grid-resizeColumns-no");
        if (!value) {
            mini.addClass(this.el, "mini-grid-resizeColumns-no");
        }
    },
    getAllowResizeColumn: function () {
        return this.allowResizeColumn;
    },
    setAllowSortColumn: function (value) {
        this.allowSortColumn = value;
    },
    getAllowSortColumn: function () {
        return this.allowSortColumn;
    },
    setAllowMoveColumn: function (value) {
        this.allowMoveColumn = value;
    },
    getAllowMoveColumn: function () {
        return this.allowMoveColumn;
    },
    setShowColumnsMenu: function (value) {
        this.showColumnsMenu = value;
    },
    getShowColumnsMenu: function () {
        return this.showColumnsMenu;
    },

    setEditNextRowCell: function (value) {
        this.editNextRowCell = value;
    },
    getEditNextRowCell: function () {
        return this.editNextRowCell;
    },
    setEditNextOnEnterKey: function (value) {
        this.editNextOnEnterKey = value;
    },
    getEditNextOnEnterKey: function () {
        return this.editNextOnEnterKey;
    },
    setEditOnTabKey: function (value) {
        this.editOnTabKey = value;
    },
    getEditOnTabKey: function () {
        return this.editOnTabKey;
    },
    setCreateOnEnter: function (value) {
        this.createOnEnter = value;
    },
    getCreateOnEnter: function () {
        return this.createOnEnter;
    },
    //////////////////////////////////////////////////////////////////////////////////////////
    // CellSelect
    //////////////////////////////////////////////////////////////////////////////////////////
    _currentCell: null,
    _doCurrentCell: function (select) {
        if (this._currentCell) {
            var record = this._currentCell[0], column = this._currentCell[1];
            var cellEl = this._getCellEl(record, column);
            if (cellEl) {
                if (select) {
                    mini.addClass(cellEl, this._cellSelectedCls);
                } else {
                    mini.removeClass(cellEl, this._cellSelectedCls);
                }
            }
        }
    },
    setCurrentCell: function (cell) {



        if (this._currentCell != cell) {
            this._doCurrentCell(false);
            this._currentCell = cell;

            if (cell) {
                var row = this.getRow(cell[0]);
                var column = this.getColumn(cell[1]);
                if (row && column) {
                    this._currentCell = [row, column];
                } else {
                    this._currentCell = null;
                }
            }

            this._doCurrentCell(true);
            if (cell) {
                //不能是合并单元格
                var ac = this._getAnchorCell(cell[0], cell[1]);
                if (!ac) {


                    if (this.isFrozen()) {
                        //if (!this.virtualScroll) {
                        this.scrollIntoView(cell[0], null, false);
                        //}
                    } else {
                        //this.scrollIntoView(cell[0]);
                        this.scrollIntoView(cell[0], cell[1], false);
                    }

                }
            }
            this.fire("currentcellchanged");
            //this._blurRow();
        }
    },
    getCurrentCell: function () {
        var cc = this._currentCell;
        if (cc) {
            if (this.indexOf(cc[0]) == -1) {
                this._currentCell = null;
                cc = null;
            }
        }
        return cc;
    },
    //////////////////////////////////////////////////////////////////////////////////////////
    // CellEdit
    //////////////////////////////////////////////////////////////////////////////////////////
    _editingCell: null,
    isEditingCell: function (cell) {
        return this._editingCell && this._editingCell[0] == cell[0] && this._editingCell[1] == cell[1];
    },
    //    isCellCanEdit: function(row, column){
    //    },
    beginEditCell: function (row, column) {

        function beginEdit(row, column) {

            var sss = new Date();

            row = this.getRow(row);
            column = this.getColumn(column);
            var cell = [row, column];
            if (row && column) {
                this.setCurrentCell(cell);
            }

            var cell = this.getCurrentCell();
            if (this._editingCell && cell) {
                if (this._editingCell[0] == cell[0] && this._editingCell[1] == cell[1]) return;
            }

            if (this._editingCell) this.commitEdit();



            if (cell) {
                var row = cell[0], column = cell[1];
                if (column.editMode != "inline") {
                    var canEdit = this._OnCellBeginEdit(row, column, this.getCellEditor(column));

                    //document.title = new Date() - sss;

                    if (canEdit !== false) {
                        this.scrollIntoView(row, column, false);
                        this._editingCell = cell;
                        this._OnCellShowingEdit(row, column);
                    }
                }
            }


        }
        this._pushUpdateCallback(beginEdit, this, [row, column]);
    },
    cancelEdit: function () {

        if (this.allowCellEdit) {
            if (this._editingCell) {
                this._OnCellEndEdit();
            }
        } else {
            if (this.isEditing()) {
                this._allowLayout = false;
                var data = this.getDataView();
                for (var i = 0, l = data.length; i < l; i++) {
                    var row = data[i];
                    if (row._editing == true) this.cancelEditRow(i);
                }
                this._allowLayout = true;
                this.doLayout();
            }
        }
    },
    commitEdit: function () {

        if (this.allowCellEdit) {

            if (this._editingCell) {
                this._OnCellCommitEdit(this._editingCell[0], this._editingCell[1]);

                this._OnCellEndEdit();
            }
        } else {

            if (this.isEditing()) {
                this._allowLayout = false;
                var data = this.getDataView();
                for (var i = 0, l = data.length; i < l; i++) {
                    var row = data[i];
                    if (row._editing == true) this.commitEditRow(row);
                }
                this._allowLayout = true;

                this.doLayout();
            }
        }
    },

    getCellEditor: function (column, row) {

        column = this.getColumn(column);
        if (!column) return;
        if (this.allowCellEdit) {

            var editor = column.__editor;

            if (!editor) editor = mini.getAndCreate(column.editor);
            if (editor && editor != column.editor) {
                column.editor = editor;
            }
            return editor;
        } else {
            row = this.getRow(row);
            column = this.getColumn(column);
            if (!row) row = this.getEditingRow();
            if (!row || !column) return null;
            var id = this.uid + "$" + row._uid + "$" + column._id + "$editor";
            return mini.get(id);
        }
    },

    _OnCellBeginEdit: function (record, column, editor, initEditor) {

        var value = mini._getMap(column.field, record);
        var e = {
            sender: this,
            rowIndex: this.indexOf(record),
            row: record,
            record: record,
            column: column,
            field: column.field,
            editor: editor,
            value: value,
            cancel: false
        };

        this.fire("cellbeginedit", e);

        if (!mini.isNull(column.defaultValue) && (mini.isNull(e.value) || e.value === "")) {
            var defaultValue = column.defaultValue;
            //            try {
            //                
            //                defaultValue = eval('('+defaultValue+')');
            //            } catch (ex) { debugger}
            var obj = mini.clone({ d: defaultValue });
            e.value = obj.d;
        }

        var editor = e.editor;
        value = e.value;

        if (e.cancel) {
            return false;
        }
        //if (!editor) return false;
        //column.editor = editor;   //!!!不能加

        if (!editor && column.editMode != "inline") return false;
        if (column.readOnly === true) return false;

        if (initEditor === false) return true;

        //        if (column.editMode != "inline") {
        //                    var canEdit = this.isCellCanEdit(row, column);

        if (column.editMode != "inline") {
            //value, text初始化
            if (mini.isNull(value)) value = "";
            if (editor.setValue) {
                editor.setValue(value);
            }
            editor.ownerRowID = record._uid;

            if (column.displayField && editor.setText) {
                //var text = record[column.displayField];
                var text = mini._getMap(column.displayField, record);

                if (!mini.isNull(column.defaultText) && (mini.isNull(text) || text === "")) {
                    var obj = mini.clone({ d: column.defaultText });
                    text = obj.d;
                }

                editor.setText(text);
            }

            if (this.allowCellEdit) {
                this._editingControl = e.editor;
            }

        }

        return true;
    },
    _OnCellCommitEdit: function (record, column, value, editor) {

        var e = {
            sender: this,
            rowIndex: this.indexOf(record),
            record: record,
            row: record,
            column: column,
            field: column.field,
            editor: editor ? editor : this.getCellEditor(column),
            value: mini.isNull(value) ? "" : value,
            text: "",
            cancel: false
        };

        if (e.editor && e.editor.getValue) {
            try {
                e.editor.blur();
            } catch (ex) {

            }
            e.value = e.editor.getValue();

            //alert(e.value);
        }
        if (e.editor && e.editor.getText) {
            e.text = e.editor.getText();
        }

        //document.title = e.value + ":" + e.text + ":" + new Date().getTime();

        //        this.updateRow(record, { NodeId: 1, NodeName: "aaa" });
        //        return;

        var oldValue = mini._getMap(column.field, record), newValue = e.value;
        e.oldValue = oldValue;
        if (mini.isEquals(oldValue, newValue)) return e;

        this.fire("cellcommitedit", e);

        if (e.cancel == false) {

            if (this.allowCellEdit) {
                var o = {};
                o[column.field] = e.value;
                //mini._setMap(column.field, e.value, o);
                if (column.displayField) {
                    o[column.displayField] = e.text;
                    //mini._setMap(column.displayField, e.text, o);
                }
                this.updateRow(record, o);
            }
        }
        return e;
    },
    _OnCellEndEdit: function (record, column) {
        if (!this._editingCell && !record) return;
        if (!record) record = this._editingCell[0];
        if (!column) column = this._editingCell[1];
        var value = mini._getMap(column.field, record);
        var e = {
            sender: this,
            rowIndex: this.indexOf(record),
            record: record,
            row: record,
            column: column,
            field: column.field,
            editor: this._editingControl,
            //value: record[column.field]
            value: value
        };

        this.fire("cellendedit", e);
        //return;
        if (this.allowCellEdit && e.editor) {
            var editor = e.editor;
            if (editor && editor.setIsValid) {

                editor.setIsValid(true);
            }

            if (this._editWrap) this._editWrap.style.display = 'none';
            var childNodes = this._editWrap.childNodes;
            for (var i = childNodes.length - 1; i >= 0; i--) {
                var el = childNodes[i];
                this._editWrap.removeChild(el);
            }


            if (editor && editor.hidePopup) {
                editor.hidePopup();
            }
            if (editor && editor.setValue) {
                editor.setValue("");
            }

            this._editingControl = null;
            this._editingCell = null;

            if (this.allowCellValid) {
                this.validateCell(record, column);
                //this.validateRow(record);
            }
        }
    },
    _OnCellShowingEdit: function (record, column) {
        if (!this._editingControl) return false;


        var cellBox = this.getCellBox(record, column);

        if (cellBox) {
            var viewWidth = document.body.scrollWidth; //mini.getViewportBox().width;
            if (cellBox.right > viewWidth) {

                cellBox.width = viewWidth - cellBox.left;
                if (cellBox.width < 10) cellBox.width = 10;
                cellBox.right = cellBox.left + cellBox.width;
            }
        }

        var e = {
            sender: this,
            rowIndex: this.indexOf(record),
            record: record,
            row: record,
            column: column,
            field: column.field,
            cellBox: cellBox,
            editor: this._editingControl
        };

        this.fire("cellshowingedit", e);

        var editor = e.editor;
        if (editor && editor.setIsValid) {

            editor.setIsValid(true);
        }

        if (cellBox) {
            var editWrap = this._getEditWrap(editor);
            this._editWrap.style.zIndex = mini.getMaxZIndex();




            //        if (editor.setWidth) {
            //            var width = cellBox.width;
            //            if (width < 20) width = 20;
            //            editor.setWidth(width);
            //        }

            //        if (editor.setHeight && editor.type == "textarea") {
            //            var height = cellBox.height - 1;
            //            if (editor.minHeight && height < editor.minHeight) height = editor.minHeight;
            //            editor.setHeight(height);
            //        }
            //        if (editor.setWidth) {
            //            var width = cellBox.width - 1;
            //            if (editor.minWidth && width < editor.minWidth) width = editor.minWidth;
            //            editor.setWidth(width);
            //        }

            this._setEditorBox(editor, cellBox);

            mini.on(document, 'mousedown', this.__OnBodyMouseDown, this);

            if (column.autoShowPopup && editor.showPopup) {

                editor.showPopup();
            }

        }


        //navEditMode
        if (editor) {
            if (this.navEditMode) {
                editor.keyNavEnabled = !(column.navUpdown !== false);
            }
            //editor.keyNavEnabled = !this.navEditMode && column.navUpdown === false;
        }

        //alert(editor.keyNavEnabled);

    },
    _getEditingControl: function () {
        return this._editingControl;
    },
    _setEditorBox: function (editor, cellBox) {
        if (editor.setWidth) {
            var width = cellBox.width;
            if (width < 20) width = 20;
            editor.setWidth(width);
        }

        if (editor.setHeight && editor.type == "textarea") {
            var height = cellBox.height - 1;
            if (editor.minHeight && height < editor.minHeight) height = editor.minHeight;
            editor.setHeight(height);
        }
        if (editor.setWidth) {
            var width = cellBox.width - 1;
            if (editor.minWidth && width < editor.minWidth) width = editor.minWidth;
            editor.setWidth(width);
        }

        /////////////////////////////////////////////////////////////////////////
        var box = cellBox;
        var editorHeight = editor.getHeight();

        var y = box.y;
        //if (editor.type != "textarea") {

        if (editorHeight < box.height - 2) {
            y = Math.round(box.y + box.height / 2 - editorHeight / 2);
            //y = parseInt(box.y + box.height / 2 - editorHeight / 2);

        }



        mini.setXY(this._editWrap, box.x, y);
        mini.setWidth(this._editWrap, box.width);

        var viewWidth = document.body.scrollWidth; //mini.getViewportBox().width;
        if (box.x > viewWidth) mini.setX(this._editWrap, -1000);
    },
    __OnBodyMouseDown: function (e) {
        if (this._editingControl) {

            var cell = this._getCellByEvent(e);

            if (this._editingCell && cell) {
                if (this._editingCell[0] == cell.record && this._editingCell[1] == cell.column) {
                    return false;
                }
            }

            var within = false;
            if (this._editingControl.within) within = this._editingControl.within(e);
            else within = mini.isAncestor(this._editWrap, e.target);

            if (within == false) {
                var me = this;
                if (mini.isAncestor(this._bodyEl, e.target) == false) {
                    setTimeout(function () {

                        me.commitEdit();

                    }, 1);
                } else {

                    var cell1 = me._editingCell;
                    setTimeout(function () {
                        var cell2 = me._editingCell;
                        if (cell1 == cell2) {
                            me.commitEdit();
                        }
                    }, 70);
                }
                mini.un(document, 'mousedown', this.__OnBodyMouseDown, this);
            }
        }
    },
    getEditWrap: function () {
        return this._editWrap;
    },
    _getEditWrap: function (editor) {
        if (!this._editWrap) {
            this._editWrap = mini.append(this.cellEditorContainer || mini.cellEditorContainer || document.body, '<div class="mini-grid-editwrap" style="position:absolute;"></div>');
            mini.on(this._editWrap, "keydown", this.___OnEditControlKeyDown, this);

            //            mini.on(this._editWrap, "keydown", function (event) {
            //                alert(1);
            //            }, this);
        }
        this._editWrap.style.zIndex = 1000000000;    //
        this._editWrap.style.display = 'block';

        if (editor.render) {
            editor.render(this._editWrap);
            setTimeout(function () {
                editor.focus();
                if (editor.selectText) {
                    setTimeout(function () {
                        editor.selectText();
                    }, 11);
                }
            }, 50);
            if (editor.setVisible) editor.setVisible(true);
        } else if (editor.el) {
            this._editWrap.appendChild(editor.el);
            setTimeout(function () {
                try {
                    editor.el.focus();
                } catch (e) {
                }
            }, 50);
        }

        //        var editorHeight = editor.getHeight();

        //        var y = box.y;
        //        //if (editor.type != "textarea") {

        //        if (editorHeight < box.height) {

        //            y = Math.round(box.y + box.height / 2 - editorHeight / 2);
        //            //y = parseInt(box.y + box.height / 2 - editorHeight / 2);

        //        }


        //        mini.setXY(this._editWrap, box.x, y);
        //        mini.setWidth(this._editWrap, box.width);

        //        var viewWidth = document.body.scrollWidth; //mini.getViewportBox().width;
        //        if (box.x > viewWidth) mini.setX(this._editWrap, -1000);

        return this._editWrap;
    },

    ___OnEditControlKeyDown: function (e) {

        var editor = this._editingControl;


        if (e.keyCode == 13 && editor && editor.type == "textarea") {

            return;
        }
        //        if (e.keyCode == 13 && e.ctrlKey == false && editor && editor.type == "textarea") {
        //            return;
        //        }
        //        if (e.keyCode == 38 || e.keyCode == 40) {
        //            e.preventDefault();
        //        }

        //document.title = 'enter' + new Date().getTime();

        if (e.keyCode == 13) {      //enter

            var time = new Date();
            if (this._enterTimestamp && (time - this._enterTimestamp < 80)) return;
            this._enterTimestamp = time;

            //            document.title = 'enter' + new Date().getTime();

            var cell = this._editingCell;
            if (cell && cell[1] && cell[1].enterCommit === false) return;


            this.commitEdit();
            this.focus();

            if (this.editNextOnEnterKey) {
                this.fire("celleditenter", { record: cell[0], column: cell[1] })

                this._beginEditNextCell(e.shiftKey == false);
            } else {


            }
        } else if (e.keyCode == 27) {   //esc

            this.cancelEdit();

            this.focus();
        } else if (e.keyCode == 9) {    //tab
            this.commitEdit();
            if (this.editOnTabKey) {
                e.preventDefault();
                this.commitEdit();
                this._beginEditNextCell(e.shiftKey == false, true);
            } else {
                //this.cancelEdit();
            }
        }

        //alert(e.keyCode);

        if (this.navEditMode) {

            var cell = this._editingCell;
            if (cell) {
                var column = cell[1];
                if (column && column.navUpdown === false) {
                    if (editor && (e.keyCode == 38 || e.keyCode == 40)) {
                        return;
                    }
                }
            }

            //
            switch (e.keyCode) {
                case 37:            //left
                    this.focus();
                    e.preventDefault();
                    this.commitEdit();
                    this._beginEditNextCell(e.shiftKey !== false);
                    break;
                case 39:            //right
                    this.focus();
                    this.commitEdit();
                    if (this.editOnTabKey) {
                        e.preventDefault();
                        this.commitEdit();
                        this._beginEditNextCell(e.shiftKey == false, true);
                    } else {
                        //this.cancelEdit();
                    }
                    break;
                case 38:                //up
                    this.focus();

                    //spinner内会改动值
                    e.preventDefault();

                    var cell = this._editingCell;
                    this.commitEdit()
                    var record = cell[0];
                    var column = cell[1];

                    if (record) {
                        var rowIndex = this.indexOf(record);
                        if (rowIndex > 0) rowIndex -= 1;
                    } else {
                        return
                    }
                    var newRecord = this.getRow(rowIndex);
                    var newCell = [newRecord, column];
                    this.setCurrentCell(newCell);
                    this.beginEditCell()

                    break;
                case 40:            //down
                    this.focus();
                    //                    e.preventDefault();
                    //                    this.commitEdit();
                    //                    this._beginEditNextCell(e.shiftKey == false);

                    e.preventDefault();

                    var cell = this._editingCell;
                    this.commitEdit()
                    var record = cell[0];
                    var column = cell[1];

                    if (record) {
                        var rowIndex = this.indexOf(record);
                        var length = this.getData().length;
                        if (rowIndex < length - 1) rowIndex += 1;
                    } else {
                        return
                    }
                    var newRecord = this.getRow(rowIndex);
                    var newCell = [newRecord, column];
                    this.setCurrentCell(newCell);
                    this.beginEditCell()

                    break;
            }
        }
    },

    navEditMode: false,
    setNavEditMode: function (value) {
        this.navEditMode = value;
    },
    getNavEditMode: function () {
        return this.navEditMode;
    },

    editNextRowCell: false,
    editNextOnEnterKey: false,
    editOnTabKey: true,
    createOnEnter: false,

    //
    skipReadOnlyCell: false,
    setSkipReadOnlyCell: function (value) {
        this.skipReadOnlyCell = value;
    },
    getSkipReadOnlyCell: function () {
        return this.skipReadOnlyCell;
    },

    isCellCanEdit: function (row, column) {
        var canEdit = this._OnCellBeginEdit(row, column, this.getCellEditor(column), false);
        return canEdit;
    },

    _beginEditNextCell: function (next, tab) {


        var time = new Date();
        if (this._editTimestamp && (time - this._editTimestamp < 80)) return;
        this._editTimestamp = time;

        //document.title = new Date().getTime();


        var grid = this;
        var currentCell = this.getCurrentCell();
        if (!currentCell) return;
        this.focus();
        var columns = grid.getVisibleColumns();

        var column = currentCell ? currentCell[1] : null,
            record = currentCell ? currentCell[0] : null;
        //if (!currentCell) record = grid.getCurrent();

        /////////////////////////////////////
        function getAt(index) {
            return grid.getVisibleRows()[index];
        }
        function indexOf(row) {
            return grid.getVisibleRows().indexOf(row);
        }
        function getCount() {
            return grid.getVisibleRows().length;
        }

        var columnIndex = columns.indexOf(column);
        var rowIndex = indexOf(record);
        var count = getCount();



        if (next === false) {
            if (this.skipReadOnlyCell) {
                var me = this;

                var nextColumn = getPrevCanEditCell();

                function getPrevCanEditCell() {
                    var l = 0;
                    var i = (columnIndex - 1 === 0) ? columns.length : columnIndex - 1;

                    for (; i > l; i--) {
                        column = columns[i];

                        var canEdit = me.isCellCanEdit(record, column);
                        if (canEdit) {
                            return column;
                        }
                    }
                }

                if (!nextColumn || columnIndex == 0) {
                    columnIndex = columns.length;
                    var nextRowColumn = getPrevCanEditCell();
                    setLastRow();
                }
            } else {
                columnIndex -= 1;
                column = columns[columnIndex];
                if (!column) {
                    column = columns[columns.length - 1];
                    setLastRow();
                }
            }

            function setLastRow() {
                record = getAt(rowIndex - 1);
                if (!record) {

                    return;
                }
            }

        } else {

            if (this.editNextRowCell && !tab) {
                if (rowIndex + 1 < count) {
                    record = getAt(rowIndex + 1);
                }
            } else {

                function setNextRow() {
                    record = grid.getAt(rowIndex + 1);
                    if (!record) {
                        if (grid.createOnEnter) {
                            record = {};

                            grid.addRow(record);
                        } else {
                            return;
                        }
                    }
                }

                function getNextCanEditCell() {

                    var i = (columnIndex + 1 == l) ? 0 : (columnIndex + 1);

                    for (; i < l; i++) {
                        column = columns[i];

                        var canEdit = me.isCellCanEdit(record, column);
                        if (canEdit) {
                            return column;
                        }
                    }
                }

                if (this.skipReadOnlyCell) {
                    var me = this;
                    var l = columns.length;

                    var nextColumn = getNextCanEditCell();

                    if (!nextColumn || columnIndex + 1 == l) {
                        columnIndex = 0;
                        var nextRowColumn = getNextCanEditCell();
                        setNextRow();
                    }
                } else {
                    columnIndex += 1;
                    column = columns[columnIndex];
                    if (!column) {
                        column = columns[0];
                        setNextRow();
                    }
                }


            }
        }



        //        if (next === false) {

        //            columnIndex -= 1;
        //            column = columns[columnIndex];
        //            if (!column) {
        //                column = columns[columns.length - 1];
        //                record = getAt(rowIndex - 1);
        //                if (!record) {

        //                    return;
        //                }
        //            }
        //        } else {

        //            if (this.editNextRowCell && !tab) {
        //                if (rowIndex + 1 < count) {
        //                    record = getAt(rowIndex + 1);
        //                }
        //            } else {
        //                columnIndex += 1;
        //                column = columns[columnIndex];
        //                if (!column) {
        //                    column = columns[0];
        //                    record = grid.getAt(rowIndex + 1);
        //                    if (!record) {
        //                        if (this.createOnEnter) {
        //                            record = {};

        //                            this.addRow(record);
        //                        } else {
        //                            return;
        //                        }
        //                    }
        //                }
        //            }
        //        }

        var currentCell = [record, column];

        grid.setCurrentCell(currentCell);

        if (!grid.onlyCheckSelection && grid.allowRowSelect) {
            if (grid.getCurrent() != record) {
                grid.deselectAll();
                grid.setCurrent(record);
            }
        }

        grid.scrollIntoView(record, column, false);

        if (grid.isReadOnly() || column.readOnly) return false;
        grid.beginEditCell();
    },
    //////////////////////////////////////////////////////////////////////////////////////////
    // RowEdit
    //////////////////////////////////////////////////////////////////////////////////////////    
    getEditorOwnerRow: function (editor) {
        var uid = editor.ownerRowID;
        return this.getRowByUID(uid);
    },

    beginEditRow: function (row) {
        if (this.allowCellEdit) return;

        function beginEdit(row) {
            var sss = new Date();

            row = this.getRow(row);
            if (!row) return;
            var rowEl = this._getRowEl(row, 2);
            if (!rowEl) return;


            //if (!this.multiEdit) this.cancelEdit();

            row._editing = true;

            this._doUpdateRowEl(row);
            //        var s = this._createRow(row);
            //        var rowEl = this._getRowEl(row);
            //        jQuery(rowEl).before(s);
            //        rowEl.parentNode.removeChild(rowEl);

            var rowEl = this._getRowEl(row, 2);
            mini.addClass(rowEl, "mini-grid-rowEdit");

            var columns = this.getVisibleColumns();
            for (var i = 0, l = columns.length; i < l; i++) {
                var column = columns[i];
                var value = row[column.field];

                //var cellId = this._createCellId(row, columns[i]);
                //var cellEl = document.getElementById(cellId);
                var cellEl = this._getCellEl(row, column);
                if (!cellEl) continue;

                if (typeof column.editor == "string") {
                    column.editor = window["ev" + "al"]('(' + column.editor + ')');
                }

                var editorConfig = mini.copyTo({}, column.editor);

                editorConfig.id = this.uid + "$" + row._uid + "$" + column._id + "$editor";
                var editor = mini.create(editorConfig);

                if (this._OnCellBeginEdit(row, column, editor)) {
                    if (editor) {
                        mini.addClass(cellEl, "mini-grid-cellEdit");
                        cellEl.innerHTML = "";
                        cellEl.appendChild(editor.el);
                        mini.addClass(editor.el, "mini-grid-editor");
                    }
                }
            }

            this.doLayout();
        }
        this._pushUpdateCallback(beginEdit, this, [row]);
        //alert(new Date() - sss);

    },
    cancelEditRow: function (row) {
        if (this.allowCellEdit) return;

        row = this.getRow(row);
        if (!row || !row._editing) return;
        delete row._editing;

        var rowEl = this._getRowEl(row);

        var columns = this.getVisibleColumns();
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];

            var cellId = this._createCellId(row, columns[i]);
            var cellEl = document.getElementById(cellId);
            if (!cellEl) continue;

            var editorEl = cellEl.firstChild;
            var editor = mini.get(editorEl);
            if (!editor) continue;

            editor.destroy();
        }

        this._doUpdateRowEl(row);

        this.doLayout();

    },
    commitEditRow: function (row) {
        if (this.allowCellEdit) return;

        row = this.getRow(row);
        if (!row || !row._editing) return;

        var rowData = this.getEditRowData(row, false, false);

        this._canUpdateRowEl = false;
        this.updateRow(row, rowData);
        this._canUpdateRowEl = true;

        this.cancelEditRow(row);
    },
    isEditing: function () {
        var data = this.getDataView();
        for (var i = 0, l = data.length; i < l; i++) {
            var row = data[i];
            if (row._editing == true) return true;
        }
        return false;
    },
    isEditingRow: function (row) {
        row = this.getRow(row);
        if (!row) return false;
        return !!row._editing;
    },
    isNewRow: function (row) {
        return row._state == "added";
    },
    getEditingRows: function () {
        var rows = [];
        var data = this.getDataView();
        for (var i = 0, l = data.length; i < l; i++) {
            var row = data[i];
            if (row._editing == true) rows.push(row);
        }
        return rows;
    },
    getEditingRow: function () {
        var rows = this.getEditingRows();
        return rows[0];
    },
    //    getEditData: function (all) {
    //        var data = [];
    //        var data = this.getDataView();
    //        for (var i = 0, l = data.length; i < l; i++) {
    //            var row = data[i];
    //            if (row._editing == true) {
    //                var rowData = this.getEditRowData(i, all);
    //                rowData._index = i;

    //                data.push(rowData);
    //            }
    //        }
    //        return data;
    //    },
    getEditData: function (all) {
        var data = [];
        var dataView = this.getDataView();
        for (var i = 0, l = dataView.length; i < l; i++) {
            var row = dataView[i];
            if (row._editing == true) {
                var rowData = this.getEditRowData(i, all);
                data.push(rowData);
            }
        }
        return data;
    },
    getEditRowData: function (row, all, deep) {
        row = this.getRow(row);

        if (!row || !row._editing) return null;

        var idField = this.getIdField();
        var pidField = this.getParentField ? this.getParentField() : null;

        var rowData = {};

        var columns = this.getVisibleColumns();
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            var cellId = this._createCellId(row, columns[i]);
            var cellEl = document.getElementById(cellId);

            if (!cellEl) continue;

            var e = null;
            if (column.type == "checkboxcolumn" || column.type == "radiobuttoncolumn") {//checkboxcolumn

                var checked = column.isChecked(row, column);
                var value = checked ? column.trueValue : column.falseValue;
                e = this._OnCellCommitEdit(row, column, value);

                //                var ck = column.getCheckBoxEl(row, column);
                //                var value = ck.checked ? column.trueValue : column.falseValue;
                //                e = this._OnCellCommitEdit(row, column, value);
            } else {
                var editorEl = cellEl.firstChild;
                var editor = mini.get(editorEl);
                if (!editor) continue;
                e = this._OnCellCommitEdit(row, column, null, editor);
            }
            if (deep !== false) {
                mini._setMap(column.field, e.value, rowData);
                if (column.displayField) {
                    mini._setMap(column.displayField, e.text, rowData);
                }
            } else {
                rowData[column.field] = e.value;
                if (column.displayField) {
                    rowData[column.displayField] = e.text;
                }
            }
        }

        rowData[idField] = row[idField];
        if (pidField) {
            rowData[pidField] = row[pidField];
        }

        if (all) {
            var o = mini.copyTo({}, row);
            rowData = mini.copyTo(o, rowData);
        }

        return rowData;
    },
    //////////////////////////////////////////////////////////////////////////////////////////
    // RowGroup
    //////////////////////////////////////////////////////////////////////////////////////////
    collapseGroups: function () {
        if (!this.isGrouping()) return;
        this._allowLayout = false;
        var groups = this.getGroupingView();
        for (var i = 0, l = groups.length; i < l; i++) {
            var g = groups[i];
            this.collapseRowGroup(g);
        }
        this._allowLayout = true;
        this.doLayout();
    },
    expandGroups: function () {
        if (!this.isGrouping()) return;
        this._allowLayout = false;
        var groups = this.getGroupingView();
        for (var i = 0, l = groups.length; i < l; i++) {
            var g = groups[i];
            this.expandRowGroup(g);
        }
        this._allowLayout = true;
        this.doLayout();
    },
    toggleRowGroup: function (group) {
        if (group.expanded) {
            this.collapseRowGroup(group);
        } else {
            this.expandRowGroup(group);
        }
    },
    collapseRowGroup: function (group) {

        group = this.getRowGroup(group);
        if (!group) return;
        group.expanded = false;

        var g = this._getRowGroupEl(group, 1);
        var rows = this._getRowGroupRowsEl(group, 1);
        var g2 = this._getRowGroupEl(group, 2);
        var rows2 = this._getRowGroupRowsEl(group, 2);

        if (rows) rows.style.display = "none";
        if (rows2) rows2.style.display = "none";

        if (g) mini.addClass(g, "mini-grid-group-collapse");
        if (g2) mini.addClass(g2, "mini-grid-group-collapse");
        this.doLayout();
    },
    expandRowGroup: function (group) {
        group = this.getRowGroup(group);
        if (!group) return;
        group.expanded = true;

        var g = this._getRowGroupEl(group, 1);
        var rows = this._getRowGroupRowsEl(group, 1);
        var g2 = this._getRowGroupEl(group, 2);
        var rows2 = this._getRowGroupRowsEl(group, 2);

        if (rows) rows.style.display = "";
        if (rows2) rows2.style.display = "";

        if (g) mini.removeClass(g, "mini-grid-group-collapse");
        if (g2) mini.removeClass(g2, "mini-grid-group-collapse");
        this.doLayout();
    },
    //////////////////////////////////////////////////////////////////////////////////////////
    // RowDetail
    //////////////////////////////////////////////////////////////////////////////////////////
    showAllRowDetail: function () {
        this._allowLayout = false;
        var data = this.getDataView();
        for (var i = 0, l = data.length; i < l; i++) {
            var row = data[i];
            this.showRowDetail(row);
        }
        this._allowLayout = true;
        this.doLayout();
    },
    hideAllRowDetail: function () {
        this._allowLayout = false;
        var data = this.getDataView();

        for (var i = 0, l = data.length; i < l; i++) {
            var row = data[i];
            this.hideRowDetail(row);
        }
        this._allowLayout = true;
        this.doLayout();
    },
    isShowRowDetail: function (row) {
        row = typeof row == 'object' ? row : this.getRow(row);
        if (!row) return false;
        return !!row._showDetail;
    },
    toggleRowDetail: function (row) {
        row = this.getRow(row);
        if (!row) return;
        if (grid.isShowRowDetail(row)) {
            grid.hideRowDetail(row);
        } else {
            grid.showRowDetail(row);
        }
    },
    showRowDetail: function (row) {
        row = this.getRow(row);
        if (!row || row._showDetail == true) return;
        row._showDetail = true;


        var tr = this._getRowDetailEl(row, 1, true);
        var tr2 = this._getRowDetailEl(row, 2, true);
        if (tr) tr.style.display = "";
        if (tr2) tr2.style.display = "";

        var rowEl = this._getRowEl(row, 1);
        var rowEl2 = this._getRowEl(row, 2);
        if (rowEl) mini.addClass(rowEl, "mini-grid-expandRow");
        if (rowEl2) mini.addClass(rowEl2, "mini-grid-expandRow");




        this.fire("showrowdetail", { record: row });

        var self = this;
        if (this.isFrozen()) {
            setTimeout(function () {
                self.syncRowDetail(row);
            }, 1);
            //            setTimeout(function () {
            //                self.syncRowDetail(row);
            //            }, 100);
        }

        this.doLayout();
    },
    hideRowDetail: function (row) {
        row = this.getRow(row);
        if (!row || row._showDetail !== true) return;
        row._showDetail = false;

        var tr = this._getRowDetailEl(row, 1);
        var tr2 = this._getRowDetailEl(row, 2);
        if (tr) tr.style.display = "none";
        if (tr2) tr2.style.display = "none";

        var rowEl = this._getRowEl(row, 1);
        var rowEl2 = this._getRowEl(row, 2);
        if (rowEl) mini.removeClass(rowEl, "mini-grid-expandRow");
        if (rowEl2) mini.removeClass(rowEl2, "mini-grid-expandRow");

        this.fire("hiderowdetail", { record: row });

        this.doLayout();
    },
    _getRowDetailEl: function (row, viewIndex, autoCreate) {
        row = this.getRow(row);
        if (!row) return null;
        var id = this._createRowDetailId(row, viewIndex);
        var el = document.getElementById(id);
        if (!el && autoCreate === true) {
            el = this._createRowDetail(row, viewIndex);
        }
        return el;
    },
    _createRowDetail: function (row, viewIndex) {
        var columns1 = this.getFrozenColumns();
        var columns2 = this.getUnFrozenColumns();
        var colspan = columns1.length;
        if (viewIndex == 2) {
            colspan = columns2.length;
        }
        var el = this._getRowEl(row, viewIndex);
        if (!el) return null;
        var id = this._createRowDetailId(row, viewIndex);
        //var s = '<tr id="' + id + '" class="mini-grid-detailRow"><td class="mini-grid-detailCell" colspan="' + colspan + '"></td></tr>';
        var s = '<tr id="' + id + '" class="mini-grid-detailRow"><td style="width:0"></td><td class="mini-grid-detailCell" colspan="' + colspan + '"></td></tr>';
        jQuery(el).after(s);
        return document.getElementById(id);
    },
    _createRowDetailId: function (row, viewIndex) {
        return this._id + "$detail" + viewIndex + "$" + row._id;
    },
    getRowDetailCellEl: function (row, viewIndex) {
        if (!viewIndex) viewIndex = 2;
        var el = this._getRowDetailEl(row, viewIndex);
        if (el) return el.cells[1];
    },
    autoHideRowDetail: true,
    setAutoHideRowDetail: function (value) {
        this.autoHideRowDetail = value;
    },
    getAutoHideRowDetail: function () {
        return this.autoHideRowDetail;
    },
    //////////////////////////////////////////////////////////////////////////////////////////
    // MergerCell
    //////////////////////////////////////////////////////////////////////////////////////////
    mergeColumns: function (columns) {

        if (columns && mini.isArray(columns) == false) columns = [columns];
        //自动合并值相同的单元格：行合并
        var grid = this;
        var bottomColumns = grid.getVisibleColumns();
        if (!columns) columns = bottomColumns;
        var data = grid.getDataView();
        data.push({});

        var __cells = [];

        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            column = grid.getColumn(column);
            if (!column) continue;
            var cells = margeCells(column);
            __cells.addRange(cells);
        }

        function margeCells(column) {
            if (!column.field) return;
            var cells = [];
            var rowIndex = -1, rowSpan = 1, columnIndex = bottomColumns.indexOf(column);
            var cellValue = null;
            for (var i = 0, l = data.length; i < l; i++) {
                var row = data[i];
                //var value = row[column.field];
                var value = mini._getMap(column.field, row);
                //if (rowIndex == -1 || value != cellValue) {
                if (rowIndex == -1 || !mini.isEquals(value, cellValue)) {
                    if (rowSpan > 1) {
                        var cell = { rowIndex: rowIndex, columnIndex: columnIndex, rowSpan: rowSpan, colSpan: 1 };
                        cells.push(cell);
                    }
                    rowIndex = i;
                    rowSpan = 1;
                    cellValue = value;
                } else {
                    rowSpan++;
                }
            }
            return cells;
        }

        grid.mergeCells(__cells);
    },
    mergeCells: function (cells) {
        if (!mini.isArray(cells)) return;
        this._mergedCells = cells;
        //maps
        var _mergedCellMaps = this._mergedCellMaps = {};

        function doMargedCellMaps(rowIndex, columnIndex, rowSpan, colSpan, cell) {
            for (var i = rowIndex, l = rowIndex + rowSpan; i < l; i++) {
                for (var j = columnIndex, k = columnIndex + colSpan; j < k; j++) {
                    if (i == rowIndex && j == columnIndex) {
                        _mergedCellMaps[i + ":" + j] = cell;
                    } else {
                        _mergedCellMaps[i + ":" + j] = true;
                    }
                }
            }
        }
        var cells = this._mergedCells;
        if (cells) {
            for (var i = 0, l = cells.length; i < l; i++) {
                var cell = cells[i];
                if (!cell.rowSpan) cell.rowSpan = 1;
                if (!cell.colSpan) cell.colSpan = 1;
                doMargedCellMaps(cell.rowIndex, cell.columnIndex, cell.rowSpan, cell.colSpan, cell);
            }
        }

        //this.deferUpdate();
        this.doUpdate();
    },
    margeCells: function (cells) {
        this.mergeCells(cells);
    },
    _isCellVisible: function (rowIndex, columnIndex) {
        if (!this._mergedCellMaps) return true;
        var ret = this._mergedCellMaps[rowIndex + ":" + columnIndex];
        return !(ret === true);
    },
    _getAnchorCell: function (row, column) {
        if (!this._mergedCellMaps) return null;
        var rowIndex = this.indexOf(row), columnIndex = this.getBottomColumns().indexOf(column);
        return this._mergedCellMaps[rowIndex + ":" + columnIndex];
    },

    //    _doMargeCells: function () {
    //        function _doMargeCells() {
    //            var cells = this._mergedCells;
    //            if (!cells) return;
    //            for (var i = 0, l = cells.length; i < l; i++) {
    //                var cell = cells[i];
    //                if (!cell.rowSpan) cell.rowSpan = 1;
    //                if (!cell.colSpan) cell.colSpan = 1;
    //                var cellEls = this._getCellEls(cell.rowIndex, cell.columnIndex, cell.rowSpan, cell.colSpan);
    //                for (var j = 0, k = cellEls.length; j < k; j++) {
    //                    var el = cellEls[j];
    //                    if (j != 0) {
    //                        el.style.display = "none";
    //                    } else {
    //                        el.rowSpan = cell.rowSpan;
    //                        el.colSpan = cell.colSpan;
    //                    }
    //                }
    //            }
    //        }
    //        //if (mini.isIE8) {
    //        _doMargeCells.call(this);
    //        //        } else {
    //        //            var me = this;
    //        //            if (this._doMargeCellsTimer) return;
    //        //            this._doMargeCellsTimer = setTimeout(function () {
    //        //                _doMargeCells.call(me);
    //        //                me._doMargeCellsTimer = null;
    //        //            }, 1);
    //        //        }
    //    },
    _getCellEls: function (rowIndex, columnIndex, rowSpan, colSpan) {
        var cells = [];
        if (!mini.isNumber(rowIndex)) return [];
        if (!mini.isNumber(columnIndex)) return [];
        var columns = this.getVisibleColumns();
        var data = this.getDataView();

        for (var i = rowIndex, l = rowIndex + rowSpan; i < l; i++) {
            for (var j = columnIndex, k = columnIndex + colSpan; j < k; j++) {
                var cell = this._getCellEl(i, j);
                if (cell) cells.push(cell);
            }
        }
        return cells;
    },
    //////////////////////////////////////////////////////////////////////////////////////////
    // Row DragDrop
    //////////////////////////////////////////////////////////////////////////////////////////
    _getDragData: function () {
        var data = this.getSelecteds().clone();
        var grid = this;


        //if (data.length == 2) debugger
        mini.sort(data, function (a, b) {
            var index1 = grid.indexOf(a);
            var index2 = grid.indexOf(b);
            if (index1 > index2) return 1;
            if (index1 < index2) return -1;
            return 0;
        }, this);
        //if(data.length == 2) alert(data[0].Name + ":" + data[1].Name);
        return data;
    },
    _getDragText: function (dragNodes) {
        return "Records " + dragNodes.length;
    },
    allowDrag: false,
    allowDrop: false,
    allowLeafDropIn: false,
    setAllowLeafDropIn: function (value) {
        this.allowLeafDropIn = value;
    },
    getAllowLeafDropIn: function () {
        return this.allowLeafDropIn;
    },
    setAllowDrag: function (value) {
        this.allowDrag = value;
    },
    getAllowDrag: function () {
        return this.allowDrag;
    },
    setAllowDrop: function (value) {
        this.allowDrop = value;
    },
    getAllowDrop: function () {
        return this.allowDrop;
    },
    isAllowDrag: function (node, column) {

        if (this.isReadOnly() || this.enabled == false) return false;
        if (!this.allowDrag || !column.allowDrag) return false;
        if (node.allowDrag === false) return false;
        return true;
        //        var e = this._OnDragStart(node, column);
        //        return !e.cancel;
    },
    _OnDragStart: function (node, column) {
        var e = {
            node: node,
            nodes: this._getDragData(),
            column: column,
            cancel: false
        };
        e.record = e.node;
        e.records = e.nodes;
        e.dragText = this._getDragText(e.nodes);

        this.fire("dragstart", e);
        return e;
    },
    _OnGiveFeedback: function (effect, dragNodes, dropNode, from) {
        var e = {};
        e.from = from;

        e.effect = effect;
        e.nodes = dragNodes;
        e.node = e.nodes[0];
        e.targetNode = dropNode;

        e.dragNodes = dragNodes;
        e.dragNode = e.dragNodes[0];
        e.dropNode = e.targetNode;
        e.dragAction = e.action;

        this.fire("givefeedback", e);
        return e;
    },
    _OnDragDrop: function (dragNodes, dropNode, dragAction) {
        dragNodes = dragNodes.clone();
        var e = {
            dragNodes: dragNodes,
            targetNode: dropNode,
            action: dragAction,
            cancel: false
        };

        e.dragNode = e.dragNodes[0];
        e.dropNode = e.targetNode;
        e.dragAction = e.action;

        this.fire("beforedrop", e);
        this.fire("dragdrop", e);
        return e;
    },
    ////////////////////////////
    moveUp: function (items) {
        if (!mini.isArray(items)) return;
        //按序号，从小到大
        var me = this;
        items = items.sort(function (a, b) {
            var i1 = me.indexOf(a);
            var i2 = me.indexOf(b);
            if (i1 > i2) return 1;
            return -1;
        });
        for (var i = 0, l = items.length; i < l; i++) {
            var item = items[i];
            var index = this.indexOf(item);
            this.moveRow(item, index - 1);
        }
    },
    moveDown: function (items) {
        if (!mini.isArray(items)) return;
        //按序号，从大到小
        var me = this;
        items = items.sort(function (a, b) {
            var i1 = me.indexOf(a);
            var i2 = me.indexOf(b);
            if (i1 > i2) return 1;
            return -1;
        });
        items.reverse();
        for (var i = 0, l = items.length; i < l; i++) {
            var item = items[i];
            var index = this.indexOf(item);
            this.moveRow(item, index + 2);
        }
    },
    //////////////////////////////////////////////////////////////////////////////////////////
    // Load Sort Pager
    //////////////////////////////////////////////////////////////////////////////////////////
    pageSize: 20,
    pageIndex: 0,
    totalCount: 0,
    totalPage: 0,

    sortField: "",
    sortOrder: "",
    url: "",

    setAjaxAsync: function (value) {
        this._dataSource.ajaxAsync = value;
        this.ajaxAsync = value;
    },
    getAjaxAsync: function () {
        return this._dataSource.ajaxAsync;
    },
    setAjaxMethod: function (value) {
        this._dataSource.ajaxMethod = value;
        this.ajaxMethod = value;
    },
    getAjaxMethod: function () {
        return this._dataSource.ajaxMethod;
    },
    setAjaxType: function (value) {
        this._dataSource.ajaxType = value;
        this.ajaxType = value;
    },
    getAjaxType: function () {
        return this._dataSource.ajaxType;
    },
    setAjaxOptions: function (value) {
        this._dataSource.setAjaxOptions(value);
    },
    getAjaxOptions: function () {
        return this._dataSource.getAjaxOptions();
    },
    setAutoLoad: function (value) {
        this._dataSource.setAutoLoad(value);
    },
    getAutoLoad: function () {
        return this._dataSource.getAutoLoad();
    },
    setUrl: function (value) {
        this._dataSource.setUrl(value);
        this.url = value;
    },
    getUrl: function () {
        return this._dataSource.getUrl();
    },
    load: function (params, success, error, complete) {
        this._dataSource.load(params, success, error, complete);
    },
    reload: function (success, error, complete) {
        this.accept();
        this._dataSource.reload(success, error, complete);
    },
    gotoPage: function (index, size) {
        this._dataSource.gotoPage(index, size);
    },
    sortBy: function (sortField, sortOrder) {
        if (!sortField) return null;
        var source = this._dataSource;
        this.sortField = source.sortField = sortField;
        this.sortOrder = source.sortOrder = sortOrder;

        if (this._dataSource.sortMode == "server") {
            this._dataSource.sortBy(sortField, sortOrder);
        } else {
            var dataType = this._columnModel._getDataTypeByField(sortField);
            this._dataSource._doClientSortField(sortField, sortOrder, dataType);
        }
    },

    sortDblClick: false,
    setSortDblClick: function (value) {
        this.sortDblClick = value
    },
    getSortDblClick: function () {
        return this.sortDblClick;
    },

    showCellTip: true,

    setShowCellTip: function (value) {
        this.showCellTip = value
    },
    getShowCellTip: function () {
        return this.showCellTip;
    },

    setCheckSelectOnLoad: function (value) {
        this._dataSource.setCheckSelectOnLoad(value);
        this.checkSelectOnLoad = value;
    },
    getCheckSelectOnLoad: function () {
        return this._dataSource.getCheckSelectOnLoad();
    },
    setSelectOnLoad: function (value) {
        this._dataSource.setSelectOnLoad(value);
        this.selectOnLoad = value;
    },
    getSelectOnLoad: function () {
        return this._dataSource.getSelectOnLoad();
    },

    allowCancelSort: false,
    setAllowCancelSort: function (value) {
        this.allowCancelSort = value;
    },
    getAllowCancelSort: function () {
        return this.allowCancelSort;
    },

    setSortMode: function (value) {
        this._dataSource.setSortMode(value);
        this.sortMode = value;
    },
    getSortMode: function () {
        return this._dataSource.getSortMode();
    },
    setPageIndex: function (value) {
        this._dataSource.setPageIndex(value);
        this.pageIndex = value;
    },
    getPageIndex: function () {
        return this._dataSource.getPageIndex();
    },
    setPageSize: function (value) {
        this._dataSource.setPageSize(value);
        this._virtualRows = value;
        this.pageSize = value;
    },
    getPageSize: function () {
        return this._dataSource.getPageSize();
    },
    setTotalCount: function (value) {
        this._dataSource.setTotalCount(value);
        this.totalCount = value;
    },
    getTotalCount: function () {
        return this._dataSource.getTotalCount();
    },
    getTotalPage: function () {
        return this._dataSource.getTotalPage();
    },

    setSortField: function (value) {
        this._dataSource.setSortField(value);
        this.sortField = value;
    },
    getSortField: function () {
        return this._dataSource.sortField;
    },
    setSortOrder: function (value) {
        this._dataSource.setSortOrder(value);
        this.sortOrder = value;
    },
    getSortOrder: function () {
        return this._dataSource.sortOrder;
    },

    setPageIndexField: function (value) {
        this._dataSource.pageIndexField = value;
        this.pageIndexField = value;
    },
    getPageIndexField: function () {
        return this._dataSource.pageIndexField;
    },
    setPageSizeField: function (value) {
        this._dataSource.pageSizeField = value;
        this.pageSizeField = value;
    },
    getPageSizeField: function () {
        return this._dataSource.pageSizeField;
    },

    setStartField: function (value) {
        this._dataSource.startField = value;
        this.startField = value;
    },
    getStartField: function () {
        return this._dataSource.startField;
    },
    setLimitField: function (value) {
        this._dataSource.limitField = value;
        this.limitField = value;
    },
    getLimitField: function () {
        return this._dataSource.limitField;
    },

    setSortFieldField: function (value) {
        this._dataSource.sortFieldField = value;
        this.sortFieldField = value;
    },
    getSortFieldField: function () {
        return this._dataSource.sortFieldField;
    },
    setSortOrderField: function (value) {
        this._dataSource.sortOrderField = value;
        this.sortOrderField = value;
    },
    getSortOrderField: function () {
        return this._dataSource.sortOrderField;
    },
    setTotalField: function (value) {
        this._dataSource.totalField = value;
        this.totalField = value;
    },
    getTotalField: function () {
        return this._dataSource.totalField;
    },
    setDataField: function (value) {
        this._dataSource.dataField = value;
        this.dataField = value;
    },
    getDataField: function () {
        return this._dataSource.dataField;
    },

    setErrorField: function (value) {
        this._dataSource.errorField = value;
        this.errorField = value;
    },
    getErrorField: function () {
        return this._dataSource.errorField;
    },
    setErrorMsgField: function (value) {
        this._dataSource.errorMsgField = value;
        this.errorMsgField = value;
    },
    getErrorMsgField: function () {
        return this._dataSource.errorMsgField;
    },
    setStackTraceField: function (value) {
        this._dataSource.stackTraceField = value;
        this.stackTraceField = value;
    },
    getStackTraceField: function () {
        return this._dataSource.stackTraceField;
    },

    setPageSizeWidth: function (value) {
        this._bottomPager.setPageSizeWidth(value);
    },
    getPageSizeWidth: function () {
        return this._bottomPager.getPageSizeWidth();
    },

    getBottomPager: function () {
        return this._bottomPager;
    },

    sizeText: "",
    setSizeText: function (value) {
        this._bottomPager.sizeText = value;
    },
    getSizeText: function () {
        return this.sizeText;
    },

    showPagerButtonText: false,
    setShowPagerButtonText: function (value) {
        this._bottomPager.setShowButtonText(value);
    },
    getShowPagerButtonText: function () {
        return this.showPagerButtonText;
    },
    showPagerButtonIcon: false,
    setShowPagerButtonIcon: function (value) {
        this._bottomPager.setShowButtonIcon(value);
    },
    getShowPagerButtonIcon: function () {
        return this.showPagerButtonIcon;
    },
    setShowReloadButton: function (value) {
        this._bottomPager.setShowReloadButton(value);
    },
    getShowReloadButton: function () {
        return this._bottomPager.getShowReloadButton();
    },
    setShowPageInfo: function (value) {
        this._bottomPager.setShowPageInfo(value);
    },
    getShowPageInfo: function () {
        return this._bottomPager.getShowPageInfo();
    },
    setSizeList: function (value) {
        if (!mini.isArray(value)) return;
        this._bottomPager.setSizeList(value);
    },
    getSizeList: function () {
        return this._bottomPager.getSizeList();
    },
    setShowPageSize: function (value) {
        this._bottomPager.setShowPageSize(value);
    },
    getShowPageSize: function () {
        return this._bottomPager.getShowPageSize();
    },
    setShowPageIndex: function (value) {
        this.showPageIndex = value;
        this._bottomPager.setShowPageIndex(value);
    },
    getShowPageIndex: function () {
        return this._bottomPager.getShowPageIndex();
    },
    setShowTotalCount: function (value) {

        this._bottomPager.setShowTotalCount(value);
    },
    getShowTotalCount: function () {
        return this._bottomPager.getShowTotalCount();
    },
    setPagerStyle: function (value) {
        this.pagerStyle = value;
        mini.setStyle(this._bottomPager.el, value);
    },
    setPagerCls: function (value) {
        this.pagerCls = value;
        mini.addClass(this._bottomPager.el, value);
    },
    setDropAction: function (value) {
        this.dropAction = value;
    },
    getDropAction: function () {
        return this.dropAction;
    },

    groupTitleCollapsible: true,
    setGroupTitleCollapsible: function (value) {
        this.groupTitleCollapsible = value;
    },
    getGroupTitleCollapsible: function () {
        return this.groupTitleCollapsible;
    },

    allowEmptyContextMenu: false,
    setAllowEmptyContextMenu: function (value) {
        this.allowEmptyContextMenu = value;
    },
    getAllowEmptyContextMenu: function () {
        return this.allowEmptyContextMenu;
    },
    //////////////////////////////////////////////////////////////////////////////////////////
    // ContextMenu
    //////////////////////////////////////////////////////////////////////////////////////////
    _beforeOpenContentMenu: function (menu, e) {
        //var record = this._getRecordByEvent(e.htmlEvent);        
        var can = mini.isAncestor(this._bodyEl, e.htmlEvent.target);
        if (can) {
            menu.fire("BeforeOpen", e);
        } else {
            e.cancel = true;
        }
    },



    __OnHtmlContextMenu: function (e) {
        var ev = {
            popupEl: this.el,
            htmlEvent: e,
            cancel: false
        };

        if (mini.isAncestor(this._columnsEl, e.target)) {
            if (this.headerContextMenu) {
                this.headerContextMenu.fire("BeforeOpen", ev);
                if (ev.cancel == true) return;
                this.headerContextMenu.fire("opening", ev);
                if (ev.cancel == true) return;
                this.headerContextMenu.showAtPos(e.pageX, e.pageY);
                this.headerContextMenu.fire("Open", ev);
            }
        } else {

            var d = mini.findParent(e.target, "mini-grid-detailRow");
            if (d && mini.isAncestor(this.el, d)) return;

            var f = mini.findParent(e.target, "mini-tree-nodeshow");
            //if (!f && this.uiCls == "mini-tree") return

            //            if (!f && this.type == "tree") return
            if (!f && this.type == "tree" && !this.allowEmptyContextMenu) return


            //if ($(e.target).hasClass("mini-grid-rows-view")) return;

            if (!this.allowEmptyContextMenu && !mini.findParent(e.target, "mini-grid-table")) return;

            if (mini.findParent(e.target, "mini-grid-filterRow")) return;
            if (mini.findParent(e.target, "mini-grid-summaryRow")) return;


            if (this.contextMenu) {
                this._beforeOpenContentMenu(this.contextMenu, ev);
                if (ev.cancel == true) return;
                this.contextMenu.fire("opening", ev);
                if (ev.cancel == true) return;
                this.contextMenu.showAtPos(e.pageX, e.pageY);
                this.contextMenu.fire("Open", ev);
            }
        }
        return false;

    },
    headerContextMenu: null,
    setHeaderContextMenu: function (value) {
        var ui = this._getContextMenu(value);
        if (!ui) return;
        if (this.headerContextMenu !== ui) {
            this.headerContextMenu = ui;
            mini.addClass(ui.el, "mini-menu-open");
            this.headerContextMenu.owner = this;
            mini.on(this.el, "contextmenu", this.__OnHtmlContextMenu, this);
        }
    },
    getHeaderContextMenu: function () {
        return this.headerContextMenu;
    },

    selectOnRightClick: true,
    setSelectOnRightClick: function (value) {
        this.selectOnRightClick = value;
    },
    getSelectOnRightClick: function () {
        return this.selectOnRightClick;
    },

    //////////////////////////////////////////////////////////////////////////////////////////
    _get_originals: function () {
        return this._dataSource._originals;
    },
    _set_originals: function (value) {
        this._dataSource._originals = value;
    },
    _set_clearOriginals: function (value) {
        this._dataSource._clearOriginals = value;
    },
    _set_originalIdField: function (value) {
        this._dataSource._originalIdField = value;
    },
    _set_autoCreateNewID: function (value) {
        this._dataSource._autoCreateNewID = value;
    },
    //////////////////////////////////////////////////////////////////////////////////////////
    // HTML Tags
    //////////////////////////////////////////////////////////////////////////////////////////       
    getAttrs: function (el) {
        var attrs = mini.DataGrid.superclass.getAttrs.call(this, el);
        var cs = mini.getChildNodes(el);
        for (var i = 0, l = cs.length; i < l; i++) {
            var node = cs[i];
            //var property = jQuery(node).attr("property");
            var property = mini.getAttr(node, "property");
            if (!property) continue;
            property = property.toLowerCase();
            if (property == "columns") {
                attrs.columns = mini._ParseColumns(node);
                mini.removeNode(node);
            } else if (property == "data") {
                attrs.data = node.innerHTML;
                mini.removeNode(node);
            }
        }

        mini._ParseString(el, attrs,
            [
                "oncelleditenter",
                "onselect", "ondeselect", "onbeforeselect", "onbeforedeselect",
                "url", "sizeList", "bodyCls", "bodyStyle", "footerCls", "footerStyle", "pagerCls", "pagerStyle",
                "onheadercellclick", "onheadercellmousedown", "onheadercellcontextmenu", "onrowdblclick",
                "onrowclick", "onrowmousedown", "onrowcontextmenu",
                "onrowmouseenter", "onrowmouseleave",
                "oncellclick", "oncellmousedown", "oncellcontextmenu", "oncelldblclick",
                "onbeforeload", "onpreload", "onloaderror", "onload",
                "onupdate", "ondrawcell", "oncellbeginedit", "onselectionchanged", "ondrawgroup",
                "onbeforeshowrowdetail", "onbeforehiderowdetail", "onshowrowdetail", "onhiderowdetail", "idField", "valueField",
                "pager", "oncellcommitedit", "oncellendedit",
                "headerContextMenu", "loadingMsg", "emptyText", "cellEditAction",
                "sortMode", "oncellvalidation", "onsort",
                "ondrawsummarycell", "ondrawgroupsummarycell", "onresize", "oncolumnschanged",
                "ajaxMethod", "ajaxOptions",

                "onaddrow", "onupdaterow", "onremoverow", "onmoverow",
                "onbeforeaddrow", "onbeforeupdaterow", "onbeforeremoverow", "onbeforemoverow",

                "pageIndexField", "pageSizeField", "sortFieldField", "sortOrderField",
                "startField", "limitField",
                "totalField", "dataField", "sortField", "sortOrder",
                "stackTraceField", "errorField", "errorMsgField",
                "pagerButtons", "onbeforegroupclick", "dropAction", "sizeText", "pagerType", "viewType", "itemRenderer", "summaryPosition"
             ]
        );

        mini._ParseBool(el, attrs,
            ["showColumns", "showFilterRow", "showSummaryRow", "showPager", "showFooter", "enableGroupOrder", "validateOnAdd",
            "showHGridLines", "showVGridLines", "showSortIcon",
            "allowSortColumn", "allowMoveColumn", "allowResizeColumn",
            "fitColumns", "showLoading", "multiSelect", "allowAlternating", "resultAsData", "allowRowSelect", "allowUnselect",
            "onlyCheckSelection",
            "allowHotTrackOut", "enableHotTrack", "showPageIndex", "showPageSize", "showTotalCount",
            "checkSelectOnLoad", "allowResize", "autoLoad",
            "autoHideRowDetail", "allowCellSelect", "allowCellEdit", "allowCellWrap", "allowHeaderWrap", "selectOnLoad",
            "virtualScroll", "virtualColumns", "collapseGroupOnLoad", "showGroupSummary",
            "showEmptyText", "alwaysShowEmptyText", "allowCellValid", "showModified", "showColumnsMenu", "showPageInfo", "showReloadButton",
            "showNewRow", "editNextOnEnterKey", "createOnEnter", "skipReadOnlyCell",
            "ajaxAsync",
            "allowDrag", "allowDrop", "allowLeafDropIn", "editNextRowCell",
            "fixedRowHeight", "showCellTip", "showPagerButtonText", "showPagerButtonIcon", "groupTitleCollapsible",
            "navEditMode", "selectOnRightClick", "sortDblClick", "allowEmptyContextMenu", "showGroupSummary",
            "allowCancelSort"
             ]
        );

        mini._ParseInt(el, attrs,
            ["frozenStartColumn", "frozenEndColumn", "pageSizeWidth",
            "pageIndex", "pageSize", "defaultRowHeight", "defaultColumnWidth", "wheelIncrement", "summaryRows"
             ]
        );

        if (typeof attrs.ajaxOptions == "string") {
            attrs.ajaxOptions = window["ev" + "al"]('(' + attrs.ajaxOptions + ')');
        }
        if (typeof attrs.sizeList == "string") {
            attrs.sizeList = window["ev" + "al"]('(' + attrs.sizeList + ')');
        }
        if (!attrs.idField && attrs.valueField) {
            attrs.idField = attrs.valueField;
        }

        if (attrs.pagerButtons) {
            attrs.pagerButtons = mini.byId(attrs.pagerButtons);
        }

        if (attrs.itemRenderer) attrs.itemRenderer = window[attrs.itemRenderer];

        return attrs;
    }
});
mini.regClass(mini.DataGrid, "datagrid");


/* Cell Validae
-----------------------------------------------------------------------------*/

mini_DataGrid_CellValidator_Prototype = {
    getCellErrors: function () {
        var errors = this._cellErrors.clone();

        //如果errors中的行对象已经被删除，则需要从错误数组中移除
        var source = this._dataSource;
        for (var i = 0, l = errors.length; i < l; i++) {
            var error = errors[i];
            var row = error.record;
            if (!source.getby_id(row._id)) {
                var column = error.column;
                var id = row[this._rowIdField] + "$" + column._id;
                delete this._cellMapErrors[id];
                this._cellErrors.remove(error);
            }
        }

        //        var data = this.getDataView();
        //        for (var i = 0, l = errors.length; i < l; i++) {
        //            var error = errors[i];
        //            var row = error.record;
        //            var column = error.column;
        //            if (data.indexOf(row) == -1) {
        //                var id = row[this._rowIdField] + "$" + column._id;
        //                delete this._cellMapErrors[id];
        //                this._cellErrors.remove(error);
        //            }
        //        }

        return this._cellErrors;
    },
    getCellError: function (row, column) {
        row = this.getNode ? this.getNode(row) : this.getRow(row);
        column = this.getColumn(column);
        if (!row || !column) return;

        var id = row[this._rowIdField] + "$" + column._id;
        return this._cellMapErrors ? this._cellMapErrors[id] : null;
    },
    isValid: function () {
        return this.getCellErrors().length == 0;
    },
    isCellValid: function (record, column) {
        //if(this.indexOf(record) == 0) debugger
        if (!this._cellMapErrors) return true;
        var id = record[this._rowIdField] + "$" + column._id;
        return !this._cellMapErrors[id];
    },
    validate: function (data) {
        data = data || this.getDataView();
        if (!mini.isArray(data)) data = [];
        for (var i = 0, l = data.length; i < l; i++) {
            var row = data[i];
            this.validateRow(row);
        }
    },
    validateRow: function (row) {
        var columns = this.getBottomColumns();
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            this.validateCell(row, column);
        }
    },
    validateCell: function (row, column) {
        row = this.getNode ? this.getNode(row) : this.getRow(row);
        column = this.getColumn(column);
        if (!row || !column || column.visible == false) return;
        var value = mini._getMap(column.field, row);
        var e = {
            record: row,
            row: row,
            node: row,
            column: column,
            field: column.field,
            value: value,
            isValid: true,
            errorText: ""
        };

        if (column.vtype) {

            mini._ValidateVType(column.vtype, e.value, e, column);
        }
        //唯一列值处理unique：遍历行，满足条件，遍历行
        if (e.isValid == true && column.unique && column.field) {

            var maps = {};
            var data = this.data, field = column.field;
            for (var i = 0, l = data.length; i < l; i++) {
                var o = data[i];
                var v = o[field];
                //if (mini.isNull(v) || v === "") {
                if (mini.isNull(v) || String(v).trim() === "") {
                } else {
                    var old = maps[v];
                    if (old && o == row) {
                        e.isValid = false;
                        e.errorText = mini._getErrorText(column, "uniqueErrorText");

                        //上面的也是
                        this.setCellIsValid(old, column, e.isValid, e.errorText);
                        break;
                    }
                    maps[v] = o;
                }
            }
        }

        this.fire("cellvalidation", e);
        this.setCellIsValid(row, column, e.isValid, e.errorText);
    },

    setIsValid: function (value) {
        if (value) {
            var errors = this._cellErrors.clone();
            for (var i = 0, l = errors.length; i < l; i++) {
                var error = errors[i];
                this.setCellIsValid(error.record, error.column, true);
            }
        }
    },
    _removeRowError: function (row) {
        var columns = this.getColumns();
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            var id = row[this._rowIdField] + "$" + column._id;
            var error = this._cellMapErrors[id];
            if (error) {
                delete this._cellMapErrors[id];
                this._cellErrors.remove(error);
            }
        }
    },
    setCellIsValid: function (row, column, isValid, errorText) {
        row = this.getRow(row);
        column = this.getColumn(column);
        if (!row || !column) return;
        var id = row[this._rowIdField] + "$" + column._id;
        var cellEl = this._getCellEl(row, column);

        var error = this._cellMapErrors[id];
        delete this._cellMapErrors[id];
        this._cellErrors.remove(error);

        if (isValid === true) {
            if (cellEl && error) {
                mini.removeClass(cellEl, 'mini-grid-cell-error');
            }
        } else {
            error = { record: row, column: column, isValid: isValid, errorText: errorText };
            this._cellMapErrors[id] = error;
            this._cellErrors.add(error);
            if (cellEl) {
                mini.addClass(cellEl, 'mini-grid-cell-error');
            }
        }
    }
}
mini.copyTo(mini.DataGrid.prototype, mini_DataGrid_CellValidator_Prototype);

/*
描述：TreeGrid
节点对象：{ enabled, expanded, checked, checkState, checkable, asyncLoad, isLeaf, children }
    0.checked(true|false), checkState(indeterminate|unchecked|checked)
    1.checkable 决定是否可以选中。设置false，会隐藏checkbox。
    2.enabled 决定是否灰化显示，禁止点击、选择操作
    3.isLeaf 决定是否显示成父节点样子
    4.asyncLoad 决定是否可以懒加载。设置false，展开时不懒加载
            
    node.showCheckBox?
    是否显示checkbox。   也可以在ondrawcell的时候，e.showCheckBox=false;
    node.checkable
    是否禁用checkbox。
    
    1.isLeaf：没有子节点，有isLeaf="true"，也返回true，显示成一个父节点
    2.hasChildren：只判断子节点。
*/

mini.TreeGrid = function () {
    mini.TreeGrid.superclass.constructor.apply(this, arguments);
    mini.addClass(this.el, 'mini-tree');

    this.setAjaxAsync(false);
    this.setAutoLoad(true);

    if (this.showTreeLines == true) {
        mini.addClass(this.el, 'mini-tree-treeLine');
    }

    this._AsyncLoader = new mini._Tree_AsyncLoader(this);
    this._Expander = new mini._Tree_Expander(this);

    this.setShowArrow(this.showArrow);
};
mini.copyTo(mini.TreeGrid.prototype, mini._DataTreeApplys);

mini.extend(mini.TreeGrid, mini.DataGrid, {
    isTree: true,

    uiCls: "mini-treegrid",

    showPager: false,
    showNewRow: false,

    showCheckBox: false,    //checkbox
    showRadioButton: false, //radio
    showTreeIcon: true,     //节点图标    
    showExpandButtons: true,    //+、-号的连线
    showTreeLines: false,        //连线
    showArrow: false,

    expandOnDblClick: true,
    expandOnNodeClick: false,
    loadOnExpand: true,

    _checkBoxType: "checkbox",

    iconField: "iconCls",

    _treeColumn: null,

    leafIconCls: "mini-tree-leaf",
    folderIconCls: "mini-tree-folder",

    fixedRowHeight: false,  //固定高度

    _checkBoxCls: "mini-tree-checkbox",
    _expandNodeCls: "mini-tree-expand",
    _collapseNodeCls: "mini-tree-collapse",
    _eciconCls: "mini-tree-node-ecicon",
    _inNodeCls: "mini-tree-nodeshow",


    //    set: function (kv) {
    //        if (typeof kv == 'string') {
    //            return this;
    //        }

    //        var value = kv.showTreeNode;
    //        if (!mini.isNull(value)) {
    //            delete kv.showTreeNode;
    //            this.setShowTreeIcon(value);
    //        }


    //        if (!mini.isNull(columns)) {
    //            this.setColumns(columns);
    //        }

    //        mini.TreeGrid.superclass.set.call(this, kv);

    //       

    //        return this;
    //    },

    isEditingNode: function (node) {
        return this._editingNode == node;
    },

    indexOf: function (record) {
        return this._dataSource.indexOfList(record);
    },

    _getDragText: function (dragNodes) {
        return "Nodes " + dragNodes.length;
    },
    _initEvents: function () {
        mini.TreeGrid.superclass._initEvents.call(this);

        this.on("nodedblclick", this.__OnNodeDblClick, this);
        this.on("nodeclick", this.__OnNodeClick, this);


        //adapter events
        this.on("cellclick", function (e) {
            e.node = e.record;
            e.isLeaf = this.isLeaf(e.node);
            this.fire("nodeclick", e);
        }, this);
        this.on("cellmousedown", function (e) {
            e.node = e.record;
            e.isLeaf = this.isLeaf(e.node);
            this.fire("nodemousedown", e);
        }, this);
        this.on("celldblclick", function (e) {
            e.node = e.record;
            e.isLeaf = this.isLeaf(e.node);
            this.fire("nodedblclick", e);
        }, this);

        this.on("beforerowselect", function (e) {
            e.node = e.selected;
            e.isLeaf = this.isLeaf(e.node);
            this.fire("beforenodeselect", e);
        }, this);
        this.on("rowselect", function (e) {
            e.node = e.selected;
            e.isLeaf = this.isLeaf(e.node);
            this.fire("nodeselect", e);
        }, this);

    },
    setValue: function (value, cascade) {
        if (mini.isNull(value)) value = "";
        value = String(value);
        if (this.getValue() != value) {
            var nodes = this.getCheckedNodes();

            //this.uncheckNodes(nodes, false); //三态的时候，是否会有问题？
            this.uncheckNodes(nodes, this.checkRecursive); //取消选择，也应该引发三态

            this.value = value;
            if (this.showCheckBox) {
                var ids = String(value).split(",");
                this._dataSource.doCheckNodes(ids, true, cascade !== false);
                //                for (var i = 0, l = ids.length; i < l; i++) {
                //                    this.checkNode(ids[i]);
                //                }
            } else {
                this.selectNode(value, false);
            }
        }
    },
    getValue: function (mode) {
        if (this.showCheckBox) {
            if (mode === false) mode = 'leaf';
            return this._dataSource.getCheckedNodesId(mode);
        } else {
            return this._dataSource.getSelectedsId();
        }
    },
    getText: function () {
        var nodes = [];
        if (this.showCheckBox) {
            nodes = this.getCheckedNodes();
        } else {
            var node = this.getSelectedNode();
            if (node) nodes.push(node);
        }

        var sb = [], textField = this.getTextField();
        for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];
            sb.push(node[textField]);
        }

        return sb.join(',');
    },
    //////////////////////////////////////////////////////////
    isGrouping: function () {
        return false;
    },
    _createSource: function () {
        this._dataSource = new mini.DataTree();
    },
    _bindSource: function () {
        mini.TreeGrid.superclass._bindSource.call(this);
        var source = this._dataSource;

        source.on("expand", this.__OnTreeExpand, this);
        source.on("collapse", this.__OnTreeCollapse, this);

        source.on("_checkchanged", this.__OnCheckChanged, this);

        source.on("addnode", this.__OnSourceAddNode, this);
        source.on("removenode", this.__OnSourceRemoveNode, this);
        source.on("movenode", this.__OnSourceMoveNode, this);

        source.on("beforeloadnode", this.__OnBeforeLoadNode, this);
        source.on("loadnode", this.__OnLoadNode, this);
    },
    __OnBeforeLoadNode: function (e) {
        this.__showLoading = this.showLoading;
        this.showLoading = false;
        this.addNodeCls(e.node, "mini-tree-loading");
        this.fire("beforeloadnode", e);
    },
    __OnLoadNode: function (e) {
        this.showLoading = this.__showLoading;
        this.removeNodeCls(e.node, "mini-tree-loading");
        this.fire("loadnode", e);
    },
    _virtualUpdate: function () {
        var that = this;
        if (that._updateNodeTimer) {
            clearTimeout(that._updateNodeTimer);
            that._updateNodeTimer = null;
        }
        that._updateNodeTimer = setTimeout(function () {
            that._updateNodeTimer = null;

            that.doUpdateRows();         //30条，55ms
            //this._stopUpdateTableView();
            that.deferLayout(50);
        }, 5);
    },
    //    __OnSourceAddNode: function (e) {

    //        var visible = this._dataSource.isVisibleNode(e.node);

    //        if (this.isVirtualScroll() == true) {
    //            this._virtualUpdate();
    //        } else {
    //            if (visible) this._doAddNodeEl(e.node);

    //        }
    //        this.fire("addnode", e);
    //    },
    __OnSourceAddNode: function (e) {

        var visible = this._dataSource.isVisibleNode(e.node);

        if (this.isVirtualScroll() == true) {
            this._virtualUpdate();
        } else {
            if (visible) this._doAddNodeEl(e.node);
            else {
                var parentNode = this.getParentNode(e.node);
                if (this._dataSource.isVisibleNode(parentNode)) {
                    this._doUpdateTreeNodeEl(parentNode);
                }

            }

        }
        this.fire("addnode", e);
    },
    __OnSourceRemoveNode: function (e) {
        if (this.isVirtualScroll() == true) {
            this._virtualUpdate();
        } else {
            this._doRemoveNodeEl(e.node);

            //更新父节点        
            var parentNode = this.getParentNode(e.node);
            var nodes = this.getChildNodes(parentNode);
            if (nodes.length == 0) {
                this._doUpdateTreeNodeEl(parentNode);
            }
            else {
                var index = e.index;
                if (index > 1 && index == nodes.length) {
                    this._doUpdateTreeNodeEl(nodes[nodes.length - 1]);
                }
            }
        }

        this.fire("removenode", e);
    },

    __OnSourceMoveNode: function (e) {
        this._doMoveNodeEl(e.node);
        this.fire("movenode", e);

        var oldParentNode = e.oldParentNode;
        var parentNode = e.parentNode;
        if (oldParentNode != parentNode) {
            var nodes = this.getChildNodes(oldParentNode);
            if (nodes) {
                var last = nodes[nodes.length - 1];
                if (last) this._doUpdateTreeNodeEl(last);
            }
        }
    },
    _doAddNodeEl: function (node) {
        var columns1 = this.getFrozenColumns();
        var columns2 = this.getUnFrozenColumns();

        var parentNode = this.getParentNode(node);
        var rowIndex = this.indexOf(node);

        var updateParent = false;
        function doAdd(node, columns, viewIndex) {
            var s = this._createRowHTML(node, rowIndex, columns, viewIndex);

            var index = this.indexOfNode(node) + 1;
            var targetNode = this.getChildNodeAt(index, parentNode);
            if (targetNode) {
                var targetEl = this._getNodeEl(targetNode, viewIndex);
                jQuery(targetEl).before(s);
            } else {
                var nodesEl = this._getNodesEl(parentNode, viewIndex);
                if (nodesEl) {
                    mini.append(nodesEl.firstChild, s);
                } else {
                    updateParent = true;
                }
            }
        }

        doAdd.call(this, node, columns2, 2);
        doAdd.call(this, node, columns1, 1);

        if (updateParent) {
            this._doUpdateTreeNodeEl(parentNode);
        }
    },
    _doRemoveNodeEl: function (node) {
        this._doRemoveRowEl(node);
        var nodesEl = this._getNodesEl(node, 1);
        var nodesEl2 = this._getNodesEl(node, 2);
        if (nodesEl) nodesEl.parentNode.removeChild(nodesEl);
        if (nodesEl2) nodesEl2.parentNode.removeChild(nodesEl2);


    },
    _doMoveNodeEl: function (node) {

        if (this.isVirtualScroll() == true) {
            this._virtualUpdate();
        } else {
            //1）删除节点        
            this._doRemoveNodeEl(node);
            //2）更新父节点

            var parentNode = this.getParentNode(node);
            this._doUpdateTreeNodeEl(parentNode);
        }


    },
    _doUpdateNodeTitle: function (node) {
        this._doUpdateTreeNodeEl(node, false);
    },
    _doUpdateTreeNodeEl: function (node, hasChild) {
        //更新：节点、子节点
        hasChild = hasChild !== false;

        var rootNode = this.getRootNode();
        if (rootNode == node) {
            this.doUpdate();
            return;
        }
        if (!this.isVisibleNode(node)) return;

        var objNode = node;
        var frozenColumns = this.getFrozenColumns();
        var unfrozenColumns = this.getUnFrozenColumns();

        var lockHtml = this._createNodeHTML(node, frozenColumns, 1, null, hasChild);
        var html = this._createNodeHTML(node, unfrozenColumns, 2, null, hasChild);

        var nodeEl1 = this._getNodeEl(node, 1);
        var nodeEl2 = this._getNodeEl(node, 2);
        var nodesEl1 = this._getNodesTr(node, 1);
        var nodesEl2 = this._getNodesTr(node, 2);

        var detail1 = this._getRowDetailEl(node, 1);
        var detail2 = this._getRowDetailEl(node, 2);

        //1）
        var els = mini.createElements(lockHtml);
        var node = els[0];
        var nodes = els[1];
        if (nodeEl1) {
            mini.before(nodeEl1, node);
            if (hasChild) {
                if (detail1) mini.after(detail1, nodes);
                else mini.before(nodeEl1, nodes);
            }

            mini.removeNode(nodeEl1);
            if (hasChild) {
                mini.removeNode(nodesEl1);
            }
        }
        //2）
        var els = mini.createElements(html);
        var node = els[0];
        var nodes = els[1];
        if (nodeEl2) {
            mini.before(nodeEl2, node);

            if (hasChild) {
                if (detail2) mini.after(detail2, nodes);
                else mini.before(nodeEl2, nodes);
            }

            mini.removeNode(nodeEl2);
            if (hasChild) {
                mini.removeNode(nodesEl2);
            }
        }

        if (node.checked != true && !this.isLeaf(node)) {
            this._doCheckNodeEl(objNode);
        }
    },
    addNodeCls: function (node, cls) {
        this.addRowCls(node, cls);
    },
    removeNodeCls: function (node, cls) {
        this.removeRowCls(node, cls);
    },
    /////////////////////////////////////////////////////////////////
    doUpdate: function () {

        mini.TreeGrid.superclass.doUpdate.apply(this, arguments);
        //this._doUpdate
    },
    setData: function (data) {
        if (!data) data = [];
        this._dataSource.setData(data);
    },
    loadList: function (list, idField, parentField) {
        idField = idField || this.getIdField();
        parentField = parentField || this.getParentField();
        var tree = mini.listToTree(list, this.getNodesField(), idField, parentField);
        this.setData(tree);
    },
    //    _OnDrawNode: function (e) {
    //        var showCheckBox = this.showCheckBox;
    //        if (showCheckBox && this.hasChildren(node)) {
    //            showCheckBox = this.showFolderCheckBox;
    //        }
    //        var nodeHtml = this.getItemText(node);
    //        var e = {
    //            isLeaf: this.isLeaf(node),
    //            node: node,
    //            nodeHtml: nodeHtml,
    //            nodeCls: '',
    //            nodeStyle: "",
    //            showCheckBox: showCheckBox,
    //            iconCls: this.getNodeIcon(node),
    //            img: node[this.imgField],
    //            showTreeIcon: this.showTreeIcon
    //        };
    //        this.fire("drawnode", e);
    //        if (e.nodeHtml === null || e.nodeHtml === undefined || e.nodeHtml === "") e.nodeHtml = "&nbsp;";
    //        return e;
    //    },
    _createDrawCellEvent: function (record, column, rowIndex, columnIndex) {
        var e = mini.TreeGrid.superclass._createDrawCellEvent.call(this, record, column, rowIndex, columnIndex);
        e.node = e.record;
        e.isLeaf = this.isLeaf(e.node);
        if (this._treeColumn && this._treeColumn == column.name) {
            e.isTreeCell = true;

            e.img = record[this.imgField];
            e.iconCls = this._getNodeIcon(record);
            e.nodeCls = "";
            e.nodeStyle = "";
            e.nodeHtml = "";

            e.showTreeIcon = this.showTreeIcon;
            e.checkBoxType = this._checkBoxType;
            e.showCheckBox = this.showCheckBox;
            e.showRadioButton = this.showRadioButton;
            if (e.showCheckBox && !e.isLeaf) {
                e.showCheckBox = this.showFolderCheckBox;
            }
            if (e.showRadioButton && !e.isLeaf) {
                e.showRadioButton = this.showFolderCheckBox;
            }
            e.enabled = e.node.enabled !== false;
            e.checkable = this.getCheckable(e.node);
            //            if (this.getOnlyLeafCheckable() && !this.isLeaf(record)) {
            //                e.showCheckBox = false;
            //            }
            //            if (record.checkable === false) {
            //                e.showCheckBox = false;
            //            }
        }
        return e;
    },
    _OnDrawCell: function (record, column, rowIndex, columnIndex) {
        var e = mini.TreeGrid.superclass._OnDrawCell.call(this, record, column, rowIndex, columnIndex);

        if (this._treeColumn && this._treeColumn == column.name) {

            this.fire("drawnode", e);
            if (e.nodeStyle) {
                e.cellStyle = e.nodeStyle;
            }
            if (e.nodeCls) {
                e.cellCls = e.nodeCls;
            }
            if (e.nodeHtml) {
                e.cellHtml = e.nodeHtml;
            }

            this._createTreeColumn(e);
        }
        return e;
    },
    _isViewFirstNode: function (node) {
        if (this._viewNodes) {
            var pnode = this.getParentNode(node);
            var nodes = this._getViewChildNodes(pnode);
            return nodes[0] === node;
        } else {
            return this.isFirstNode(node);
        }
    },
    _isViewLastNode: function (node) {
        if (this._viewNodes) {
            var pnode = this.getParentNode(node);
            var nodes = this._getViewChildNodes(pnode);
            return nodes[nodes.length - 1] === node;
        } else {
            return this.isLastNode(node);
        }
    },
    _isInViewLastNode: function (node, level) {
        if (this._viewNodes) {
            var pnode = null;
            var ans = this.getAncestors(node);
            for (var i = 0, l = ans.length; i < l; i++) {
                var a = ans[i];
                if (this.getLevel(a) == level) {
                    pnode = a;
                }
            }
            if (!pnode || pnode == this.root) return false;
            return this._isViewLastNode(pnode);
        } else {
            return this.isInLastNode(node, level);
        }
    },
    isInLastNode: function (node, level) {
        var pnode = null;
        var ans = this.getAncestors(node);
        for (var i = 0, l = ans.length; i < l; i++) {
            var a = ans[i];
            if (this.getLevel(a) == level) {
                pnode = a;
            }
        }
        if (!pnode || pnode == this.root) return false;
        return this.isLastNode(pnode);
    },
    _createNodeTitle: function (node, sb, e) {
        var isReturn = !sb;
        if (!sb) sb = [];

        var isLeaf = this.isLeaf(node);
        var level = this.getLevel(node);

        var cls = e.nodeCls;

        if (!isLeaf) {
            cls = this.isExpandedNode(node) ? this._expandNodeCls : this._collapseNodeCls;
        }

        if (node.enabled === false) {
            cls += " mini-disabled";
        }
        if (!isLeaf) {
            cls += " mini-tree-parentNode";
        }

        var subNodes = this.getChildNodes(node);
        var hasChilds = subNodes && subNodes.length > 0;

        //sb[sb.length] = '<div class="mini-tree-nodetitle ' + cls + '" style="' + e.nodeStyle + '">';
        sb[sb.length] = '<div class="mini-tree-nodetitle ' + cls + '" >';

        //if (!this.showExpandButtons) level -= 1;

        var parentNode = this.getParentNode(node);
        var ii = 0;
        //if (!this.showExpandButtons && parentNode && !hasChilds) ii = 1;
        for (var i = ii; i <= level; i++) {
            if (i == level) continue;

            if (isLeaf) {
                //if (this.showExpandButtons == false && i >= level - 1) {
                if (i > level - 1) {
                    continue;
                }
            }

            var indentStyle = "";
            if (this._isInViewLastNode(node, i)) {
                indentStyle = "background:none";
            }


            sb[sb.length] = '<span class="mini-tree-indent " style="' + indentStyle + '"></span>';
        }


        var ecCls = "";
        if (this._isViewFirstNode(node) && level == 0) {
            ecCls = "mini-tree-node-ecicon-first";
        } else if (this._isViewLastNode(node)) {
            ecCls = "mini-tree-node-ecicon-last";
        }

        if (this._isViewFirstNode(node) && this._isViewLastNode(node)) {
            ecCls = "mini-tree-node-ecicon-firstAndlast";
            //ecCls = "mini-tree-node-ecicon-last";
            if (parentNode == this.root) {
                ecCls = "mini-tree-node-ecicon-firstLast";
            }
        }

        if (!isLeaf) {
            sb[sb.length] = '<a class="' + this._eciconCls + ' ' + ecCls + '" style="' + (this.showExpandButtons ? "" : "display:none") + '" ' + (mini.isChrome ? "" : 'href="javascript:void(0);"') + ' onclick="return false;" hidefocus></a>';


        } else {
            sb[sb.length] = '<span class="' + this._eciconCls + ' ' + ecCls + '" style="' + (this.showExpandButtons ? "" : "display:none") + '"></span>';
        }


        sb[sb.length] = '<span class="mini-tree-nodeshow mini-corner-all">';
        if (e.showTreeIcon) {
            //if (e.node.id == 'sys') debugger
            if (e.img) {
                var img = this.imgPath + e.img;
                sb[sb.length] = '<span class="mini-tree-icon mini-icon mini-iconfont" style="background-image:url(' + img + ');"></span>';
            } else {
                sb[sb.length] = '<span class="' + e.iconCls + ' mini-tree-icon mini-icon mini-iconfont"></span>';
            }
        }

        if (e.showRadioButton && !e.showCheckBox) {
            sb[sb.length] = '<span class="mini-tree-radio mini-icon" ></span>';
        }

        if (e.showCheckBox) {
            var ckid = this._createCheckNodeId(node);
            var checked = this.isCheckedNode(node);
            var enabled = e.enabled === false ? "disabled" : "";
            if (e.enabled !== false) {
                enabled = e.checkable === false ? "disabled" : "";
            }

            //sb[sb.length] = '<input type="checkbox" id="' + ckid + '" class="' + this._checkBoxCls + '" hidefocus ' + (checked ? "checked" : "") + ' ' + (enabled) + ' onclick="return false;"/>';

            sb[sb.length] = '<span id="' + ckid + '" class="mini-icon ' + this._checkBoxCls + ' ' + (checked ? 'mini-tree-checkbox-checked' : '') + '"></span>';
        }

        sb[sb.length] = '<span class="mini-tree-nodetext">';
        if (this._editingNode == node) {
            var editId = this._id + "$edit$" + node._id;
            var text = e.value;
            sb[sb.length] = '<input id="' + editId + '" type="text" class="mini-tree-editinput" value="' + text + '"/>';
        } else {
            sb[sb.length] = e.cellHtml;
        }

        sb[sb.length] = '</span>';
        sb[sb.length] = '</span>';

        sb[sb.length] = '</div>';


        if (isReturn) return sb.join('');
    },

    _createCheckNodeId: function (node) {
        return this._id + "$checkbox$" + node._id;
    },

    _createTreeColumn: function (e) {
        var node = e.record, column = e.column;

        e.headerCls += ' mini-tree-treecolumn';
        e.cellCls += ' mini-tree-treecell';
        e.cellStyle += ';padding:0;';


        var isLeaf = this.isLeaf(node);


        e.cellHtml = this._createNodeTitle(node, null, e);
        //e.rowCls += ' ' + cls;

        if (node.checked != true && !isLeaf) {//1）父节点；2）没选中
            //		    var checkState = this.getCheckState(node);	 //@@@ 慢死了
            //		    if (checkState == "indeterminate") {

            if (e.showCheckBox) {
                this._renderCheckState(node);
            }
            //}
        }
    },

    //    _createTreeColumn: function (e) {
    //        var node = e.record, column = e.column;

    //        //        if (e.showCheckBox) {
    //        //            node.checkable = true;
    //        //        }        

    //        e.headerCls += ' mini-tree-treecolumn';
    //        e.cellCls += ' mini-tree-treecell';
    //        e.cellStyle += ';padding:0;vertical-align:top;';
    //        //e.cellInnerStyle = 'padding:0px';

    //        var isLeaf = this.isLeaf(node);
    //        var level = this.getLevel(node);

    //        if (!isLeaf) {
    //            e.rowCls += " mini-tree-parentNode";
    //        }

    //        var sb = [];
    //        sb[sb.length] = '<div class="mini-tree-nodetitle" style="padding-left:';
    //        sb[sb.length] = (level + 1) * 18;
    //        sb[sb.length] = 'px;">';
    //        //        e.cellInnerCls = 'mini-tree-nodetitle';
    //        //        e.cellInnerStyle = 'padding-left:' + (level + 1) * 18 + "px";

    //        var left = 0;

    //        for (var i = 0; i <= level; i++) {
    //            if (i == level && !isLeaf) break;
    //            if (this.showTreeLine) {
    //                sb[sb.length] = '<span class="mini-tree-indent " style="left:' + left + 'px;"></span>';
    //            }
    //            left += 18;
    //        }
    //        var cls = "";
    //        if (!isLeaf) {
    //            cls = this.isExpandedNode(node) ? 'mini-tree-expand' : 'mini-tree-collapse';
    //            var _left = mini.isIE6 ? left - 18 * (level+1) : left;
    //            sb[sb.length] = '<span class="mini-tree-ec-icon" style="left:' + (_left) + 'px;"></span>';
    //            left += 18;
    //        }
    //        sb[sb.length] = '<div class="mini-tree-nodeshow">';


    //        if (e.showTreeIcon) {
    //            var icon = e.iconCls;
    //            var _left = mini.isIE6 ? left - 18 * (level+1) : left;
    //            sb[sb.length] = '<div class="' + icon + ' mini-tree-nodeicon" style="left:' + _left + 'px;"></div>';
    //        }
    //        var offset = e.showTreeIcon ? 18 : 0;

    //        if (e.showCheckBox) {
    //            left += 18;
    //            offset += 18;
    //            var id = this._id + "$checkbox$" + node._id;
    //            var checked = node.checked ? "checked" : "";
    //            var checkable = this.getCheckable(node) ? "" : "disabled";
    //            var _left = mini.isIE6 ? left - 18 * (level + 1) : left;
    //            sb[sb.length] = '<input type="' + e.checkBoxType + '" id="' + id + '" ' + checked + ' ' + checkable + ' class="mini-tree-checkbox" style="left:' + _left + 'px;" hideFocus onclick="return false"/>';
    //        }

    //        sb[sb.length] = '<div class="mini-tree-nodetext" style="margin-left:' + offset + 'px;">';
    //        sb[sb.length] = e.cellHtml;
    //        sb[sb.length] = '</div></div></div>';

    //        e.cellHtml = sb.join('');
    //        e.rowCls += ' ' + cls;

    //        if (node.checked != true && !isLeaf) {//1）父节点；2）没选中
    //            var checkState = this.getCheckState(node);
    //            if (checkState == "indeterminate") {
    //                this._renderCheckState(node);
    //            }
    //        }
    //    },
    _renderCheckState: function (node) {
        if (!this._renderCheckStateNodes) this._renderCheckStateNodes = [];
        this._renderCheckStateNodes.push(node);
        if (this._renderCheckStateTimer) return;
        var me = this;
        this._renderCheckStateTimer = setTimeout(function () {

            me._renderCheckStateTimer = null;
            var nodes = me._renderCheckStateNodes;
            me._renderCheckStateNodes = null;
            for (var i = 0, l = nodes.length; i < l; i++) {
                me._doCheckNodeEl(nodes[i]);
            }


        }, 1);
    },
    //创建树形层次HTML：非动态模式时有用
    _createNodeHTML: function (node, columns, viewIndex, sb, hasChild) {
        var isReturn = !sb;
        if (!sb) sb = [];

        var source = this._dataSource;

        //node html
        var rowIndex = source.getDataView().indexOf(node); //数据量大，index有点慢
        this._createRowHTML(node, rowIndex, columns, viewIndex, sb);

        //nodes html
        if (hasChild !== false) {
            var cnodes = source.getChildNodes(node);
            var isVisible = this.isVisibleNode(node);
            if (cnodes && cnodes.length > 0) {
                var isExpand = this.isExpandedNode(node);
                if (isExpand == true) {
                    var style = (isExpand && isVisible) ? "" : "display:none";
                    var nodesId = this._createNodesId(node, viewIndex);
                    sb[sb.length] = '<tr class="mini-tree-nodes-tr" style="';
                    if (mini.isIE) sb[sb.length] = style;
                    //sb[sb.length] = '" ><td style="width:0;"></td><td class="mini-tree-nodes-td" colspan="';
                    sb[sb.length] = '" ><td class="mini-tree-nodes-td" colspan="';
                    sb[sb.length] = columns.length + 1;
                    sb[sb.length] = '" >';

                    sb[sb.length] = '<div class="mini-tree-nodes" id="';
                    sb[sb.length] = nodesId;
                    sb[sb.length] = '" style="';
                    sb[sb.length] = style;
                    sb[sb.length] = '">';
                    this._createNodesHTML(cnodes, columns, viewIndex, sb);
                    sb[sb.length] = '</div>';

                    sb[sb.length] = '</td></tr>';
                }
            }
        }
        if (isReturn) return sb.join('');
    },
    _createNodesHTML: function (nodes, columns, viewIndex, sb) {
        if (!nodes) return '';
        var isReturn = !sb;
        if (!sb) sb = [];

        sb.push('<table class="mini-grid-table" cellspacing="0" cellpadding="0" border="0">');
        sb.push(this._createTopRowHTML(columns, true));
        if (columns.length > 0) {
            for (var j = 0, k = nodes.length; j < k; j++) {
                var node = nodes[j];
                this._createNodeHTML(node, columns, viewIndex, sb);
            }
        }
        sb.push('</table>');
        if (isReturn) return sb.join('');
    },

    _createRowsHTML: function (columns, viewIndex) {
        if (this.isVirtualScroll()) {
            return mini.TreeGrid.superclass._createRowsHTML.apply(this, arguments);
        }

        var source = this._dataSource, me = this;

        var sb = [];

        //第一次进来，不创建节点
        var nodes = [];
        var rootNode = source.getRootNode();
        if (this._useEmptyView !== true) {
            nodes = source.getChildNodes(rootNode);
        }
        //createNodes(nodes);

        var nodesEl = viewIndex == 2 ? this._rowsViewEl.firstChild : this._rowsLockEl.firstChild;
        nodesEl.id = this._createNodesId(rootNode, viewIndex);

        this._createNodesHTML(nodes, columns, viewIndex, sb);

        return sb.join('');
    },
    /////////////////////////////////
    _createNodesId: function (node, viewIndex) {
        var id = this._id + "$nodes" + viewIndex + "$" + node._id;
        return id;
    },
    _getNodeEl: function (node, viewIndex) {
        //if (this.isVisibleNode(node) == false) return null;
        return this._getRowEl(node, viewIndex);
    },
    _getNodesEl: function (node, viewIndex) {
        //if (this.isVisibleNode(node) == false) return null;
        node = this.getNode(node);
        var id = this._createNodesId(node, viewIndex);
        return document.getElementById(id);
    },
    _getNodesTr: function (node, viewIndex) {
        //if (this.isVisibleNode(node) == false) return null;
        var el = this._getNodesEl(node, viewIndex);
        if (el) return el.parentNode.parentNode;
    },
    /////////////////////////////////////////////////

    checkOnTextClick: false,
    setCheckOnTextClick: function (value) {
        this.checkOnTextClick = value;
    },
    getCheckOnTextClick: function () {
        return this.checkOnTextClick;
    },

    setTreeColumn: function (value) {
        this._treeColumn = value;
        this.deferUpdate();
    },
    getTreeColumn: function () {
        return this._treeColumn;
    },
    setShowTreeIcon: function (value) {
        this.showTreeIcon = value;
        this.deferUpdate();
    },
    getShowTreeIcon: function () {
        return this.showTreeIcon;
    },
    setShowCheckBox: function (value) {
        this.showCheckBox = value;
        this.deferUpdate();
    },
    getShowCheckBox: function () {
        return this.showCheckBox;
    },
    setShowRadioButton: function (value) {
        this.showRadioButton = value;
        this.deferUpdate();
    },
    getShowRadioButton: function () {
        return this.showRadioButton;
    },
    setCheckBoxType: function (value) {
        this._checkBoxType = value;
        this._doUpdateCheckState();
    },
    getCheckBoxType: function () {
        return this._checkBoxType;
    },
    setIconsField: function (value) {
        this._iconsField = value;
    },
    getIconsField: function () {
        return this._iconsField;
    },
    //////////////////////////////////
    _getNodeIcon: function (node) {
        var icon = node[this.iconField];
        if (!icon) {
            if (this.isLeaf(node)) icon = this.leafIconCls;
            else icon = this.folderIconCls;
        }
        return icon;
    },
    _getCheckBoxEl: function (node) {
        if (this.isVisibleNode(node) == false) return null;
        var id = this._id + "$checkbox$" + node._id;
        return mini.byId(id, this.el);
    },
    //////////////////////////

    //    setRootNodeText: function (value) {
    //        var node = this.getRootNode();
    //        node[this._textField] = value;
    //        this._doUpdateRowEl(node);
    //    },

    //////////////////////////
    useAnimation: true,
    _updateNodeTimer: null,
    _doExpandCollapseNode: function (node) {
        var that = this;
        if (that._updateNodeTimer) {
            clearTimeout(that._updateNodeTimer);
            that._updateNodeTimer = null;
        }

        var sss = new Date();
        if (this.isVirtualScroll() == true) {
            //this._stopDeferUpdate();
            if (!this._updateTimer) {	//不能有deferUpdate,以及吱声
                that._updateNodeTimer = setTimeout(function () {
                    that._updateNodeTimer = null;

                    that.doUpdateRows();         //30条，55ms
                    //this._stopUpdateTableView();
                    that.deferLayout(50);
                }, 5);
            }
            //                    setTimeout(function () {
            //                        alert(new Date() - sss);
            //                    }, 20);
            return;
        }

        //

        function onCallback() {
            this._doUpdateTreeNodeEl(node);
            this.deferLayout(20);
        }

        //this._layoutColumns(30);

        //////////////////////////////////////////////////////////////////////
        //if (this._inAniming) {

        if (false || mini.isIE6 || !this.useAnimation || this.isFrozen()) {        //ie6不显示动画
            onCallback.call(this);
        } else {
            var expanded = this.isExpandedNode(node);
            function doExpandAnim(node, viewIndex, onCallback) {
                var nodesEl = this._getNodesEl(node, viewIndex);
                if (nodesEl) {
                    var h = mini.getHeight(nodesEl);
                    nodesEl.style.overflow = "hidden";
                    nodesEl.style.height = "0px";
                    var config = { height: h + "px" };
                    var sf = this;
                    sf._inAniming = true;

                    //setTimeout(function () {
                    var jq = jQuery(nodesEl);
                    jq.animate(
                            config,
                            250,
                            function () {
                                nodesEl.style.height = "auto";
                                sf._inAniming = false;
                                sf.doLayout();
                                mini.repaint(nodesEl);
                            }
                        );
                    //}, 1);
                } else {
                    //onCallback.call(this);
                }
            }
            function doCollapseAnim(node, viewIndex, onCallback) {
                var nodesEl = this._getNodesEl(node, viewIndex);
                if (nodesEl) {
                    var h = mini.getHeight(nodesEl);
                    var config = { height: 0 + "px" };
                    var sf = this;
                    sf._inAniming = true;
                    var jq = jQuery(nodesEl);
                    jq.animate(
                        config,
                        180,
                        function () {
                            nodesEl.style.height = "auto";
                            sf._inAniming = false;
                            if (onCallback) onCallback.call(sf);
                            sf.doLayout();
                            mini.repaint(nodesEl);

                        }
                    );
                } else {
                    if (onCallback) onCallback.call(this);
                }
            }

            var that = this;
            if (expanded) {
                onCallback.call(this);
                doExpandAnim.call(this, node, 2);
                doExpandAnim.call(this, node, 1);
            } else {
                doCollapseAnim.call(this, node, 2, onCallback);
                doCollapseAnim.call(this, node, 1);
            }
        }
    },
    __OnTreeCollapse: function (e) {
        this._doExpandCollapseNode(e.node);
    },
    __OnTreeExpand: function (e) {
        this._doExpandCollapseNode(e.node);
    },
    _doCheckNodeEl: function (node) {
        //        var ck = this._getCheckBoxEl(node);
        //        if (ck) {
        //            
        //        }
        //alert(1);
        var ck = this._getCheckBoxEl(node);
        if (ck) {
            var checkModel = this.getCheckModel();
            //            ck.checked = node.checked;
            //            ck.indeterminate = false;
            mini.removeClass(ck, "mini-tree-checkbox-indeterminate");

            var isIndeterminate = node.indeterminate && !node.checked;

            if (checkModel == "cascade" || isIndeterminate) {
                var checkState = isIndeterminate ? "indeterminate" : this.getCheckState(node);
                if (checkState == "indeterminate") {
                    //ck.indeterminate = true;
                    mini.addClass(ck, "mini-tree-checkbox-indeterminate");
                } else {
                    //ck.indeterminate = false;
                    mini.removeClass(ck, "mini-tree-checkbox-indeterminate");
                }
            }

            if (node.checked) {
                mini.addClass(ck, "mini-tree-checkbox-checked");
            } else {
                mini.removeClass(ck, "mini-tree-checkbox-checked");
            }

        }

    },
    __OnCheckChanged: function (e) {

        //var checkModel = this.getCheckModel();
        for (var i = 0, l = e._nodes.length; i < l; i++) {
            var node = e._nodes[i];
            this._doCheckNodeEl(node);
            //            var ck = this._getCheckBoxEl(node);
            //            if (ck) {
            //                ck.checked = node.checked;

            //                if (checkModel == "cascade") {
            //                    var checkState = this.getCheckState(node);
            //                    if (checkState == "indeterminate") {
            //                        ck.indeterminate = true;
            //                    } else {
            //                        ck.indeterminate = false;
            //                    }
            //                }
            //            }
        }

        if (this._checkChangedTimer) {
            clearTimeout(this._checkChangedTimer);
            this._checkChangedTimer = null;
        }
        var me = this;
        this._checkChangedTimer = setTimeout(function () {
            me._checkChangedTimer = null;
            //////me.fire("checkchanged", { nodes: e.nodes, checked: e.checked });
            me.fire("_checkchanged");      //@刚注释
        }, 1);

    },
    /////////////////////////////////
    //    _doMoveRowEl: function (row, index) {
    //    debugger
    //        this._doRemoveRowEl(row);
    //        this._doAddRowEl(row);
    //    },
    /////////////////////////////////
    //    _doUpdateCheckState: function () {
    //        //第三态
    //        //autoCheckParent

    //    },
    _tryToggleCheckNode: function (node) {
        if (node.enabled === false) return;

        var checkable = this.getCheckable(node);
        if (checkable == false) return;

        var checked = this.isCheckedNode(node);

        var e = { node: node, cancel: false, checked: checked, isLeaf: this.isLeaf(node) };
        this.fire("beforenodecheck", e);
        if (e.cancel) return;

        this._dataSource.doCheckNodes(node, !checked, true);
        //        if (this.getAutoCheckParent()) {
        //        
        //            this._dataSource.doCheckNodes(node, !checked, true);
        //        } else {
        //            this._dataSource.doCheckNodes(node, !checked, true);
        //        }
        //        this._doUpdateCheckState();
        this.fire("nodecheck", e);
    },
    _tryToggleNode: function (node) {
        var isExpanded = this.isExpandedNode(node);
        var e = { node: node, cancel: false };

        if (isExpanded) {
            this.fire("beforecollapse", e);
            if (e.cancel == true) return;
            this.collapseNode(node);

            e.type = "collapse";
            this.fire("collapse", e);
        } else {
            this.fire("beforeexpand", e);
            if (e.cancel == true) return;
            this.expandNode(node);

            e.type = "expand";
            this.fire("expand", e);
        }
    },
    _OnCellMouseDown: function (e) {
        //if (mini.findParent(e.htmlEvent.target, 'mini-tree-editinput')) return;
        if (mini.findParent(e.htmlEvent.target, this._eciconCls)) {
        } else if (mini.findParent(e.htmlEvent.target, 'mini-tree-checkbox')) {
        } else {
            this.fire("cellmousedown", e);
        }
    },
    _OnCellClick: function (e) {
        //if (mini.findParent(e.htmlEvent.target, 'mini-tree-editinput')) return;
        //        if (mini.findParent(e.htmlEvent.target, this._eciconCls)) {
        //            //this._tryToggleNode(e.record);
        //        } else 
        if (mini.findParent(e.htmlEvent.target, this._eciconCls)) return;


        if (mini.findParent(e.htmlEvent.target, 'mini-tree-checkbox') || this.checkOnTextClick) {
            this._tryToggleCheckNode(e.record);
        } else {
            this.fire("cellclick", e);
        }
    },
    __OnNodeDblClick: function (e) {
        //        if (this.expandOnDblClick && !e.isLeaf && !this._inAniming) {
        //            this._tryToggleNode(e.node);
        //        }
    },
    __OnNodeClick: function (e) {
        //        if (this.expandOnNodeClick && !e.isLeaf && !this._inAniming) {
        //            this._tryToggleNode(e.node);
        //        }
    },
    ////////////////////////////////////////////////////////////////////
    setNodeText: function (node, text) {
        node = this.getNode(node);
        if (!node) return;
        var obj = {};
        obj[this.getTextField()] = text;
        this.updateNode(node, obj);
        //        node[this.getTextField()] = text;
        //        this._doUpdateNodeTitle(node);
        //this._changed = true;
    },
    setNodeIconCls: function (node, iconCls) {
        node = this.getNode(node);
        if (!node) return;
        var obj = {};
        obj[this.iconField] = iconCls;
        this.updateNode(node, obj);
        //        node[this.iconField] = iconCls;
        //        this._doUpdateNodeTitle(node);
        //this._changed = true;
    },
    setIconField: function (value) {
        this.iconField = value;
    },
    getIconField: function () {
        return this.iconField;
    },
    setAllowSelect: function (value) {
        this.setAllowRowSelect(value);
    },
    getAllowSelect: function () {
        return this.getAllowRowSelect();
    },
    setShowExpandButtons: function (value) {
        if (this.showExpandButtons != value) {
            this.showExpandButtons = value;
            this.doUpdate();
        }
    },
    getShowExpandButtons: function () {
        return this.showExpandButtons;
    },
    setShowTreeLines: function (value) {
        this.showTreeLines = value;
        if (value == true) {
            mini.addClass(this.el, 'mini-tree-treeLine');
        } else {
            mini.removeClass(this.el, 'mini-tree-treeLine');
        }
    },
    getShowTreeLines: function () {
        return this.showTreeLines;
    },
    setShowArrow: function (value) {
        this.showArrow = value;
        if (value == true) {
            mini.addClass(this.el, 'mini-tree-showArrows');
        } else {
            mini.removeClass(this.el, 'mini-tree-showArrows');
        }
    },
    getShowArrow: function () {
        return this.showArrow;
    },
    setLeafIcon: function (value) {
        this.leafIcon = value;
    },
    getLeafIcon: function () {
        return this.leafIcon;
    },
    setFolderIcon: function (value) {
        this.folderIcon = value;
    },
    getFolderIcon: function () {
        return this.folderIcon;
    },
    getExpandOnDblClick: function () {
        return this.expandOnDblClick;
    },
    setExpandOnNodeClick: function (value) {
        this.expandOnNodeClick = value;
        if (value) {
            mini.addClass(this.el, "mini-tree-nodeclick");
        } else {
            mini.removeClass(this.el, "mini-tree-nodeclick");
        }
    },
    getExpandOnNodeClick: function () {
        return this.expandOnNodeClick;
    },
    setLoadOnExpand: function (value) {
        this.loadOnExpand = value;
    },
    getLoadOnExpand: function () {
        return this.loadOnExpand;
    },

    hideNode: function (node) {
        node = this.getNode(node);
        if (!node) return;
        node.visible = false;

        this._doUpdateTreeNodeEl(node);

        var el1 = this._getNodeEl(node, 1);
        var el2 = this._getNodeEl(node, 2);
        if (el1) el1.style.display = "none";
        if (el2) el2.style.display = "none";

    },
    showNode: function (node) {

        node = this.getNode(node);
        if (!node) return;
        node.visible = true;

        this._doUpdateTreeNodeEl(node);
        //        var el = this._getNodeEl(node);
        //        el.style.display = "";
    },
    enableNode: function (node) {
        node = this.getNode(node);
        if (!node) return;
        node.enabled = true;

        var el1 = this._getNodeEl(node, 1);
        var el2 = this._getNodeEl(node, 2);
        if (el1) mini.removeClass(el1, "mini-disabled");
        if (el2) mini.removeClass(el2, "mini-disabled");
        var ck = this._getCheckBoxEl(node);
        if (ck) ck.disabled = false;
    },
    disableNode: function (node) {
        node = this.getNode(node);
        if (!node) return;

        node.enabled = false;
        var el1 = this._getNodeEl(node, 1);
        var el2 = this._getNodeEl(node, 2);
        if (el1) mini.addClass(el1, "mini-disabled");
        if (el2) mini.addClass(el2, "mini-disabled");

        var ck = this._getCheckBoxEl(node);
        if (ck) ck.disabled = true;
    },



    imgPath: '',
    setImgPath: function (value) {
        this.imgPath = value;
    },
    getImgPath: function () {
        return this.imgPath;
    },
    imgField: 'img',
    setImgField: function (value) {
        this.imgField = value;
    },
    getImgField: function () {
        return this.imgField;
    },

    ////////////////////////////////////////////////////////////////////
    // HTML Tags
    ////////////////////////////////////////////////////////////////////    
    getAttrs: function (el) {
        var attrs = mini.TreeGrid.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["value", "url", "idField", "textField", "iconField", "nodesField", "parentField", "valueField", "checkedField",
            "leafIcon", "folderIcon", "leafField",
            "ondrawnode", "onbeforenodeselect", "onnodeselect", "onnodemousedown", "onnodeclick", "onnodedblclick",
                "onbeforenodecheck", "onnodecheck",
                "onbeforeexpand", "onexpand", "onbeforecollapse", "oncollapse",
                "dragGroupName", "dropGroupName", "onendedit",
                "expandOnLoad", "ondragstart", "onbeforedrop", "ondrop", "ongivefeedback",
                "treeColumn", "onaddnode", "onremovenode", "onmovenode", "imgPath", "imgField", "hoverMode"
             ]
        );

        mini._ParseBool(el, attrs,
            ["allowSelect", "showCheckBox", "showRadioButton", "showExpandButtons", "showTreeIcon", "showTreeLines", "checkRecursive",
                "enableHotTrack", "showFolderCheckBox", "resultAsTree",
                "allowDrag", "allowDrop", "showArrow", "expandOnDblClick", "removeOnCollapse",
                "autoCheckParent", "loadOnExpand", "expandOnNodeClick", "useAnimation", "checkOnTextClick"
             ]
        );

        if (attrs.expandOnLoad) {
            var level = parseInt(attrs.expandOnLoad);
            if (mini.isNumber(level)) {
                attrs.expandOnLoad = level;
            } else {
                attrs.expandOnLoad = attrs.expandOnLoad == "true" ? true : false;
            }
        }

        var idField = attrs.idField || this.getIdField();
        var textField = attrs.textField || this.getTextField();
        var iconField = attrs.iconField || this.getIconField();
        var nodesField = attrs.nodesField || this.getNodesField();

        function parseNodes(nodes) {
            var data = [];

            for (var i = 0, l = nodes.length; i < l; i++) {
                var node = nodes[i];
                var cnodes = mini.getChildNodes(node);
                var nodeTitle = cnodes[0];
                var nodeChild = cnodes[1];

                if (!nodeTitle || !nodeChild) nodeTitle = node;
                var jqTitle = jQuery(nodeTitle);
                var o = {};
                var id = o[idField] = nodeTitle.getAttribute("value"); //jqTitle.attr("value");

                o[iconField] = jqTitle.attr("iconCls");
                o[textField] = nodeTitle.innerHTML;
                data.add(o);

                //if(nodeTitle.innerHTML == "所有客户") debugger

                var expanded = jqTitle.attr("expanded");
                if (expanded) {
                    o.expanded = expanded == "false" ? false : true;
                }

                var allowSelect = jqTitle.attr("allowSelect");
                if (allowSelect) {
                    o.allowSelect = allowSelect == "false" ? false : true;
                }

                if (!nodeChild) continue;
                var cs = mini.getChildNodes(nodeChild);
                var cdata = parseNodes(cs);
                if (cdata.length > 0) {
                    o[nodesField] = cdata;
                }
            }
            return data;
        }

        var data = parseNodes(mini.getChildNodes(el));
        if (data.length > 0) {
            attrs.data = data;
        }

        if (!attrs.idField && attrs.valueField) {
            attrs.idField = attrs.valueField;
        }
        return attrs;
    }
});

mini.regClass(mini.TreeGrid, "TreeGrid");


//Tree
mini.Tree = function () {
    mini.Tree.superclass.constructor.apply(this, arguments);

    var columns = [
        { name: "node", header: "", field: this.getTextField(), width: 'auto', allowDrag: true,
            //autoEscape: false,
            editor: { type: "textbox" }
        }
    ];
    this._columnModel.setColumns(columns);
    this._column = this._columnModel.getColumn("node");

    mini.removeClass(this.el, 'mini-treegrid');
    mini.addClass(this.el, 'mini-tree-nowrap');
    this.setBorderStyle("border:0"); 
};
mini.extend(mini.Tree, mini.TreeGrid, {

    //    _hasSpaceTd: function () {
    //        return !(mini.isIE6 || mini.isIE7);
    //    },

    _userEmptyTd: (mini.isChrome || mini.isIE6 || mini.isIE7) ? false : true,

    setTextField: function (value) {
        this._dataSource.setTextField(value);
        this._columnModel.updateColumn('node', { field: value });
        this.textField = value;
    },

    uiCls: "mini-tree",

    hoverMode: 'title',

    _rowHoverCls: "mini-tree-node-hover",
    _rowSelectedCls: "mini-tree-selectedNode",
    _getRecordByEvent: function (e, inNodeShow) {
        
        if (this.hoverMode == 'node') inNodeShow = false;

        var row = mini.Tree.superclass._getRecordByEvent.call(this, e);
        if (inNodeShow === false) return row;
        if (row && mini.findParent(e.target, "mini-tree-nodeshow")) {
            return row;
        }
        return null;
    },

    _treeColumn: "node",
    //_fitColumns: false,

    defaultRowHeight: 22,
    _getRowHeight: function (record) {
        var h = this.defaultRowHeight;
        if (record._height) {
            h = parseInt(record._height);
            if (isNaN(parseInt(record._height))) h = rowHeight;
        }
        //        h -= 4; //padding-top/padding-bottom
        //        //if (!mini.isOpera) {
        //        h -= 1;
        //}
        return h;
    },

    showHeader: false,
    showTopbar: false,
    showFooter: false,
    showColumns: false,

    showHGridLines: false,
    showVGridLines: false,

    showTreeLines: true,

    setTreeColumn: null,
    setColumns: null,
    getColumns: null,

    frozen: null,
    unFrozen: null,

    showModified: false,

    /////////////////////////////

    /////////////////////////////
    _OnCellMouseDown: function (e) {
        if (this._editInput) this._editInput.blur();
        this.fire("cellmousedown", e);
    },

    beginEdit: function (node) {
        node = this.getNode(node);
        if (!node) return;

        var column = this.getColumn(0);
        var value = mini._getMap(column.field, node);
        var e = { record: node, node: node, column: column, field: column.field, value: value, cancel: false };
        this.fire("cellbeginedit", e);
        if (e.cancel == true) return;

        this._editingNode = node;
        this._doUpdateNodeTitle(node);


        var that = this;
        function doEdit() {
            var editId = that._id + "$edit$" + node._id;
            that._editInput = document.getElementById(editId);

            that._editInput.focus();

            mini.selectRange(that._editInput, 0, 1000);
            mini.on(that._editInput, "keydown", that.__OnEditInputKeyDown, that);
            mini.on(that._editInput, "blur", that.__OnEditInputBlur, that);
        }
        setTimeout(function () {
            doEdit();
        }, 100);
        doEdit();
    },
    cancelEdit: function (update) {
        var node = this._editingNode;
        this._editingNode = null;
        if (node) {
            if (update !== false) this._doUpdateNodeTitle(node);
            mini.un(this._editInput, "keydown", this.__OnEditInputKeyDown, this);
            mini.un(this._editInput, "blur", this.__OnEditInputBlur, this);
        }
        this._editInput = null;
        //this.fire("endedit", {node: });
    },
    __OnEditInputKeyDown: function (e) {
        if (e.keyCode == 13) {
            var node = this._editingNode;
            var text = this._editInput.value;
            this._editingNode = null;
            this.setNodeText(node, text);
            this.cancelEdit(false);
            this.fire("endedit", { node: node, text: text });
        } else if (e.keyCode == 27) {
            this.cancelEdit();
        }
    },
    __OnEditInputBlur: function (e) {
        //if (mini.findParent(e.target, 'mini-tree-editinput')) return;
        var node = this._editingNode;
        if (node) {
            var text = this._editInput.value;
            this.cancelEdit();
            this.setNodeText(node, text);
            this.fire("endedit", { node: node, text: text });
        }
    },
    /////////////////////////
    //ie6 bug
    addRowCls: function (row, cls) {
        var d1 = this._getRowEl(row, 1);
        var d2 = this._getRowEl(row, 2);
        if (d1) mini.addClass(d1, cls);
        if (d2) mini.addClass(d2, cls);

        //fix ie6/7
        if (d1) mini.addClass(d1.cells[1], cls);
        if (d2) mini.addClass(d2.cells[1], cls);
    },
    removeRowCls: function (row, cls) {
        var d1 = this._getRowEl(row, 1);
        var d2 = this._getRowEl(row, 2);
        if (d1) {
            mini.removeClass(d1, cls);
        }
        if (d2) {
            mini.removeClass(d2, cls);
        }

        //fix ie6/7     hover,seleced 没效果，必须加载td上才可以
        if (d1) mini.removeClass(d1.cells[1], cls);
        if (d2) mini.removeClass(d2.cells[1], cls);
    },
    scrollIntoView: function (node) {
        node = this.getNode(node);
        if (!node) return;

        if (!this.isVisibleNode(node)) {
            this.expandPath(node);
        }
        var that = this;
        setTimeout(function () {
//            var itemEl = that._getNodeEl(node, 2);
//            mini.scrollIntoView(itemEl, that._rowsViewEl, false);
            
            if (that.isVirtualScroll()) {
                mini.Tree.superclass.scrollIntoView.call(that, node);
            } else {

                var itemEl = that._getNodeEl(node, 2);
                mini.scrollIntoView(itemEl, that._rowsViewEl, false);
            }

        }, 10);
    }
});
mini.regClass(mini.Tree, "Tree");

/////////////////////////////////////////
//1)树折叠
mini._Tree_Expander = function (grid) {
    this.owner = grid;

    mini.on(grid.el, "click", this.__OnClick, this);
    mini.on(grid.el, "dblclick", this.__OnDblClick, this);    
}
mini._Tree_Expander.prototype = {
    _canToggle: function () {
        return !this.owner._dataSource._isNodeLoading();
    },
    __OnClick: function (e) {
        var tree = this.owner;
        var node = tree._getRecordByEvent(e, false);
        if (!node || node.enabled === false) return;
        if (mini.findParent(e.target, 'mini-tree-checkbox')) return;

        var isLeaf = tree.isLeaf(node);

        if (mini.findParent(e.target, tree._eciconCls)) {
            if (this._canToggle() == false) return;
            tree._tryToggleNode(node);
        }
        else if (tree.expandOnNodeClick && !isLeaf && !tree._inAniming) {
            if (this._canToggle() == false) return;
            tree._tryToggleNode(node);
        }
    },
    __OnDblClick: function (e) {

        var tree = this.owner;
        var node = tree._getRecordByEvent(e, false);
        if (!node || node.enabled === false) return;

        if (tree.isEditingNode(node)) return

        var isLeaf = tree.isLeaf(node);

        if (tree._inAniming) return;

        if (mini.findParent(e.target, tree._eciconCls)) {
            return;
        }
        if (mini.findParent(e.target, "mini-tree-checkbox")) {
            return;
        }
        if (tree.expandOnNodeClick) {
            return;
        }
        if (tree.expandOnDblClick && !isLeaf) {
            if (this._canToggle() == false) return;
            e.preventDefault();
            tree._tryToggleNode(node);
        }

    }
}
//2)异步加载子节点
mini._Tree_AsyncLoader = function (grid) {
    this.owner = grid;
    //grid.on("beforeexpand", this.__OnBeforeNodeExpand, this);
    grid.on("expand", this.__OnBeforeNodeExpand, this);
}
mini._Tree_AsyncLoader.prototype = {
    __OnBeforeNodeExpand: function (e) {
        var tree = this.owner;
        var node = e.node;
        var isLeaf = tree.isLeaf(node);
        var cs = node[tree.getNodesField()];
        
        if (!isLeaf && (!cs || cs.length == 0)) {
            if (tree.loadOnExpand && node.asyncLoad !== false) {
                e.cancel = true;
                tree.loadNode(node);
            }
        }
    }
}

mini.overwrite(mini.Button, {
    disableMultiClick: true,
    iconPosition: 'left',

    _iconOnlyCls: 'mini-button-iconOnly',

    _iconPosCls: {
        left: 'mini-button-iconLeft',
        right: 'mini-button-iconRight',
        top: 'mini-button-iconTop',
        bottom: 'mini-button-iconBottom'
    },

    _loadingSvg: mini.isIE8 || mini.isIE9 ? '' : '<svg class="mini-button-loading-icon" version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1024 1024" width="128" height="128" fill="currentColor" ><path d="M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 0 0-94.3-139.9 437.71 437.71 0 0 0-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z"></path></svg>',

    // left|right|top|bottom
    setIconPosition: function(value) {
        this.iconPosition = value;
        this.doUpdate();
    },

    // 该方法在button实例set属性时反复调用
    doUpdate: function() {
        if (this._allowUpdate === false) return;

        var text = this.text;

        var iconCls = this.iconCls,
            iconPos = this.iconPosition,
            plain = this.plain;

        var btnHtml = [];

        if (text === '') {
            this.addCls(this._iconOnlyCls);
        } else {
            this.removeCls(this._iconOnlyCls);
            // button文本
            btnHtml.push('<span class="mini-button-text">' + text + '</span>');
        }

        if (plain) {
            this.addCls(this._plainCls);
        } else {
            this.removeCls(this._plainCls);
        }

        if (iconCls) {
            // 由于doUpdate的反复调用，每次iconPos的值可能都不一样
            // 移除之前的iconPos样式
            if (!mini.hasClass(this.el, this._iconOnlyCls)) {
                if (this.__prevIconPos) {
                    this.removeCls(this._iconPosCls[this.__prevIconPos]);
                }

                this.addCls(this._iconPosCls[iconPos]);

                this.__prevIconPos = iconPos;
            }

            // button图标
            var iconPrev = iconPos == 'top' || iconPos == 'left';
            var iconHtml = '<i class="mini-button-icon ' + iconCls + '"></i>';
            if (iconPrev) {
                btnHtml.unshift(iconHtml);
                btnHtml.unshift(this._loadingSvg);
            } else {
                btnHtml.push(iconHtml);
                btnHtml.push(this._loadingSvg);
            }
            this.removeCls('mini-button-textOnly');
        } else {
            this.addCls('mini-button-textOnly');
            btnHtml.unshift(this._loadingSvg);
        }

        if (this.allowCls) {
            btnHtml.push('<span class="mini-button-allow ' + this.allowCls + '"></span>');
        }

        this.el.innerHTML = btnHtml.join('');
    },
    setIsLoading: (function() {
        if (mini.isIE8 || mini.isIE9) {
            return function setIsLoading(value) {
                // if (this.disableMultiClick) {
                //     this.disableMultiClick = false;
                // }
                this.isLoading = !!value;
                this.setEnabled(!this.isLoading);
            };
        }

        return function setIsLoading(value) {
            if (!this.enabled) return;
            // if (this.disableMultiClick) {
            //     this.disableMultiClick = false;
            // }
            this.isLoading = !!value;
            if (this.isLoading) {
                this.addCls('mini-btn-loading');
            } else {
                this.removeCls('mini-btn-loading');
            }
        };
    })(),
    getIsLoading: function() {
        return this.isLoading;
    },
    _initEvents: function() {
        // 若禁止多次点击 则多绑定一个事件

        // 内部禁用按钮 一秒后再启用

        // 由于在初始化时绑定 可保证在点击时最先触发，一旦点击立即禁用

        // if (this.disableMultiClick) {

        // 	var that = this;

        // 	this.on("click", function (e) {

        // 		that.setEnabled(false);

        // 		setTimeout(function () {

        // 			that.setEnabled(true);

        // 		}, 1000);

        // 	});

        // }

        var self = this;
        mini._BindEvents(function() {
            mini_onOne(this.el, 'mousedown', this.__OnMouseDown, this);
            // mini_onOne(this.el, "click", this.__OnClick, this);

            mini_onOne(
                this.el,
                'click',
                function() {
                    if (self.isLoading) {
                        return;
                    }
                    self.__OnClick();
                    if (self.disableMultiClick && self.enabled) {
                        self.setEnabled(false);

                        setTimeout(function() {
                            self.setEnabled(true);
                        }, 1000);
                    }
                },
                this
            );

            //            mini.on(this.el, "mousedown", this.__OnMouseDown, this);
            //            mini.on(this.el, "click", this.__OnClick, this);

            //            var jq = jQuery(this.el);
            //            jq.hover(function () {
            //                jq.addClass("mini-state-hover");
            //            },
            //            function () {
            //                jq.addClass("mini-state-hover");
            //            });
        }, this);
    },
    getExtraAttrs: function(el) {
        var attrs = {};

        mini._ParseBool(el, attrs, ['disableMultiClick', 'isloading']);

        return attrs;
    }
});

// 弹出面板和按钮留出 2px 间隙
(function() {
    var yOffset = 2;
    var oldSetMenu = mini.MenuButton.prototype.setMenu;
    var setMenu = function setMenu(value) {
        var returnValue = oldSetMenu.call(this, value);

        this.menu && this.menu.setyOffset && this.menu.setyOffset(this.yOffset);
        return returnValue;
    };

    mini.overwrite(mini.MenuButton, {
        yOffset: yOffset,
        setMenu: setMenu
    });
    mini.overwrite(mini.SplitButton, {
        yOffset: yOffset,
        setMenu: setMenu
    });

    // tabs menu
    var _createHeaderMenu = mini.Tabs.prototype._createHeaderMenu;
    mini.Tabs.prototype._createHeaderMenu = function() {
        var returnValue = _createHeaderMenu.apply(this, arguments);
        this._headerMenu && this._headerMenu.setyOffset && this._headerMenu.setyOffset(yOffset);
        return returnValue;
    };
    // textlistbox: ./TextBoxList.js
    // combobox： './Popup.js'
})();

mini.overwrite(mini.ButtonEdit, {
    setText: function (value) {

        if (value === null || value === undefined) value = "";

        // 安全整改要求，服务端返回数据是对html编码的，但是提交时需要还原成正常的html标签
        value = mini.htmlDecode(value);

        var fire = this.text !== value;
        this.text = value;
        this._textEl.value = value;

        this._doEmpty();
    }
});

mini.overwrite(mini.Calendar,{
    __OnClick: function (e) {
        var viewDate = this.viewDate;
        if (this.enabled == false) return;
        var t = e.target;
        var titleEl = mini.findParent(e.target, "mini-calendar-title");

        if (mini.findParent(t, "mini-calendar-monthNext")) {
            viewDate.setDate(1);
            viewDate.setMonth(viewDate.getMonth() + 1);
            this.setViewDate(viewDate);
        }
        else if (mini.findParent(t, "mini-calendar-yearNext")) {
            //viewDate.setMonth(0);
            viewDate.setDate(1);
            viewDate.setFullYear(viewDate.getFullYear() + 1);
            this.setViewDate(viewDate);
        }
        else if (mini.findParent(t, "mini-calendar-monthPrev")) {
            // 解决 setMonth 方法在当前日期为31，mouth减一后，由于上一个月只有30天，就会自动跳到下一个月的第一天，这种不符合我们预期的行为
            // 需要先把当前日期设置到不会大于上一个月的最大日期
            viewDate.setDate(1);
            viewDate.setMonth(viewDate.getMonth() - 1);
            this.setViewDate(viewDate);
        }
        else if (mini.findParent(t, "mini-calendar-yearPrev")) {
            viewDate.setDate(1);
            viewDate.setFullYear(viewDate.getFullYear() - 1);
            this.setViewDate(viewDate);
        }
        else if (mini.findParent(t, "mini-calendar-tadayButton")) {

            // var d = mini.clearTime(new Date());
            var isYesterday = !!mini.findParent(t, "yesterday");

            var d = new Date();
            if (isYesterday) {
                d.setDate(d.getDate() - 1);
            }
            this.setViewDate(d);
            this.setSelectedDate(d);
            if (this.currentTime) {
                var td = new Date();
                this.setTime(td);
            }
            this._OnDateClick(d, "today");
        }
        else if (mini.findParent(t, "mini-calendar-clearButton")) {
            this.setSelectedDate(null);
            this.setTime(null);
            this._OnDateClick(null, "clear");
        } else if (mini.findParent(t, "mini-calendar-okButton")) {
            this._OnDateClick(null, "ok");
            //            this.setSelectedDate(null);
            //            this.setTime(null);
            //            this._OnDateClick(null, "clear");
        } else if (titleEl) {
            this.showMenu();
        }

        var dateEl = mini.findParent(e.target, "mini-calendar-date");

        if (dateEl && !mini.hasClass(dateEl, "mini-calendar-disabled")) {
            var ids = dateEl.id.split("$");
            var time = parseInt(ids[ids.length - 1]);
            if (time == -1) return;
            var date = new Date(time);

            this._OnDateClick(date);
        }

        //this.focus();
    }
});

if (mini.supportRem) {
    mini.overwrite(mini.Calendar, {
        width: '2.20rem',
        height: '1.6rem'
    });
}
mini.overwrite(mini.ComboBox, {
	autoLoad: true,
    __input: function (e) {

        if (document.activeElement == this._textEl &&e.which) {

            this._tryQuery();
        }
    },
	// 参数autoLoad用于强制加载数据
	setUrl: function (url, autoLoad) {
        this.getPopup();

        if(!this.autoLoad && !autoLoad){
        	this.url = url;
        	this.isLoaded = false;
        } else {
	        this._listbox.setUrl(url);
	        this.url = this._listbox.url;
	        this.data = this._listbox.data;

	        this.doDataChange();
        }
    },

    load: function (data) {
    	if(!data){
    		data = this.url;
    	}

    	if (typeof data == "string") {
    		// 强制加载数据
            this.setUrl(data, true);
        } else {
            this.setData(data);
        }
    },
    
    setAutoLoad: function(autoLoad) {
        this.autoLoad = !!autoLoad;
    },
    getAutoLoad: function(){
        return this.autoLoad;
    },
    showPopup: function () {
    	// 若未加载数据则自动加载数据
    	if(this.isLoaded == false){
    		this.load();
    	}

        var ex = { cancel: false };
        this.fire("beforeshowpopup", ex);
        this._firebeforeshowpopup = false;
        if (ex.cancel == true) return;



        //if (this.id == "cityCombo") debugger
        this._listbox.setHeight("auto");
        mini.ComboBox.superclass.showPopup.call(this);
        var h = this.popup.el.style.height;
        if (h == "" || h == "auto") {
            this._listbox.setHeight("auto");
        } else {
            this._listbox.setHeight("100%");
        }

        var me = this;

        if (!me.multiSelect) {
            var jq = jQuery("table .mini-listbox-checkbox", me._listbox.el);

            var display = jq.css("display");
            jq.css("display", "table-cell");
            jq.css("display", display);
            //alert(1);
        }


        this._listbox.setValueInCheckOrder(this.valueInCheckOrder);

        this._listbox.setValue(this.value);

        //        var sf = this;
        //        setTimeout(function () {
        //            mini.repaint(sf._listbox.el);
        //        }, 100);

        if (this.autoFocusItem && (this.value == "" || mini.isNull(this.value))) {
            this._listbox._focusItem(0);
        }
    },

    setValue: function (value) {
        if (mini.isNull(value)) value = "";
        //if (this.value !== value) {
        var vts = this._listbox.getValueAndText(value);
        var v = vts[0], text = vts[1];
        if (text === "" || mini.isNull(text)) text = value;

        if (this.valueFromSelect && (v === "" || mini.isNull(v))) {
            value = text = "";
        }

        //		if (!this.valueFromSelect && v == "") {
        //			value = text = "";
        //		}

        this.value = value;

        this._valueEl.value = this.value;

        // 改为调用setText方法
        // this.text = this._textEl.value = text;

        // this._doEmpty();

        this.setText(text);

        //        } else {
        //            var vts = this._listbox.getValueAndText(value);
        //            this.text = this._textEl.value = vts[1];
        //        }
    },
    setText: function (value) {

        if (value === null || value === undefined) value = "";
        
        // 安全整改要求，服务端返回数据是对html编码的，但是提交时需要还原成正常的html标签
        value = mini.htmlDecode(value);

        var fire = this.text !== value;
        this.text = value;
        this._textEl.value = value;

        this._doEmpty();
    },

    doDataChange: function () {
        var vts = this._listbox.getValueAndText(this.value);
        var value = vts[0],
            text = vts[1];

        if (value === "" && !this.clearOnLoad) {
            value = this.value;
            text = this.text;

            this.value = null;
        }

        this.text = this._textEl.value = text;
        this.setValue(value);

        this.isLoaded = true;
    },
    getExtraAttrs: function (el) {
		var attrs = {};

		mini._ParseBool(el, attrs, ["autoLoad"]);

		return attrs;
	}
});
// 还原转义的html
mini.htmlUnescape = function(str) {
    if (str + '' !== str) return str;
    // var div = document.createElement('div');
    // div.innerHTML = str;
    // var t = div.innerText;
    // div = null;
    // return t;
    // 上面方法会出现 未转义的HTML传入时丢掉标签的问题 使用miniui中正则替换的方式实现
    return mini.htmlDecode(str);
};
// html 转义
mini.htmlEscape = function(html) {
    if (html + '' !== html) return html;
    var div = document.createElement('div');
    div.appendChild(document.createTextNode(html));
    var s = div.innerHTML;
    div = null;
    return s;
};

(function($) {
    var oldFn = mini.GridView.prototype._createPagers;
    //  设置默认分页为  pagination
    mini.overwrite(mini.DataGrid, {
        pagerType: 'pagination',

        _createPagers: function() {
            oldFn.apply(this, arguments);

            if (this.pagerType !== 'pager') {
                this.setPagerType(this.pagerType);
            }
        }
    });

    // grid-emptyText 位置计算
    var oldCreateRowsHTML = mini.FrozenGridView.prototype._createRowsHTML;
    mini.FrozenGridView.prototype._createRowsHTML = function() {
        var returnValue = oldCreateRowsHTML.apply(this, arguments);

        var h = parseInt(
            $(this.el)
                .find('.mini-grid-rows-view')
                .height(),
            10
        );
        if (h && h > 200) {
            h = (h * 0.3) >> 0;
            var $el = $(returnValue);
            $el.find('.mini-grid-emptyText').css({
                // 16px + 48px + 8px
                paddingTop: h + 56,
                backgroundPosition: 'center ' + h + 'px'
            });
            return $el[0].outerHTML;
        }

        return returnValue;
    };

    // 新 UI 适配边框
    var oldSetShowVGridLines = mini.DataGrid.prototype.setShowVGridLines;
    var oldSetShowHGridLines = mini.DataGrid.prototype.setShowHGridLines;
    mini.TreeGrid.prototype.setShowVGridLines = mini.DataGrid.prototype.setShowVGridLines = function(show) {
        var returnValue = oldSetShowVGridLines.apply(this, arguments);

        if (show) {
            $(this.el).addClass('mini-grid-showVGridLines');
        } else {
            $(this.el).removeClass('mini-grid-showVGridLines');
        }
        return returnValue;
    };
    mini.TreeGrid.prototype.setShowHGridLines = mini.DataGrid.prototype.setShowHGridLines = function(show) {
        var returnValue = oldSetShowHGridLines.apply(this, arguments);

        if (show) {
            $(this.el).addClass('mini-grid-showHGridLines');
        } else {
            $(this.el).removeClass('mini-grid-showHGridLines');
        }
        return returnValue;
    };
    // 应用后 适配 class 直接作为默认值的情况下 不会走上面重写的set方法
    mini.TreeGrid.prototype._afterApply = mini.DataGrid.prototype._afterApply = function() {
        if (this.showHGridLines) {
            $(this.el).addClass('mini-grid-showHGridLines');
        } else {
            $(this.el).removeClass('mini-grid-showHGridLines');
        }
        if (this.showVGridLines) {
            $(this.el).addClass('mini-grid-showVGridLines');
        } else {
            $(this.el).removeClass('mini-grid-showVGridLines');
        }
    };
})(window.jQuery);

mini.overwrite(mini.DataGrid, {
    allowAlternating: false,
    showHGridLines: true,
    showVGridLines: false,
    showSortIcon: true,
    allowResize: false,

    showEmptyText: true,
    emptyText: '暂无数据',

    getColumnData: function(filedName) {
        var data = [],
            rows = this.getData(),
            i = 0,
            l = rows.length;

        for (; i < l; i++) {
            data.push(rows[i][filedName]);
        }

        return data;
    },
    // 安全整改 数据 全部转义 保障显示 需在 input 中正常还原
    _OnCellBeginEdit: function(record, column, editor, initEditor) {
        var value = mini._getMap(column.field, record);
        var e = {
            sender: this,
            rowIndex: this.indexOf(record),
            row: record,
            record: record,
            column: column,
            field: column.field,
            editor: editor,
            value: value,
            cancel: false
        };

        this.fire('cellbeginedit', e);

        if (!mini.isNull(column.defaultValue) && (mini.isNull(e.value) || e.value === '')) {
            var defaultValue = column.defaultValue;
            //            try {
            //
            //                defaultValue = eval('('+defaultValue+')');
            //            } catch (ex) { debugger}
            var obj = mini.clone({
                d: defaultValue
            });
            e.value = obj.d;
        }

        var editor = e.editor;
        value = e.value;

        if (e.cancel) {
            return false;
        }
        //if (!editor) return false;
        //column.editor = editor;   //!!!不能加

        if (!editor && column.editMode != 'inline') return false;
        if (column.readOnly === true) return false;

        if (initEditor === false) return true;

        //        if (column.editMode != "inline") {
        //                    var canEdit = this.isCellCanEdit(row, column);

        if (column.editMode != 'inline') {
            //value, text初始化
            if (mini.isNull(value)) value = '';
            if (editor.setValue) {
                // editor.setValue(value);
                editor.setValue(mini.htmlUnescape(value));
            }
            editor.ownerRowID = record._uid;

            if (column.displayField && editor.setText) {
                //var text = record[column.displayField];
                var text = mini._getMap(column.displayField, record);

                if (!mini.isNull(column.defaultText) && (mini.isNull(text) || text === '')) {
                    var obj = mini.clone({
                        d: column.defaultText
                    });
                    text = obj.d;
                }

                // editor.setText(text);
                editor.setText(mini.htmlUnescape(text));
            }

            if (this.allowCellEdit) {
                this._editingControl = e.editor;
            }
        }

        return true;
    },
    // 编辑器提交前 对编辑器中内容进行转义 防止html
    _OnCellCommitEdit: function(record, column, value, editor) {
        var e = {
            sender: this,
            rowIndex: this.indexOf(record),
            record: record,
            row: record,
            column: column,
            field: column.field,
            editor: editor ? editor : this.getCellEditor(column),
            value: mini.isNull(value) ? '' : value,
            text: '',
            cancel: false
        };

        if (e.editor && e.editor.getValue) {
            try {
                e.editor.blur();
            } catch (ex) {}
            e.value = e.editor.getValue();

            //alert(e.value);
        }
        if (e.editor && e.editor.getText) {
            e.text = e.editor.getText();
        }

        //document.title = e.value + ":" + e.text + ":" + new Date().getTime();

        //        this.updateRow(record, { NodeId: 1, NodeName: "aaa" });
        //        return;

        var oldValue = mini._getMap(column.field, record),
            newValue = e.value;
        e.oldValue = oldValue;
        if (mini.isEquals(oldValue, newValue)) return e;

        this.fire('cellcommitedit', e);

        if (e.cancel == false) {
            e.value = mini.htmlEscape(e.value);
            e.text = mini.htmlEscape(e.text);
            if (this.allowCellEdit) {
                var o = {};
                o[column.field] = e.value;
                //mini._setMap(column.field, e.value, o);
                if (column.displayField) {
                    o[column.displayField] = e.text;
                    //mini._setMap(column.displayField, e.text, o);
                }
                this.updateRow(record, o);
            }
        }
        return e;
    },

    // 重写解决刷新数据时 pageIndex 大于 totalPage 的情况下序号不对问题
    _initData: function() {
        this.data = this._dataSource.getSource();
        this.pageIndex = this.getPageIndex();
        this.pageSize = this.getPageSize();
        this.totalCount = this.getTotalCount();
        this.totalPage = this.getTotalPage();
        this.sortField = this.getSortField();
        this.sortOrder = this.getSortOrder();
        this.url = this.getUrl();

        // 当 pageIndex > totalPage 时，说明 pageIndex 不对了，并且生成出来的序号就会超过 totalCount
        // 所以需要把 pageIndex 调整回正确的最大值
        if (this.totalPage > 0 && this.pageIndex > this.totalPage - 1) {
            this.setPageIndex(this.totalPage - 1);
        }

        this._mergedCellMaps = {};
        this._mergedCells = {};

        this._cellErrors = [];
        this._cellMapErrors = {};

        if (this.isGrouping()) {
            this.groupBy(this._groupField, this._groupDir);

            if (this.collapseGroupOnLoad) {
                this.collapseGroups();
            }
        }
    },
    // 单元格编辑 wrap 位置调整 使得恰好覆盖单元格
    _setEditorBox: function(editor, cellBox) {
        if (editor.setHeight && editor.type == 'textarea') {
            var height = cellBox.height - 2;
            if (editor.minHeight && height < editor.minHeight) {
                height = editor.minHeight;
            }
            editor.setHeight(height);
        }

        if (editor.setWidth) {
            // 占满情况下 左右边距6px
            var width = cellBox.width - 12;
            // 配置了最小 则使用最小 否则占满
            if (editor.minWidth && width < editor.minWidth) {
                width = editor.minWidth;
            }
            editor.setWidth(width < 20 ? 20 : width);
        }

        var box = cellBox;
        var y = box.y;
        mini.setXY(this._editWrap, box.x, y + 1);

        // wrap 恰好铺满单元格
        mini.setWidth(this._editWrap, box.width - 2);
        mini.setHeight(this._editWrap, box.height - 2);

        var viewWidth = document.body.scrollWidth;
        if (box.x > viewWidth) {
            mini.setX(this._editWrap, -1000);
        }
    }
});

// grid 扩展操作列
(function($) {
    mini.ActionColumn = function(config) {
        return mini.copyTo(
            {
                width: 32 * 4 + 24,
                cellCls: 'mini-actioncolumn mini-actioncolumn-cell',
                headerCls: 'mini-actioncolumn',
                hideable: true,
                allowDrag: true,
                // header: function(column) {
                //     // 列里面写了内容  header 就不会调用了
                // },
                minWidth: 32 * 2 + 24,
                defaultShowItems: 4,
                calcWidth: function(count) {
                    var len = Math.min(count, this.defaultShowItems);
                    return Math.max(this.minWidth, 32 * len + 24) + 'px';
                },
                renderer: function(e) {
                    var that = this;
                    var grid = e.sender;
                    var record = e.record;

                    var column = e.column;
                    var icons = column.__actions;
                    if (!icons || !icons.length) return '';

                    var iconsHtml = '';

                    var columnId = column._id;
                    var iconsState = {};

                    if (!column.__hasIconRender) {
                        // 无控制 直接渲染前四个即可
                        iconsHtml = $.map(icons.slice(0, 4), function(item) {
                            return renderIcon(item);
                        }).join('');
                    } else {
                        // 调用 图标 renderer
                        $.each(icons, function(i, icon) {
                            if (icon.renderer + '' === icon.renderer) {
                                icon.renderer = that.__getFun(icon.renderer, true);
                            }
                            if (icon && $.type(icon.renderer) === 'function') {
                                var ev = {
                                    sender: grid,
                                    record: record,
                                    row: e.row,
                                    column: column,
                                    icon: { icon: icon.icon }
                                };
                                var rtv = icon.renderer.call(grid, ev);
                                if ($.type(rtv) === 'string' && rtv.length) {
                                    window.console && console.warn && console.warn('图标渲染内容不可自定义，仅可通过e.icon.disabled 和 e.icon.visible 控制图标按钮的禁用和显示状态');
                                }
                                iconsState[icon._id] = {
                                    disabled: ev.icon.disabled === true ? true : false,
                                    visible: ev.icon.visible === false ? false : true
                                };
                            } else {
                                iconsState[icon._id] = {
                                    disabled: false,
                                    visible: true
                                };
                            }
                        });

                        // 可见的
                        var visibleIcons = $.grep(icons, function(icon) {
                            return iconsState[icon._id].visible;
                        });
                        var isOver = visibleIcons.length > 4;
                        if (isOver) {
                            // 渲染前三个可见的 + ext
                            iconsHtml = $.map(visibleIcons.slice(0, 3), function(item) {
                                var isDisabled = iconsState[item._id].disabled;
                                return renderIcon(item, isDisabled);
                            }).join('');

                            // 其他图标
                            var overIconIds = [],
                                disabledIds = [];
                            $.map(visibleIcons.slice(3), function(item) {
                                overIconIds.push(item._id);
                                if (iconsState[item._id].disabled) {
                                    disabledIds.push(item._id);
                                }
                            }).join(',');

                            iconsHtml += renderIcon(column.__actionsMap.showMore, false, overIconIds.join(','), disabledIds.join(','));
                        } else {
                            iconsHtml = $.map(visibleIcons, function(item) {
                                var isDisabled = iconsState[item._id].disabled;
                                return renderIcon(item, isDisabled);
                            }).join('');
                        }
                    }

                    return '<div class="mini-actioncolumn-wrap" data-column-id="' + columnId + '" data-record-id="' + record._id + '">' + iconsHtml + '</div>';

                    function renderIcon(item, isDisabled, overIds, disabledIds) {
                        return '<i class="action-icon ' + item.icon + (isDisabled ? ' mini-disabled' : '') + '" title="' + item.title + '" data-column-id="' + columnId + '" data-icon-id="' + item._id + '" data-record-id="' + record._id + '" ' + (overIds ? 'data-over-ids="' + overIds + '"' : '') + (disabledIds ? ' data-disabled-ids="' + disabledIds + '"' : '') + '></i>';
                    }
                },

                __onCellClick: function(e) {
                    // 可能存在多列 只处理自己的点击事件
                    if (e.column._id !== this._id) {
                        return;
                    }
                    var targetEL = e.htmlEvent.target;
                    var iconId = targetEL.getAttribute('data-icon-id');

                    var icon = e.column.__actionsMap[iconId];
                    if (!icon || !icon.handle || $(targetEL).hasClass('disabled')) return;

                    this.__callHandle(icon.handle, e.record, e.sender, targetEL);
                },
                /**
                 * 调用处理函数
                 *
                 * @param {any} fn 配置的处理函数
                 * @param {object} record 当前行数据
                 * @param {mini.DataGrid} grid 当前表格对象
                 * @param {HTMLElement | undefined} el 当前图标dom
                 * @returns
                 */
                __callHandle: function(fn, record, grid, el) {
                    var type = $.type(fn);
                    if (type === 'function') {
                        return fn.call(grid, record, el);
                    }
                    if (type === 'string') {
                        var isCall = /\(.*\)/.test(fn);

                        if (isCall) {
                            // 如果本身就是 fnName(xxx) 这种调用则直接执行
                            eval(fn);
                        } else {
                            // 如果没带括号调用 则传参调用
                            eval(fn)(record, el);
                        }

                        return;
                    }
                },

                /**
                 * 获取 function
                 *
                 * @param {string} fnName 函数名字符串
                 * @param {boolean} forceFn 是否只查找fn
                 * @returns
                 */
                __getFun: function(fnName, forceFn) {
                    if (window[fnName] && $.type(window[fnName]) === 'function') {
                        return window[fnName];
                    }
                    return forceFn ? false : fnName;
                },

                init: function(grid) {
                    var actioncolumn = this;
                    var $h = $('<div></div>').html(actioncolumn.header);

                    var noHandleArr = [];

                    // 是否有图标的 renderer 如果有 需要很多额外工作
                    actioncolumn.__hasIconRender = false;

                    var iconsMap = {};
                    var icons = $.map($h.find('[type="action"]').remove(), function(el, i) {
                        var icon = {
                            _id: i + 1,
                            icon: el.getAttribute('icon'),
                            title: el.textContent || el.innerText || el.getAttribute('title'),
                            //
                            // handle: getHandle(el.getAttribute('onclick')),
                            // renderer: getHandle(el.getAttribute('renderer'), true)
                            handle: el.getAttribute('onclick'),
                            renderer: el.getAttribute('renderer')
                        };

                        if (!icon.handle) {
                            noHandleArr.push(icon);
                        }
                        iconsMap[icon._id] = icon;
                        if (icon.renderer) {
                            actioncolumn.__hasIconRender = true;
                        }
                        return icon;
                    });

                    $h.find('>*').remove();
                    actioncolumn.header = $.trim($h.text()) || '操作';
                    actioncolumn.__actions = icons;
                    actioncolumn.__actionsMap = iconsMap;
                    actioncolumn.width = actioncolumn.calcWidth(icons.length);

                    // 长度 大于 4 则插入一个
                    if (icons.length > 4) {
                        var showMoreIcon = {
                            _id: 'showMore',
                            icon: 'icon-omit',
                            title: '显示更多',
                            handle: __showMoreActions
                        };
                        iconsMap[showMoreIcon._id] = showMoreIcon;

                        // 无控制 则初始化创建即可 否则需在单元格 renderer 时动态控制
                        if (!actioncolumn.__hasIconRender) {
                            icons.splice(3, 0, showMoreIcon);
                            this.__createExtMenu(grid);
                            this.__extMenu.setItems(
                                $.map(this.__actions.slice(4), function(icon) {
                                    return {
                                        id: icon._id,
                                        text: icon.title,
                                        iconCls: icon.icon
                                    };
                                })
                            );
                        }
                    }

                    if (noHandleArr.length) {
                        $.each(noHandleArr, function(i, icon) {
                            console && console.warn && console.warn(actioncolumn.header + '列的【' + icon.icon + '】未配置点击事件！！！');
                        });
                    }
                    noHandleArr = null;

                    grid.on('cellClick', this.__onCellClick, this);
                    actioncolumn.__inited = true;

                    function __showMoreActions(record, el) {
                        if (!actioncolumn.__extMenu) {
                            actioncolumn.__createExtMenu(grid);
                        }

                        // 记录当前行id
                        actioncolumn.__extMenu.__currentRecordId = record._uid;
                        // 如果有图标的 render 需要在此获取状态
                        if (actioncolumn.__hasIconRender) {
                            var overIds = (el.getAttribute('data-over-ids') || '').split(',');
                            var disabledIds = (el.getAttribute('data-disabled-ids') || '').split(',');
                            actioncolumn.__extMenu.setItems(
                                $.map(overIds, function(id) {
                                    var targetIcon = actioncolumn.__actionsMap[id];
                                    return {
                                        id: id,
                                        text: targetIcon.title,
                                        iconCls: targetIcon.icon,
                                        enabled: disabledIds.indexOf(id) !== -1 ? false : true
                                    };
                                })
                            );
                        }

                        actioncolumn.__extMenu.showAtEl(el);
                        $(el).addClass('active');
                    }
                },
                __createExtMenu: function(grid) {
                    var that = this;
                    if (!this.__extMenuInited) {
                        var extMenu = new mini.Menu();
                        extMenu.on('itemclick', function(e) {
                            var id = e.item.id;
                            var icon = that.__actionsMap[id];
                            var rid = extMenu.__currentRecordId;
                            var record = grid.getRowByUID(rid);
                            if (icon && icon.handle) {
                                that.__callHandle(icon.handle, record, grid);
                            }
                        });
                        var oldHide = extMenu.hide;
                        extMenu.hide = function() {
                            oldHide.apply(this, arguments);
                            $('[data-icon-id="showMore"]').removeClass('active');
                        };

                        this.__extMenu = extMenu;
                        this.__extMenuInited = true;
                    }
                    return this.__extMenu;
                }
            },
            config
        );
    };
    mini._Columns['actioncolumn'] = mini.ActionColumn;
})(this.jQuery);

// 解决含有时分秒选择情况下，当选择日期为其他月份（即选中灰色的日期）时，通过键盘修改时分秒时按backspace会导致页面回退的问题
$(document).on("keydown", ".mini-calendar-timespinner", function(e) {

    var input = e.target;
    if (input.nodeName == 'INPUT' || input.nodeName == 'TEXTAREA') {
        // 强制输入框获取焦点
        // 以解决选择日期为其他月份时视图自动转到其他月份后焦点不在输入框中，导致页面响应backspace按键
        input.focus();
    }

});

mini.overwrite(mini.DatePicker, {
	defaultTime: '', // 默认时间
    maxDate: '9999-12-31',
    minDate: '1753-01-01',

    showPopup: function() {
        var ex = { cancel: false };
        this.fire("beforeshowpopup", ex);
        if (ex.cancel == true) return;

        this._calendar = this._getCalendar();
        this._calendar.beginUpdate();
        this._calendar._allowLayout = false;
        if (this._calendar.el.parentNode != this.popup._contentEl) {
            this._calendar.render(this.popup._contentEl);
        }

        this._calendar.set({
            monthPicker: this._monthPicker,
            showTime: this.showTime,
            timeFormat: this.timeFormat,
            showClearButton: this.showClearButton,
            showYesterdayButton: this.showYesterdayButton,
            showTodayButton: this.showTodayButton,
            showOkButton: this.showOkButton,
            showWeekNumber: this.showWeekNumber
        });

        this._calendar.setValue(this.value || this.defaultTime);

        if (this.value) {
            this._calendar.setViewDate(this.value);
        } else {
            this._calendar.setViewDate(this.viewDate);
        }



        function doUpdate() {
            this._calendar.hideMenu();

            if (this._calendar._target) {
                var obj = this._calendar._target;
                this._calendar.un("timechanged", obj.__OnTimeChanged, obj);
                this._calendar.un("dateclick", obj.__OnDateClick, obj);
                this._calendar.un("drawdate", obj.__OnDrawDate, obj);
            }
            this._calendar.on("timechanged", this.__OnTimeChanged, this);
            this._calendar.on("dateclick", this.__OnDateClick, this);
            this._calendar.on("drawdate", this.__OnDrawDate, this);

            this._calendar.endUpdate();

            this._calendar._allowLayout = true;
            this._calendar.doLayout();

            this._calendar.focus();

            this._calendar._target = this;
        }

        var me = this;
        //setTimeout(function () {
        doUpdate.call(me);
        //}, 1);

        mini.DatePicker.superclass.showPopup.call(this);
    },

    getExtraAttrs: function (el) {
		var attrs = {};

		mini._ParseString(el, attrs, ["defaultTime"]);

		return attrs;
	}
});

mini.overwrite(mini.Form, {
	getValidateFields: function (disableValid) {
        function isDisplay(control) {
            return mini.isDisplay(control.el, function (p) {
                // 手风琴布局中隐藏的还是需要验证的
                if (mini.hasClass(p, 'mini-tabs-body') || mini.hasClass(p, 'fui-acc-bd') || mini.hasClass(p, 'invisible')) return true;
            });
        }

        var fields = [];
        var controls = this.getFields();
        for (var i = 0, l = controls.length; i < l; i++) {
            var control = controls[i];
            if (!control.validate || !control.isDisplay) continue;
            if (isDisplay(control) || control.forceValidate) { //

                if (control.enabled || disableValid || control.forceValidate) {

                    fields.push(control);
                }
            }
        }
        return fields;
    }
});
mini.overwrite(mini.ListBox, {
    getItemText: function(item) {
        var t = mini._getMap(this.textField, item);
        // 安全整改要求，服务端返回数据是对html编码的，但是提交时需要还原成正常的html标签
        return mini.isNull(t) ? '' : mini.htmlDecode(String(t));
    },
    _OnDrawCell: function(record, index, column) {
        var value = column ? mini._getMap(column.field, record) : this.getItemText(record);
        var e = {
            sender: this,
            index: index,
            rowIndex: index,
            record: record,
            item: record,
            column: column,
            field: column ? column.field : null,
            value: value,
            cellHtml: value,
            rowCls: null,
            cellCls: column ? column.cellCls || '' : '',
            rowStyle: null,
            cellStyle: column ? column.cellStyle || '' : ''
        };

        var hasColumns = this.columns && this.columns.length > 0;
        if (!hasColumns) {
            if (index == 0 && this.showNullItem) {
                e.cellHtml = this.nullItemText;
            }
        }

        // 由于安全整改后，提交数据中是允许有html标签的，而在渲染时不能解析html标签
        // 所以在返回数据时，服务端已对html标签做转义，在提交时再重新还原回来
        // 所以修改了listbox的getItemText方法，把转义的html还原回来
        // 所以此处需要重新将html转义下
        // if (e.autoEscape == true) {
        //     e.cellHtml = mini.htmlEncode(e.cellHtml);
        // }
        e.cellHtml = mini.htmlEncode(e.cellHtml);

        if (column) {
            if (column.dateFormat) {
                if (mini.isDate(e.value)) e.cellHtml = mini.formatDate(value, column.dateFormat);
                else e.cellHtml = value;
            }
            var renderer = column.renderer;
            if (renderer) {
                fn = typeof renderer == 'function' ? renderer : window[renderer];
                if (fn) {
                    e.cellHtml = fn.call(column, e);
                }
            }
        }

        this.fire('drawcell', e);

        if (e.cellHtml === null || e.cellHtml === undefined || e.cellHtml === '') e.cellHtml = '&nbsp;';

        return e;
    }
});

// listbox checkbox 美化
(function() {
    if (mini.isIE8) return;

    var markerCls = 'check-beauty';
    var labelCls = 'mini-listbox-checkbox-icon';

    var doUpdate = mini.ListBox.prototype.doUpdate;

    mini.ListBox.prototype.doUpdate = function() {
        var returnValue = doUpdate.apply(this, arguments);

        if (!this.showCheckBox) {
            return returnValue;
        }
        var $contentTable = $(this._viewEl).find('.mini-listbox-items');
        var $headerTable = $(this._headerEl).find('.mini-listbox-headerInner');

        doAddLabel($contentTable);
        doAddLabel($headerTable);

        return returnValue;
    };

    function doAddLabel($table) {
        if ($table.hasClass(markerCls)) return;
        $.map($table.find('.mini-listbox-checkbox'), function(td) {
            var checkerId = $(td).find('input[type="checkbox"]')[0].id;
            if (!checkerId) return;
            $('<label class="' + labelCls + '" for="' + checkerId + '"></label>').appendTo(td);
        });
        $table.addClass(markerCls);
    }
})();

mini.overwrite(mini.Menu, {
    _initEvents: function () {
        mini._BindEvents(function () {
            mini.on(document, "mousedown", this.__OnBodyMouseDown, this);
            mini_onOne(this.el, "mouseover", this.__OnMouseOver, this);
            mini.on(window, "resize", this.__OnWindowResize, this);
            if (this._disableContextMenu) {
                mini_onOne(this.el, "contextmenu", function (e) {
                    e.preventDefault();
                    //e.stopPropagation();
                }, this);
            }

            mini_onOne(this._topArrowEl, "mousedown", this.__OnTopMouseDown, this);
            mini_onOne(this._bottomArrowEl, "mousedown", this.__OnBottomMouseDown, this);

        }, this);

        // 添加对滚动的处理
        var self = this;
        this.on('open', function(){
            self._onDocumentMousewheel();
        });

    },

    hide: function () {
        this.hideItems();

        this._unDocumentMousewheel();

        mini_Popup_prototype_hide.call(this);
    },
    _unDocumentMousewheel: function () {
        mini.un(document, "mousewheel", this.__OnDocumentMousewheel, this);
        this._mousewheelXY = null;

    },
    _onDocumentMousewheel: function () {
        this._unDocumentMousewheel();

        this._mousewheelXY = mini.getXY(this.el);
        mini.on(document, "mousewheel", this.__OnDocumentMousewheel, this);

    },
    __OnDocumentMousewheel: function (e) {
        var that = this;


        function doWheel() {
            if (!that.isPopup) return;
            var box = that._mousewheelXY;
            var xy = mini.getXY(that.popupEl);
            if (box[0] != xy[0] || box[1] != xy[1]) {
                that.hide();
            } else {
                setTimeout(doWheel, 300);
            }
            //document.title = new Date().getTime();
        }

        setTimeout(doWheel, 300);
    }
});
mini.overwrite(mini.Pager, {

	// 参数 total 在 showTotalCount 为 false 时用 Boolean 表示是否已到最后一页
	update: function (index, size, total) {

		if (mini.isNumber(index)) this.pageIndex = parseInt(index);
		if (mini.isNumber(size)) this.pageSize = parseInt(size);
		if (mini.isNumber(total)) this.totalCount = parseInt(total);

		if (this.showTotalCount) {
			this.totalPage = parseInt(this.totalCount / this.pageSize) + 1;
			if ((this.totalPage - 1) * this.pageSize == this.totalCount) {
				this.totalPage -= 1;
			}
			if (this.totalCount == 0) this.totalPage = 0;

			if (this.totalCount >= 0) {
				if (this.pageIndex > this.totalPage - 1) {
					this.pageIndex = this.totalPage - 1;
				}
			}
			if (this.pageIndex <= 0) this.pageIndex = 0;
			if (this.totalPage <= 0) this.totalPage = 0;
		}

		this.firstButton.enable();
		this.prevButton.enable();
		this.nextButton.enable();
		this.lastButton.enable();

		if (this.pageIndex == 0) {
			this.firstButton.disable();
			this.prevButton.disable();
		}
		if ((this.showTotalCount && this.pageIndex >= this.totalPage - 1)) {
			this.nextButton.disable();
			this.lastButton.disable();
		}

		var pageIndex = this.pageIndex > -1 ? this.pageIndex + 1 : 0;
		if (this.showTotalCount && this.totalCount == 0) pageIndex = 0;

		this.numInput.value = pageIndex;
		this.pagesLabel.innerHTML = "/ " + this.totalPage;

		var sizeList = this.sizeList.clone();
        if (sizeList.indexOf(this.pageSize) == -1) {
            sizeList.push(this.pageSize);
            sizeList = sizeList.sort(function (a, b) {
                return a - b;
			});
			
			this.sizeList = sizeList;
        }
		var sizes = [];
		for (var i = 0, l = sizeList.length; i < l; i++) {
			var num = sizeList[i];
			var option = {};
			option.text = num;
			option.id = num;
			sizes.push(option);
		}
		this.sizeCombo.setData(sizes);
		this.sizeCombo.setValue(this.pageSize);


		this.sizeTextEl.innerHTML = this.sizeText;
		this.sizeTextEl.style.display = this.sizeText ? "" : "none";

		var firstText = this.firstText,
			prevText = this.prevText,
			nextText = this.nextText,
			lastText = this.lastText,
			reloadText = this.reloadText;
		if (this.showButtonText == false) {
			firstText = prevText = nextText = lastText = reloadText = "";
		}
		this.firstButton.setText(firstText);
		this.prevButton.setText(prevText);
		this.nextButton.setText(nextText);
		this.lastButton.setText(lastText);
		this.reloadButton.setText(reloadText);

		this.firstButton.setIconCls(this.showButtonIcon ? "mini-pager-first" : "");
		this.prevButton.setIconCls(this.showButtonIcon ? "mini-pager-prev" : "");
		this.nextButton.setIconCls(this.showButtonIcon ? "mini-pager-next" : "");
		this.lastButton.setIconCls(this.showButtonIcon ? "mini-pager-last" : "");
		this.reloadButton.setIconCls(this.showButtonIcon ? "mini-pager-reload" : "");
		this.reloadButton.setVisible(this.showReloadButton);

		var s = this.reloadButton.el.previousSibling;
		if (s) {
			s.style.display = this.showReloadButton ? "" : "none";
		}


		this._rightEl.innerHTML = String.format(this.pageInfoText, this.pageSize, this.totalCount);

		this.indexEl.style.display = this.showPageIndex ? "" : "none";
		this.sizeEl.style.display = this.showPageSize ? "" : "none";
		this._rightEl.style.display = this.showPageInfo && this.showTotalCount ? "" : "none";

		this.pagesLabel.style.display = this.showTotalCount ? "" : "none";


		if (this.showTotalCount) {
			//@新增：用于处理 totalPage < 0 的场合
			this.firstButton.setVisible(this.totalCount >= 0);
			this.lastButton.setVisible(this.totalCount >= 0);

			if (this.totalCount < 0) {
				this.firstButton.enable();
				this.nextButton.enable();
				if (this.pageIndex == 0) {
					this.firstButton.disable();
				}
				//this.indexEl.style.display = "none";
			}
		} else {
			this.firstButton.setVisible(false);
			this.lastButton.setVisible(false);
		}

	},
	_OnPageChanged: function (index, size) {

        var e = {
            pageIndex: mini.isNumber(index) ? index : this.pageIndex,
            pageSize: mini.isNumber(size) ? size : this.pageSize,
            cancel: false
        };

        if (this.showTotalCount && this.totalCount >= 0) {
            if (e.pageIndex > this.totalPage - 1) {
                e.pageIndex = this.totalPage - 1;
            }
        }
        if (e.pageIndex < 0) e.pageIndex = 0;

        this.fire("beforepagechanged", e);
        if (e.cancel == true) {
            return;
        }

        this.fire("pagechanged", e);
        this.update(e.pageIndex, e.pageSize);

	},
	// 重新解决ie下手动输入页码回车加载数据后，点击页面会再次触发加载数据的问题
	_initEvents: function () {

        mini.Pager.superclass._initEvents.call(this);

        this.firstButton.set({
			disableMultiClick: false
		}).on("click", function (e) {
            this._OnPageChanged(0);
        }, this);
        this.prevButton.set({
			disableMultiClick: false
		}).on("click", function (e) {
            this._OnPageChanged(this.pageIndex - 1);
        }, this);
        this.nextButton.set({
			disableMultiClick: false
		}).on("click", function (e) {

            this._OnPageChanged(this.pageIndex + 1);
        }, this);
        this.lastButton.set({
			disableMultiClick: false
		}).on("click", function (e) {
            this._OnPageChanged(this.totalPage);
        }, this);
        this.reloadButton.on("click", function (e) {
            this._OnPageChanged();
        }, this);


        function doPage() {
            if (changing) return;
            changing = true;
            var index = parseInt(this.numInput.value);
            if (isNaN(index)) {
				this.update();
				// update后，pageindex变成了1
				oIndex = 1;
            } else {
				// ie下回车不会触发change事件，导致回车刷新数据后，点击页面任意地方会再次触发change事件。
				// 为解决该问题需记录下上一个index和当前的比较
				if(oIndex != index) {
					this._OnPageChanged(index - 1);
					oIndex = index;
				}
                
            }
            setTimeout(function () {
                changing = false;
            }, 100);
        }

		var changing = false;
		var oIndex = parseInt(this.numInput.value)
        mini.on(this.numInput, "change", function (e) {
            doPage.call(this);
        }, this);

        mini.on(this.numInput, "keydown", function (e) {
            if (e.keyCode == 13) {
				doPage.call(this);
                e.stopPropagation();
            }
        }, this);

        //mini.on(this.pageSelect, "change", this.__OnPageSelectChanged, this);
        this.sizeCombo.on("valuechanged", this.__OnPageSelectChanged, this);
    }
});
mini.overwrite(mini.Panel, {
    _doTitle: function () {
        var title = this.title == "" ? "&nbsp" : this.title;
        this._titleEl.innerHTML = title;
        // 给panel标题添加title，解决由代办打开的dialog标题过长时无法显示全的问题
        this._titleEl.title = mini.htmlUnescape(title);

        this._iconEl.style.display = (this.iconCls || this.iconStyle) ? "inline" : "none";
        this._iconEl.className = "mini-panel-icon mini-icon mini-iconfont " + this.iconCls;

        mini.setStyle(this._iconEl, this.iconStyle);

    }
});
mini.Popup.prototype.yOffset = 2;
mini.Popup.prototype._getWindowOffset = function() {
    return [0, 2];
};

mini.overwrite(mini.PopupEdit, {
    setText: function (value) {

        if (value === null || value === undefined) value = "";
        
        // 安全整改要求，服务端返回数据是对html编码的，但是提交时需要还原成正常的html标签
        value = mini.htmlDecode(value);

        var fire = this.text !== value;
        this.text = value;
        this._textEl.value = value;

        this._doEmpty();
    }
});

mini.overwrite(mini.ProgressBar, {
    _create: function() {
        this.el = document.createElement('div');
        this.el.className = 'mini-progressbar';

        // prettier-ignore
        var s = '<div class="mini-progressbar-border">' +
                    '<div class="mini-progressbar-bar"><div class="mini-progressbar-bar-current"></div></div>' + 
                    '<div class="mini-progressbar-text"></div>' + 
                '</div>';

        this.el.innerHTML = s;
        this._borderEl = this.el.firstChild;
        this._barEl = this._borderEl.firstChild.firstChild;
        this._textEl = this._borderEl.lastChild;

        //....
    }
});

;(function() {
    var _createHeaderMenu = mini.Tabs.prototype._createHeaderMenu;
    mini.Tabs.prototype._createHeaderMenu = function() {
        var r = _createHeaderMenu.apply(this, arguments);
        var menuBtn = this._headerMenuEl;
        if (this._headerMenu && menuBtn) {
            this._headerMenu.on('open', function() {
                $(menuBtn).addClass('popup');
            });
            this._headerMenu.on('close', function() {
                $(menuBtn).removeClass('popup');
            });
        }
        return r;
    };
})();

mini.overwrite(mini.TextBox, {
    setVtype: function (value) {
        // 数字类型的输入框提供默认的范围验证,并默认居右
        if(value.indexOf('int') > -1 || value.indexOf('float') > -1 || value.indexOf('decimalLength') > -1) {
            // if(value.indexOf('range') == -1) {
            //     value += ';range:0,999999999';
            // }
            if(!this.inputStyle) {
                this.setInputStyle('text-align: right;')
            }
            
        }
        this.vtype = value;
    },

    __OnMouseDown: function (e) {

        var sf = this;

        // 解决ie下有时点击后光标没有在输入框中的bug
        sf._textEl.focus();

        //加这行代码
        if (this._InputType == "textarea") return;

        //this.fire("click", {htmlEvent: e});

        if (!mini.isAncestor(this._textEl, e.target)) {
            setTimeout(function () {
                sf.focus();
                mini.selectRange(sf._textEl, 10000, 10000);
            }, 1);
        }
    },
    __OnBlur: function (e) {
        this._focused = false;
        var sf = this;
        setTimeout(function () {
            if (sf._focused == false) {
                sf.removeCls(sf._focusCls);
            }
        }, 2);

        //        if (this.emptyText && this._textEl.value == "") {
        //            this._textEl.value = this.emptyText;
        //            mini.addClass(this.el, this._emptyCls);
        //        }

        //        if (!this._inputChangedTime || new Date() - this._inputChangedTime < 50) {
        //            this.__OnInputTextChanged();
        //        }
        //        this._inputChangedTime = null;
        
        // 解决ie下通过鼠标把输入框的内容拖拽出去后值不变的bug
        if (mini.isIE) {
            this.__OnInputTextChanged();
        }

        this.fire("blur", { htmlEvent: e });


        if (this.validateOnLeave && this.isEditable()) {
            this._tryValidate();
        }
    },

    getExtraAttrs: function(el) {
        var attrs = {};
        mini._ParseString(el, attrs,
            [
            "mobileErrorText", "telErrorText", "phoneErrorText", "postCodeErrorText", "orgCodeErrorText", "idCardErrorText", 
            "validateErrorText", "decimalLengthErroeText"
             ]
        );

        return attrs;

    }
});


mini.overwrite(mini.TextArea, {
    __OnMouseDown: function (e) {

        var sf = this;
        // 解决ie下有时点击后光标没有在输入框中的bug
        sf._textEl.focus();

        //this.fire("click", {htmlEvent: e});

        if (!mini.isAncestor(this._textEl, e.target)) {
            setTimeout(function () {
                sf.focus();
                mini.selectRange(sf._textEl, 1000, 1000);
            }, 1);
        }
    }
});
// 为弹出的 listBox 新增 Y 方向间隙
mini.overwrite(mini.TextBoxList, {
    popupYOffset: 2,
    showPopup: function(action) {
        if (this.isDisplay() == false) return;
        this.isShowPopup = true;

        var popup = this._createPopup();

        popup.el.style.zIndex = mini.getMaxZIndex();
        var control = this._listbox;
        control.emptyText = this.popupEmptyText;

        //action = "loading";
        if (action == 'loading') {
            control.emptyText = this.popupLoadingText;
            this._listbox.setData([]);
        } else if (action == 'error') {
            control.emptyText = this.popupLoadingText;
            this._listbox.setData([]);
        }
        this._listbox.doUpdate();

        var box = this.getBox();
        var x = box.x,
            y = box.y + box.height;

        this.popup.el.style.display = 'block';
        mini.setXY(popup.el, -1000, -1000);
        this.popup.setWidth(box.width);

        this.popup.setHeight(this.popupHeight);

        var h = this.popup.getHeight();

        if (h > this.popupMaxHeight) {
            this.popup.setHeight(this.popupMaxHeight);
        }
        if (h < this.popupMinHeight) {
            this.popup.setHeight(this.popupMinHeight);
        }
        mini.setXY(popup.el, x, y + this.popupYOffset);
    }
});

mini.overwrite(mini.ToolTip, {
    autoHide: true,
    theme: 'dark',
    defaultTheme: 'dark',
    setTheme: function(theme) {
        if (!theme) return;
        this.theme = theme;
        // mini-tooltip-theme-*
        var themePrefix = 'mini-tooltip-theme-';

        var oldThemeCls = jQuery
            .grep(this.el.className.split(' '), function(cls) {
                return cls.indexOf(themePrefix) != -1 ? true : false;
            })
            .join(' ');

        jQuery(this.el)
            .removeClass(oldThemeCls)
            .addClass(themePrefix + theme);
    },
    getTheme: function() {
        return this.theme;
    },
    applyTheme: function() {
        if (!this._target) return;
        var theme = jQuery(this._target).attr('data-theme');

        this.setTheme(theme || this.defaultTheme);
    },
    setContent: function(value) {
        this.$element.children('.mini-tooltip-inner').html(value || '&nbsp;');
        this.applyPlacement();
        this.applyTheme();
    },
    // 增加对autoHide的判断
    _bindTooltip: function() {
        var jq = jQuery(this.scope || document),
            selector = this.selector,
            type = 'tooltip';
        this.setTheme(this.theme);

        jq.unbind('.' + type);

        var triggers = this.trigger.split(' ');

        for (var i = triggers.length; i--; ) {
            var trigger = triggers[i];

            if (trigger == 'click') {
                jq.on('click.' + type, selector, jQuery.proxy(this._toggle, this));
            } else if (trigger != 'manual') {
                var eventIn = trigger == 'hover' ? 'mouseenter' : 'focus';
                var eventOut = trigger == 'hover' ? 'mouseleave' : 'blur';

                jq.on(eventIn + '.' + type, selector, jQuery.proxy(this._enter, this));

                // for 招投标
                // 如果autoHide不为true，则不添加eventOut时的自动隐藏，而通过close方法来隐藏。
                if (this.autoHide) {
                    jq.on(eventOut + '.' + type, selector, jQuery.proxy(this._leave, this));
                }
            }
        }
    },
    // 源码中有问题，_getTip、enter、leave这三个方法都没有
    // 这里重新实现
    _toggle: function(e) {
        // if (this._getTip().css("display") == 'none') {
        //     this.enter(e);
        // } else {
        //     this.leave(e);
        // }

        if (this.$element.css('display') == 'none') {
            this._enter(e);
        } else {
            this._leave(e);
        }
    },
    // 源码中边界处理不完善，这里补充所有上下边界的情况
    applyPlacement: function() {
        if (!this._target) return;
        if (this.$element.css('display') == 'none') return;
        var target = this._target,
            jq = jQuery(target),
            placement = jq.attr('data-placement') || this.placement,
            tip = this.$element;

        if (!target || !tip[0]) return;

        tip.show().css({
            left: '-2000px',
            top: '-2000px'
        });

        function applyCls(placement) {
            tip.removeClass('mini-tooltip-left mini-tooltip-top mini-tooltip-right mini-tooltip-bottom mini-tooltip-bottomleft mini-tooltip-topleft mini-tooltip-bottomright mini-tooltip-topright').addClass('mini-tooltip-' + placement);
        }

        function applyPos(pos) {
            tip.offset(pos);
        }

        //
        var box = mini.getBox(target);
        var vbox = mini.getViewportBox();
        var topspace = box.top - vbox.top,
            bottomspace = vbox.bottom - box.bottom,
            leftspace = box.left - vbox.left,
            rightspace = vbox.right - box.right;

        applyCls(placement);

        var tipbox = mini.getBox(tip[0]);
        var pos = mini.getCalculatedOffset(placement, box, tipbox.width, tipbox.height);

        //边界处理
        // if (placement == "left") {
        // } else if (placement == "right") {
        // } else if (placement == "top") {
        // } else if (placement == "bottom") {

        // } else if (placement == "bottomleft" && topspace > bottomspace) {

        //     if (pos.top + tipbox.height > vbox.bottom) {
        //         placement = "topleft";
        //     }
        // } else if (placement == "topleft") {

        // }

        if (placement.indexOf('bottom') === 0) {
            if (topspace > bottomspace && pos.top + tipbox.height > vbox.bottom) {
                placement = placement.replace('bottom', 'top');
            }
        } else if (placement.indexOf('top') === 0) {
            if (topspace < bottomspace && pos.top < vbox.top) {
                placement = placement.replace('top', 'bottom');
            }
        }

        if (placement.indexOf('left') !== -1) {
            // 左边空白多 且显示不下 则让箭头由左边变成右边，让内容出现在左边。
            if (leftspace > rightspace && tipbox.width + pos.left > vbox.width) {
                placement = placement.replace('left', 'right');
            }
        } else if (placement.indexOf('right') !== -1) {
            // 右边空白多 且 （ 位置不可见 或 左边显示下 ） 则箭头变左边，内容出现在右边
            if (leftspace < rightspace && (pos.left < 0 || box.left + box.width < tipbox.wihth)) {
                placement = placement.replace('right', 'left');
            }
        }

        // 只指定上下，还需考虑左右是否显示得下
        if (placement === 'bottom' || placement === 'top') {
            // 左边空白多 且显示不下 则让箭头由左边变成右边，让内容出现在左边。
            if (leftspace > rightspace && tipbox.width + pos.left > vbox.width) {
                placement += 'right';
            } else if (leftspace < rightspace && (pos.left < 0 || box.left + box.width < tipbox.wihth)) {
                placement += 'left';
            }
        }

        applyCls(placement);
        pos = mini.getCalculatedOffset(placement, box, tipbox.width, tipbox.height);

        if (placement == 'right' || placement == 'left') {
            var arrow = $(tip).children('.mini-tooltip-arrow');
            arrow.css('top', '');

            function centerArrow() {
                var top = box.top + box.height / 2 - arrow.height() / 2;

                var y = top - pos.top;
                arrow.css('top', y);
            }

            vbox = mini.getViewportBox();
            if (pos.top < vbox.y) {
                pos.top = vbox.y;
                centerArrow();
            } else if (pos.top + tipbox.height > vbox.bottom) {
                pos.top = vbox.bottom - tipbox.height;
                centerArrow();
            }
        }

        applyPos(pos);
    },
    setAutoHide: function(value) {
        if (this.autoHide != value) {
            this.autoHide = value;
            this._bindTooltip();
        }
    },
    getAutoHide: function() {
        return this.autoHide;
    },
    getExtraAttrs: function(el) {
        var attrs = {};

        mini._ParseString(el, attrs, ['theme']);
        mini._ParseBool(el, attrs, ['autoHide']);

        return attrs;
    }
});

mini.overwrite(mini.DataTree, {
	loadNode: function (node, expand) {

        this._loadingNode = node;
        var e = { node: node };
        this.fire("beforeloadnode", e);
        //

        var time = new Date();

        var me = this;
        me._doLoadAjax(me.loadParams, null, null, null, function (e) {
            var t = new Date() - time;
            if (t < 60) t = 60 - t;

            setTimeout(function () {

                //success
                e.node = node;
                me._OnPreLoad(e);

                //e.node = me._loadingNode;
                me._loadingNode = null;
                if (me.loadParams) delete me.loadParams[me.idField];

                var oldNodes = node[me.nodesField];
                me.removeNodes(oldNodes);

                var nodes = e.data;
                if (nodes && nodes.length > 0) {

                    me.collapse(node);  //addNodes之前    优化！！！

                    me.addNodes(nodes, node);

                    //清楚新增痕迹
                    var all = me.getAllChildNodes(node);
                    for (var i = 0, l = all.length; i < l; i++) {
                        var treeNode = all[i];
                        //me.acceptRecord(treeNode);
                        delete treeNode._state;         //优化！！！
                    }

                    if (expand !== false) {
                        me.expand(node, true);
                    } else {
                        me.collapse(node, true);
                    }
                } else {
                    delete node[me.leafField];
                    me.expand(node, true);
                }


                me.fire("loadnode", e);
                me.fire("load", e);
            // }, t);
            // 上面的t不知miniui的用意，但是会造成如果ajax请求时间比较长的话，t会很大，造成延迟执行的时间也很长
            },10);
        }, true);
    }
});

mini.overwrite(mini.Tree, {
    showTreeLines: false,
    showFullPath: false,
    includeRootNode: false,
    replaceNodes: function (nodes, node) {
        var oldNodes = node[this.nodesField];
        this.removeNodes(oldNodes);

        this.addNodes(nodes, node);
    },
    _OnDrawCell: function (record, column, rowIndex, columnIndex) {
        var e = mini.TreeGrid.superclass._OnDrawCell.call(this, record, column, rowIndex, columnIndex);

        if (this._treeColumn && this._treeColumn == column.name) {
            var node = e.node;

            if (node.ckr === false) {
                e.showCheckBox = false;
                e.showRadioButton = false;
            }
            this.fire("drawnode", e);
            if (e.nodeStyle) {
                e.cellStyle = e.nodeStyle;
            }
            if (e.nodeCls) {
                e.cellCls = e.nodeCls;
            }
            if (e.nodeHtml) {
                e.cellHtml = e.nodeHtml;
            } else if(node.textCls) {
                e.cellHtml = '<span class="' + node.textCls + '">' + e.cellHtml + '</span>';
            }

            this._createTreeColumn(e);
        }
        return e;
    },

    getValueAndText: function (records, delimiter) {
        if (mini.isNull(records)) records = [];
        delimiter = delimiter || this.delimiter;

        if (typeof records == "string" || typeof records == "number") {
            records = this._dataSource.getsByIds(records);
        } else if (!mini.isArray(records)) {
            records = [records];
        }
        var values = [];
        var texts = [];
        for (var i = 0, l = records.length; i < l; i++) {
            var record = records[i];
            if (record) {
                values.push(this.getItemValue(record));
                texts.push(this.getItemText(record));
            }
        }

        return [values.join(delimiter), texts.join(delimiter)];
    },

    getItemValue: function (item) {
        if (!item) return "";
        var t = mini._getMap(this.idField, item);
        return mini.isNull(t) ? '' : String(t);
    },

    getItemText: function (item) {
        if (!item) return "";
        var t = '';
        //var t = item[this.textField];
        if (this.showFullPath) {
            t = this.getFullPath(item);
        } else {
            t = mini._getMap(this.textField, item);
        }

        return mini.isNull(t) ? '' : String(t).replace(/<\/?.+?>/g, "");
    },
    getFullPath: function (item) {
        if (item.fullPath) {
            return item.fullPath;
        }

        var parents = this.getAncestors(item),
            fullPath = '';

        for (var i = 0, l = parents.length; i < l; i++) {
            // 不包含根节点的跳过根节点
            if (i == 0 && !this.includeRootNode) {
                continue;
            }

            fullPath += mini._getMap(this.textField, parents[i]) + '-';
        }

        item.fullPath = fullPath = fullPath + mini._getMap(this.textField, item);

        return fullPath;
    },
    getText: function () {
        var nodes = [];
        if (this.showCheckBox) {
            nodes = this.getCheckedNodes();
        } else {
            var node = this.getSelectedNode();
            if (node) nodes.push(node);
        }

        var sb = [],
            textField = this.getTextField();
        for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];
            // 去除可能存在的搜索高亮的html标签
            sb.push(node[textField].replace(/<\/?.+?>/g, ""));
        }

        return sb.join(',');
    }
});
mini.overwrite(mini.TreeGrid, {
    showSortIcon: true,
    _setEditorBox: function(editor, cellBox) {
        mini.DataGrid.prototype._setEditorBox.call(this, editor, cellBox);
    }
});

(function($) {
    /**
     * TreeGrid 新增奇偶行展示 和 展开行高亮的扩展
     */
    var originFn = mini.TreeGrid.prototype._initEvents;
    mini.TreeGrid.prototype._initEvents = function() {
        originFn.call(this);
        var tree = this;

        this.on('layout', function() {
            // 未 开启斑马纹则不处理
            if (!tree.allowAlternating) {
                $(tree.el).find('.mini-grid-row-alt').removeClass('mini-grid-row-alt');
                return;
            }
            var $tbody = $(tree._contentEl).find('.mini-grid-rows-content > .mini-grid-table > tbody');
            // 增加奇偶行标识
            $tbody.find('> .mini-grid-row').each(function(i, item) {
                if (i % 2 == 1) {
                    $(item).addClass('mini-grid-row-alt');
                }
            });
            // 添加展开行的cls
            $tbody.find('> .mini-tree-nodes-tr').each(function(i, tr) {
                $(tr)
                    .prev()
                    .addClass('mini-treegrid-expandRow');
            });
        });
    };
})(jQuery);

// 添加通用验证错误提示validateErrorText，并且优先级最高
mini._ValidateVType = function(vtype, value, e, scope) {
    // 给数字类型的验证默认加上0-999999999999999的范围验证
    if ((vtype.indexOf('int') > -1 || vtype.indexOf('float') > -1) && vtype.indexOf('range') == -1) {
        vtype += ';range:0,' + mini._maximumNumber;
    }
    // 由于后端处理double类型数据时最大精度为15位数，超过15位就会被截取掉。所以为了保持统一，前端需对浮点数最最大15位长度的限制
    if(vtype.indexOf('float') > -1 && vtype.indexOf('rangeLength') == -1) {
        vtype += ';rangeLength:0,16';
    }
    // 有小数的验证默认加上0-9999999999999的范围验证，留两位给小数
    if(vtype.indexOf('decimalLength') > -1 && vtype.indexOf('range') == -1) {
        vtype += ';range:0,' + Math.floor(mini._maximumNumber / 100);
    }
    var vtypes = vtype.split(";");

    for (var i = 0, l = vtypes.length; i < l; i++) {
        var vtype = vtypes[i].trim();
        var vv = vtype.split(":");
        var vt = vv[0];

        var args = vtype.substr(vt.length + 1, 1000); //vv[1];
        if (args) args = args.split(",");
        else args = [];

        var fn = mini.VTypes[vt];
        if (fn) {
            var isValid = fn(value, args);
            if (isValid !== true) {
                e.isValid = false;
                var vtext = vv[0] + "ErrorText";
                e.errorText = scope["validateErrorText"] || scope[vtext] || mini.VTypes[vtext] || "";
                e.errorText = String.format(e.errorText, args[0], args[1], args[2], args[3], args[4]);
                break;
            }
        }
    }
};

mini._maximumNumber = 999999999999999;

// VTypes的扩展
jQuery.extend(mini.VTypes, {
    mobileErrorText: "输入的手机号码格式不正确",
    telErrorText: "输入的固定电话号码格式不正确",
    phoneErrorText: "输入的电话号码格式不正确",
    phoneWithShortNumErrorText: "输入的电话号码格式不正确",
    postCodeErrorText: "输入的邮政编码格式不正确",
    orgCodeErrorText: "输入的组织机构代码格式不正确",
    idCardErrorText: "输入的身份证号码格式不正确",
    decimalLengthErrorText: "请输入小数，且最多只能输入{0}位小数",
    projectCodeErrorText: "输入的投资项目统一代码格式不正确",

    decimalLength: function(v, args) {
        if (mini.VTypes["float"](v, args) == false) return false;
        if (mini.isNull(v) || v === "") return true;
        var n = parseInt(args);
        if (!v || isNaN(n)) return true;

        v = String(v);
        var s = v.split(".");
        if (s.length == 1) return true;
        if (s[1].length <= n) return true;
        else return false;
    },

    mobile: function(v, args) {
        if (mini.isNull(v) || v === "")
            return true;

        return (/^1[3456789]\d{9}$/).test(v);
    },

    tel: function(v, args) {
        if (mini.isNull(v) || v === "")
            return true;

        return (/^0\d{2,3}-?\d{7,8}$/).test(v) || (/^\(0\d{2,3}\)\d{7,8}$/).test(v);
    },

    phone: function(v, args) {
        if (mini.isNull(v) || v === "")
            return true;

        return (/^1[3456789]\d{9}$/).test(v) || (/^0\d{2,3}-?\d{7,8}$/).test(v) || (/^\(0\d{2,3}\)\d{7,8}$/).test(v);
    },

    // 更弱的电话号码验证，支持短号码
    phoneWithShortNum: function(v, args) {
        if (mini.isNull(v) || v === "")
        return true;

        return (/^\d[\d-]{2,10}(?!-)$/).test(v);
    },

    postCode: function(v, args) {
        if (mini.isNull(v) || v === "")
            return true;

        return (/^\d{6}$/).test(v);
    },
    orgCode: function(v, args) {
        if (mini.isNull(v) || v === "") {
            return true;
        }

        // 组织机构代码
        if ((/^[A-Z0-9]{8}-[A-Z0-9]$/).test(v)) {
            return true;
        }

        // 统一社会信用代码
        // var reg = /^([0-9A-Z]{2})([0-9]{6})([0-9A-Z]{10})$/;
        /*
         * 按照电子交易提供的统一社会信用代码规则调整正则表达式
         * 1、长度18位，由数字或大写字母组成（不能出现I,O,Z,S,V）
         * 2、第1位：数字或大写字母（不能出现I,O,Z,S,V）
         * 3、第2位：必须为数字（1，2，3，9）中的一个
         * 4、第3-8位：行政区代码，全数字，大概区间从110000-820000
         * 5、第9-18位：数字或大写字母（不能出现I,O,Z,S,V）
         */
        var reg = /^(?![IOSV])([0-9A-Y])([1239])([0-9]{6})(((?![IOSV])[0-9A-Y]){10})$/;
        if (!reg.test(v)) {
            return false;
        }

        /*
         * 该段验证逻辑存在问题，对于一些真实的统一社会信用代码验证不通过，先去掉
        //字符集数组
        var fin_array = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'T', 'U', 'W', 'X', 'Y'];
        //加权数组
        var i_array = [1, 3, 9, 27, 19, 26, 16, 17, 20, 29, 25, 13, 8, 24, 10, 30, 28];
        //结果数组
        var val_array = [];
        //相乘数组
        var ch_array = [];
        //Sigma
        var sigma = 0;

        for (var i = 0; i < 17; i++) {
            //转换成字符集的值
            val_array[i] = fin_array.indexOf(v.charAt(i));
            //生成加权结果
            ch_array[i] = val_array[i] * i_array[i];
            //求出Sigma
            sigma += ch_array[i];
        }
        //求出校验位
        var vali_index = 31 - sigma % 31;
        var vali = fin_array[vali_index == 31 ? 0 : vali_index];
        //查看校验码是否正确
        if (v.charAt(17) !== vali) {
            return false;
        }
        */

        return true;
    },
    idCard: function(v, args) {
        if (mini.isNull(v) || v === "")
            return true;

        function validateIdCard(idCard) {
            // 15位和18位身份证号码的正则表达式
            var regIdCard = /^(^[1-9]\d{7}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}$)|(^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])((\d{4})|\d{3}[Xx])$)$/;

            // 如果通过该验证，说明身份证格式正确，但准确性还需计算
            if (regIdCard.test(idCard)) {
                if (idCard.length == 18) {
                    var idCardWi = new Array(7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2); // 将前17位加权因子保存在数组里
                    var idCardY = new Array(1, 0, 10, 9, 8, 7, 6, 5, 4, 3, 2); // 这是除以11后，可能产生的11位余数、验证码，也保存成数组
                    var idCardWiSum = 0; // 用来保存前17位各自乖以加权因子后的总和
                    for (var i = 0; i < 17; i++) {
                        idCardWiSum += idCard.substring(i, i + 1) * idCardWi[i];
                    }

                    var idCardMod = idCardWiSum % 11; // 计算出校验码所在数组的位置
                    var idCardLast = idCard.substring(17); // 得到最后一位身份证号码

                    // 如果等于2，则说明校验码是10，身份证号码最后一位应该是X
                    if (idCardMod == 2) {
                        if (idCardLast == "X" || idCardLast == "x") {
                            return true;
                        } else {
                            return false;
                        }
                    } else {
                        // 用计算出的验证码与最后一位身份证号码匹配，如果一致，说明通过，否则是无效的身份证号码
                        if (idCardLast == idCardY[idCardMod]) {
                            return true;
                        } else {
                            return false;
                        }
                    }
                }
            } else {
                return false;
            }
        }

        return validateIdCard(v);
    },
    /* 投资项目统一代码
     * 规则为：
     * 代码长度24位;
     * 代码格式：年份代码-地区（部门）代码-行业代码-项目类型代码-流水号
     * 第1-4位：纯数字，值域1900-2099
     * 第5位："-"
     * 第6-11位：纯数字，大概区间从110000-820000
     * 第12位："-"
     * 第13-14位行业代码：2位数字组成，值域01-99
     * 第15位："-"
     * 第16-17位项目类型代码：2位数字组成，值域01-99
     * 第18位："-"
     * 第19-24位流水号：纯数字，值域000001-999999
     */
    projectCode: function(v, args) {
        if (mini.isNull(v) || v === ""){
            return true;
        }

        return (/^(19|20)\d{2}-\d{6}-\d{2}-\d{2}-\d{6}$/).test(v);
    }

});

/**
 * window组件扩展
 *
 */

mini.overwrite(mini.Window, {
    showRefreshButton: false,
    maskOnLoad: false,

    _initButtons: function() {
        this.buttons = [];

        var collapse = this.createButton({
            name: 'collapse',
            cls: 'mini-tools-collapse',
            visible: this.showCollapseButton
        });
        this.buttons.push(collapse);

        var min = this.createButton({
            name: 'min',
            cls: 'mini-tools-min',
            visible: this.showMinButton
        });
        this.buttons.push(min);

        var max = this.createButton({
            name: 'max',
            cls: 'mini-tools-max',
            visible: this.showMaxButton
        });
        this.buttons.push(max);
        // 添加刷新按钮
        var refresh = this.createButton({
            name: 'refresh',
            cls: 'mini-tools-refresh',
            visible: this.showRefreshButton
        });
        this.buttons.push(refresh);
        var close = this.createButton({
            name: 'close',
            cls: 'mini-tools-close',
            visible: this.showCloseButton
        });
        this.buttons.push(close);
    },
    _OnButtonClick: function(button, htmlEvent) {
        var e = mini.Window.superclass._OnButtonClick.call(this, button, htmlEvent);
        if (e.cancel == true) {
            return e;
        }

        if (e.name == 'max') {
            if (this.state == 'max') {
                this.restore();
            } else {
                this.max();
            }
        } else if (e.name == 'refresh') {
            this.refresh();
        } else if (e.name == 'close') {
            this.fire('close');
        }
        return e;
    },
    refresh: function() {
        this.reload();
        return this;
    },
    restore: function() {
        this.state = 'restore';
        this.show(this.x, this.y);

        var button = this.getButton('max');
        if (button) {
            button.cls = 'mini-tools-max';
            this._doTools();
        }

        this.fire('restore');
    },
    /**
     *
     * function setShowRefreshButton(showRefreshButton)
     * @member mini.Window
     * @param {Boolean} showRefreshButton
     *
     */
    setShowRefreshButton: function(showRefreshButton) {
        this.showRefreshButton = showRefreshButton;
        var btn = this.getButton('refresh');
        if (!btn) {
            return;
        }
        btn.visible = showRefreshButton;
        this._doTools();
    },
    /**
     *
     * function getShowRefreshButton()
     * @member mini.Window
     * @returns {Boolean}
     *
     */
    getShowRefreshButton: function() {
        return this.showRefreshButton;
    },

    doLayout: function() {
        if (!this.canLayout()) return;
        //        if (this.state == "max") {
        //            this._doShow();
        //        }

        if (this.state == 'max') {
            var vbox = this.getParentBox();
            this.el.style.left = '10px';
            this.el.style.top = '10px';
            mini.setSize(this.el, vbox.width - 20, vbox.height - 20);
        }

        mini.Window.superclass.doLayout.call(this);
        //this._doShadow();

        if (this.allowDrag) {
            mini.addClass(this.el, this._dragCls);
        }
        if (this.state == 'max') {
            this._resizeGridEl.style.display = 'none';
            mini.removeClass(this.el, this._dragCls);
        }

        //modal
        this._doModal();
    },

    _doTitle: function() {
        var title = this.title == '' ? '&nbsp' : this.title;
        this._titleEl.innerHTML = title;
        // 给panel标题添加title，解决由代办打开的dialog标题过长时无法显示全的问题
        this._titleEl.title = title;

        this._iconEl.style.display = this.iconCls || this.iconStyle ? 'inline' : 'none';
        this._iconEl.className = 'mini-panel-icon mini-icon mini-iconfont ' + this.iconCls;

        mini.setStyle(this._iconEl, this.iconStyle);
    },

    getExtraAttrs: function(el) {
        var attrs = {};

        mini._ParseString(el, attrs, ['onrestore', 'onclose']);
        mini._ParseBool(el, attrs, ['showRefreshButton']);
    }
});

mini.overwrite(mini.MessageBox, {
    /**
     * 显示提示框。别名为 {@link mini#showMessageBox}
     *
     *     @example
     *     mini.showMessageBox({
     *         title: "消息提示框",
     *         message: "你好， 这是一个消息提示框中的内容描述。",
     *         buttons: ["ok", "no", "cancel"],
     *         iconCls: "mini-messagebox-question",
     *         callback: function(action){
     *         }
     *     });
     *
     * @param {Object} options 提示框的设置选项
     * @param {Number/String} [options.width="auto"] 宽度。可以是一个数值或百分比，值为数值时，单位为像素
     * @param {Number/String} [options.height="auto"] 高度。可以是一个数值或百分比，值为数值时，单位为像素
     * @param {String} [options.customCls="diyclass"] 类名，整体消息框添加类名，可用于个性化样式
     * @param {Boolean} [options.showModal = true] 是否显示为模态消息框
     * @param {Number} [options.timeout = 0] 值大于 0 时，消息框将在 `timeout` 毫秒后自动关闭
     * @param {Number} [options.minWidth = 150] 最小宽度，单位为像素
     * @param {Number} [options.maxWidth = 800] 最大宽度，单位为像素
     * @param {Number} [options.minHeight = 50] 最小高度，单位为像素
     * @param {Number} [options.maxHeight = 350] 最大高度，单位为像素
     * @param {Boolean} [options.showHeader = true] 是否显示标题栏
     * @param {String} [options.title = ""] 标题
     * @param {String} [options.titleIcon = ""] 标题栏图标样式类
     * @param {String} [options.iconCls = ""] 消息内容左侧图标的样式类，如：
     *          `"mini-messagebox-info"`、`"mini-messagebox-warning"`、`"mini-messagebox-question"`、`"mini-messagebox-error"`、`"mini-messagebox-download"`、
     * @param {String} [options.iconStyle = ""] 标题栏样式
     * @param {String} [options.message = ""] 消息内容
     * @param {String/HTMLElement} [options.html = ""] HTML 源码形式的消息内容
     * @param {String} [options.spaceStyle = "margin-right:15px"]
     * @param {Boolean} [options.showCloseButton = true] 是不显示关闭按钮
     * @param {Array} [options.buttons = null] 按钮数组，可以是 DOM 节点或 `mini.MessageBox.buttonText.*` 即：`"ok"`、`"cancel"`、`"yes"`、`"no"` 等
     * @param {Number} [options.buttonWidth =]
     * @param {Function} [options.callback =]
     * @return {String} 消息框的唯一标识符
     * @member mini.MessageBox
     */
    show: function(options) {
        options = mini.copyTo(
            {
                width: '360',
                height: '226',
                customCls: '',
                showModal: true,
                timeout: 0,
                minWidth: 150,
                maxWidth: 800,
                minHeight: 50,
                maxHeight: 350,
                showHeader: true,
                title: '',
                titleIcon: '',
                iconCls: '',
                iconStyle: '',
                message: '',
                html: '',
                spaceStyle: '',
                showCloseButton: true,
                buttons: null,
                buttonWidth: null,
                callback: null,
                // 是否显示"不再提示"选项
                // NOTE: "不再提示"的逻辑通过clickNoTipCheck来实现，而不是放在组件内部，因为与具体业务需求耦合
                showNoTipCheck: false,
                // 点击"不再提示"回调
                clickNoTipCheck: false
            },
            options
        );
        options.message = String(options.message);
        var callback = options.callback;

        var control = new mini.Window();
        // 添加自定义 class 样式
        if (options.customCls) {
            control.addCls(options.customCls);
        }

        control.addCls('mini-messagebox');
        control.setBodyStyle('overflow:hidden');
        control.setShowModal(options.showModal);
        control.setTitle(options.title || '');
        control.setIconCls(options.titleIcon);
        control.setShowHeader(options.showHeader);

        control.setShowCloseButton(options.showCloseButton);

        var id1 = control.uid + '$table',
            id2 = control.uid + '$content';

        // var icon = '<div class="' + options.iconCls + '" style="' + options.iconStyle + '"></div>';
        // var s = '<table class="mini-messagebox-table" id="' + id1 + '" style="" cellspacing="0" cellpadding="0"><tr><td>'
        //         + icon + '</td><td id="' + id2 + '" class="mini-messagebox-content-text">'
        //         + (options.message || "") + '</td></tr></table>';

        //var s = "";
        //control.setShowHeader(false);

        // 重写content中的dom结构
        var s = '<i class="mini-messagebox-icon mini-iconfont ' + options.iconCls + '" style="' + options.iconStyle + '"></i>' + '<p class="mini-messagebox-msg">' + (options.message || '') + '</p>';
        var ws = '<div class="mini-messagebox-content"></div>' + '<div class="mini-messagebox-buttons"></div>';
        control._bodyEl.innerHTML = ws;
        var contentEl = control._bodyEl.firstChild;
        if (options.html) {
            if (typeof options.html == 'string') {
                contentEl.innerHTML = options.html;
            } else if (mini.isElement(options.html)) {
                contentEl.appendChild(options.html);
            }
        } else {
            contentEl.innerHTML = s;

            // 记录下内容元素
            control._content = contentEl.lastChild;
        }
        // 不再提醒
        if (options.showNoTipCheck) {
            var foot = control._bodyEl.lastChild;
            foot.innerHTML = '<label class="mini-messagebox-checkbox"><input type="checkbox">不再提示</label>';

            mini.on(foot.firstChild, 'click', function() {
                if (options.clickNoTipCheck) {
                    var checked = this.firstChild.checked;

                    options.clickNoTipCheck.apply(this, [checked]);
                }
            });
        }

        control._Buttons = [];

        var buttonsEl = control._bodyEl.lastChild;
        if (options.buttons && options.buttons.length > 0) {
            for (var i = 0, l = options.buttons.length; i < l; i++) {
                var button = options.buttons[i];
                var text = mini.MessageBox.buttonText[button];
                if (!text) text = button;

                var btn = new mini.Button();
                btn.setText(text);
                btn.setWidth(options.buttonWidth);
                btn.render(buttonsEl);
                btn.action = button;
                btn.on('click', function(e) {
                    var button = e.sender;
                    if (callback) if (callback(button.action) === false) return;
                    mini.MessageBox.hide(control);
                });

                if (i != l - 1) {
                    btn.setStyle(options.spaceStyle);
                }

                // 给button设置样式
                btn.setCls('mini-messagebox-button');
                // ok的button特殊处理
                if (button == 'ok') {
                    btn.setCls('ok');
                    btn.setCls('mini-btn-primary');
                }

                control._Buttons.push(btn);
            }
        } else {
            buttonsEl.style.display = 'none';
        }

        control.setMinWidth(options.minWidth);
        control.setMinHeight(options.minHeight);
        control.setMaxWidth(options.maxWidth);
        control.setMaxHeight(options.maxHeight);
        control.setWidth(options.width);
        control.setHeight(options.height);
        control.show(options.x, options.y, {
            animType: options.animType
        });

        // 调整内容位置以居中
        // if (control._content) {
        //     var height = control._content.clientHeight;
        //     control._content.style.marginTop = (control._contentEl.firstChild.clientHeight - height) / 2 + 'px';
        // }

        var width = control.getWidth();
        control.setWidth(width + 'px');

        // var height = control.getHeight();
        // control.setHeight(height + 'px');

        // 计算高度
        var contentHeight = $(contentEl).outerHeight(true);

        // prettier-ignore
        var height = contentHeight ? 
            contentHeight 
                 + ($(control._headerEl).is(':visible') ? $(control._headerEl).outerHeight(true) : 0) 
                 + ($(buttonsEl).is(':visible') ? $(buttonsEl).outerHeight(true) : 0 )
            : control.getHeight();

        control.setHeight(height + 'px');

        var tb = document.getElementById(id1);
        if (tb) {
            tb.style.width = '100%';
        }
        var td = document.getElementById(id2);
        if (td) {
            td.style.width = '100%';
        }
        //}

        // var firstButton = control._Buttons[0];
        // if (firstButton) {
        //     firstButton.focus();
        // } else {
        //     control.focus();
        // }

        if (mini.MessageBox.autoFocus) {
            var firstButton = control._Buttons[0];
            if (firstButton) {
                //alert(1);
                firstButton.focus();
            } else {
                //alert(2);
                control.focus();
            }
        }

        control.on('beforebuttonclick', function(e) {
            if (callback) callback('close');
            e.cancel = true;
            mini.MessageBox.hide(control);
        });

        mini.on(control.el, 'keydown', function(e) {
            if (e.keyCode == 27) {
                if (callback) callback('close');
                mini.MessageBox.hide(control);
            }
        });

        //

        if (options.timeout) {
            setTimeout(function() {
                mini.MessageBox.hide(control.uid);
            }, options.timeout);
        }

        return control.uid;
    },

    /**
     * @callback btnCallback
     * @param {string} action 用户点击了`ok`还是`cancel`
     * @param {string} value 输入框中的值
     */

    /**
     * 文本输入提示框。别名为 {@link mini#prompt}
     * @param {String} [message=mini.MessageBox.promptMessage] 消息内容
     * @param {String} [title=mini.MessageBox.promptTitle] 标题
     * @param {btnCallback} callback - 处理按钮点击的回调函数
     * @param {Boolean} [multi=false] 是否允许输入多行（使用 textarea 作为输入框）
     * @return {String} 消息框的唯一标识符
     * @member mini.MessageBox
     */
    prompt: function(message, title, callback, multi) {
        var id = 'prompt$' + new Date().getTime(),
            s = message || mini.MessageBox.promptMessage;
        if (multi) {
            s = '<label class="mini-prompt-label">' + s + '</label><textarea id="' + id + '" class="mini-prompt-input"></textarea>';
        } else {
            s = '<label class="mini-prompt-label">' + s + '</label><input type="text" id="' + id + '" class="mini-prompt-input">';
        }
        var uid = mini.MessageBox.show({
            title: title || mini.MessageBox.promptTitle,
            buttons: ['ok', 'cancel'],
            width: 250,
            html: '<div class="mini-messagebox-prompt" >' + s + '</div>',
            callback: function(action) {
                var input = document.getElementById(id);
                if (callback) {
                    return callback(action, input.value);
                }
            }
        });
        var input = document.getElementById(id);
        input.focus();
        return uid;
    },
    confirm: function(message, title, callback) {
        return mini.MessageBox.show({
            minWidth: 250,
            title: title || mini.MessageBox.confirmTitle,
            buttons: ['cancel', 'ok'],
            message: message,
            iconCls: 'mini-messagebox-question',
            callback: callback
        });
    }
});

/**
 * @method prompt
 * @member mini
 * @alias mini.MessageBox#prompt
 */
mini.prompt = mini.MessageBox.prompt;

/**
 * @method showMessageBox
 * @member mini
 * @alias mini.MessageBox#show
 */
mini.showMessageBox = mini.MessageBox.show;
mini.confirm = mini.MessageBox.confirm;

// 支持rem
if (mini.supportRem) {
    // mini.overwrite(mini.MessageBox, {
    //     defaultOptions: {
    //         width: '420rem',
    //         height: '226rem'
    //     }
    // });
}

if (mini.supportRem) {
    // 重写set方法 实现 message的 set rem 大小
    mini.overwrite(mini.Window, {
        setWidth: function(value) {
            if (parseInt(value, 10) == value) {
                value = parseFloat(value / 100 / mini.getFontSizeRatio()) + 'rem';
            }
            this.width = value;
            this.el.style.width = value;
            this._sizeChanged();
        },
        setHeight: function(value) {
            if (parseInt(value, 10) == value) {
                value = parseFloat(value / 100 / mini.getFontSizeRatio()) + 'rem';
            }
            this.height = value;
            this.el.style.height = value;
            this._sizeChanged();
        }
    });
}

mini.CatalogImport = function () {
    mini.CatalogImport.superclass.constructor.call(this);
};
mini.extend(mini.CatalogImport, mini.Control, {
    uiCls: "mini-catalogimport",
    url: "",
    pickerText: '导入文件',

    _create: function () {
        this.el = document.createElement("div");

        this.uploader = new mini.WebUploader();

        this.uploader.set({
            uploadUrl: this.url,
            pickerText: this.pickerText,
            fileNumLimit: 1,
            limitType: 'xls,xlsx,xlsm',
            showDefaultUI: false,
            auto: false,
            renderTo: this.el
        });

        this.uploader.on('beforefilequeued', this._onBeforeFileQueued, this);
        this.uploader.on('filesqueued', this._onFilesQueued, this);
        this.uploader.on('uploadbeforesend', this._onUploadBeforeSend, this);
        this.uploader.on('uploadprogress', this._onUploadProgress, this);
        this.uploader.on('uploadsuccess', this._onUploadSuccess, this);

        this.uploader._uploadBtn.hide();

        // this.maskEl = document.createElement("div");
        // this.maskEl.className = 'mini-catalogimport-mask';
        // this.maskEl.innerHTML = '<div class="mini-catalogimport-mask-content"></div>';
        // this.maskContent = this.maskEl.firstChild;

        // document.body.appendChild(this.maskEl);

        // this.detailEl = document.createElement("div");
        // this.detailEl.className = 'mini-catalogimport-detail';
        // this.detailEl.innerHTML = '<div class="mini-catalogimport-detail-content"></div><i class="catalogimport-detail-close">X</i>';
        // this.detailContent = this.detailEl.firstChild;

        // document.body.appendChild(this.detailEl);

        this.fileList = document.createElement("div");
        this.fileList.className = 'mini-catalogimport-filelist';

        this.el.appendChild(this.fileList);

        this._bindEvent();
    },

    _bindEvent: function () {
        var self = this;
        // jQuery(this.maskEl).on('click', '.catalogimport-showdetail', function () {
        //     self.showDetailStatus();
        //     return false;
        // }).on('click', '.catalogimport-continue', function () {
        //     self.isContinueImport = true;
        //     self.uploader._uploader.upload();
        // }).on('click', '.catalogimport-restart', function () {
        //     self.uploader._uploader.upload();
        // }).on('click', function () {
        //     if (self.isImportFinished && !self.isDetailShow) {
        //         self.maskEl.style.display = 'none';
        //     }
        // });

        // jQuery(this.detailEl).on('click', '.catalogimport-detail-close', function () {
        //     self.hideDetailStatus();
        // }).on('click', '.catalogimport-status-toggle', function () {
        //     var $this = $(this),
        //         $parent = $this.parent();

        //     if ($parent.hasClass('opened')) {
        //         $this.text('展开详情');
        //         $parent.removeClass('opened');
        //     } else {
        //         $this.text('收起详情');
        //         $parent.addClass('opened');
        //     }
        // });
        
        jQuery(this.fileList).on('click', '.catalogimport-delete', function () {
            var $li = $(this).closest('.mini-catalogimport-item');

            $li.remove();

            self.uploader.clearFile();

        }).on('click', '.catalogimport-export', function(){
            self.fire('exportresult', {
                attachGuid: self._curAttachGuid
            });
        });
    },

    _onFilesQueued: function (event) {
        var files = event.files,
            file = files[0],
            self = this;
        if (!file) {
            return;
        }

        var html = this._generateFileList({
            id: file.id,
            name: file.name,
            size: file.size
        });

        this.isImportFinished = false;

        // this.maskContent.innerHTML = html;
        // this.maskEl.style.display = 'block';

        jQuery(html).appendTo(this.fileList);

        this.uploader._uploader.md5File(file)
            .progress(function (percentage) {

            }).then(function (md5) {
                self._curFileMD5 = md5;
                var data = {
                    fileMD5: md5,
                    fileName: file.name,
                    fileSize: file.size
                };

                data[self.uploader.id + '_action'] = "queryFileStatus";

                if (self.uploader.getCommonData) {
                    data.commonDto = mini.encode(self.uploader.getCommonData());
                }

                self._onPostFileMd5(data);

                // 与服务端验证
                $.ajax(self.url, {
                    dataType: 'json',
                    data: data,
                    type: 'post',
                    success: function (response) {
                        if (mini.getSecondRequestData) {
                            response = mini.getSecondRequestData(response);
                        }
                        self._onQueryFileStatus(response);
                    }
                });
            });
    },

    _onPostFileMd5: function (data) {
        this.fire('postfilemd5', {
            data: data
        });
    },

    _curFileMD5: '',
    _curAttachGuid: '',
    _onQueryFileStatus: function (data) {
        if (data.msg) {
            mini.alert(data.msg);
        }

        this.setDetailStatus(data.detail);
        this._curAttachGuid = data.attachGuid;
        this._oldAttachGuid = data.attachGuidOld;

        if (data.end) {
            this._onFinished(data.status);
            return;
        }

        if (data.pollingFrequency) {
            this._pollingFrequency = data.pollingFrequency;
        }

        if (data.action == "importStatus") {
            this.pollingStatus(data);
        } else if (data.action == "upload") {
            this.uploader._uploader.upload();
        } else {
            // jQuery(this.maskContent).find('.mini-catalogimport-action').removeClass('hidden');
            jQuery(this.fileList).find('.mini-catalogimport-action').removeClass('hidden');
        }

    },

    _onUploadBeforeSend: function (event) {
        if (this.isContinueImport) {
            event.data.attachGuid = this._curAttachGuid;
        }
        event.data.fileMD5 = this._curFileMD5;
    },

    _onUploadProgress: function (event) {
        var file = event.file,
            percentage = event.percentage,
            li = mini.byId(file.id),
            $progressbar = jQuery('.mini-catalogimport-progressbar', li),
            $progresstext = jQuery('.progress-text', $progressbar),
            $progressbody = jQuery('.progress-body', $progressbar),
            width = Math.round(percentage * 100) + '%';

        $progresstext.text(width);
        $progressbody.width(width);
    },

    _generateFileList: function (options) {

        var list = [];
        list.push('<div class="mini-catalogimport-item" id="' + options.id + '">');
        list.push('<span class="mini-catalogimport-info">' + options.name + '</span>');
        list.push('<span class="mini-catalogimport-size">(' + this._getSize(options.size) + ')</span>');
        list.push('<span class="mini-catalogimport-action hidden"><a href="javascript:void(0)" class="catalogimport-delete">删除</a></span>');
        list.push('<span class="mini-catalogimport-status">正在上传</span>')
        list.push('<span class="mini-catalogimport-progressbar"><span class="progress-text">0%</span><div class="progress-body"></div></span>');

        // list.push('<span class="mini-catalogimport-action hidden"><a href="javascript:void(0)" class="catalogimport-continue" title="上次导入中断，修改完后继续导入">继续导入</a><a href="javascript:void(0)" class="catalogimport-restart" title="重新尝试导入这个文件">重新导入</a><a href="javascript:void(0)" class="catalogimport-showdetail hidden">查看详情</a></span>');
        list.push('</div>');

        return list.join('');
    },

    // _generateImportStatus: function (options) {
    //     var list = [];
    //     list.push('<div class="mini-catalogimport-item">');
    //     list.push('<span class="mini-catalogimport-info">' + (options.status || '') + '</span>');
    //     if (options.handlepercent >= 0) {
    //         list.push('<span class="mini-catalogimport-progressbar"><span class="progress-text">' + options.handlepercent + '%</span><div class="progress-body" style="width:' + options.handlepercent + '%;"></div></span>');
    //     }

    //     if (options.end) {
    //         list.push('<span class="mini-catalogimport-action"><a href="javascript:void(0)" class="catalogimport-showdetail">查看详情</a></span>');
    //     }

    //     list.push('</div>');

    //     return list.join('');

    // },

    _onPollingStatus: function(options) {

        if(!options.status) {
            return;
        }
        var li = mini.byId(this._currentFileId),
            $status = jQuery('.mini-catalogimport-status', li),
            $progressbar = jQuery('.mini-catalogimport-progressbar', li),
            $progresstext = jQuery('.progress-text', $progressbar),
            $progressbody = jQuery('.progress-body', $progressbar),
            
            width;

        $status.text(options.status);

        if (options.handlepercent >= 0) {
            width = options.handlepercent + '%';

            $progressbar.removeClass('hidden');
            $progresstext.text(width);
            $progressbody.width(width);
        } else {
            $progressbar.addClass('hidden');
        }
    },

    _generateStatuslist: function (options) {
        var i, len, arr,
            isCheckEnd = true,
            isSaveEnd = true;
        var list = ['<div class="catalogimport-status-item">'];
        list.push('<h3 class="catalogimport-status-title">' + options.sheetName + '</h3>');
        list.push('<h4 class="catalogimport-status-type">校验结果：</h4>');
        list.push('<p class="catalogimport-status-count">总计：' + options.checkCount + '条，成功：' + options.checkSuccessCount + '，失败：' + options.checkErrorCount + '条。');
        if ((arr = options.checkMsg) && (len = arr.length)) {
            list.push('<a href="javascript:void(0);" class="catalogimport-status-toggle">展开详情</a></p>');
            list.push('<div class="catalogimport-status-detail">');
            for (i = 0; i < len; i++) {
                list.push('<p>' + arr[i] + '</p>');
            }
            list.push('</div>');
        } else {
            isCheckEnd = false;
        }

        if (options.saveCount) {
            if (!isCheckEnd) {
                list.push('</p>');
                isCheckEnd = true;
            }
            list.push('<h4 class="catalogimport-status-type">导入结果：</h4>');
            list.push('<p class="catalogimport-status-count">总计：' + options.saveCount + '条，成功：' + options.saveSuccessCount + '，失败：' + options.saveErrorCount + '条。');

            if ((arr = options.saveMsg) && (len = arr.length)) {
                list.push('<a href="javascript:void(0);" class="catalogimport-status-toggle">展开详情</a></p>');
                list.push('<div class="catalogimport-status-detail">');
                for (i = 0; i < len; i++) {
                    list.push('<p>' + arr[i] + '</p>');
                }
                list.push('</div>');
            } else {
                isSaveEnd = false;
            }
        }

        if ((arr = options.taskMsg) && (len = arr.length)) {
            list.push('<a href="javascript:void(0);" class="catalogimport-status-toggle">展开详情</a></p>');
            list.push('<div class="catalogimport-status-detail">');
            for (i = 0; i < len; i++) {
                list.push('<p>' + arr[i] + '</p>');
            }
            list.push('</div>');
        } else if (!isCheckEnd || !isSaveEnd) {
            list.push('</p>');
        }

        list.push('</div>');

        return list.join('');
    },

    _getSize: function (size) {
        var K = 1024,
            M = 1048576;
        size = parseInt(size);

        if (size > M) {
            return (size / M).toFixed(2) + "M";
        } else {
            return (size / K).toFixed(2) + "K";
        }
    },

    _pollingFrequency: 1000,
    _oldAttachGuid: '',
    _onUploadSuccess: function (event) {
        var ret = event.ret,
            file = event.file;

        if (mini.getSecondRequestData) {
            ret = mini.getSecondRequestData(ret);
        }

        ret = ret.data || ret;
        ret = ret.extraDatas || ret;

        this._pollingFrequency = ret.pollingFrequency;
        if (ret.action == "importStatus") {
            this._curAttachGuid = ret.attachGuid;
            this._oldAttachGuid = ret.attachGuidOld;
            ret.fileId = file.id;
            this.pollingStatus(ret);
            return;
        }

        var self = this;
        mini.alert('数据导入失败，请重试！', '', function () {
            // self._onFinished(ret.status);

            self._onFinished(ret);

            // self.maskEl.style.display = 'none';
        });


    },

    // _onFinished: function (msg) {
    //     msg = msg || "导入已完成";
    //     this.isImportFinished = true;
    //     this.maskContent.innerHTML = msg + '<a href="javascript:void(0);" class="catalogimport-showdetail">查看详情</a>';

    //     if (this._events["importfinished"]) {
    //         this.fire("importfinished");
    //     }

    //     this.uploader.clearFile();
    // },

    _onFinished: function (data) {
        var msg = data.status || "导入已完成",
            isSuccess = data.success;

        this.isImportFinished = true;

        var li = mini.byId(this._currentFileId),
            $status = jQuery('.mini-catalogimport-status', li),
            $progressbar = jQuery('.mini-catalogimport-progressbar', li),
            $action = jQuery('.mini-catalogimport-action', li);

        $status.text(msg);
        $progressbar.addClass('hidden');

        if(isSuccess) {
            setTimeout(function(){
                $status.addClass('hidden');
            }, 1000);
        } else {
            $status.addClass('error');
            $status.append('<a class="catalogimport-export">校验结果导出</a>')
            $action.removeClass('hidden');
        }
        
        if (this._events["importfinished"]) {
            this.fire("importfinished", data);
        }

    },

    _onBeforeFileQueued: function (event) {
        if (this._events["beforefilequeued"]) {
            this.fire("beforefilequeued", event);
        }
    },

    _currentFileId: '',
    pollingStatus: function (options) {
        // 由于一次导入过程只会存在一个文件，所以可以用一个变量来保存当前正在上传的文件id
        if(options.fileId) {
            this._currentFileId = options.fileId;
        }
        // this.maskContent.innerHTML = this._generateImportStatus(options);
        this._onPollingStatus(options);

        var self = this,
            data = {
                fileMD5: this._curFileMD5,
                attachGuid: this._curAttachGuid,
                attachGuidOld: this._oldAttachGuid
            };
        data[this.uploader.id + "_action"] = "importStatus";

        if (this.uploader.getCommonData) {
            data.commonDto = mini.encode(this.uploader.getCommonData());
        }

        jQuery.ajax({
            url: this.url,
            data: data,
            type: 'POST',
            dataType: 'json'
        }).done(function (data) {
            if (mini.getSecondRequestData) {
                data = mini.getSecondRequestData(data);
            }
            // 有提示信息，则alert
            if (data.msg) {
                mini.alert(data.msg);
            }

            if (data.end) {
                // self._onFinished(data.status);
                self._onFinished(data);
            } else {
                setTimeout(jQuery.proxy(self.pollingStatus, self, data), self._pollingFrequency);
            }

            self.setDetailStatus(data.detail);

        });
    },

    setDetailStatus: function (data) {
        this.detailStatus = data;

        if (this.isDetailShow) {
            this.renderDetailStatus();
        }
    },

    renderDetailStatus: function () {
        var detail = this.detailStatus,
            html = [],
            i = 0,
            l;

        if (detail) {
            for (l = detail.length; i < l; i++) {
                html.push(this._generateStatuslist(detail[i]));
            }

        }

        this.detailContent.innerHTML = html.join('');

    },

    showDetailStatus: function () {
        this.renderDetailStatus();

        this.detailEl.style.display = 'block';

        this.isDetailShow = true;
    },

    hideDetailStatus: function () {
        this.detailEl.style.display = 'none';

        this.isDetailShow = false;
    },

    setUrl: function (url) {
        this.url = url;

        this.uploader && this.uploader.setUploadUrl(url);
    },

    getUrl: function () {
        return this.url;
    },

    setPickerText: function (pickerText) {

    },

    setEnabled: function(enabled) {
        mini.CatalogImport.superclass.setEnabled.call(this, enabled);
        this.uploader && this.uploader.setEnabled(enabled);
    },

    getAttrs: function (el) {
        var attrs = mini.CatalogImport.superclass.getAttrs.call(this, el);
        mini._ParseString(el, attrs, ["url", "pickerText", "onbeforefilequeued", "onpostfilemd5", "onimportfinished", "onexportresult"]);
        return attrs;
    }

});

mini.regClass(mini.CatalogImport, 'catalogimport');
/* =========================================================
 * bootstrap-colorpicker.js 
 * http://www.eyecon.ro/bootstrap-colorpicker
 * =========================================================
 * Copyright 2012 Stefan Petre
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================= */

! function($) {

    // Color object

    var Color = function(val) {
        this.value = {
            h: 1,
            s: 1,
            b: 1,
            a: 1
        };
        this.setColor(val);
    };

    Color.prototype = {
        constructor: Color,

        //parse a string to HSB
        setColor: function(val) {
            val = val.toLowerCase();
            var that = this;
            $.each(CPGlobal.stringParsers, function(i, parser) {
                var match = parser.re.exec(val),
                    values = match && parser.parse(match),
                    space = parser.space || 'rgba';
                if (values) {
                    if (space === 'hsla') {
                        that.value = CPGlobal.RGBtoHSB.apply(null, CPGlobal.HSLtoRGB.apply(null, values));
                    } else {
                        that.value = CPGlobal.RGBtoHSB.apply(null, values);
                    }
                    return false;
                }
            });
        },

        setHue: function(h) {
            this.value.h = 1 - h;
        },

        setSaturation: function(s) {
            this.value.s = s;
        },

        setLightness: function(b) {
            this.value.b = 1 - b;
        },

        setAlpha: function(a) {
            this.value.a = parseInt((1 - a) * 100, 10) / 100;
        },

        // HSBtoRGB from RaphaelJS
        // https://github.com/DmitryBaranovskiy/raphael/
        toRGB: function(h, s, b, a) {
            if (!h) {
                h = this.value.h;
                s = this.value.s;
                b = this.value.b;
            }
            h *= 360;
            var R, G, B, X, C;
            h = (h % 360) / 60;
            C = b * s;
            X = C * (1 - Math.abs(h % 2 - 1));
            R = G = B = b - C;

            h = ~~h;
            R += [C, X, 0, 0, X, C][h];
            G += [X, C, C, X, 0, 0][h];
            B += [0, 0, X, C, C, X][h];
            return {
                r: Math.round(R * 255),
                g: Math.round(G * 255),
                b: Math.round(B * 255),
                a: a || this.value.a
            };
        },

        toHex: function(h, s, b, a) {
            var rgb = this.toRGB(h, s, b, a);
            return '#' + ((1 << 24) | (parseInt(rgb.r) << 16) | (parseInt(rgb.g) << 8) | parseInt(rgb.b)).toString(16).substr(1);
        },

        toHSL: function(h, s, b, a) {
            if (!h) {
                h = this.value.h;
                s = this.value.s;
                b = this.value.b;
            }
            var H = h,
                L = (2 - s) * b,
                S = s * b;
            if (L > 0 && L <= 1) {
                S /= L;
            } else {
                S /= 2 - L;
            }
            L /= 2;
            if (S > 1) {
                S = 1;
            }
            return {
                h: H,
                s: S,
                l: L,
                a: a || this.value.a
            };
        }
    };

    // Picker object

    var Colorpicker = function(element, options) {
        this.element = $(element);
        var format = options.format || this.element.data('color-format') || 'hex';
        this.format = CPGlobal.translateFormats[format];
        this.isInput = this.element.is('input');
        this.component = this.element.is('.color') ? this.element.find('.add-on') : false;

        this.picker = $(CPGlobal.template)
            .appendTo('body')
            .on('mousedown', $.proxy(this.mousedown, this));

        if (this.isInput) {
            this.element.on({
                'focus': $.proxy(this.show, this),
                'keyup': $.proxy(this.update, this)
            });
        } else if (this.component) {
            this.component.on({
                'click': $.proxy(this.show, this)
            });
        } else {
            this.element.on({
                'click': $.proxy(this.show, this)
            });
        }
        if (format === 'rgba' || format === 'hsla') {
            this.picker.addClass('alpha');
            this.alpha = this.picker.find('.colorpicker-alpha')[0].style;
        }

        if (this.component) {
            this.picker.find('.colorpicker-color').hide();
            this.preview = this.element.find('i')[0].style;
        } else {
            this.preview = this.picker.find('div:last')[0].style;
        }

        this.base = this.picker.find('div:first')[0].style;
        this.update();
    };

    Colorpicker.prototype = {
        constructor: Colorpicker,

        show: function(e) {
            this.picker.show();
            this.height = this.component ? this.component.outerHeight() : this.element.outerHeight();
            this.place();
            $(window).on('resize', $.proxy(this.place, this));
            if (!this.isInput) {
                if (e) {
                    e.stopPropagation();
                    e.preventDefault();
                }
            }
            $(document).on({
                'mousedown': $.proxy(this.hide, this)
            });
            this.element.trigger({
                type: 'show',
                color: this.color
            });
        },

        update: function() {
            this.color = new Color(this.isInput ? this.element.prop('value') : this.element.data('color'));
            this.picker.find('i')
                .eq(0).css({ left: this.color.value.s * 100, top: 100 - this.color.value.b * 100 }).end()
                .eq(1).css('top', 100 * (1 - this.color.value.h)).end()
                .eq(2).css('top', 100 * (1 - this.color.value.a));
            this.previewColor();
        },

        setValue: function(newColor) {
            this.color = new Color(newColor);
            this.picker.find('i')
                .eq(0).css({ left: this.color.value.s * 100, top: 100 - this.color.value.b * 100 }).end()
                .eq(1).css('top', 100 * (1 - this.color.value.h)).end()
                .eq(2).css('top', 100 * (1 - this.color.value.a));
            this.previewColor();
            this.element.trigger({
                type: 'changeColor',
                color: this.color
            });
        },

        hide: function() {
            this.picker.hide();
            $(window).off('resize', this.place);
            if (!this.isInput) {
                $(document).off({
                    'mousedown': this.hide
                });
                if (this.component) {
                    this.element.find('input').prop('value', this.format.call(this));
                }
                this.element.data('color', this.format.call(this));
            } else {
                this.element.prop('value', this.format.call(this));
            }
            this.element.trigger({
                type: 'hide',
                color: this.color
            });
        },

        place: function() {
            var offset = this.component ? this.component.offset() : this.element.offset();
            this.picker.css({
                top: offset.top + this.height,
                left: offset.left
            });
        },

        //preview color change
        previewColor: function() {
            try {
                this.preview.backgroundColor = this.format.call(this);
            } catch (e) {
                this.preview.backgroundColor = this.color.toHex();
            }
            //set the color for brightness/saturation slider
            this.base.backgroundColor = this.color.toHex(this.color.value.h, 1, 1, 1);
            //set te color for alpha slider
            if (this.alpha) {
                this.alpha.backgroundColor = this.color.toHex();
            }
        },

        pointer: null,

        slider: null,

        mousedown: function(e) {
            e.stopPropagation();
            e.preventDefault();

            var target = $(e.target);

            //detect the slider and set the limits and callbacks
            var zone = target.closest('div');
            if (!zone.is('.colorpicker')) {
                if (zone.is('.colorpicker-saturation')) {
                    this.slider = $.extend({}, CPGlobal.sliders.saturation);
                } else if (zone.is('.colorpicker-hue')) {
                    this.slider = $.extend({}, CPGlobal.sliders.hue);
                } else if (zone.is('.colorpicker-alpha')) {
                    this.slider = $.extend({}, CPGlobal.sliders.alpha);
                } else {
                    return false;
                }
                var offset = zone.offset();
                //reference to knob's style
                this.slider.knob = zone.find('i')[0].style;
                this.slider.left = e.pageX - offset.left;
                this.slider.top = e.pageY - offset.top;
                this.pointer = {
                    left: e.pageX,
                    top: e.pageY
                };
                //trigger mousemove to move the knob to the current position
                $(document).on({
                    mousemove: $.proxy(this.mousemove, this),
                    mouseup: $.proxy(this.mouseup, this)
                }).trigger('mousemove');
            }
            return false;
        },

        mousemove: function(e) {
            e.stopPropagation();
            e.preventDefault();
            var left = Math.max(
                0,
                Math.min(
                    this.slider.maxLeft,
                    this.slider.left + ((e.pageX || this.pointer.left) - this.pointer.left)
                )
            );
            var top = Math.max(
                0,
                Math.min(
                    this.slider.maxTop,
                    this.slider.top + ((e.pageY || this.pointer.top) - this.pointer.top)
                )
            );
            this.slider.knob.left = left + 'px';
            this.slider.knob.top = top + 'px';
            if (this.slider.callLeft) {
                this.color[this.slider.callLeft].call(this.color, left / 100);
            }
            if (this.slider.callTop) {
                this.color[this.slider.callTop].call(this.color, top / 100);
            }
            this.previewColor();
            this.element.trigger({
                type: 'changeColor',
                color: this.color
            });
            return false;
        },

        mouseup: function(e) {
            e.stopPropagation();
            e.preventDefault();
            $(document).off({
                mousemove: this.mousemove,
                mouseup: this.mouseup
            });
            return false;
        }
    }

    $.fn.colorpicker = function(option, val) {
        return this.each(function() {
            var $this = $(this),
                data = $this.data('colorpicker'),
                options = typeof option === 'object' && option;
            if (!data) {
                $this.data('colorpicker', (data = new Colorpicker(this, $.extend({}, $.fn.colorpicker.defaults, options))));
            }
            if (typeof option === 'string') data[option](val);
        });
    };

    $.fn.colorpicker.defaults = {};

    $.fn.colorpicker.Constructor = Colorpicker;

    var CPGlobal = {

        // translate a format from Color object to a string
        translateFormats: {
            'rgb': function() {
                var rgb = this.color.toRGB();
                return 'rgb(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ')';
            },

            'rgba': function() {
                var rgb = this.color.toRGB();
                return 'rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ',' + rgb.a + ')';
            },

            'hsl': function() {
                var hsl = this.color.toHSL();
                return 'hsl(' + Math.round(hsl.h * 360) + ',' + Math.round(hsl.s * 100) + '%,' + Math.round(hsl.l * 100) + '%)';
            },

            'hsla': function() {
                var hsl = this.color.toHSL();
                return 'hsla(' + Math.round(hsl.h * 360) + ',' + Math.round(hsl.s * 100) + '%,' + Math.round(hsl.l * 100) + '%,' + hsl.a + ')';
            },

            'hex': function() {
                return this.color.toHex();
            }
        },

        sliders: {
            saturation: {
                maxLeft: 100,
                maxTop: 100,
                callLeft: 'setSaturation',
                callTop: 'setLightness'
            },

            hue: {
                maxLeft: 0,
                maxTop: 100,
                callLeft: false,
                callTop: 'setHue'
            },

            alpha: {
                maxLeft: 0,
                maxTop: 100,
                callLeft: false,
                callTop: 'setAlpha'
            }
        },

        // HSBtoRGB from RaphaelJS
        // https://github.com/DmitryBaranovskiy/raphael/
        RGBtoHSB: function(r, g, b, a) {
            r /= 255;
            g /= 255;
            b /= 255;

            var H, S, V, C;
            V = Math.max(r, g, b);
            C = V - Math.min(r, g, b);
            H = (C === 0 ? null :
                V == r ? (g - b) / C :
                V == g ? (b - r) / C + 2 :
                (r - g) / C + 4
            );
            H = ((H + 360) % 6) * 60 / 360;
            S = C === 0 ? 0 : C / V;
            return { h: H || 1, s: S, b: V, a: a || 1 };
        },

        HueToRGB: function(p, q, h) {
            if (h < 0)
                h += 1;
            else if (h > 1)
                h -= 1;

            if ((h * 6) < 1)
                return p + (q - p) * h * 6;
            else if ((h * 2) < 1)
                return q;
            else if ((h * 3) < 2)
                return p + (q - p) * ((2 / 3) - h) * 6;
            else
                return p;
        },

        HSLtoRGB: function(h, s, l, a) {
            if (s < 0) {
                s = 0;
            }
            var q;
            if (l <= 0.5) {
                q = l * (1 + s);
            } else {
                q = l + s - (l * s);
            }

            var p = 2 * l - q;

            var tr = h + (1 / 3);
            var tg = h;
            var tb = h - (1 / 3);

            var r = Math.round(CPGlobal.HueToRGB(p, q, tr) * 255);
            var g = Math.round(CPGlobal.HueToRGB(p, q, tg) * 255);
            var b = Math.round(CPGlobal.HueToRGB(p, q, tb) * 255);
            return [r, g, b, a || 1];
        },

        // a set of RE's that can match strings and generate color tuples.
        // from John Resig color plugin
        // https://github.com/jquery/jquery-color/
        stringParsers: [{
            re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,
            parse: function(execResult) {
                return [
                    execResult[1],
                    execResult[2],
                    execResult[3],
                    execResult[4]
                ];
            }
        }, {
            re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,
            parse: function(execResult) {
                return [
                    2.55 * execResult[1],
                    2.55 * execResult[2],
                    2.55 * execResult[3],
                    execResult[4]
                ];
            }
        }, {
            re: /#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/,
            parse: function(execResult) {
                return [
                    parseInt(execResult[1], 16),
                    parseInt(execResult[2], 16),
                    parseInt(execResult[3], 16)
                ];
            }
        }, {
            re: /#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/,
            parse: function(execResult) {
                return [
                    parseInt(execResult[1] + execResult[1], 16),
                    parseInt(execResult[2] + execResult[2], 16),
                    parseInt(execResult[3] + execResult[3], 16)
                ];
            }
        }, {
            re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,
            space: 'hsla',
            parse: function(execResult) {
                return [
                    execResult[1] / 360,
                    execResult[2] / 100,
                    execResult[3] / 100,
                    execResult[4]
                ];
            }
        }],
        template: '<div class="colorpicker dropdown-menu">' +
            '<div class="colorpicker-saturation"><i><b></b></i></div>' +
            '<div class="colorpicker-hue"><i></i></div>' +
            '<div class="colorpicker-alpha"><i></i></div>' +
            '<div class="colorpicker-color"><div /></div>' +
            '</div>'
    };

}(window.jQuery);


mini.ColorPicker = function() {

    mini.ColorPicker.superclass.constructor.call(this);

};

mini.extend(mini.ColorPicker, mini.Control, {
    value: '#ff0000',
    format: 'hex',
    allowInput: false,

    uiCls: 'mini-colorpicker',

    _clearBorder: false,

    _create: function() {
        this.el = document.createElement('div');

        this.el.innerHTML = '<span class="mini-colorpicker-indication"><i></i></span>'

        this._valueBox = new mini.TextBox();
        this._indication = this.el.lastChild.firstChild;

        this._valueBox.setValue(this.value);

        if (!this.allowInput) {
            this._valueBox.setAllowInput(false);
        }
        this._valueBox.render(this.el, 'prepend');

        jQuery(this._indication).css('background', this.value);

        this.colorPicker = jQuery(this.el)
            .attr('data-color', this.value)
            .colorpicker({
                format: this.format
            });

    },

    _initEvents: function() {
        var that = this;
        this.colorPicker.on('changeColor', function(ev) {
            that.value = that._getValue(ev.color);
            that._valueBox.setValue(that.value);
            jQuery(that._indication).css('background', that.value);

            that.fire('valuechanged', {
                sender: that,
                value: that.value,
                type: 'valuechanged'
            });
        });

        this._valueBox.on('blur', function(e) {
            that.colorPicker.colorpicker('setValue', that._valueBox.getValue());
        });
    },

    _getValue: function(color) {
        var value = '';
        switch (this.format) {
            case 'rgb':
                var rgb = color.toRGB();
                value = 'rgb(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ')';
                break;
            case 'rgba':
                var rgb = color.toRGB();
                value = 'rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ',' + rgb.a + ')';
                break;
            case 'hsl':
                var hsl = color.toHSL();
                value = 'hsl(' + Math.round(hsl.h * 360) + ',' + Math.round(hsl.s * 100) + '%,' + Math.round(hsl.l * 100) + '%)';
                break;
            case 'hsla':
                var hsl = color.toHSL();
                value = 'hsla(' + Math.round(hsl.h * 360) + ',' + Math.round(hsl.s * 100) + '%,' + Math.round(hsl.l * 100) + '%,' + hsl.a + ')';
                break;
            case 'hex':
                value = color.toHex();
                break;
        }

        return value;
    },

    setValue: function(value) {
        this.colorPicker.colorpicker('setValue', value);

    },

    getValue: function() {
        return this.value;
    },

    setFormat: function(format) {
        this.colorPicker.colorpicker({
            format: format
        });

        this.format = format;

        this.setValue(this.value);

    },

    getFormat: function() {
        return this.format;
    },

    setAllowInput: function(allowInput) {
        this._valueBox.setAllowInput(allowInput);

        this.allowInput = allowInput;

    },

    getAllowInput: function() {
        return this.allowInput;
    },

    getAttrs: function(el) {
        var attrs = mini.ColorPicker.superclass.getAttrs.call(this, el);
        mini._ParseString(el, attrs, ["onvaluechanged", "format"]);
        mini._ParseBool(el, attrs, ["allowInput"]);

        return attrs;
    }
});

mini.regClass(mini.ColorPicker, "colorpicker");

mini.DataExport = function () {
    mini.DataExport.superclass.constructor.call(this);
};

mini.extend(mini.DataExport, mini.Control, {
    // 相关联表格的id
    gridId: '',
    // 导出时请求的后台处理地址
    exportUrl: '',
    // 导出文件的文件名
    fileName: '',
    // column初始时的位置
    position: 'right',

    uiCls: 'mini-dataexport',

    // 列的值选项
    columnsValue: '',
    // 列的文本选项
    columnsText: '',

    paramName: 'exportParams',

    // 是否需要每次展示时都去动态获取一遍columns
    dynamicColumns: false,

    expandText: '关闭导出面板',
    collapseText: '打开导出面板',
    exportText: '导 出',
    // panelTitle: '导出列配置',
    leftListTitle: '待选列',
    rightListTitle: '已选列',
    // tipInfo: '不填页码即导出当前页',
    fromText: '从第',
    pageNumInfo: '页导出到第',
    pageText: '页',
    _clearBorder: false,

    _create: function () {

        this.button = new mini.Button();

        this.button.set({
            text: this.collapseText,
            iconCls: 'icon-upload',
            disableMultiClick: false
        });
        this.el = this.button.el;

        this.popup = new mini.Popup();
        this.panel = new mini.Panel();
        this.popup.addCls('mini-dataexport-popup');
        this.panel.addCls('mini-dataexport-panel');
        this.panel.set({
            width: 450,
            showToolbar: false,
            showFooter: false,
            showHeader: false
        });

        this.popup.render(document.body);
        this.panel.render(this.popup.el);

        var bodyArr = [
            '<div class="mini-export-list"><div class="mini-export-left"></div><div class="mini-export-middle"></div><div class="mini-export-right"></div></div>'
        ];
        bodyArr.push(
            '<div class="mini-export-line"><div id="' +
            this.id +
            '-rbl" class="mini-radiobuttonlist" repeatItems="1" repeatLayout="table" ></div></div>'
        );
        bodyArr.push(
            '<a id="' +
            this.id +
            '-action" class="mini-button mini-btn-primary mini-export-btn">' +
            this.exportText +
            '</a>'
        );
        bodyArr.push('<div style="display:none;"></div>');

        this.panel.setBody(bodyArr.join(''));

        mini.parse(this.popup.el);

        this._panel = this.panel.el;

        this._exportBtn = mini.get(this.id + '-action', this._panel);

        var body = this.panel.getBodyEl();
        this._listContent = body.firstChild;
        this._exportRbl = mini.get(this.id + '-rbl', this._panel);
        this._exportRbl.setData([{
            text: '仅导出选中行',
            id: '0'
        }, {
            text: '导出全部',
            id: '1'
        }, {
            text: '导出当前页',
            id: '2'
        }, {
            text: this.fromText +
                '<input type="text" class="mini-export-num" id="' +
                this.id +
                '-fromnum"/>' +
                this.pageNumInfo +
                '<input type="text" class="mini-export-num" id="' +
                this.id +
                '-tonum"/>' +
                this.pageText,
            id: '3'
        }]);

        this._radioTrs = this._exportRbl._innerEl.getElementsByTagName('tr');
        this._rowTr = this._radioTrs[0];
        this._curPageTr = this._radioTrs[2];
        this._pageTr = this._radioTrs[3];

        this._fromNumInput = mini.byId(this.id + '-fromnum', this._pageTr);
        this._toNumInput = mini.byId(this.id + '-tonum', this._pageTr);

        this._exportFormWrap = body.lastChild;
        this._exportFormWrap.innerHTML =
            '<form method="post" target="exportIFrame"><input type="hidden" name="' +
            this.paramName +
            '" /></form><iframe id="exportIFrame" name="exportIFrame" style="display:none;"></iframe>';

        this._exportForm = this._exportFormWrap.firstChild;
        this._exportFormField = this._exportForm.firstChild;

        this._exportIframe = this._exportFormWrap.lastChild;

        this._contentL = this._listContent.firstChild;
        this._contentM = this._listContent.childNodes[1];
        this._contentR = this._listContent.lastChild;

        this._contentL.innerHTML =
            '<div class="mini-export-list-header">' +
            this.leftListTitle +
            '</div><div class="mini-export-list-content"></div>';
        this._contentR.innerHTML =
            '<div class="mini-export-list-header">' +
            this.rightListTitle +
            '</div><div class="mini-export-list-content"></div>';

        this.leftListBox = new mini.ListBox();
        this.leftListBox.set({
            height: 170,
            width: 180,
            valueField: 'field',
            showCheckBox: true,
            multiSelect: true
        });
        this.leftListBox.render(this._contentL.lastChild);

        this.rightListBox = new mini.ListBox();
        this.rightListBox.set({
            height: 170,
            width: 180,
            valueField: 'field',
            showCheckBox: false,
            multiSelect: false
        });
        this.rightListBox.render(this._contentR.lastChild);

        this._initButtons();
    },

    _initEvents: function () {
        var that = this;
        this.button.on('click', function () {
            if (!mini.hasClass(that.button.el, 'mini-button-popup')) {
                that.showPanel();
            } else {
                that.hidePanel();
            }
        });

        this._exportBtn.on('click', function (e) {
            that._OnExport(e);
        });

        // 开始页码输入
        mini.on(this._fromNumInput, 'blur', function () {
            if (that.dataGrid) {
                var pageIndex = that.dataGrid.getPageIndex() + 1,
                    totalPage = that.dataGrid.getTotalPage(),
                    toIndex = parseInt(that._toNumInput.value, 10),
                    value = parseInt(this.value, 10);

                // 无value，则为当前页
                if (!value) {
                    value = pageIndex;
                } else if (value > totalPage) {
                    value = totalPage;
                }
                if (value > toIndex) {
                    value = toIndex;
                }

                this.value = value;
            }
        });

        // 结束页码输入
        mini.on(this._toNumInput, 'blur', function () {
            if (that.dataGrid) {
                var pageIndex = that.dataGrid.getPageIndex() + 1,
                    totalPage = that.dataGrid.getTotalPage(),
                    fromIndex = parseInt(that._fromNumInput.value, 10),
                    value = parseInt(this.value, 10);

                if (!value || value > totalPage) {
                    // 不填 或超出默认为最大页码
                    value = totalPage;
                }

                if (value < fromIndex) {
                    // 不得小于开始页码
                    value = fromIndex;
                }

                this.value = value;
            }
        });

        mini.on(document, 'mouseup', this._OnDocMouseUp, this);

        mini.on(this._exportIframe, 'load', function(){
            that.fire('exportsuccess');
        });
    },

    _getExportData: function () {
        var data = {
            columns: this.rightListBox.data,
            fileName: this.fileName
        };

        // 必须指定文件名
        if(!data.fileName) {            
            window.console && window.console.error && console.error('未指定导出文件的filename，导出文件可能不正常！');            
        }

        if (this.gridId) {
            if (!this.dataGrid) {
                this.dataGrid = mini.get(this.gridId);
            }
            // 获取用户选中的类型  0：当前行，1：全部页码，2：当前页，3：指定页码
            var exportType = this._exportRbl.value,
                pageSize = this.dataGrid.getPageSize(),
                totalCount = this.dataGrid.getTotalCount(),
                sortField = this.dataGrid.getSortField(),
                sortOrder = this.dataGrid.getSortOrder(),
                maxPageIndex = this.dataGrid.getTotalPage() - 1,
                fromIndex = 0,
                toIndex = 0,
                pageIndex = this.dataGrid.getPageIndex();

            switch (exportType) {
                case '0':
                    // 当前行
                    fromIndex = pageIndex;
                    toIndex = pageIndex;
                    data.idField = this.dataGrid.idField;
                    data.checkedRows = {};
                    data.checkedRows[this.dataGrid.idField] = this._getSelectedGridIds();
                    break;

                case '1':
                    // 全部页码 从0 到最大页码
                    fromIndex = 0;
                    toIndex = maxPageIndex;
                    break;

                case '2':
                    // 当前页码
                    fromIndex = pageIndex;
                    toIndex = pageIndex;
                    break;

                case '3':
                    // 指定页码
                    fromIndex = parseInt(this._fromNumInput.value, 10) - 1;
                    toIndex = parseInt(this._toNumInput.value) - 1;
                    // 不填开始页码则为当前页
                    if (!mini.isNumber(fromIndex)) {
                        fromIndex = pageIndex;
                    }
                    // 不填结束页码 或者填的结束页码小于开始页码 结束页码为总页码
                    if (!mini.isNumber(toIndex) || toIndex < fromIndex) {
                        toIndex = maxPageIndex;
                    }
                    break;

                default:
                    break;
            }

            mini.copyTo(data, {
                fromIndex: fromIndex,
                toIndex: toIndex,
                pageSize: pageSize,
                totalCount: totalCount,
                sortField: sortField,
                sortOrder: sortOrder
            });
        }

        return data;
    },

    _getSelectedGridIds: function () {
        var ids = [];
        var rows = [];
        var idField = this.dataGrid.idField;

        if (this.dataGrid) {
            rows = this.dataGrid.getSelecteds();
        }

        for (var i = 0, l = rows.length; i < l; i++) {
            var r = rows[i];
            ids.push(r[idField]);
        }

        return ids.join(',');
    },
    _OnExport: function (event) {
        var data = this._getExportData();
        var e = {
            htmlEvent: event,
            data: data
        };

        this.fire('beforeexport', e);

        this._exportFormField.value = typeof e.data == 'string' ? e.data : mini.encode(e.data);
        this._exportForm.submit();

        this.hidePanel();
    },

    _OnDocMouseUp: function (e) {
        if (!mini.isAncestor(this.popup.el, e.target)) {
            this.hidePanel();
        }
    },

    _initButtons: function () {
        this._contentM.innerHTML =
            '<button class="mini-export-listbtn mini-icon right" type="button"></button><button class="mini-export-listbtn mini-icon right-all" type="button"></button><button class="mini-export-listbtn mini-icon left" type="button"></button><button class="mini-export-listbtn mini-icon left-all" type="button"></button>';

        var that = this;
        mini.on(this._contentM, 'click', function (e) {
            var target = e.target,
                items;
            if (mini.hasClass(target, 'right')) {
                items = that.leftListBox.getSelecteds();
                that.leftListBox.removeItems(items);
                that.rightListBox.addItems(items);
            } else if (mini.hasClass(target, 'right-all')) {
                items = that.leftListBox.getData();
                that.leftListBox.removeItems(items);
                that.rightListBox.addItems(items);
            } else if (mini.hasClass(target, 'left')) {
                items = that.rightListBox.getSelecteds();
                that.rightListBox.removeItems(items);
                that.leftListBox.addItems(items);
            } else if (mini.hasClass(target, 'left-all')) {
                items = that.rightListBox.getData();
                that.rightListBox.removeItems(items);
                that.leftListBox.addItems(items);
            }
        });
    },

    setExportUrl: function (url) {
        this.exportUrl = url;
        this._exportForm.action = url;
    },

    getExportUrl: function () {
        return this.exportUrl;
    },

    getGridId: function () {
        return this.gridId;
    },

    setGridId: function (gridId) {
        this.gridId = gridId;
        this.dataGrid = mini.get(gridId);
    },

    showPanel: function () {
        this._adjustRadioLayout();
        this.button.setText(this.expandText);
        this.button.addCls('mini-button-popup');
        if (!this.isInit || this.dynamicColumns) {
            var columns = this.getColumns();

            if (this.position == 'left') {
                this.leftListBox.setData(columns);
                this.rightListBox.setData([]);
            } else {
                this.rightListBox.setData(columns);
                this.leftListBox.setData([]);
            }
            this.isInit = true;
        }
        this.popup.showAtEl(this.el);
    },

    _adjustRadioLayout: function () {
        if (!this.dataGrid && this.gridId) {
            this.dataGrid = mini.get(this.gridId);
        }
        if (this.dataGrid) {
            mini.removeClass(this._exportRbl.el, 'hidden');
            if (this.dataGrid.multiSelect && this._getSelectedGridIds()) {
                mini.removeClass(this._rowTr, 'hidden');
                // mini.removeClass(this._pageTrRadio, 'hidden');
                this._exportRbl.setValue('0');
            } else {
                mini.addClass(this._rowTr, 'hidden');
                // mini.addClass(this._pageTrRadio, 'hidden');
                this._exportRbl.setValue('1');

                if(!this.dataGrid.showPager) {
                    mini.addClass(this._curPageTr, 'hidden');
                    mini.addClass(this._pageTr, 'hidden');
                }
                // 设置表格的当前页码作为默认的导出开始页码
                this._fromNumInput.value = this.dataGrid.getPageIndex() + 1;
            }
        } else {
            // 没有datagrid
            mini.addClass(this._exportRbl.el, 'hidden');
        }
    },

    hidePanel: function () {
        this.button.removeCls('mini-button-popup');
        this.button.setText(this.collapseText);
        this.popup.hide();
    },

    getColumns: function () {
        var data = [];

        if (this.columnsData) {
            data = this.columnsData;
        } else if (this.columnsValue) {
            var values = this.columnsValue.split(','),
                texts = this.columnsText.split(','),
                len = values.length,
                i = 0;

            for (; i < len; i++) {
                data.push({
                    text: texts[i] ? texts[i] : values[i],
                    field: values[i]
                });
            }
        } else if (this.gridId) {
            if (!this.dataGrid) {
                this.dataGrid = mini.get(this.gridId);
            }
            if (this.dataGrid) {
                data = this._getColumns(this.dataGrid.columns);
            }else {
                data = [];
            }
        }


        var e = {
            columns: data
        };
        this.fire('beforeupdatecolumn', e);

        data = e.columns;

        this.columnsData = data;
        return data;
    },

    _getColumns: function (columns) {
        var data = [];
        for (var i = 0, len = columns.length; i < len; i++) {
            var column = columns[i];
            if (!column.field) {
                if (column.columns) {
                    var childColumns = this._getColumns(column.columns);
                    data = data.concat(childColumns);
                }
            } else {
                data.push({
                    text: jQuery.trim(column.header),
                    field: column.field
                });
            }
        }
        return data;
    },

    setCollapseText: function (collapseText) {
        this.collapseText = collapseText;

        if (this.button) {
            this.button.setText(collapseText);
        }
    },

    getFileName: function () {
        return this.fileName;
    },

    setFileName: function (fileName) {
        this.fileName = fileName;
    },

    getAttrs: function (el) {
        var attrs = mini.DataExport.superclass.getAttrs.call(this, el);
        mini._ParseString(el, attrs, [
            'gridId',
            'exportUrl',
            'onbeforeexport',
            'fileName',
            'columnsText',
            'columnsValue',
            'position',
            'expandText',
            'collapseText',
            'onbeforeupdatecolumn',
            'onexportsuccess'
        ]);
        mini._ParseBool(el, attrs, ['dynamicColumns']);
        return attrs;
    }
});

mini.regClass(mini.DataExport, 'dataexport');
mini.DataImport = function () {
    mini.DataImport.superclass.constructor.call(this);
};
mini.extend(mini.DataImport, mini.Control, {
    uiCls: "mini-dataimport",
    url: "",
    pickerText: '导入文件',

    _create: function () {
        this.el = document.createElement("div");

        this.uploader = new mini.WebUploader();

        this.uploader.set({
            uploadUrl: this.url,
            pickerText: this.pickerText,
            fileNumLimit: 1,
            limitType: 'xls,xlsx,xlsm',
            showDefaultUI: false,
            auto: false,
            renderTo: this.el
        });

        this.uploader.on('beforefilequeued', this._onBeforeFileQueued, this);
        this.uploader.on('filesqueued', this._onFilesQueued, this);
        this.uploader.on('uploadbeforesend', this._onUploadBeforeSend, this);
        this.uploader.on('uploadprogress', this._onUploadProgress, this);
        this.uploader.on('uploadsuccess', this._onUploadSuccess, this);

        this.uploader._uploadBtn.hide();

        this.maskEl = document.createElement("div");
        this.maskEl.className = 'mini-dataimport-mask';
        this.maskEl.innerHTML = '<div class="mini-dataimport-mask-content"></div>';
        this.maskContent = this.maskEl.firstChild;

        document.body.appendChild(this.maskEl);

        this.detailEl = document.createElement("div");
        this.detailEl.className = 'mini-dataimport-detail';
        this.detailEl.innerHTML = '<div class="mini-dataimport-detail-content"></div><i class="dataimport-detail-close">X</i>';
        this.detailContent = this.detailEl.firstChild;

        document.body.appendChild(this.detailEl);

        this._bindEvent();
    },

    _bindEvent: function () {
        var self = this;
        jQuery(this.maskEl).on('click', '.dataimport-showdetail', function () {
            self.showDetailStatus();
            return false;
        }).on('click', '.dataimport-continue', function () {
            self.isContinueImport = true;
            self.uploader._uploader.upload();
        }).on('click', '.dataimport-restart', function () {
            self.uploader._uploader.upload();
        }).on('click', function () {
            if (self.isImportFinished && !self.isDetailShow) {
                self.maskEl.style.display = 'none';
            }
        });

        jQuery(this.detailEl).on('click', '.dataimport-detail-close', function () {
            self.hideDetailStatus();
        }).on('click', '.dataimport-status-toggle', function () {
            var $this = $(this),
                $parent = $this.parent();

            if ($parent.hasClass('opened')) {
                $this.text('展开详情');
                $parent.removeClass('opened');
            } else {
                $this.text('收起详情');
                $parent.addClass('opened');
            }
        });
    },

    _onFilesQueued: function (event) {
        var files = event.files,
            file = files[0],
            self = this;
        if (!file) {
            return;
        }

        var html = this._generateFileList({
            id: file.id,
            name: file.name,
            size: file.size
        });

        this.isImportFinished = false;

        this.maskContent.innerHTML = html;
        this.maskEl.style.display = 'block';

        this.uploader._uploader.md5File(file)
            .progress(function (percentage) {

            }).then(function (md5) {
                self._curFileMD5 = md5;
                var data = {
                    fileMD5: md5,
                    fileName: file.name,
                    fileSize: file.size
                };

                data[self.uploader.id + '_action'] = "queryFileStatus";

                if (self.uploader.getCommonData) {
                    data.commonDto = mini.encode(self.uploader.getCommonData());
                }

                self._onPostFileMd5(data);

                // 与服务端验证
                $.ajax(self.url, {
                    dataType: 'json',
                    data: data,
                    type: 'post',
                    success: function (response) {
                        if (mini.getSecondRequestData) {
                            response = mini.getSecondRequestData(response);
                        }
                        self._onQueryFileStatus(response);
                    }
                });
            });
    },

    _onPostFileMd5: function (data) {
        this.fire('postfilemd5', {
            data: data
        });
    },

    _curFileMD5: '',
    _curAttachGuid: '',
    _onQueryFileStatus: function (data) {
        if (data.msg) {
            mini.alert(data.msg);
        }

        this.setDetailStatus(data.detail);
        this._curAttachGuid = data.attachGuid;
        this._oldAttachGuid = data.attachGuidOld;

        if (data.end) {
            this._onFinished(data.status);
            return;
        }

        if (data.pollingFrequency) {
            this._pollingFrequency = data.pollingFrequency;
        }

        if (data.action == "importStatus") {
            this.pollingStatus(data);
        } else if (data.action == "upload") {
            this.uploader._uploader.upload();
        } else {
            jQuery(this.maskContent).find('.mini-dataimport-action').removeClass('hidden');
        }

    },

    _onUploadBeforeSend: function (event) {
        if (this.isContinueImport) {
            event.data.attachGuid = this._curAttachGuid;
        }
        event.data.fileMD5 = this._curFileMD5;
    },

    _onUploadProgress: function (event) {
        var file = event.file,
            percentage = event.percentage,
            li = mini.byId(file.id),
            $progressbar = jQuery('.mini-dataimport-progressbar', li),
            $progresstext = jQuery('.progress-text', $progressbar),
            $progressbody = jQuery('.progress-body', $progressbar),
            width = Math.round(percentage * 100) + '%';

        $progresstext.text(width);
        $progressbody.width(width);
    },

    _generateFileList: function (options) {

        var list = [];
        list.push('<div class="mini-dataimport-item">');
        list.push('<span class="mini-dataimport-info">' + options.name + '</span>');
        list.push('<span class="mini-dataimport-size">(' + this._getSize(options.size) + ')</span>');
        list.push('<span class="mini-dataimport-progressbar"><span class="progress-text">0%</span><div class="progress-body"></div></span>');

        list.push('<span class="mini-dataimport-action hidden"><a href="javascript:void(0)" class="dataimport-continue" title="上次导入中断，修改完后继续导入">继续导入</a><a href="javascript:void(0)" class="dataimport-restart" title="重新尝试导入这个文件">重新导入</a><a href="javascript:void(0)" class="dataimport-showdetail hidden">查看详情</a></span>');

        list.push('</div>');

        return list.join('');
    },

    _generateImportStatus: function (options) {
        var list = [];
        list.push('<div class="mini-dataimport-item">');
        list.push('<span class="mini-dataimport-info">' + (options.status || '') + '</span>');
        if (options.handlepercent >= 0) {
            list.push('<span class="mini-dataimport-progressbar"><span class="progress-text">' + options.handlepercent + '%</span><div class="progress-body" style="width:' + options.handlepercent + '%;"></div></span>');
        }

        if (options.end) {
            list.push('<span class="mini-dataimport-action"><a href="javascript:void(0)" class="dataimport-showdetail">查看详情</a></span>');
        }

        list.push('</div>');

        return list.join('');
    },

    _generateStatuslist: function (options) {
        var i, len, arr,
            isCheckEnd = true,
            isSaveEnd = true;
        var list = ['<div class="dataimport-status-item">'];
        list.push('<h3 class="dataimport-status-title">' + options.sheetName + '</h3>');
        list.push('<h4 class="dataimport-status-type">校验结果：</h4>');
        list.push('<p class="dataimport-status-count">总计：' + options.checkCount + '条，成功：' + options.checkSuccessCount + '，失败：' + options.checkErrorCount + '条。');
        if ((arr = options.checkMsg) && (len = arr.length)) {
            list.push('<a href="javascript:void(0);" class="dataimport-status-toggle">展开详情</a></p>');
            list.push('<div class="dataimport-status-detail">');
            for (i = 0; i < len; i++) {
                list.push('<p>' + arr[i] + '</p>');
            }
            list.push('</div>');
        } else {
            isCheckEnd = false;
        }

        if (options.saveCount) {
            if (!isCheckEnd) {
                list.push('</p>');
                isCheckEnd = true;
            }
            list.push('<h4 class="dataimport-status-type">导入结果：</h4>');
            list.push('<p class="dataimport-status-count">总计：' + options.saveCount + '条，成功：' + options.saveSuccessCount + '，失败：' + options.saveErrorCount + '条。');

            if ((arr = options.saveMsg) && (len = arr.length)) {
                list.push('<a href="javascript:void(0);" class="dataimport-status-toggle">展开详情</a></p>');
                list.push('<div class="dataimport-status-detail">');
                for (i = 0; i < len; i++) {
                    list.push('<p>' + arr[i] + '</p>');
                }
                list.push('</div>');
            } else {
                isSaveEnd = false;
            }
        }

        if ((arr = options.taskMsg) && (len = arr.length)) {
            list.push('<a href="javascript:void(0);" class="dataimport-status-toggle">展开详情</a></p>');
            list.push('<div class="dataimport-status-detail">');
            for (i = 0; i < len; i++) {
                list.push('<p>' + arr[i] + '</p>');
            }
            list.push('</div>');
        } else if (!isCheckEnd || !isSaveEnd) {
            list.push('</p>');
        }

        list.push('</div>');

        return list.join('');
    },

    _getSize: function (size) {
        var K = 1024,
            M = 1048576;
        size = parseInt(size);

        if (size > M) {
            return (size / M).toFixed(2) + "M";
        } else {
            return (size / K).toFixed(2) + "K";
        }
    },

    _pollingFrequency: 1000,
    _oldAttachGuid: '',
    _onUploadSuccess: function (event) {
        var ret = event.ret,
            file = event.file;

        if (mini.getSecondRequestData) {
            ret = mini.getSecondRequestData(ret);
        }

        ret = ret.data || ret;
        ret = ret.extraDatas || ret;

        this._pollingFrequency = ret.pollingFrequency;
        if (ret.action == "importStatus") {
            this._curAttachGuid = ret.attachGuid;
            this._oldAttachGuid = ret.attachGuidOld;
            this.pollingStatus(ret);
            return;
        }

        var self = this;
        mini.alert('数据导入失败，请重试！', '', function () {
            self._onFinished(ret.status);

            self.maskEl.style.display = 'none';
        });


    },

    _onFinished: function (msg) {
        msg = msg || "导入已完成";
        this.isImportFinished = true;
        this.maskContent.innerHTML = msg + '<a href="javascript:void(0);" class="dataimport-showdetail">查看详情</a>';

        if (this._events["importfinished"]) {
            this.fire("importfinished");
        }

        this.uploader.clearFile();
    },

    _onBeforeFileQueued: function (event) {
        if (this._events["beforefilequeued"]) {
            this.fire("beforefilequeued", event);
        }
    },

    pollingStatus: function (options) {
        this.maskContent.innerHTML = this._generateImportStatus(options);
        var self = this,
            data = {
                fileMD5: this._curFileMD5,
                attachGuid: this._curAttachGuid,
                attachGuidOld: this._oldAttachGuid
            };
        data[this.uploader.id + "_action"] = "importStatus";

        if (this.uploader.getCommonData) {
            data.commonDto = mini.encode(this.uploader.getCommonData());
        }

        jQuery.ajax({
            url: this.url,
            data: data,
            type: 'POST',
            dataType: 'json'
        }).done(function (data) {
            if (mini.getSecondRequestData) {
                data = mini.getSecondRequestData(data);
            }
            // 有提示信息，则alert
            if (data.msg) {
                mini.alert(data.msg);
            }

            if (data.end) {
                self._onFinished(data.status);
            } else {
                setTimeout(jQuery.proxy(self.pollingStatus, self, data), self._pollingFrequency);
            }

            self.setDetailStatus(data.detail);

        });
    },

    setDetailStatus: function (data) {
        this.detailStatus = data;

        if (this.isDetailShow) {
            this.renderDetailStatus();
        }
    },

    renderDetailStatus: function () {
        var detail = this.detailStatus,
            html = [],
            i = 0,
            l;

        if (detail) {
            for (l = detail.length; i < l; i++) {
                html.push(this._generateStatuslist(detail[i]));
            }

        }

        this.detailContent.innerHTML = html.join('');

    },

    showDetailStatus: function () {
        this.renderDetailStatus();

        this.detailEl.style.display = 'block';

        this.isDetailShow = true;
    },

    hideDetailStatus: function () {
        this.detailEl.style.display = 'none';

        this.isDetailShow = false;
    },

    setUrl: function (url) {
        this.url = url;

        this.uploader && this.uploader.setUploadUrl(url);
    },

    getUrl: function () {
        return this.url;
    },

    setPickerText: function (pickerText) {

    },

    setEnabled: function(enabled) {
        mini.CatalogImport.superclass.setEnabled.call(this, enabled);
        this.uploader && this.uploader.setEnabled(enabled);
    },
    getAttrs: function (el) {
        var attrs = mini.DataImport.superclass.getAttrs.call(this, el);
        mini._ParseString(el, attrs, ["url", "pickerText", "onbeforefilequeued", "onpostfilemd5", "onimportfinished"]);
        return attrs;
    }

});

mini.regClass(mini.DataImport, 'dataimport');
mini.DateRangePicker = function() {
    mini.DateRangePicker.superclass.constructor.call(this);
};

mini.extend(mini.DateRangePicker, mini.ValidatorBase, {
    uiCls: 'mini-daterangepicker',

    allowInput: true,
    rangeType: 'date',
    format: 'yyyy-MM-dd',
    delimiter: '~',
    minDate: null,
    maxDate: null,

    set: function(kv) {
        if (typeof kv == 'string') {
            return this;
        }

        var rangeType = kv.rangeType;
        delete kv.rangeType;
        var format = kv.format;
        delete kv.format;

        mini.DateRangePicker.superclass.set.call(this, kv);

        if (!mini.isNull(rangeType)) {
            this.setRangeType(rangeType);
        }
        if (!mini.isNull(format)) {
            this.setFormat(format);
        }

        return this;
    },

    _create: function() {
        this.el = document.createElement('div');
        this.el.className = 'mini-daterangepicker';

        this._buttonEdit = new mini.ButtonEdit();

        this._buttonEdit.render(this.el);

        var self = this;
        this._buttonEdit.set({
            allowInput: false,
            width: '100%',
            onbuttonclick: function(e) {
                // 阻止事件冒泡，解决由于laydate绑定在body上的click事件，日期选择面板消失问题
                e.htmlEvent.stopPropagation();

                jQuery(self._inputEl).trigger('click');
            },
            onblur: function(e) {
                // 由于allowInput是false的，导致blur时不会触发验证，需要自己去触发下
                if (self.isEditable()) {
                    //if (self.validateOnLeave) {
                    self._tryValidate();
                }
            }
        });
        this._borderEl = this.el.firstChild;
        this._inputEl = this._buttonEdit._textEl;

        this.externalSrc = this.externalSrc || mini.externalSrc;

        if (window.laydate) {
            this._init();
        } else {
            mini.loadJS(this.externalSrc + 'laydate/laydate.js', function() {
                self._init();
            });
        }
    },
    // 本来 是 overflow hidden 在 hover 时 overflow auto
    // 会存在 hover 抖动的问题 此处计算滚动条宽度 来修正此问题
    _fixedHoverScroller: function() {
        var scrollerWidth = mini._scrollBarWidth;

        var id = 'fixed-hover-scroller-for-daterange';
        if (!scrollerWidth || $('#' + id).length) {
            return;
        }
        $('<style></style>', {
            id: id,
            text: ['.laydate-time-list li ol {', 'margin-right: ' + scrollerWidth + 'px}', '.laydate-time-list>li:hover ol{', 'margin-right:0;}'].join('')
        }).appendTo('head');
    },
    // laydate 中 时间的滚动是写高度的 会存在滚动位置不正确的问题
    _fixedTimeScrollPos: (function() {
        function scrollIntoView($target) {
            var currentTop = $target.position().top;
            var currentHeight = $target.outerHeight(true);
            var $parent = $target.parent();
            var viewHeight = $parent[0].offsetHeight;

            if (currentTop > 0 && currentTop < viewHeight - currentHeight) {
                // console.log('可见');
            } else {
                // console.log('不可见');
                $parent[0].scrollTop = $parent[0].scrollTop + currentTop;
            }
        }
        // 源码中已经滚动了一次了， 用 requestAnimationFrame 使得两个事件的间隔更可能的小 避免肉眼可见的跳动
        var nextTick = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.setTimeout;
        function handle(ev) {
            var $target = $(ev.target || ev.srcElement);
            if ($target.closest('.laydate-time-list > li li').length) {
                // console.log(ev);

                nextTick(function() {
                    scrollIntoView($target);
                });
            }
        }
        // 确保只绑定一次 
        return document.addEventListener
            ? function() {
                  document.removeEventListener('click', handle, true);
                  document.addEventListener('click', handle, true);
              }
            : function() {};
    })(),

    _init: function() {
        var self = this;

        var cfg = {
            elem: this._inputEl,
            range: this.delimiter,
            format: this._translateToLaydateFormat(this.format),
            type: this.rangeType,
            readOnly: this.readOnly,
            enabled: this.enabled,
            trigger: 'click',
            done: function(value, date, endDate) {
                self.setValue({
                    startDate: self._formatDate(date),
                    endDate: self._formatDate(endDate)
                });
                self._tryValidate();
            }
        };

        if (this.minDate) {
            cfg.min = mini.formatDate(this.minDate, 'yyyy-MM-dd HH:mm:ss');
        }

        if (this.maxDate) {
            cfg.max = mini.formatDate(this.maxDate, 'yyyy-MM-dd HH:mm:ss');
        }
        this.laydate = laydate.render(cfg);

        this._fixedHoverScroller();
        this._fixedTimeScrollPos();
    },

    _formatDate: function(date) {
        function isEmptyObject(obj) {
            for (var key in obj) {
                return false;
            }
            return true;
        }

        if (!date || isEmptyObject(date)) {
            return '';
        }

        var result = this.format.replace(/yyyy/g, date.year);
        result = result.replace(/yy/g, (date.year + '').substring(2));
        result = result.replace(/MM/g, date.month < 10 ? '0' + date.month : date.month);
        result = result.replace(/M/g, date.month);
        result = result.replace(/dd/g, date.date < 10 ? '0' + date.date : date.date);
        result = result.replace(/d/g, date.date);
        result = result.replace(/HH/g, date.hours < 10 ? '0' + date.hours : date.hours);
        result = result.replace(/H/g, date.hours);
        result = result.replace(/mm/g, date.minutes < 10 ? '0' + date.minutes : date.minutes);
        result = result.replace(/m/g, date.minutes);
        result = result.replace(/ss/g, date.seconds < 10 ? '0' + date.seconds : date.seconds);
        result = result.replace(/s/g, date.seconds);

        return result;
    },

    setFormat: function(format) {
        this.format = format;

        this.laydate && (this.laydate.config.format = this._translateToLaydateFormat(format));
    },

    _translateToLaydateFormat: function(format) {
        return format.replace(/(y)\1{1}/g, function(match, g1, index, origin) {
            if (origin.charAt(index - 1) == 'y' || origin.charAt(index + 2) == 'y') {
                return 'yy';
            } else {
                return 'y';
            }
        });
    },

    setMinDate: function(value) {
        this.minDate = mini.parseDate(value);

        this.laydate && (this.laydate.config.min = mini.formatDate(this.minDate, 'yyyy-MM-dd HH:mm:ss'));
    },
    setMaxDate: function(value) {
        this.maxDate = mini.parseDate(value);

        this.laydate && (this.laydate.config.min = mini.formatDate(this.maxDate, 'yyyy-MM-dd HH:mm:ss'));
    },

    setRangeType: function(value) {
        this.rangeType = value;

        this.laydate && (this.laydate.config.type = value);

        if (value == 'datetime') {
            this.format = 'yyyy-MM-dd HH:mm:ss';
        }
    },
    _oldValue: {
        startDate: '',
        endDate: ''
    },
    value: {
        startDate: '',
        endDate: ''
    },
    setValue: function(value) {
        if (!value.startDate || !value.endDate) {
            this.value = {
                startDate: '',
                endDate: ''
            };
            this._inputEl.value = '';
        } else {
            this.value = {
                startDate: value.startDate,
                endDate: value.endDate
            };
            this._inputEl.value = value.startDate + ' ' + this.delimiter + ' ' + value.endDate;
        }

        if (this.value.startDate != this._oldValue.startDate || this.value.endDate != this._oldValue.endDate) {
            this.fire('valuechanged', {
                value: this.value,
                oldValue: this._oldValue
            });

            this._oldValue = this.value;
        }
    },
    setReadOnly: function(readOnly) {
        mini.DateRangePicker.superclass.setReadOnly.call(this, readOnly);

        this._buttonEdit.setReadOnly(readOnly);

        this.laydate && (this.laydate.config.readOnly = readOnly);
    },
    setEnabled: function(enabled) {
        mini.DateRangePicker.superclass.setEnabled.call(this, enabled);

        this.laydate && (this.laydate.config.enabled = enabled);
    },
    validate: function() {
        var e = {
            value: this.getValue(),
            errorText: '',
            isValid: true
        };

        if (this.required) {
            // value 是特殊的格式，需要特殊处理
            if (String(e.value.startDate).trim() === '' || String(e.value.endDate).trim() === '') {
                e.isValid = false;
                e.errorText = this.requiredErrorText;
            }
        }

        this.fire('validation', e);

        this.errorText = e.errorText;
        this.setIsValid(e.isValid);
        return this.isValid();
    },
    setEmptyText: function(value) {
        if (this.emptyText != value) {
            this.emptyText = value;
            this._buttonEdit.setEmptyText(value);
        }
    },
    getEmptyText: function() {
        return this.emptyText;
    },
    _errorIconEl: null,
    getErrorIconEl: function() {
        if (!this._errorIconEl) {
            this._errorIconEl = mini.append(this.el, '<span class="mini-errorIcon"></span>');
        }
        return this._errorIconEl;
    },
    _RemoveErrorIcon: function() {
        if (this._errorIconEl) {
            var el = this._errorIconEl;
            jQuery(el).remove();
        }
        this._errorIconEl = null;
    },
    getAttrs: function(el) {
        var attrs = mini.DateRangePicker.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs, ['rangeType', 'format', 'minDate', 'maxDate', 'onvaluechanged', 'emptyText']);

        return attrs;
    }
});

mini.regClass(mini.DateRangePicker, 'daterangepicker');

/**
 * FilterTree
 * @class
 * @extends mini.Tree
 * @constructor
 */

mini.FilterTree = function() {

    mini.FilterTree.superclass.constructor.call(this);

    this.initComponents();
    this.bindEvents();

};

mini.extend(mini.FilterTree, mini.Tree, {
    // 搜索模式，可取值为'client'、'server'
    filterMode: 'client',

    filterUrl: '',

    height: '100%',

    emptyText: "请输入内容查询",

    uiCls: 'mini-filtertree',


    initComponents: function() {
        var toolbar = '<input name="filterInput" class="mini-buttonedit mini-filtertree-filter" emptyText="' + this.emptyText + '" />';

        this.set({
            showToolbar: true,
            toolbar: toolbar
        });
    },

    _filterKey: '',
    bindEvents: function() {
        var that = this;
        this._filterInput = mini.getbyName('filterInput', this);
        
        // 键盘事件
        this._filterInput.on('keyup', function(e) {
            var keycode = e.htmlEvent.keyCode,
                key;
            // 回车触发搜索
            if (keycode == 13) {
                key = that._filterInput.value;
                that._doFilter(key);
            }
        });
        // 按钮事件
        this._filterInput.on('buttonclick', function () {
            var key = that._filterInput.value;
            that._doFilter(key);    
        });
        this.on('load', function(e){
            var data = e.data;
            // 只有真正的ajax请求才需要设置_initialData
            // 排查框架 commondto 中 setData 触发的 load 事件
            if(e.xhr && this.filterMode === 'client') {
                this._initialData = mini.clone(data);
            }
        });

    },
    setData: function(data) {
        mini.FilterTree.superclass.setData.call(this, data);

        if(this.filterMode === 'client') {
            this._initialData = mini.clone(data);
        }
    },
    _doFilter: function(key){
        var that = this;
        that._filterKey = key;
        if (that.filterMode == 'server') {

            var e = {
                data: {
                    search_condition: key
                },
                url: that.getFilterUrl(),
                sender: that
            };

            that.fire('beforeload', e);
            jQuery.ajax({
                url: e.url,
                data: e.data,
                type: "post",
                success: function(text, textStatus, xhr) {

                    if (!text || text == "null") {
                        text = '{ tatal: 0, data: [] }';
                    }

                    delete e.params;
                    var obj = { text: text, result: null, sender: that, options: e, xhr: xhr };
                    var result = null;
                    try {
                        mini_doload(obj);
                        result = obj.result;
                        if (!result) {
                            result = mini.decode(text);
                        }
                    } catch (err) {
                        if (mini_debugger == true) {
                            alert(url + "\n json is error.");
                        }
                    }
                    if (mini.isArray(result)) {
                        result = { data: result };
                    }
                    if (that.dataField) {
                        result.data = mini._getMap(that.dataField, result);
                    }
                    if (!result.data) result.data = [];

                    var ex = { data: result.data, cancel: false, result: result }
                    that.fire("preload", ex);
                    if (ex.cancel == true) return;


                    if (that.resultAsTree) {
                        that.loadData(ex.data);
                    } else {
                        that.loadList(ex.data);
                    }

                    that.fire('filter');
                    that.expandAll();
                }
            });
        } else {
            if (key === "") {
                that.clearFilter();
                that._initialData && that.setData(that._initialData);
            } else {
                key = key.toLowerCase();
                that.filter(function(node) {
                    var text = node.text ? node.text.toLowerCase() : "";
                    if (text.indexOf(key) != -1) {
                        return true;
                    }
                });
                that.expandAll();
            }
        }

    },
    // 把node的text可能包含的html标签去除掉
    _OnCellClick: function(e) {
        //if (mini.findParent(e.htmlEvent.target, 'mini-tree-editinput')) return;
        //        if (mini.findParent(e.htmlEvent.target, this._eciconCls)) {
        //            //this._tryToggleNode(e.record);
        //        } else 
        if (mini.findParent(e.htmlEvent.target, this._eciconCls)) return;

        var nodes, text;

        // 有值则说明存在搜索，则节点text中存在HTML标签
        if (this._filterKey) {
            nodes = e.record[this.nodesField];
            if (nodes) {

                for (var i = 0, l = nodes.length; i < l; i++) {
                    text = nodes[i][this.textField];
                    nodes[i][this.textField] = text.replace(/<\/?.+?>/g, "");
                }
            }


        }
        if (mini.findParent(e.htmlEvent.target, 'mini-tree-checkbox') || this.checkOnTextClick) {
            this._tryToggleCheckNode(e.record);
        } else {
            this.fire("cellclick", e);
        }
    },

    // 安全整改后服务端不再返回html，所以搜索关键字高亮效果需要前端来实现了
    _OnDrawCell: function (record, column, rowIndex, columnIndex) {

        var e = mini.TreeGrid.superclass._OnDrawCell.call(this, record, column, rowIndex, columnIndex);

        if (this._treeColumn && this._treeColumn == column.name) {
            var node = e.node;

            if (node.ckr === false) {
                e.showCheckBox = false;
                e.showRadioButton = false;
            }
            // 加上搜索关键字高亮效果
            if(this._filterKey) {
                var text = record[column.field];
                // 如果text中已经有html了，说明已经关键字高亮了，不需要再做处理
                // 兼容以前服务端实现高亮的情况，以及解决展开收起节点引起的重复drawcell事件
                if(!/<[^>]+>/.test(text)) {
                    e.nodeHtml = text.replace(new RegExp(this._filterKey, "gi" ), "<span class=\"mini-highlight\">" + this._filterKey + "</span>");
                }
                
            }
            this.fire("drawnode", e);
            if (e.nodeStyle) {
                e.cellStyle = e.nodeStyle;
            }
            if (e.nodeCls) {
                e.cellCls = e.nodeCls;
            }
            if (e.nodeHtml) {
                e.cellHtml = e.nodeHtml;
            } else if(node.textCls) {
                e.cellHtml = '<span class="' + node.textCls + '">' + e.cellHtml + '</span>';
            }

            this._createTreeColumn(e);
        }
        return e;
    },

    getFilterUrl: function() {
        return this.filterUrl || this.url;
    },

    setFilterUrl: function(filterUrl) {
        this.filterUrl = filterUrl;
    },

    getFilterMode: function() {
        return this.filterMode;
    },

    setFilterMode: function(filterMode) {
        this.filterMode = filterMode;
    },
    /**
     * [setEmptyText 设置搜索树文本框为空时内容]
     * @param {String} value 要设置的值
     */
    setEmptyText: function(value) {
        if (this.emptyText != value) {
            this._filterInput.emptyText = this.emptyText = value;
            this._filterInput._doEmpty();
        }
    },
    /**
     * [getEmptyText 获取搜索树文本框为空时内容提示]
     * @return {String} emptyText
     */
    getEmptyText: function() {
        return this.emptyText;
    },

    getAttrs: function(el) {
        var attrs = mini.FilterTree.superclass.getAttrs.call(this, el);
        mini._ParseString(el, attrs, ["filterMode", "filterUrl", "emptyText"]);

        if (!attrs.filterUrl) {
            attrs.filterUrl = attrs.url;
        }
        return attrs;
    }



});

mini.regClass(mini.FilterTree, "filtertree");

// (function(win, $, mini) {
mini.ImageUploader = function() {
    mini.ImageUploader.superclass.constructor.call(this);
};

var sourceLoader = function(baseDir) {
    var dtd = $.Deferred();
};

mini.extend(mini.ImageUploader, mini.Control, {
    uiCls: 'mini-imageuploader',
    _FILE_ITEM_TPL: '<div class="{{cls}}" data-id="{{id}}" data-guid="{{fileGuid}}" data-url="{{downloadUrl}}">\
        <img class="mini-imageuploader-img" src="{{downloadUrl}}" />\
        <span class="mini-imageuploader-edit">编辑图片</span>\
        <span class="mini-imageuploader-remove action-icon icon-remove"></span>\
    </div>',
    // 裁剪配置 https://github.com/fengyuanchen/cropperjs#options
    _cropperOptions: {
        dragMode: 'move',
        aspectRatio: NaN,
        cropBoxResizable: true, // 是否可以更换大小
        viewMode: 2,
        zoomOnWheel: true,
        autoCropArea: 0.9,
        preview: '.image-preview',
        crop: function() {}
    },
    set: function(options) {
        if (typeof options == 'string') {
            return this;
        }
        if (options.cropperOption) {
            // this._applyCropperOptions(mini.decode(options.cropperOption));
            this._cropperOptions = $.extend({}, this._cropperOptions, mini.decode(options.cropperOption));
            delete options.cropperOption;
        }
        mini.ImageUploader.superclass.set.call(this, options);

        return this;
    },

    _create: function() {
        this.externalSrc = this.externalSrc || mini.externalSrc;

        if (!this.__instanceIndex) {
            this.__instanceIndex = 1;
        } else {
            this.__instanceIndex++;
        }

        var uiCls = this.uiCls;
        this.el = document.createElement('div');
        this.el.className = 'clearfix';

        this._FILE_EL_ID = uiCls + '-file-select-' + this.__instanceIndex;
        this.el.innerHTML = [
            '<input id="'+this._FILE_EL_ID+'" style="display:block;" type="file" accept="image/*">',
            '<div class="'+uiCls+'-uploader-btn mini-imageuploader-add">',
                '<label for="'+this._FILE_EL_ID+'">',
                    '<span class="'+uiCls+'-upload-icon action-icon icon-remove" style="transform:rotate(45deg)"></span>',
                    '<span class="'+uiCls+'-upload-text">上传文件</span>',    
                '</label>',
            '</div>',
            '<div class="'+uiCls+'-list clearfix"></div>'
            ].join('');
        this.$fileList = $(this.el).find('.' + uiCls + '-list');
    },
    _afterApply: function() {
        this._initEvent();

        this._createImageCropper();
    },
    _genderItem: function(data) {
        var cls = this.uiCls + '-item';
        var viewData = $.extend({ cls: cls }, data);
        viewData.downloadUrl = (window._rootPath || '') + '/' + viewData.downloadUrl;

        if (!window.Mustache) {
            mini.loadJS(mini.externalSrc + 'mustache.min.js');
        }

        return Mustache.render(this._FILE_ITEM_TPL, viewData);
    },
    _addFileItem: function(fileData) {
        return $(this._genderItem(fileData)).appendTo(this.$fileList);
    },
    setData: function(data) {
        if (!$.type(data) == 'array') {
            return;
        }
        this.data = data;
        this.$fileList.empty();
        var that = this;
        $.each(data, function(i, fileData) {
            that._addFileItem(fileData);
        });
    },
    getData: function() {
        return this.data || [];
    },
    _initEvent: function() {
        var uiCls = '.' + this.uiCls;
        var that = this;

        $(this.el)
            .on('click', uiCls + '-uploader-btn', function(ev) {
                // alert('upload');
            })
            .on('click', uiCls + '-edit', function(ev) {
                var $item = $(this).closest(uiCls + '-item');
                that.imageCropper.show($item.data('url'), $item.data('guid'));
            })
            .on('click', uiCls + '-remove', function(ev) {
                var $item = $(this).closest(uiCls + '-item');
                var id = $item.data('id');
                var guid = $item.data('guid');

                console.log({ id: id, guid: guid });
                mini.confirm('确定删除此次文件？', '删除提醒', function(action) {
                    if (action == 'ok') {
                        $item.remove();
                        that.data = $.map(that.data, function(item) {
                            return item.guid != guid;
                        });
                    }
                });
            });

        $('#' + this._FILE_EL_ID).on('change', function(ev) {
            console.log('change');
            var el = this;
            if (this.files && this.files.length) {
                that.__onAddImage(this.files[0], function() {
                    el.value = '';
                });
            }
        });
    },
    __onAddImage: function(file, callback) {
        var reader = new FileReader();
        var that = this;
        reader.onload = function() {
            reader.onload = null;
            that.imageCropper.show(reader.result);
            callback && callback();
        };
        reader.onerror = function() {
            reader.onerror = null;
            console.log(arguments);
            callback && callback();
        };
        reader.readAsDataURL(file);
    },

    /**
     * 初始化 imageCropper
     */
    _createImageCropper: function() {
        // 无 canvas 则不支持
        if (!window.HTMLCanvasElement || !window.HTMLCanvasElement.toString || !/\[native code\]/.test(window.HTMLCanvasElement.toString())) {
            return;
        }
        if ($.type(window.$.fn.cropper) == 'function') {
            return this._initImageCropper();
        }
        var that = this;

        mini.loadCSS(this.externalSrc + 'cropper/cropper.min.css', this.uiCls + '-cropper-style');
        mini.loadJS(this.externalSrc + 'cropper/cropper.min.js', function() {
            that._initImageCropper();
        });
    },
    setCropperOption: function(key, value) {
        if (value === undefined && $.type(key) === 'object') {
        }

        // this.
    },
    /**
     * 初始化图片裁剪工具方法
     */
    _initImageCropper: function() {
        var $imgCropper = $('#head-sculpture-img');
        var that = this;

        var dialog = mini.get('head-sculpture-window');

        $(dialog.el)
            .on('click', '.save.btn', function() {
                var guid = $imgCropper.data('guid');
                that.saveCropperImage(guid);
            })
            .on('click', '.cancel.btn', function() {
                that.imageCropper.hide();
            });

        return (this.imageCropper = {
            show: function(imgUrl, guid) {
                $imgCropper.attr('src', imgUrl);
                $imgCropper.attr('data-guid', guid).data('guid', guid);
                dialog.setTitle('裁剪头像');
                dialog.show();
                $imgCropper.cropper('destroy').cropper(that._cropperOptions);
            },
            hide: function() {
                $imgCropper.attr('src', '');
                $imgCropper.attr('data-guid', null).data('guid', null);
                dialog.hide();
            },
            // 放大
            zoomIn: function() {
                return $imgCropper.cropper('zoom', 0.1);
            },
            // 缩小
            zoomOut: function() {
                return $imgCropper.cropper('zoom', -0.1);
            }, // 缩放到 参数为基于原图的显示比例，即1表示显示实际的大小，不指定则缩放至实际大小
            zoomTo: function(ratio) {
                return $imgCropper.cropper('zoomTo', ratio === undefined ? 1 : ratio);
            },
            // 移动
            move: function(xpix, ypix) {
                var x = xpix === undefined ? -10 : xpix,
                    y = ypix === undefined ? -10 : ypix;
                return $imgCropper.cropper('move', x, y);
            },
            // 移动到
            moveTo: function(x, y) {
                return $imgCropper.cropper('moveTo', x === undefined ? 0 : x, y === undefined ? 0 : y);
            }, // 裁剪框移动
            move: function(xpix, ypix) {
                var xstep = xpix === undefined ? -10 : xpix;
                var ystep = ypix === undefined ? -10 : ypix;
                var data = $imgCropper.cropper('getData', true);
                data.x += xstep;
                data.y += ystep;
                if (data.x < 0) data.x = 0;
                if (data.y < 0) data.y = 0;
                return $imgCropper.cropper('setData', data);
            },
            // 裁剪框移动到
            moveTo: function(x, y) {
                var data = $imgCropper.cropper('getData', true);
                data.x = x === undefined ? 0 : x;
                data.y = y === undefined ? 0 : y;
                return $imgCropper.cropper('setData', data);
            },
            // 旋转指定角度 参数为旋转角度，左旋为负值，右旋为正，不指定则右旋90度
            rotate: function(deg) {
                return $imgCropper
                    .cropper('clear')
                    .cropper('rotate', deg === undefined ? 90 : deg)
                    .cropper('crop');
            },
            // 旋转到指定角度 参数为旋转角度，左旋为负值，右旋为正，不指定则复原
            rotateTo: function(deg) {
                return $imgCropper
                    .cropper('clear')
                    .cropper('rotate', deg === undefined ? 0 : deg)
                    .cropper('crop');
            },
            // 水平镜像
            scaleX: function() {
                return $imgCropper.cropper('scaleX', -$imgCropper.cropper('getData').scaleX);
            },
            // 垂直镜像
            scaleY: function() {
                return $imgCropper.cropper('scaleY', -$imgCropper.cropper('getData').scaleY);
            },
            // 设置裁剪比例 参数为要设置的比例（Number类型），非数值则为任意
            setAspectRatio: function(ratio) {
                return $imgCropper.cropper('setAspectRatio', ratio);
            },
            // 设置裁剪框大小
            setCropperSize: function(data) {
                var cropperImgData = {};
                // 设置裁剪框不可拖动调整大小 移动模式 不可缩放 不可鼠标切换模式
                cropperImgData.cropBoxResizable = false;
                cropperImgData.dragMode = 'move';
                cropperImgData.zoomable = false;
                cropperImgData.toggleDragModeOnDblclick = false;
                // 指定裁剪框数据
                cropperImgData.data = $.extend({}, $imgCropper.cropper('getData', true), data);

                $imgCropper
                    .cropper('destroy')
                    .cropper(cropperImgData)
                    .cropper('crop');
            },
            // 重置
            reset: function() {
                $imgCropper.cropper('destroy').cropper($.extend(this.nowOptions, this.useroptions));
            }, // 获取裁剪图片的信息（位置大小） 参数表示是否取整，默认为true
            getCropperImgInfo: function(rounded) {
                return $imgCropper.cropper('getData', rounded === undefined ? true : !!rounded);
            },
            // 获取图片数据 size 可将裁剪后的图片按照指定大小生成,size 示例{width:400,height:300} ,type为生成图片的格式，默认为jpeg
            getData: function(size, type) {
                var result = {};
                // 位置大小信息
                result.info = $imgCropper.cropper('getData', true);
                // 裁剪后的图片数据信息
                if (type === undefined) type = 'jpeg';
                result.data = $imgCropper.cropper('getCroppedCanvas', data).toDataURL('image/' + type);
                return result;
            },
            getImageData: function(size, type) {
                if (type === undefined) type = 'jpeg';
                return $imgCropper.cropper('getCroppedCanvas', size).toDataURL('image/' + type);
            },
            // 获取当前缩放比例 实际/原始
            getZoom: function() {
                var data = $imgCropper.cropper('getCanvasData');
                return data.width / data.naturalWidth;
            }
        });
    },
    saveCropperImage: function(fileGuid) {
        mini.mask();
        var that = this;
        var base64 = this.imageCropper.getImageData();
        // console.log(base64);

        var data = {
            base64: base64
        };

        if (fileGuid !== undefined) {
            data.fileGuid = fileGuid;
            data.mode = 'edit';
        }
        return $.ajax({
            url: './imageUploader.php',
            type: 'post',
            data: data
        })
            .then(function(data) {
                mini.unmask();
                if ($.type(data) === 'string') {
                    data = JSON.parse(data);
                }
                if (!that.data) {
                    that.data = [data];
                } else {
                    that.data.push(data);
                }

                console.log(data.downloadUrl);

                if (fileGuid) {
                    that.$fileList.find('[data-guid="' + fileGuid + '"]').replaceWith(that._genderItem(data));
                } else {
                    that._addFileItem(data);
                }

                that.imageCropper.hide();
            })
            .fail(function() {
                mini.unmask();
                console.error(arguments);
            });
    },
    getAttrs: function(el) {
        var attrs = mini.ImageUploader.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs, ['cropperOption']);

        // mini._ParseString(el, attrs, ['trigger']);
        // mini._ParseString(el, attrs, ["url", "pickerText", "onbeforefilequeued", "onpostfilemd5", "onimportfinished", "onexportresult"]);
        return attrs;
    }
});

mini.regClass(mini.ImageUploader, 'imageuploader');
// })(this, this.jQuery, this.mini);

! function(factory) {
    "function" == typeof define && define.amd ? define(["jquery"], factory) : factory("object" == typeof exports ? require("jquery") : jQuery);
}(function($) {
    var caretTimeoutId, ua = navigator.userAgent,
        iPhone = /iphone/i.test(ua),
        chrome = /chrome/i.test(ua),
        android = /android/i.test(ua);
    $.mask = {
        definitions: {
            "9": "[0-9]",
            a: "[A-Za-z]",
            "*": "[A-Za-z0-9]"
        },
        autoclear: !0,
        dataName: "rawMaskFn",
        placeholder: "_"
    }, $.fn.extend({
        caret: function(begin, end) {
            var range;
            if (0 !== this.length && !this.is(":hidden")) return "number" == typeof begin ? (end = "number" == typeof end ? end : begin,
                this.each(function() {
                    this.setSelectionRange ? this.setSelectionRange(begin, end) : this.createTextRange && (range = this.createTextRange(),
                        range.collapse(!0), range.moveEnd("character", end), range.moveStart("character", begin),
                        range.select());
                })) : (this[0].setSelectionRange ? (begin = this[0].selectionStart, end = this[0].selectionEnd) : document.selection && document.selection.createRange && (range = document.selection.createRange(),
                begin = 0 - range.duplicate().moveStart("character", -1e5), end = begin + range.text.length), {
                begin: begin,
                end: end
            });
        },
        unmask: function() {
            return this.trigger("unmask");
        },
        mask: function(mask, settings) {
            var input, defs, tests, partialPosition, firstNonMaskPos, lastRequiredNonMaskPos, len, oldVal;
            if (!mask && this.length > 0) {
                input = $(this[0]);
                var fn = input.data($.mask.dataName);
                return fn ? fn() : void 0;
            }
            return settings = $.extend({
                    autoclear: $.mask.autoclear,
                    placeholder: $.mask.placeholder,
                    completed: null
                }, settings), defs = $.mask.definitions, tests = [], partialPosition = len = mask.length,
                firstNonMaskPos = null, $.each(mask.split(""), function(i, c) {
                    "?" == c ? (len--, partialPosition = i) : defs[c] ? (tests.push(new RegExp(defs[c])),
                        null === firstNonMaskPos && (firstNonMaskPos = tests.length - 1), partialPosition > i && (lastRequiredNonMaskPos = tests.length - 1)) : tests.push(null);
                }), this.trigger("unmask").each(function() {
                    function tryFireCompleted() {
                        if (settings.completed) {
                            for (var i = firstNonMaskPos; lastRequiredNonMaskPos >= i; i++)
                                if (tests[i] && buffer[i] === getPlaceholder(i)) return;
                            settings.completed.call(input);
                        }
                    }

                    function getPlaceholder(i) {
                        return settings.placeholder.charAt(i < settings.placeholder.length ? i : 0);
                    }

                    function seekNext(pos) {
                        for (; ++pos < len && !tests[pos];);
                        return pos;
                    }

                    function seekPrev(pos) {
                        for (; --pos >= 0 && !tests[pos];);
                        return pos;
                    }

                    function shiftL(begin, end) {
                        var i, j;
                        if (!(0 > begin)) {
                            for (i = begin, j = seekNext(end); len > i; i++)
                                if (tests[i]) {
                                    if (!(len > j && tests[i].test(buffer[j]))) break;
                                    buffer[i] = buffer[j], buffer[j] = getPlaceholder(j), j = seekNext(j);
                                }
                            writeBuffer(), input.caret(Math.max(firstNonMaskPos, begin));
                        }
                    }

                    function shiftR(pos) {
                        var i, c, j, t;
                        for (i = pos, c = getPlaceholder(pos); len > i; i++)
                            if (tests[i]) {
                                if (j = seekNext(i), t = buffer[i], buffer[i] = c, !(len > j && tests[j].test(t))) break;
                                c = t;
                            }
                    }

                    function androidInputEvent() {
                        var curVal = input.val(),
                            pos = input.caret();
                        if (curVal.length < oldVal.length) {
                            for (checkVal(!0); pos.begin > 0 && !tests[pos.begin - 1];) pos.begin--;
                            if (0 === pos.begin)
                                for (; pos.begin < firstNonMaskPos && !tests[pos.begin];) pos.begin++;
                            input.caret(pos.begin, pos.begin);
                        } else {
                            for (checkVal(!0); pos.begin < len && !tests[pos.begin];) pos.begin++;
                            input.caret(pos.begin, pos.begin);
                        }
                        tryFireCompleted();
                    }

                    function blurEvent() {
                        checkVal(), input.val() != focusText && input.change();
                    }

                    function keydownEvent(e) {
                        if (!input.prop("readonly")) {
                            var pos, begin, end, k = e.which || e.keyCode;
                            oldVal = input.val(), 8 === k || 46 === k || iPhone && 127 === k ? (pos = input.caret(),
                                begin = pos.begin, end = pos.end, end - begin === 0 && (begin = 46 !== k ? seekPrev(begin) : end = seekNext(begin - 1),
                                    end = 46 === k ? seekNext(end) : end), clearBuffer(begin, end), shiftL(begin, end - 1),
                                e.preventDefault()) : 13 === k ? blurEvent.call(this, e) : 27 === k && (input.val(focusText),
                                input.caret(0, checkVal()), e.preventDefault());
                        }
                    }

                    function keypressEvent(e) {
                        if (!input.prop("readonly")) {
                            var p, c, next, k = e.which || e.keyCode,
                                pos = input.caret();
                            if (!(e.ctrlKey || e.altKey || e.metaKey || 32 > k) && k && 13 !== k) {
                                if (pos.end - pos.begin !== 0 && (clearBuffer(pos.begin, pos.end), shiftL(pos.begin, pos.end - 1)),
                                    p = seekNext(pos.begin - 1), len > p && (c = String.fromCharCode(k), tests[p].test(c))) {
                                    if (shiftR(p), buffer[p] = c, writeBuffer(), next = seekNext(p), android) {
                                        var proxy = function() {
                                            $.proxy($.fn.caret, input, next)();
                                        };
                                        setTimeout(proxy, 0);
                                    } else input.caret(next);
                                    pos.begin <= lastRequiredNonMaskPos && tryFireCompleted();
                                }
                                e.preventDefault();
                            }
                        }
                    }

                    function clearBuffer(start, end) {
                        var i;
                        for (i = start; end > i && len > i; i++) tests[i] && (buffer[i] = getPlaceholder(i));
                    }

                    function writeBuffer() {
                        input.val(buffer.join(""));
                    }

                    function checkVal(allow) {
                        var i, c, pos, test = input.val(),
                            lastMatch = -1;
                        for (i = 0, pos = 0; len > i; i++)
                            if (tests[i]) {
                                for (buffer[i] = getPlaceholder(i); pos++ < test.length;)
                                    if (c = test.charAt(pos - 1),
                                        tests[i].test(c)) {
                                        buffer[i] = c, lastMatch = i;
                                        break;
                                    }
                                if (pos > test.length) {
                                    clearBuffer(i + 1, len);
                                    break;
                                }
                            } else buffer[i] === test.charAt(pos) && pos++, partialPosition > i && (lastMatch = i);
                        return allow ? writeBuffer() : partialPosition > lastMatch + 1 ? settings.autoclear || buffer.join("") === defaultBuffer ? (input.val() && input.val(""),
                                clearBuffer(0, len)) : writeBuffer() : (writeBuffer(), input.val(input.val().substring(0, lastMatch + 1))),
                            partialPosition ? i : firstNonMaskPos;
                    }
                    var input = $(this),
                        buffer = $.map(mask.split(""), function(c, i) {
                            return "?" != c ? defs[c] ? getPlaceholder(i) : c : void 0;
                        }),
                        defaultBuffer = buffer.join(""),
                        focusText = input.val();
                    input.data($.mask.dataName, function() {
                            return $.map(buffer, function(c, i) {
                                return tests[i] && c != getPlaceholder(i) ? c : null;
                            }).join("");
                        }), input.one("unmask", function() {
                            input.off(".mask").removeData($.mask.dataName);
                        }).on("focus.mask", function() {
                            if (!input.prop("readonly")) {
                                clearTimeout(caretTimeoutId);
                                var pos;
                                focusText = input.val(), pos = checkVal(), caretTimeoutId = setTimeout(function() {
                                    writeBuffer(), pos == mask.replace("?", "").length ? input.caret(0, pos) : input.caret(pos);
                                }, 10);
                            }
                        }).on("blur.mask", blurEvent).on("keydown.mask", keydownEvent).on("keypress.mask", keypressEvent).on("input.mask paste.mask", function() {
                            input.prop("readonly") || setTimeout(function() {
                                var pos = checkVal(!0);
                                input.caret(pos), tryFireCompleted();
                            }, 0);
                        }), chrome && android && input.off("input.mask").on("input.mask", androidInputEvent),
                        checkVal();
                });
        }
    });
});
mini.InputMask = function() {

    mini.InputMask.superclass.constructor.call(this);

};

mini.extend(mini.InputMask, mini.TextBox, {
    uiCls: 'mini-inputmask',
    mask: '',

    set: function (kv) {
        if (typeof kv == 'string') {
            return this;
        }

        // var placeholder = kv.placeholder;
        // delete kv.placeholder;

        var mask = kv.mask;
        delete kv.mask;

        // var autoclear = kv.autoclear;
        // delete kv.autoclear;

        mini.InputMask.superclass.set.call(this, kv);

        if (mask) {
            this.setMask(mask);
        }


        return this;
    },

    setMask: function(mask) {
        this.mask = mask;

        jQuery(this._textEl).mask(mask);
    },

    getMask: function() {
        return this.mask;
    },

    getAttrs: function(el) {
        var attrs = mini.InputMask.superclass.getAttrs.call(this, el);
        mini._ParseString(el, attrs, ["mask"]);

        return attrs;
    }

});

mini.regClass(mini.InputMask, 'inputmask');
mini.LargeFileUploader = function() {
    mini.LargeFileUploader.superclass.constructor.call(this);
};
mini.extend(mini.LargeFileUploader, mini.Control, {
    uiCls: "mini-largefileuploader",
    uploadUrl: "",
    // 允许的文件后缀，不带点，多个用逗号分割
    limitType: "",
    fileNumLimit: 1,
    fileSizeLimit: 0,
    fileSingleSizeLimit: 0,
    // 是否多选，根fileNumLimit的值相关联
    multiSelect: true,

    auto: true,

    // 第三方资源的路径，默认为全局配置mini.externalSrc的值
    externalSrc: '',
    pickerText: '选择文件',
    startText: '开始上传',
    pauseText: '暂停上传',
    numLimitErrorText: '选择的文件过多！</br>最多可上传{0}个文件',
    sizeLimitErrorText: '选择的文件过大！</br>最多可上传{0}KB文件',
    typeDeniedErrorText: '选择的文件类型错误！</br>可上传的文件类型为：{0}',
    sizeErrorText: '选择的文件过大！</br>可上传的单文件最大为{0}KB',
    emptyFileErrorText: '不能上传空文件！',

    set: function(kv) {
        if (typeof kv == 'string') {
            return this;
        }

        var pickerText = kv.pickerText;
        delete kv.pickerText;

        // 9.3 服务化后需要该属性来控制附件是否落地
        // 该属性需要在每次请求中都传递回后端
        // 由于获取文件状态和上传完成这两个请求无法加额外参数，只能把它加到url上
        var needChunkLocal = kv.needChunkLocal;
        delete kv.needChunkLocal;

        // 必须先设置needChunkLocal
        // 因为之后框架的action以及uploadUrl都是依赖needChunkLocal
        if (needChunkLocal) {
            this.needChunkLocal = needChunkLocal;
        }

        mini.LargeFileUploader.superclass.set.call(this, kv);

        if (pickerText) {
            this._picker.innerHTML = pickerText;
        }
        return this;
    },
    _create: function() {
        this.el = document.createElement("div");
        this.el.innerHTML = '<div class="mini-uploader-btns"><div class="mini-ntko-pick">' + this.pickerText + '</div></div><div class="mini-uploader-list"></div><div class="mini-ntko"></div>';

        this._buttons = this.el.firstChild;
        this._fileList = this.el.children[1];
        this._ntkoContent = this.el.lastChild;

        this._picker = this._buttons.firstChild;

        this._uploadBtn = new mini.Button();
        this._uploadBtn.setText(this.startText);
        this._uploadBtn.render(this._buttons);

        this._ntkoContent.innerHTML = '<object id="' + this.uid + '-ntko" classid="clsid:882C96AC-B79E-4f50-A7A6-6E5E42431A05" codebase="' + (this.externalSrc || mini.externalSrc) + 'ntkoLFUploader/NtkoLFUploader.cab#version=6,1,1,8"><PARAM NAME="BackColor" VALUE="16744576"><PARAM NAME="ForeColor" VALUE="16777215"><PARAM NAME="IsUseUTF8Data" VALUE="true"><param name="ProductCaption" value="' + (window.NTKO_ProductCaption || '国泰新点用户') + '"><param name="ProductKey" value="' + (window.NTKO_ProductKey || '3CF3019EA6883730AB34F0D5A8FACDB1CDB2A9EA') + '"><PARAM NAME="MakerCaption" VALUE="江苏国泰新点软件有限公司"><PARAM NAME="MakerKey" VALUE="39337AFCA7AFD1F882A3BF53CBE1E4AC804C65A6"><span style="color: red;">不能装载NTKO大文件上传控件。</span></object>';
        this._ntko = this._ntkoContent.firstChild;

        this._errorContent = '';
    },

    _initEvents: function() {
        mini._BindEvents(function() {
            mini_onOne(this._picker, "click", this.__OnPickerClick, this);
        }, this);

        var that = this,
            ntko = this._ntko;

        // 绑定上传按钮的点击事件
        this._uploadBtn.on('click', function() {
            if (ntko.IsUploading) {
                that.stopUpload();
                that._uploadBtn.setText(that.pauseText);
            } else {
                that.beginUpload();
                that._uploadBtn.setText(that.startText);
            }
        });

        if (this.auto) {
            this._uploadBtn.hide();
        }

        //
        if (ntko.attachEvent) {
            ntko.attachEvent('BeforeFileAdded', function(filePath, fileName, fileSize) {
                ntko.CancelLastCommand = !that._beforeFileQueued(filePath, fileName, fileSize);
            });
            ntko.attachEvent('OnLocalFileAdded', function(filePath, fileName, fileSize) {

                that._onFilesQueued(filePath, fileName, fileSize);
            });
            ntko.attachEvent('OnFileProcessStatusChange', function(file, statusText, isPersent, persentNumber) {
                that._onUploadProgress(file, statusText, isPersent, persentNumber);
            });
            ntko.attachEvent('OnOneFileUploadFinished', function(file, isAllUploaded) {
                that._onFileFinished(file, isAllUploaded);
            });
            ntko.attachEvent('OnSaveToURLFinished', function(isAllSuccess) {
                that._onUploadFinished(isAllSuccess);
            });
        } else {
            var id = this.uid + '-ntko',
                lfu = 'var lfu = mini.getbyUID("' + this.uid + '");',
                text = lfu + 'lfu._ntko.CancelLastCommand = !lfu._beforeFileQueued(filePath, fileName, fileSize);';

            addEvent({
                target: id,
                event: "BeforeFileAdded(filePath, fileName, fileSize)",
                text: text
            });

            text = lfu + 'lfu._onFilesQueued(filePath, fileName, fileSize);';
            addEvent({
                target: id,
                event: "OnLocalFileAdded(filePath, fileName, fileSize)",
                text: text
            });

            text = lfu + 'lfu._onUploadProgress(file, statusText, isPersent, persentNumber);';
            addEvent({
                target: id,
                event: "OnFileProcessStatusChange(file, statusText, isPersent, persentNumber)",
                text: text
            });

            text = lfu + 'lfu._onFileFinished(file, isAllUploaded);';
            addEvent({
                target: id,
                event: "OnOneFileUploadFinished(file, isAllUploaded)",
                text: text
            });

            text = lfu + 'lfu._onUploadFinished(isAllSuccess);';
            addEvent({
                target: id,
                event: "OnSaveToURLFinished(isAllSuccess)",
                text: text
            });


        }

        function addEvent(opt) {
            var script = document.createElement('script');
            script.language = "JScript";
            script.setAttribute('for', opt.target);
            script.event = opt.event;
            script.text = opt.text;
            document.body.appendChild(script);
        }

    },

    _afterApply: function() {
        // 说明没有初始化成功
        if (this._ntko.StatusCode === undefined) {
            this.el.innerHTML = '<a class="noflash" title="不能装载NTKO大文件上传控件。请确保使用IE浏览器，并检查浏览器的安全设置。">初始化错误</a>';
            mini.showPageWarning({
                html: '不能装载NTKO大文件上传控件。请确保使用IE浏览器，并检查浏览器的安全设置'
            });
        }
    },
    __OnPickerClick: function(e) {
        var ntko = this._ntko;
        try {
            ntko.AddLocalFile("", this.multiSelect, this._ntkoFileType);
            if (this.auto) {
                this.beginUpload();
            }

        } catch (error) {
            if (ntko.StatusCode == 10) {
                window.console && console.log('用户取消操作');
            } else {
                window.console && console.error("error：" + error.number + ":" + error.description);
            }
        }
    },
    _blocksFileField: "NTKO_LF_BLOCK",
    beginUpload: function() {
        if (this._onStartUpload()) {
            var ntko = this._ntko;
            // this._ntkoQueryFileStatusURL = 'http://localhost:8081/ntkolfuploaddemo/queryfilestatus.jsp';
            // this._ntkoFinishedUploadURL = 'http://localhost:8081/ntkolfuploaddemo/finishedupload.jsp';

            ntko.QueryFileStatusURL = this._ntkoQueryFileStatusURL;
            ntko.FinishedUploadURL = this._ntkoFinishedUploadURL;

            var data = {
                data: {}
            };
            this._onUploadBeforeSend(data);

            ntko.BeginSaveToURL(this.uploadUrl + '&query=upload', this._blocksFileField, parseData(data.data));
        }

        function parseData(data) {
            var r = [];
            for (var i in data) {
                r.push(i + '=' + data[i]);
            }

            return r.join('&');
        }
    },

    stopUpload: function() {
        this._ntko.StopSaveToURL();
        this._onStopUpload();
    },

    reset: function() {
        this._ntko.Reset();
        this._onReset();
    },

    removeFile: function(fileId) {

        var ntko = this._ntko,
            index = this._getFileIndex(fileId),
            file;

        if (index > -1) {
            file = ntko.GetFile(index);
            ntko.RemoveFile(index);

            this._fileIds[file.FilePath] = undefined;
            delete this._fileIds[file.FilePath];
            this._onFileDequeued(file);
        }

    },
    _getFileIndex: function(fileId) {
        var index = 0;
        for (var i in this._fileIds) {
            if (this._fileIds[i].id === fileId) {
                return index;
            }
            index++;
        }
        return -1;
    },

    _ntkoFileType: '*.*',
    setLimitType: function(limitType) {
        this.limitType = limitType.toLowerCase();
        this._ntkoFileType = this._getNtkoFileType(limitType);
    },

    getLimitType: function() {
        return this.limitType;
    },
    /**
     *
     * function setAuto(auto)
     * @member mini.WebUploader
     * @param {Boolen} auto
     *
     */
    setAuto: function(auto) {
        if (this.auto != auto) {
            this.auto = auto;
            if (auto) {
                this._uploadBtn.hide();
            } else {
                this._uploadBtn.show();
            }
        }
    },
    /**
     *
     * function getAuto()
     * @member mini.WebUploader
     * @returns {Boolen}
     *
     */
    getAuto: function() {
        return this.auto;
    },
    _getNtkoFileType: function(limitType) {
        if (!limitType) {
            return '*.*';
        }

        var fileTypes = [],
            limitTypes = limitType.split(',');

        for (var i = 0, l = limitTypes.length; i < l; i++) {
            fileTypes.push('*.' + limitTypes[i]);

        }

        return fileTypes.join(';');

    },

    getFileList: function() {
        return this._fileList;
    },

    setFileNumLimit: function(fileNumLimit) {
        fileNumLimit = parseInt(fileNumLimit) || 0;

        this.fileNumLimit = fileNumLimit;

        if (fileNumLimit === 1) {
            this.multiSelect = false;
        } else {
            this.multiSelect = true;
        }
    },

    getFileNumLimit: function() {
        return this.fileNumLimit;
    },

    setUploadUrl: function(uploadUrl) {
        var urlQuery = window.location.search.substring(1);
        var separator = '?';

        if (uploadUrl.indexOf('?') > 0) {
            separator = '&';
        }

        uploadUrl += (separator + 'type=ntko');
        if (urlQuery) {
            uploadUrl += ('&' + urlQuery);
        }

        if (this.needChunkLocal) {
            uploadUrl += '&needChunkLocal=1';
        }

        this.uploadUrl = uploadUrl;

        this._ntkoQueryFileStatusURL = uploadUrl + '&query=getStatus';
        this._ntkoFinishedUploadURL = uploadUrl + '&query=finished';

    },
    getUploadUrl: function() {
        return this.uploadUrl;
    },
    /**
     *
     * function setFileSingleSizeLimit(fileSingleSizeLimit)
     * @member mini.WebUploader
     * @param {int} fileSingleSizeLimit
     *
     */
    setFileSingleSizeLimit: function(fileSingleSizeLimit) {
        this.fileSingleSizeLimit = fileSingleSizeLimit;
    },
    /**
     *
     * function getFileSingleSizeLimit()
     * @member mini.WebUploader
     * @returns {int}
     *
     */
    getFileSingleSizeLimit: function() {
        return this.fileSingleSizeLimit;
    },

    _validateFile: function(file) {
        var filesCount = this._ntko.FilesCount;
        if (this.fileNumLimit && filesCount >= this.fileNumLimit) {
            this._errorContent = String.format(this.numLimitErrorText, this.fileNumLimit);

            return false;
        }

        if (this.fileSingleSizeLimit && file.size > this.fileSingleSizeLimit * 1024) {
            this._errorContent = String.format(this.sizeErrorText, this.fileSingleSizeLimit);

            return false;
        }

        if (file.size === 0) {
            this._errorContent = this.emptyFileErrorText;

            return false;
        }

        if (this.limitType && (',' + this.limitType + ',').indexOf(',' + file.ext.toLowerCase() + ',') == -1) {
            this._errorContent = String.format(this.typeDeniedErrorText, this.limitType);

            return false;
        }

        return true;
    },

    _parseAttachFile: function(attachFile) {
        var file = {
            path: attachFile.FilePath,
            name: attachFile.FileName,
            size: attachFile.FileSize,
            md5: attachFile.MD5ID
        };
        file.ext = file.name.substr(file.name.lastIndexOf('.') + 1);
        file.id = this._fileIds[file.path].id;

        return file;
    },

    // 当文件被加入队列之前触发，此事件的handler返回值为false，则此文件不会被添加进入队列。
    _beforeFileQueued: function(filePath, fileName, fileSize) {
        var file = {
            path: filePath,
            name: fileName,
            size: fileSize,
            ext: fileName.substr(fileName.lastIndexOf('.') + 1)
        };

        if (this._events["beforefilequeued"]) {
            var event = {
                source: this,
                sender: this,
                type: 'beforefilequeued',
                file: file,
                cancel: false
            };

            this.fire("beforefilequeued", event);

            if (event.cancel) {
                return false;
            }
        }

        if (this._validateFile(file)) {
            return true;
        } else {
            if (this._errorContent) {
                mini.alert(this._errorContent);
            }
            this._errorContent = "";
            return false;
        }

    },

    _fileIds: {},
    // 当有文件添加进来的时候
    _onFilesQueued: function(filePath, fileName, fileSize) {
        var file = {
            path: filePath,
            name: fileName,
            size: fileSize,
            ext: fileName.substr(fileName.lastIndexOf('.') + 1),
            id: UUID()
        };

        this._fileIds[file.path] = {
            id: file.id
        };

        this.fire("filesqueued", {
            files: [file]
        });
    },
    // 当文件被移除队列后触发
    _onFileDequeued: function(file) {
        this.fire("filedequeued", {
            file: file
        });
    },
    _onUploadBeforeSend: function(data) {
        this.fire("uploadbeforesend", data);
    },
    // 文件上传过程中触发。
    _onUploadProgress: function(file, statusText, isPersent, persentNumber) {
        file = this._parseAttachFile(file);

        console.log(arguments);

        var isUploading = false;
        if (isPersent) {
            if (!isUploading && statusText.indexOf('正在分析文件') === 0) {
                this.fire("md5progress", {
                    file: file,
                    percentage: persentNumber / 100
                });

                if (persentNumber == 100) {
                    isUploading = true;
                }
            } else {
                this.fire("uploadprogress", {
                    file: file,
                    percentage: persentNumber / 100
                });

            }
        } else if (!this._fileIds[file.path].started) {
            this.fire("uploadstart", {
                file: file
            });
            this._fileIds[file.path].started = true;
        }

    },

    _onFileFinished: function(file, isAllUploaded) {
        file = this._parseAttachFile(file);
        if (isAllUploaded) {
            this._onUploadSuccess(file);
        } else {
            this._onUploadError(file, this._parseNtkoRet(this._ntko.LastFinishedUploadRetMes));
        }

        this._onUploadComplete(file);
    },
    _onUploadSuccess: function(file) {
        var ret = this._parseNtkoRet(this._ntko.LastFinishedUploadRetMes);
        this.fire('uploadaccept', {
            ret: ret,
            object: {
                file: file
            }
        });


        this.fire("uploadsuccess", {
            file: file
        });
    },
    _onUploadError: function(file, reason) {
        this.fire("uploaderror", {
            file: file,
            reason: reason
        });
    },
    _onUploadComplete: function(file) {
        this.fire("uploadcomplete", {
            file: file
        });
    },
    // 当开始上传流程时触发
    _onStartUpload: function() {
        if (this._events["startupload"]) {
            var event = {
                source: this,
                sender: this,
                type: 'startupload',
                cancel: false
            };

            this.fire("startupload", event);

            if (event.cancel) {
                return false;
            }
        }

        return true;
    },
    // 当上传流程暂停时触发
    _onStopUpload: function() {
        this.fire("stopupload");
    },
    _onUploadFinished: function(isAllSuccess) {
        this._uploadBtn.setText(this.startText);
        this.fire("uploadfinished", {
            isAllSuccess: isAllSuccess
        });
    },
    // 当 uploader 被重置的时候触发
    _onReset: function() {
        this._fileIds = {};
        this.fire("reset");
    },

    _parseNtkoRet: function(ret) {
        var params = {},
            arr = ret.split('&');

        $.each(arr, function(i, item) {
            var tmp = item.split('='),
                key = tmp[0],
                val = tmp[1];

            if (typeof params[key] == 'undefined') {
                params[key] = val;
            } else if (typeof params[key] == 'string') {
                params[key] = [params[key], val];
            } else {
                params[key].push(val);
            }
        });

        return params;
    },

    getAttrs: function(el) {
        var attrs = mini.LargeFileUploader.superclass.getAttrs.call(this, el);
        attrs.text = el.innerHTML;
        mini._ParseString(el, attrs, ["uploadUrl", "limitType", "onbeforefilequeued",
            "onfilesqueued", "onreset", "onstartupload", "onstopupload",
            "onuploadfinished", "onuploadstart", "onuploadbeforesend", "onuploadaccept", "onuploadprogress", "onmd5progress",
            "onuploadsuccess", "onuploaderror", "onuploadcomplete", "pickerText"
        ]);
        mini._ParseBool(el, attrs, ["auto"]);
        mini._ParseInt(el, attrs, ["fileNumLimit", "fileSingleSizeLimit"]);

        return attrs;
    }
});

mini.regClass(mini.LargeFileUploader, "largefileuploader");

mini.Output = function() {
    mini.Output.superclass.constructor.apply(this, arguments);
};

mini.extend(mini.Output, mini.Control, {
    url: '',
    async: false,
    escape: false,
    autoLoad: true,

    uiCls: 'mini-output',

    _create: function() {
        this.el = document.createElement('div');
        this.el.className = 'mini-output';
    },

    _initEvents: function() {},

    doLayout: function() {
        if (!this.canLayout()) return;

        var cs = this.el.childNodes;
        if (cs) {
            for (var i = 0, l = cs.length; i < l; i++) {
                var cel = cs[i];
                mini.layout(cel);
            }
        }
    },
    doUpdate: function() {
        var xhr = jQuery.ajax({
            url: this.url,
            async: this.async
        });
        var that = this;
        xhr.done(function(html) {
            that.setValue(html);
        });
    },

    setUrl: function(value) {
        this.url = value;
        if (this.autoLoad) {
            this.doUpdate();
        }
    },
    getUrl: function() {
        return this.url;
    },

    setAutoLoad: function(autoLoad) {
        this.autoLoad = !!autoLoad;
    },
    getAutoLoad: function() {
        return this.autoLoad;
    },

    setEscape: function(escape) {
        this.escape = !!escape;
    },
    getEscape: function() {
        return this.escape;
    },

    setAsync: function(value) {
        this.async = value;
    },
    getAsync: function() {
        return this.async;
    },

    setValue: function(value) {
        // 提供一个外部处理数据的接口，方便“服务端返回数据，前端根据数据渲染html”这种场景的实现
        var e = {
            value: value
        };

        this.fire('valuechanged', e);

        value = e.value;

        if (value === null || value === undefined) value = '';

        if (this.escape) {
            value = mini.htmlEncode(value);
        }
        mini.innerHTML(this.el, value);
        mini.parse(this.el);

        this.doLayout();
    },

    ///////////////////////////////////////////////
    getAttrs: function(el) {
        var attrs = mini.Output.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs, ['url', 'onvaluechanged']);

        mini._ParseBool(el, attrs, ['escape', 'async', 'autoLoad']);

        return attrs;
    }
});

mini.regClass(mini.Output, 'output');

mini.OutputText = function () {
    mini.OutputText.superclass.constructor.apply(this, arguments);
};

mini.extend(mini.OutputText, mini.Control, {
    // dateFormat: "",
    maxWidth: "",
    escape: false,
    showTitle: true,
    uiCls: "mini-outputtext",

    set: function (kv) {
        if (typeof kv == 'string') {
            return this;
        }

        // var dateFormat = kv.dateFormat;
        // delete kv.dateFormat;

        var maxWidth = kv.maxWidth;
        delete kv.maxWidth;

        var _escape = kv.escape;
        delete kv.escape;

        var showTitle = kv.showTitle;
        delete kv.showTitle;

        // if(dateFormat) {
        // 	this.dateFormat = dateFormat;
        // }
        if (maxWidth) {
            this.setMaxWidth(maxWidth);
        }
        if (_escape) {
            this.escape = _escape;
        }
        if(!mini.isNull(showTitle)) {
            this.setShowTitle(showTitle);
        }

        mini.OutputText.superclass.set.call(this, kv);

        return this;
    },

    _create: function () {
        this.el = document.createElement("span");
    },

    setValue: function (value) {
        if (value === null || value === undefined) value = "";
        
        this.value = value;
        // if (this.dateFormat && mini.isDate(mini.parseDate(value)) {
        //            value = mini.formatDate(value, this.dateFormat);
        //    }

        //    if(this.maxLength && value.length > this.maxLength){
        //    	value = value.substr(0, this.maxLength) + '...';
        //    }

        if (this.escape === true) {
            value = mini.htmlEncode(value);
            // 恢复换行
            value = value.replace(/\n/g, "<br/>");
        }
        this.el.innerHTML = value;

        var title = jQuery(this.el).text();

        if(this.showTitle) {
            mini.setAttr(this.el, 'title', title);
        }

    },

    setMaxWidth: function (maxWidth) {
        maxWidth = maxWidth.replace(/(^\s*)|(\s*$)/g, '');
        if (maxWidth) {
            if (maxWidth.substr(maxWidth.length - 2) != 'px') {
                maxWidth += 'px';
            }
            mini.addClass(this.el, 'mini-text-ellipsis');
        } else {
            mini.removeClass(this.el, 'mini-text-ellipsis');
        }

        this.el.style.maxWidth = maxWidth;

        this.maxWidth = maxWidth;
    },

    getMaxWidth: function() {
        return this.maxWidth;
    },

    getEscape: function () {
        return this.escape;
    },

    getShowTitle: function() {
        return this.showTitle;
    },

    setShowTitle: function(showTitle) {
        this.showTitle = showTitle;
    },

    getAttrs: function (el) {
        var attrs = mini.OutputText.superclass.getAttrs.call(this, el);
        // mini._ParseString(el, attrs, ["dateFormat"]);

        mini._ParseString(el, attrs, ["maxWidth"]);

        mini._ParseBool(el, attrs, ["escape", "showTitle"]);

        return attrs;
    }

});

mini.regClass(mini.OutputText, "outputtext");
mini.PagerTree = function () {
    mini.PagerTree.superclass.constructor.call(this);
    mini.addClass(this.el, 'mini-tree');
    mini.addClass(this.el, 'mini-treegrid');

    this._Expander = new mini._PagerTree_Expander(this);
    // 手动收缩节点的集合
    this._collapseNodes = [];
    // 手动展开节点的集合
    this._expandNodes = [];
    this.on("beforeload", this.__OnBeforeLoad, this);
};
mini.extend(mini.PagerTree, mini.DataGrid, {

    uiCls: 'mini-pagertree',
    treeColumn: '',

    idField: 'id',
    parentField: 'pid',

    showTreeIcon: true,                 //节点图标    
    iconField: "iconCls",
    imgField: 'img',
    imgPath: '',

    leafIconCls: "mini-tree-leaf",
    folderIconCls: "mini-tree-folder",
    _expandNodeCls: "mini-tree-expand",
    _collapseNodeCls: "mini-tree-collapse",
    _eciconCls: "mini-tree-node-ecicon",

    _OnCellMouseDown: function (e) {
        if (mini.findParent(e.htmlEvent.target, this._eciconCls)) {
        } else if (mini.findParent(e.htmlEvent.target, 'mini-tree-checkbox')) {
        } else {
            this.fire("cellmousedown", e);
        }
    },
    _OnCellClick: function (e) {
        if (mini.findParent(e.htmlEvent.target, this._eciconCls)) return;

        if (mini.findParent(e.htmlEvent.target, 'mini-tree-checkbox')) {

        } else {
            this.fire("cellclick", e);
        }
    },
    _OnDrawCell: function (record, column, rowIndex, columnIndex) {
        var e = mini.PagerTree.superclass._OnDrawCell.call(this, record, column, rowIndex, columnIndex);
        if (this.treeColumn && this.treeColumn == column.name) {
            e.headerCls += ' mini-tree-treecolumn';
            e.cellCls += ' mini-tree-treecell';
            e.cellStyle += ';padding:0;';

            e.img = record[this.imgField];
            e.iconCls = this._getNodeIcon(record);
            e.showTreeIcon = this.showTreeIcon;
            e.nodeCls = "";
            e.nodeStyle = "";

            this._createTreeCell(e);
        }
        return e;
    },
    _createTreeCell: function (e) {
        var sb = [];
        var node = e.record;

        var isLeaf = this.isLeafNode(node);
        var level = this.getNodeLevel(node);
        var isExpand = this.isExpandedNode(node);

        var cls = e.nodeCls;

        if (!isLeaf) {
            cls = isExpand ? this._expandNodeCls : this._collapseNodeCls;
        }

        if (!isLeaf) {
            cls += " mini-tree-parentNode";
        }


        sb[sb.length] = '<div class="mini-tree-nodetitle ' + cls + '" style="' + e.nodeStyle + '">';

        //_level
        var ii = 0;
        for (var i = ii; i < level - 1; i++) {
            sb[sb.length] = '<span class="mini-tree-indent " ></span>';
        }

        if (!isLeaf) {
            sb[sb.length] = '<i class="' + this._eciconCls + '"></i>';
        } else {
            sb[sb.length] = '<span class="' + this._eciconCls + '" ></span>';
        }


        sb[sb.length] = '<span class="mini-tree-nodeshow">';
        if (e.showTreeIcon) {
            if (e.img) {
                var img = this.imgPath + e.img;
                sb[sb.length] = '<span class="mini-tree-icon" style="background-image:url(' + img + ');"></span>';
            } else {
                sb[sb.length] = '<span class="' + e.iconCls + ' mini-tree-icon mini-icon"></span>';
            }
        }

        sb[sb.length] = '<span class="mini-tree-nodetext">';

        sb[sb.length] = e.cellHtml;

        sb[sb.length] = '</span>';
        sb[sb.length] = '</span>';

        sb[sb.length] = '</div>';

        e.cellHtml = sb.join('');
    },
    /////////////////////////////////////////////////////////////////////////
    __OnBeforeLoad: function (e) {
        e.data.__ecconfig = this._getEcConfig();
    },
    _getEcConfig: function() {
        var config = { collapseNodes: this._collapseNodes, expandNodes: this._expandNodes };
        return mini.encode(config);
    },
    load: function () {
        this._collapseNodes = [];
        this._expandNodes = [];
        return mini.PagerTree.superclass.load.apply(this, arguments);
    },
    expandNode: function (node) {
        node = this._dataSource.getbyId(node);
        if (node && !this.isLeafNode(node)) {
            var id = node[this.getIdField()];
            if (id) {
                this._expandNodes.remove(id);
                this._collapseNodes.remove(id);

                this._expandNodes.add(id);
            }
        }
        this.reload();
    },
    collapseNode: function (node) {
        node = this._dataSource.getbyId(node);
        if (node && !this.isLeafNode(node)) {
            var id = node[this.getIdField()];
            if (id) {
                this._expandNodes.remove(id);
                this._collapseNodes.remove(id);

                this._collapseNodes.add(id);
            }
        }
        this.reload();
    },
    toggleNode: function (node) {
        node = this._dataSource.getbyId(node);
        if (!node) {
            this.reload();
        } else {
            if (this.isExpandedNode(node)) {
                this.collapseNode(node);
            } else {
                this.expandNode(node);
            }
        }
    },
    /////////////////////////////////////////////////////////////////////////
    isExpandedNode: function (node) {
        if(node.expanded === undefined) {
            return true;
        }
        return node.expanded.toString() == 'true';
    },
    isLeafNode: function (node) {
        return node.isLeaf && node.isLeaf.toString() == 'true';
    },
    getNodeLevel: function (node) {
        return node._level;
    },
    _getNodeIcon: function (node) {
        var icon = node[this.iconField];
        if (!icon) {
            if (this.isLeafNode(node)) icon = this.leafIconCls;
            else icon = this.folderIconCls;
        }
        return icon;
    },
    getAttrs: function (el) {
        var attrs = mini.PagerTree.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["treeColumn", "iconField", "imgField", "imgPath", "idField", "parentField"
             ]
        );

        mini._ParseBool(el, attrs,
            ["showTreeIcon"
             ]
        );

        return attrs;
    }

});
mini.regClass(mini.PagerTree, "pagertree");

//分页树折叠插件
mini._PagerTree_Expander = function (grid) {
    this.owner = grid;
    mini.on(grid.el, "click", this.__OnClick, this);
}
mini._PagerTree_Expander.prototype = {
    __OnClick: function (e) {
        var tree = this.owner;
        var node = tree.getRecordByEvent(e, false);
        if (!node) return;
        var isLeaf = tree.isLeafNode(node);
        if (mini.findParent(e.target, tree._eciconCls)) {
            if (tree.isLeafNode(node)) return;
            tree.toggleNode(node);
        }
    }
}
/**
* jQuery MiniUI v3.0
* 
* Web Site : http://www.miniui.com
*
* Commercial License : http://www.miniui.com/license
*
* Copyright(c) 2012 All Rights Reserved. Shanghai PusSoft Co., Ltd (上海普加软件有限公司) [ services@plusoft.com.cn ]. 
* 
*/

var Pagination = function () {
	Pagination.superclass.constructor.apply(this, arguments);
};

mini.extend(Pagination, mini.Control, {
    pageIndex: 0,
    pageSize: 10,
    totalCount: 0,
    totalPage: 0,
    sizeList: [10, 20, 50, 100],
    set: function (kv) {
        if (typeof kv == 'string') {
            return this;
        }

        var pageIndex = kv.pageIndex;
        delete kv.pageIndex;

        Pagination.superclass.set.call(this, kv);

        if (!mini.isNull(pageIndex)) {
            this.setPageIndex(pageIndex);
        }
        return this;
    },

    uiCls: "mini-pagination",
    _create: function () {
        var sf = this;
        sf.el = document.createElement("div");
        // sf.el.className = "mini-pagination";
        this._updatePager();

    },
    _updatePagerButtons: function () {
        var sf = this;
        var pageSize = parseInt(sf.pageSize, 10);
        var pageIndex = parseInt(sf.pageIndex, 10);
        var totalIndex = parseInt(sf.totalCount, 10);
        var buttonCounts = Math.ceil(totalIndex / pageSize);

        var sb = [];
        sb.push('<div class="pagination-buttons">');
        var cls = "",
            item = '',
            i = 0;
        if (pageIndex == 0) {
            cls = "disabled";
        }
        var prevButton = '<a class="pagination-button pagination-prev mini-icon ' + cls + '" action="prev"></a>';
        sb.push(prevButton);

        if (buttonCounts < 8) {
            for (i = 0; i < buttonCounts; i++) {
                cls = "";
                if (pageIndex == i) {
                    cls = "pagination-current";
                }
                item = '<a class="pagination-button ' + cls + '">' + (i + 1) + '</a>';

                sb.push(item);
            }
        } else {
            if (pageIndex < 6) {
                for (i = 0; i < 6; i++) {
                    cls = "";
                    if (pageIndex == i) {
                        cls = "pagination-current";
                    }
                    item = '<a class="pagination-button ' + cls + '">' + (i + 1) + '</a>';

                    sb.push(item);
                }
                sb.push('<a class="pagination-button pagination-button-ellipsis" action="none" data-index="' + (i + 4 >= buttonCounts ? buttonCounts -1 : i + 4) + '">...</a>');
                sb.push('<a class="pagination-button">' + buttonCounts + '</a>');
            } else if (pageIndex > buttonCounts - 6) {
                sb.push('<a class="pagination-button">1</a>');
                sb.push('<a class="pagination-button pagination-button-ellipsis" action="none" data-index="' + (buttonCounts - 6) + '">...</a>');
                for (i = 6; i > 0; i--) {
                    cls = "";
                    if (pageIndex == buttonCounts - i) {
                        cls = "pagination-current";
                    }
                    sb.push('<a class="pagination-button ' + cls + '">' + (buttonCounts - i + 1) + '</a>');
                }


            } else {
                sb.push('<a class="pagination-button">1</a>');
                sb.push('<a class="pagination-button pagination-button-ellipsis" action="none" data-index="' + (pageIndex - 3) + '">...</a>');
                for (i = 0; i < 3; i++) {
                    item = '<a class="pagination-button">' + (pageIndex - (2 - i)) + '</a>';
                    sb.push(item);
                }
                sb.push('<a class="pagination-button pagination-current">' + (pageIndex + 1) + '</a>');
                sb.push('<a class="pagination-button pagination-button-ellipsis" action="none" data-index="' + (pageIndex + 4 >= buttonCounts ? buttonCounts - 1 : pageIndex + 4) + '">...</a>');
                sb.push('<a class="pagination-button">' + buttonCounts + '</a>');
            }
        }

        cls = "";
        if (pageIndex == buttonCounts - 1) {
            cls = "disabled";
        }
        var nextButton = '<a class="pagination-button pagination-next  mini-icon ' + cls + '" action="next"></a>';

        sb.push(nextButton);
        sb.push('</div>');
        var pageButtonsStr = sb.join(" ");
        sf.el.innerHTML = pageButtonsStr;
    },
    _updatePagerInfo: function () {
        var sf = this;

        var pageSize = parseInt(sf.pageSize, 10);
        var pageIndex = parseInt(sf.pageIndex, 10);

        var sizeList = sf.sizeList;
        var flag = false;
        //debugger
        for (var i = 0, l = sizeList.length; i < l; i++) {
            if (sizeList[i] == pageSize) {
                flag = true;
            }
        }
        if (!flag) {
            sizeList.push(pageSize);
        }

        function sortNumber(a, b) {
            return a - b;
        }

        sizeList.sort(sortNumber);
        var sizeData = [];
        for (var i = 0, l = sizeList.length; i < l; i++) {
            sizeData.push({ id: sizeList[i], text: sizeList[i] });
        }

        sf.sizeCombo = new mini.ComboBox();
        sf.sizeCombo.setData(sizeData);
        sf.sizeCombo.setValue(pageSize);
        sf.sizeCombo.on("valuechanged", function (e) {
            var value = parseInt(e.value)
            sf._OnPageChanged(0, value)
        })
        sf.sizeCombo.render(sf.el);

        var pagerChange = document.createElement("span");
        pagerChange.className = "pagination-pagerchange";
        var str = '&nbsp&nbsp&nbsp   跳至：<input class="pagination-number"  value="' + (pageIndex + 1) + '"/>	页';
        pagerChange.innerHTML = str;
        sf.el.appendChild(pagerChange);
    },
    _updatePager: function () {
        this._updatePagerButtons();
        this._updatePagerInfo();

    },
    _initEvents: function () {
        Pagination.superclass._initEvents.call(this);
        var sf = this;
        //        sf.sizeCombo.on("valuechanged", function (e) {
        //            
        //        })
        setTimeout(function () {
            $(sf.el).on("click", ".pagination-button", function (e) {

                var pageSize = sf.pageSize;
                var pageIndex = sf.pageIndex;
                var totalIndex = sf.totalCount;
                var buttonCounts = Math.ceil(totalIndex / pageSize);
                var action = $(e.target).attr("action");
                var val = '';
                if (action == "prev") {
                    if (pageIndex != 0) {
                        sf._OnPageChanged(pageIndex - 1)
                    }
                } else if (action == "next") {
                    if (pageIndex < buttonCounts - 1) {
                        sf._OnPageChanged(sf.pageIndex + 1)
                    }
                } else if (action == "none") {
                    val = parseInt($(e.target).data('index'), 10);
                    if (val > 0) {
                        sf._OnPageChanged(val - 1);
                    }
                } else {
                    if (!$(e.target).hasClass("current")) {
                        val = parseInt($(e.target).text(), 10);
                        if (val > 0) {
                            sf._OnPageChanged(val - 1);
                        }
                    }
                }

            }).on("keydown", ".pagination-number", function (e) {
                if (e.keyCode == 13) {
                    dealInput($(e.target));
                }
            }).on("change", ".pagination-number", function (e) {
                dealInput($(e.target));
            });

        }, 100);

        function dealInput($input) {
            var pageSize = sf.pageSize;
            var totalIndex = sf.totalCount;
            var buttonCounts = Math.ceil(totalIndex / pageSize);

            var value = parseInt($input.val());

            if (isNaN(value)) {
                $input.val("");
            } else {
                if (value > buttonCounts) {
                    value = buttonCounts;
                    $input.val(value);
                }
                sf._OnPageChanged(value - 1);
            }
        }

    },

    _OnPageChanged: function (index, size) {
        var e = {
            pageIndex: mini.isNumber(index) ? index : this.pageIndex,
            pageSize: mini.isNumber(size) ? size : this.pageSize,
            cancel: false
        };
        if (e.pageIndex > this.totalPage - 1) {
            e.pageIndex = this.totalPage - 1;
        }
        if (e.pageIndex < 0) e.pageIndex = 0;

        this.fire("beforepagechanged", e);
        if (e.cancel == true) {
            return;
        }

        this.fire("pagechanged", e);
        this.update(e.pageIndex, e.pageSize);


    },

    //分页信息变更时激发，用户在此方法内调整分页信息展现
    update: function (index, size, total) {
        var sf = this;
        if (mini.isNumber(index)) sf.pageIndex = parseInt(index);
        if (mini.isNumber(size)) sf.pageSize = parseInt(size);
        if (mini.isNumber(total)) sf.totalCount = parseInt(total);

        sf.totalPage = parseInt(sf.totalCount / sf.pageSize) + 1;
        if ((sf.totalPage - 1) * sf.pageSize == sf.totalCount) {
            sf.totalPage -= 1;
        }
        if (sf.totalCount == 0) sf.totalPage = 0;

        if (sf.pageIndex > sf.totalPage - 1) {
            sf.pageIndex = sf.totalPage - 1;
        }
        if (sf.pageIndex <= 0) sf.pageIndex = 0;
        if (sf.totalPage <= 0) sf.totalPage = 0;

        this._updatePager();
    },
    setPageIndex: function (value) {
        if (isNaN(value)) return;
        this.pageIndex = value;
        this.update();
    },
    getPageIndex: function () {
        return this.pageIndex;
    },
    setPageSize: function (value) {
        if (isNaN(value)) return;
        this.pageSize = value;
        this.update();
    },
    getPageSize: function () {
        return this.pageSize;
    },
    setTotalCount: function (value) {
        value = parseInt(value);
        if (isNaN(value)) return;
        this.totalCount = value;
        this.update();
    },
    getTotalCount: function () {
        return this.totalCount;
    },
    setSizeList: function (value) {
        if (!mini.isArray(value)) return;
        this.sizeList = value;
        this.update();
    },
    getSizeList: function () {
        return this.sizeList;
    },

    setShowReloadButton: function (value) {

    },
    getShowReloadButton: function () {
        return false;
    },
    getAttrs: function (el) {
        var attrs = mini.Pager.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["onpagechanged", "sizeList", "onbeforepagechanged", "buttons", "sizeText"
                ]
        );
        // mini._ParseBool(el, attrs,
        //     ["showPageIndex", "showPageSize", "showTotalCount", "showPageInfo", "showReloadButton", "showButtonText", "showButtonIcon"
        //         ]
        // );
        mini._ParseInt(el, attrs,
            ["pageIndex", "pageSize", "totalCount"
                ]
        );
        //        var cs = mini.getChildNodes(el, true);
        //        attrs.body = cs;

        if (typeof attrs.sizeList == "string") {
            attrs.sizeList = window["ev" + "al"](attrs.sizeList);
        }
        if (attrs.buttons) {
            attrs.buttons = mini.byId(attrs.buttons);

        }



        return attrs;
    }

});

mini.regClass(Pagination, "pagination");
mini.PanelTip = function() {
    mini.PanelTip.superclass.constructor.apply(this, arguments);
};

mini.extend(mini.PanelTip, mini.ToolTip, {

    selector: '.paneltip',
    trigger: 'click',
    uiCls: "mini-paneltip",
    url: "",
    tplUrl: "",
    tpl: "",
    cssUrl: "",
    // 第三方资源路径
    externalSrc: "",

    _create: function() {
        this.el = jQuery('<div class="mini-tooltip mini-paneltip"><div class="mini-tooltip-arrow"></div><i class="mini-paneltip-close"></i><div class="mini-tooltip-inner"></div></div>')[0];
        this.$element = jQuery(this.el);
        this.$close = jQuery('.mini-paneltip-close', this.$element);
        this.$element.appendTo(document.body);

        this.externalSrc = this.externalSrc || mini.externalSrc;
    },

    _initEvents: function() {
        var self = this;
        this.$close.on('click', function() {
            self.close();
        });

        this._bindTooltip();
    },
    _opened: '',
    open: function(target) {
        target = jQuery(target)[0] || this.target;
        var guid = jQuery(target).attr("data-guid");

        var e = { element: target, data: { guid: guid }, cancel: false };

        var self = this;
        this.fire("beforeopen", e);
        if (e.cancel) return;

        this.$element.show();

        this._target = target;

        this._getData(e.data, guid);

        this.fire("open", { element: target });
    },

    _getData: function(params, openedGuid) {
        var self = this;
        this.showLoading();
        mini.ajax({
            url: this.url,
            data: params,
            async: true,
            success: function(text) {
                var data = mini.decode(text) || '';

                // 记住当前展示的guid，避免点击同一个时重复请求数据
                self._opened = openedGuid;

                if (!window.Mustache) {
                    mini.loadJS(self.externalSrc + 'mustache.min.js', function() {
                        self._renderContent(data);
                    });
                } else {
                    self._renderContent(data);
                }

            }
        });
    },

    _renderContent: function(data) {
        var html = Mustache.render(this.tpl, data);

        this.setContent(html);

        this.$close.removeClass('hidden');

    },

    _toggle: function(e) {
        if (this._opened) {
            var $target = jQuery(e.currentTarget);
            var guid = $target.attr("data-guid");

            if (guid === this._opened) {
                this.applyPlacement();
                return;
            }
        }

        this.close();
        this._enter(e);
    },
    _leave: function (e) {
        // 鼠标移开时不自动隐藏
        clearTimeout(this.openTimer);
    },

    showLoading: function() {
        this.setContent('<div class="mini-tooltip-loading"></div>');
        this.$close.addClass('hidden');
    },
    close: function() {
        this._target = null;
        this.$element.hide();
        this._opened = '';
    },
    setTplUrl: function(tplUrl) {
        this.tplUrl = tplUrl;

        this.tpl = jQuery.trim(mini.loadText(tplUrl));
    },

    setCssUrl: function(cssUrl) {
        this.cssUrl = cssUrl;

        mini.loadCSS(cssUrl);
    },

    ///////////////////////////////////////////////
    getAttrs: function(el) {
        var attrs = mini.PanelTip.superclass.getAttrs.call(this, el);
        mini._ParseString(el, attrs, ['trigger']);
        return attrs;
    }
});

mini.regClass(mini.PanelTip, "paneltip");
mini.Repeat = function(){
	mini.Repeat.superclass.constructor.call(this);
};

mini.extend(mini.Repeat, mini.ListControl, {
	// 模板选择器
	templateId: "",
	templateUrl: "",
	url: "",
	// 第三方资源的路径，默认为全局配置mini.externalSrc的值
    externalSrc: '',
	uiCls: "mini-repeat",
	
	_create: function(){
		this.el = document.createElement("div");
		
		this.externalSrc = this.externalSrc || mini.externalSrc;
	},
	
	setTemplateUrl: function(url){
		this.templateUrl = url;
		
		var xhr = jQuery.ajax({
	    	url: url,
	    	async: false
	    });
		
		var that = this;
		xhr.done(function(html){
			that.template = jQuery.trim(html);
		}).fail(function(jqXHR, textStatus, errorThrown){
			throw new Error("template not found");
		});
	},
	
	getTemplateUrl: function(){
		return this.templateUrl;
	},
	
	setTemplateId: function(id){
		this.templateId = id;
		
		var tpl = document.getElementById(id);
		
		if(tpl){
			this.template = jQuery.trim(tpl.innerHTML);
		} else {
			throw new Error("template not found");
		}
		
	},
	
	getTemplateId: function(){
		return this.templateId;
	},
	
	setData: function(data){
		this.data = data || [];

		if(this.template){
			var that = this;
			if(!window.Mustache) {
				mini.loadJS(this.externalSrc + 'mustache.min.js', function() {
                    that._renderHtml();
                });
			} else {
				this._renderHtml();
			}
			
		} else {
			throw new Error("template not init");
		}
	},

	_renderHtml: function(){
		var controlData = this.data.control,
			data = this.data.template || this.data;
			
			var html = [], 
				i, len;
			for(i = 0, len = data.length; i < len; i++){
				html.push(Mustache.render(this.template, data[i]));
			}
			this.el.innerHTML = html.join('');
			
			mini.parse(this.el);
			
			if(controlData) {
				if (!mini.isArray(controlData)) controlData = [];
				var item, control;
				for(i = 0, len = controlData.length; i < len; i++) {
					item = controlData[i];
					
					for(var id in item){
						control = mini.get(id, this.el);
			    		if(control && item[id]){
			    			if(item[id].data){
			    				if(control.loadList) {
			    					control.loadList(item[id].data);
			    				} else if(control.setData){
			    					control.setData(item[id].data);
			    					
			    					if(item[id].total && control.setTotalCount) {
			    						control.setTotalCount(item[id].total);
			    					}
			    				}
			    			}
			    			if(typeof item[id] != 'object' && control.setValue){
			    				control.setValue(item[id]);
			    			}
			    			if(item[id].value && control.setValue){
			    				control.setValue(item[id].value);
			    			}
			    		}
			    	}
				}
				
			}
	},
	
	getAttrs: function(el) {
        var attrs = mini.Repeat.superclass.getAttrs.call(this, el);
        mini._ParseString(el, attrs, ["templateId", "templateUrl"]);

        return attrs;
    }
	
});

mini.regClass(mini.Repeat, "repeat");
mini.Slider = function () {
    mini.Slider.superclass.constructor.call(this);
};
mini.extend(mini.Slider, mini.Control, {
    uiCls: "mini-slider",

    width: "200px",

    formField: true,

    minValue: 0,
    maxValue: 100,
    step: 1,
    precision: 0,
    showTooltip: true,

    set: function(kv) {
        if (typeof kv == 'string') {
            return this;
        }

        var value = kv.value;
        delete kv.value;

        mini.Slider.superclass.set.call(this, kv);

        // setValue 需要其他属性来计算滑块位置，所以必须放在最后
        if(!mini.isNull(value)) {
            this.setValue(value);
        }

    },

    _create: function () {
        this.el = document.createElement("div");
        this.el.className = "mini-slider";

        this.el.innerHTML = '<div class="mini-slider-runway"><div class="mini-slider-bar"></div><div class="mini-slider-pointer"></div></div>';

        this.runway = this.el.firstChild;
        this.bar = this.runway.firstChild;
        this.pointer = this.runway.lastChild;
    },

    _initEvents: function () {
        var that = this,
            oldValue,
            newValue;

        function handleMouseDown() {
            oldValue = that.value;
            $(window).on('mousemove', handleChange);
            $(window).on('mouseup', handleChange);
            $(window).on('mouseup', handleMouseUp);
        }

        function handleMouseUp() {
            newValue = that.value;
            $(window).off('mousemove', handleChange);
            $(window).off('mouseup', handleChange);
            $(window).off('mouseup', handleMouseUp);

            if(oldValue != newValue) {
                that.fire('valuechanged', {
                    value: newValue,
                    oldValue: oldValue
                });
            }
            
        }

        function handleChange(e) {
            that._handleChange(e);
        }
        $(this.el).on('mousedown', handleMouseDown);
    },

    _afterApply: function() {
        if(this.showTooltip) {
            this.toolTip = new mini.ToolTip();

            this.toolTip.set({
                target: document,
                scope: this.el,
                selector: '[data-tooltip]',
                placement: 'top'
            });
            
            this.toolTip.on('beforeopen', this._onBeforeShowToolTip, this);
        }
    },
    _onBeforeShowToolTip: function(e) {
        var event = {
            content: e.content
        };
        this.fire('beforeshowtooltip', event);

        e.content = event.content;
    },
    _handleChange: function (e) {
        e.preventDefault && e.preventDefault();

        function clamp(value, min, max) {
            var dx = value - min;
            var dy = max - value;
            if (dx >= 0 && dy >= 0) {
                return value;
            }
            if (Math.abs(dx) >= Math.abs(dy)) {
                return max;
            }
            return min;
        }

        var container = this.el;
        var containerWidth = container.clientWidth;
        // var containerHeight = container.clientHeight;

        var rect = container.getBoundingClientRect();
        var xOffset = rect.left + window.pageXOffset;
        // var yOffset = rect.top + window.pageYOffset;
        var pageX = e.pageX || (e.touches ? e.touches[0].pageX : 0);
        // var pageY = e.pageY || (e.touches ? e.touches[0].pageY : 0);
        var left = clamp(pageX - xOffset, 0, containerWidth);
        // var top = clamp(pageY - yOffset, 0, containerHeight);

        var v, percent, lengthPerStep, steps, event;

        if (left <= 0) {
            percent = 0;
            v = this.minValue;
        } else if (left >= containerWidth) {
            percent = 100;
            v = this.maxValue;
        } else {
            percent = (left * 100) / containerWidth;

            lengthPerStep = 100 / ((this.maxValue - this.minValue) / this.step);
            steps = Math.round(percent / lengthPerStep);
            v = steps * lengthPerStep * (this.maxValue - this.minValue) * 0.01 + this.minValue;
            v = parseFloat(v.toFixed(this.precision));
        }
        this.setValue(v, percent);

        if(this.showTooltip) {
            event = {
                content: v
            };
            this.fire('beforeshowtooltip', event);
            this.toolTip.setContent(event.content);
        }
    },
    setPosition: function (percent) {
        this.bar.style.width = percent + '%';
        this.pointer.style.left = percent + '%';

    },

    setValue: function (value, percent) {
        value = parseFloat(value);
        if (isNaN(value)) {
            value = this.minValue;
        }

        if (this.precisions >= 0) {
            value = value.toFixed(this.precisions);
        }

        if (value > this.maxValue) {
            value = this.maxValue;
        } else if (value < this.minValue) {
            value = this.minValue;
        }
        if (this.value != value) {
            this.value = value;

            percent = mini.isNumber(percent) ? percent : (value - this.minValue) / (this.maxValue - this.minValue) * 100;

            this.setPosition(percent);
            
            if(this.showTooltip) {
                this.pointer.setAttribute('data-tooltip', value);
            }

        }
    },
    getValue: function() {
        return this.value;
    },
    setMaxValue: function (value) {
        value = parseFloat(value);
        if (isNaN(value)) return;
        value = parseFloat(value);
        if (this.maxValue != value) {
            this.maxValue = value;

            this._ValueLimit();
        }
    },
    getMaxValue: function (value) {
        return this.maxValue;
    },
    setMinValue: function (value) {
        value = parseFloat(value);
        if (isNaN(value)) return;
        value = parseFloat(value);
        if (this.minValue != value) {
            this.minValue = value;

            this._ValueLimit();
        }
    },
    getMinValue: function () {
        return this.minValue;
    },
    setStep: function (value) {
        value = parseFloat(value);
        if (isNaN(value)) return;
        if (this.step != value) {
            this.step = value;

            this._adjustPrecision();
        }
    },
    getStep: function () {
        return this.step;
    },

    _ValueLimit: function () {
        if (this.minValue > this.maxValue) {
            this.maxValue = this.minValue + 100;
        }
        if (this.value < this.minValue) {
            this.setValue(this.minValue);
        }
        if (this.value > this.maxValue) {
            this.setValue(this.maxValue);
        }

        this._adjustPrecision();
    },

    _adjustPrecision: function () {
        var precisions = [this.minValue, this.maxValue, this.step].map(function (item) {
            var decimal = ('' + item).split('.')[1];
            return decimal ? decimal.length : 0;
        });
        this.precision = Math.max.apply(null, precisions);
    },
    getAttrs: function (el) {
        var attrs = mini.Slider.superclass.getAttrs.call(this, el);
        mini._ParseString(el, attrs, ["maxValue", "minValue", "step", "onvaluechanged", "onbeforeshowtooltip"]);

        return attrs;
    }
});

mini.regClass(mini.Slider, "slider");
/* global mini */
/**
 * TabsTreeSelect
 * @class
 * @extends mini.Control
 * @constructor
 */
mini.TabsTreeSelect = function () {

    mini.TabsTreeSelect.superclass.constructor.call(this);

};

mini.extend(mini.TabsTreeSelect, mini.ValidatorBase, {
    text: "",
    value: "",
    width: 660,
    height: 353,
    expandOnLoad: false,
    idField: "id",
    textField: "text",
    nodesField: "children",
    url: "",
    filterUrl: "",
    filterMode: "",
    autoLoad: true,
    data: [],
    tabsConfig: [],
    tabKeys: [],
    showTreeIcon: true,
    showTreeLines: true,
    resultAsTree: true,
    showFolderCheckBox: true,
    // 选中节点时是否自动加载子节点
    loadChildWhenChecked: true,
    parentField: "pid",
    // 是否只能选择叶子节点
    canCheckParent: false,
    checkRecursive: true,
    autoCheckParent: false,
    checkOnTextClick: true,

    // 是否显示已选的计数
    showSelectedCount: true,

    // 是否显示一键排序
    showSort: false,

    selectedPanelTitle: "已选人员",

    delimiter: ',',

    showFullPath: false,
    includeRootNode: false,

    showBorder: false,

    uiCls: "mini-tabstreeselect",

    set: function (options) {
        if (typeof options == "string") {
            return this;
        }

        var value = options.value;
        delete options.value;
        var text = options.text;
        delete options.text;
        var data = options.data;
        delete options.data;
        var showBorder = options.showBorder;
        delete options.showBorder;
        var tabs = options.tabs;
        delete options.tabs;
        var url = options.url;
        delete options.url;
        var filterUrl = options.filterUrl;
        delete options.filterUrl;
        var filterMode = options.filterMode;
        delete options.filterMode;
        var autoLoad = options.autoLoad;
        delete options.autoLoad;
        var showFullPath = options.showFullPath;
        delete options.showFullPath;
        var includeRootNode = options.includeRootNode;
        delete options.includeRootNode;

        var showSort = options.showSort;
        delete options.showSort;
        // var textField = options.textField;
        // delete options.textField;
        // var idField = options.idField;
        // delete options.idField;
        // var nodesField = options.nodesField;
        // delete options.nodesField;

        mini.TabsTreeSelect.superclass.set.call(this, options);

        if (!mini.isNull(autoLoad)) {
            this.setAutoLoad(autoLoad);
        }
        if (!mini.isNull(url)) {
            this.setUrl(url);
        }
        if (!mini.isNull(tabs)) {
            this.setTabs(tabs, this.autoLoad);
        }
        if (!mini.isNull(data)) {
            this.setData(data);
        }
        if (!mini.isNull(value)) {
            this.setValue(value);
        }
        if (!mini.isNull(text)) {
            this.setText(text);
        }
        if (!mini.isNull(filterUrl)) {
            this.setFilterUrl(filterUrl);
        }
        if (!mini.isNull(filterMode)) {
            this.setFilterMode(filterMode);
        }
        if (!mini.isNull(showFullPath)) {
            this.showFullPath = showFullPath;

            this.tree.showFullPath = showFullPath;
        }
        if (!mini.isNull(includeRootNode)) {
            this.includeRootNode = includeRootNode;

            this.tree.includeRootNode = includeRootNode;
        }

        if (showBorder) {
            this.el.style.borderWidth = "1px";
        }


        if(showSort) {
            this.showSort = showSort;
        } else {
            this._buttons.removeChild(this.sortBtn);
        }

        // if (!mini.isNull(textField)) {
        //     this.setTextField(textField);
        // }
        // if (!mini.isNull(idField)) {
        //     this.setIdField(idField);
        // }
        // if (!mini.isNull(nodesField)) {
        //     this.setNodesField(nodesField);
        // }

        return this;
    },

    // 用于操作的title提示
    actionTitles: {
        sort: '一键排序',
        top: '置顶',
        bottom: '置底',
        remove: '删除',
        removeall: '删除全部',
        recover: '回到初始状态'
    },

    sortTitles: {
        none: '一键排序',
        asc: '正序',
        desc: '倒序'
    },

    // 用于生成 上移、下移、全部删除、删除等 操作元素
    _getActionBtn: function (action, disabled) {
        var span = document.createElement('span');

        span.className = 'mini-tabstreeselect-action mini-icon ' + action + (action === 'sort' ? ' none' : '') + (disabled ? ' disabled' : '');
        span.title = this.actionTitles[action];

        return span;
    },

    _create: function () {
        this.el = document.createElement('div');
        this.el.className = 'mini-tabstreeselect';
        // this.el.innerHTML = '<div class="mini-tabstreeselect-left"><div class="mini-tabstreeselect-header"></div><div class="mini-tabstreeselect-content"></div></div><div class="mini-tabstreeselect-right"><div class="mini-tabstreeselect-header"><span class="mini-tabstreeselect-header-title">' + this.selectedPanelTitle + '</span></div><div class="mini-tabstreeselect-content"></div></div>';

        this.el.innerHTML = '<div class="mini-tabstreeselect-left"><div class="mini-tabstreeselect-header"></div><div class="mini-tabstreeselect-content"></div></div><div class="mini-tabstreeselect-right"><div class="mini-tabstreeselect-header"><div class="mini-tabstreeselect-header-main"><span class="mini-tabstreeselect-header-title">' + this.selectedPanelTitle + '</span><span class="mini-tabstreeselect-header-count hidden"></span></div></div><div class="mini-tabstreeselect-content"></div></div>';

        this._leftPanel = this.el.firstChild;
        this._rightPanel = this.el.lastChild;

        this._leftHeader = this._leftPanel.firstChild;
        this._rightHeader = this._rightPanel.firstChild.firstChild;
        this._rightTitle = this._rightHeader.firstChild;
        this._rightCount = this._rightHeader.lastChild;

        this._leftHeader.innerHTML = '<ul class="mini-tabstreeselect-tabs clearfix"></ul>';
        this._tabs = this._leftHeader.firstChild;

        this._leftContent = this._leftPanel.lastChild;
        this._rightContent = this._rightPanel.lastChild;

        this.tree = new mini.FilterTree();

        this.tree.setShowTreeIcon(true);
        this.tree.setStyle("border:0;width:100%;height:100%;overflow:hidden;");
        this.tree.setResultAsTree(this.resultAsTree);
        this.tree.setCheckRecursive(this.checkRecursive);
        this.tree.setShowCheckBox(true);
        this.tree.setShowFolderCheckBox(this.showFolderCheckBox);
        this.tree.setExpandOnNodeClick(this.expandOnNodeClick);
        this.tree.setCheckOnTextClick(this.checkOnTextClick);
        this.tree.setAutoLoad(true);
        this.tree.on("load", this.__OnLoad, this);
        this.tree.on("nodeclick", this.__OnNodeClick, this);
        this.tree.on("nodecheck", this.__OnCheckedChanged, this);
        this.tree.on("expand", this.__OnTreeExpand, this);
        this.tree.on("collapse", this.__OnTreeCollapse, this);
        this.tree.on("beforenodecheck", this.__OnTreeBeforeNodeCheck, this);
        this.tree.on("beforenodeselect", this.__OnTreeBeforeNodeSelect, this);
        this.tree.on("drawnode", this.__OnDrawNode, this);
        this.tree.on("loadnode", this.__OnLoadNode, this);
        this.tree.on("beforeload", this.__OnBeforeLoad, this);
        this.tree.on("filter", this.__OnFilter, this);

        this.tree.useAnimation = true;

        this.tree.render(this._leftContent);

        this._rightContent.innerHTML = '<div class="mini-tabstreeselect-buttons"></div><ul class="mini-tabstreeselect-list"></ul>';
        this._buttons = this._rightContent.firstChild;
        this._selectList = this._rightContent.lastChild;

        // 上移、下移、删除全部 dom
        // this._buttons.appendChild(this.upBtn = this._getActionBtn('up', true));
        // this._buttons.appendChild(this.downBtn = this._getActionBtn('down', true));
        // this._buttons.appendChild(this.removeallBtn = this._getActionBtn('removeall'));
        // this._buttons.appendChild(this.recoverBtn = this._getActionBtn('recover'));

        // 右侧顶部操作按钮
        this._buttons.appendChild(this.sortBtn = this._getActionBtn('sort'));
        this._buttons.appendChild(this.topBtn = this._getActionBtn('top', true));
        this._buttons.appendChild(this.bottomBtn = this._getActionBtn('bottom', true));
        this._buttons.appendChild(this.recoverBtn = this._getActionBtn('recover'));
        this._buttons.appendChild(this.removeallBtn = this._getActionBtn('removeall'));

        this.selectNodes = {};
        // 右侧头部显示已选人数
        // 更改的地方比较多，容易与实际选择的个数不一致，该参数废除，直接统计右侧列表的个数
        this.selectedCount = 0;

        this._listItemTempl = '<li class="mini-tabstreeselect-item" guid="{{value}}"><span class="item-name" title="{{name}}">{{name}}</span><i class="mini-tabstreeselect-action mini-icon remove" title="' + this.actionTitles['remove'] + '"></i></li>';

        this.bindEvents();
    },
    __OnDrawNode: function (evt) {
        this.fire("drawnode", evt);
    },
    __OnTreeBeforeNodeCheck: function (evt) {
        evt.tree = evt.sender;
        this.fire("beforenodecheck", evt);
    },
    __OnTreeBeforeNodeSelect: function (evt) {
        evt.tree = evt.sender;
        this.fire("beforenodeselect", evt);
    },
    __OnTreeExpand: function (evt) {
        this.fire("treeexpand", evt);
    },
    __OnTreeCollapse: function (evt) {
        this.fire("treecollapse", evt);
    },
    __OnNodeClick: function (evt) {
        this.fire("nodeclick", {
            node: evt.node
        });
    },
    __OnBeforeLoad: function (evt) {
        this.fire('beforeload', evt);
    },
    __OnCheckedChanged: function (evt) {
        var node = evt.node;
        if (node.checked) {
            this._addNode(node);
        } else {
            this._removeNode(node);
        }
    },

    __OnLoadNode: function (evt) {
        var node = evt.node,
            idField = this.idField,
            tree = this.tree,
            selectNodes = this.selectNodes;

        tree.eachChild(node, function (child) {
            if (selectNodes[child[idField]]) {
                tree.checkNode(child);
            } else {
                if (child.checked && !child.isLeaf) {
                    tree.checkNode(child);
                } else {
                    tree.uncheckNode(child);
                }
            }
        });

        // if (node.checked) {
        //     // this._addNode(node);
        //     this.tree._dataSource._doUpdateLoadedCheckedNodes();

        // } else if (!this.canCheckParent && this.checkRecursive) {
        //     var allChildChecked = true;
        //     this.tree.eachChild(node, function (child) {
        //         if (!child.checked) {
        //             allChildChecked = false;
        //             return false;
        //         }
        //     });

        //     allChildChecked && this.tree.checkNode(node);
        // }

    },
    __OnLoad: function (evt) {
        this.fire("load", evt);
    },

    __OnFilter: function(e){
        // 搜索时需要记住当前tab的搜索关键字

        // var key = e.sender._filterKey;

        // this.tabsConfig[this._activeTabIndex].filterKey = key;

        // 由于后台返回的数据中check状态可能不准，需要前台自己重新处理一遍树节点的check状态
        this.tree.uncheckAllNodes();

        var valueArr = this.getValue().split(',');

        for (var i = 0, len = valueArr.length; i < len; i++) {
            var node = this.tree.getNode(valueArr[i]);

            if (node) {
                this.tree.checkNode(node);
            }
        }
    },
    _addNode: function (node) {
        var value = node[this.idField];
        if (this.canCheckParent || (this.tree.isLeaf(node) && !this.selectNodes[value])) {
            this.selectNodes[value] = node;

            if(this._curAutoSortDirection != 'none') {
                this._addNodeByDirection(node, this._curAutoSortDirection);
                
            } else {
                mini.append(this._selectList, this._getItemHtml(node));
            }
            

            // 选中后递增
            // this.selectedCount++;
        } else {
            var childs = this.tree.getChildNodes(node);

            if (!childs.length && !this.tree.isLeaf(node)) {
                if (this.loadChildWhenChecked) {
                    this.tree._dataSource.loadParams.needAll = true;
                    this.tree.loadNode(node);
                    this.tree._dataSource.loadParams.needAll = false;

                }
            } else {
                for (var i = 0, len = childs.length; i < len; i++) {
                    this._addNode(childs[i]);
                }
            }

        }

        if (!this._selectList.style.height) {
            this._selectList.style.height = jQuery(this._rightContent).height() - jQuery(this._buttons).outerHeight(true) + 'px';
        }

        // 更新右侧头部计数
        this._setSelectedCount();
    },

    _addNodeByDirection: function(node, direction) {
        var treeValues = this.tree.getValue().split(','),
            nodeValue = node[this.idField],
            index = 0,
            len = treeValues.length,
            targetNodeValue,
            $targetNode;

        for(; index < len; index++) {
            if(treeValues[index] === nodeValue) {
                break;
            }

        }
        if(direction === 'asc') {
            targetNodeValue = treeValues[index - 1];
        } else {
            targetNodeValue = treeValues[index + 1];
        }
        if(targetNodeValue) {
            $targetNode = jQuery(this._selectList).find('[guid="' + targetNodeValue + '"]');
        }
        if($targetNode && $targetNode.length) {
            $(this._getItemHtml(node)).insertAfter($targetNode);
        } else {
            $(this._selectList).prepend(this._getItemHtml(node));
        }
    },

    _removeNode: function (node) {
        var value = node[this.idField];
        delete this.selectNodes[value];

        jQuery(this._selectList).find('li[guid="' + value + '"]').remove();
        // 移除后递减
        // this.selectedCount--;
        if (this.checkRecursive & !this.tree.isLeaf(node)) {
            var childs = this.tree.getChildNodes(node);

            for (var i = 0, len = childs.length; i < len; i++) {
                this._removeNode(childs[i]);
            }
        }

        // 更新右侧头部计数
        this._setSelectedCount();
    },

    _getItemHtml: function (node) {
        return this._listItemTempl.replace(/{{name}}/g, this.tree.getItemText(node)).replace('{{value}}', node[this.idField]);
    },

    bindEvents: function () {
        var that = this;

        jQuery(this._tabs).on('click', '> li', function () {
            var $item = jQuery(this),
                index = $item.index();

            if (!$item.hasClass('active')) {
                that.activeTab(index);
            }

        });
        jQuery(this._selectList).on('click', '.remove', function () {

            var $item = jQuery(this.parentNode),
                value = $item.attr('guid'),
                node = that.tree.getNode(value);

            if ($item.hasClass('selected')) {
                that.selectedListNode = null;
            }

            // node不在当前激活的tab树里，则不需要再去操作树
            if (!node) {
                $item.remove();
                delete that.selectNodes[value];

                // that.selectedCount--;
                that._setSelectedCount();
            } else {
                // $item.remove();
                // delete that.selectNodes[value];
                // 统一处理 此处调用_removeNode方法更合适
                that._removeNode(node);

                that.tree.uncheckNode(node);
            }


            that._updateButtons();

        }).on('mousedown', '.mini-tabstreeselect-item', function(e){
            that.dragItem = this;
            that.getDrag().start(e);
        }).on('click', '.mini-tabstreeselect-item', function () {
            var $item = jQuery(this);

            if (!$item.hasClass('selected')) {
                if (that.selectedListNode) {
                    that.selectedListNode.removeClass('selected');
                }

                $item.addClass('selected');
                that.selectedListNode = $item;

                that._updateButtons();
            }
        });

        jQuery(this._buttons).on('click', '.mini-tabstreeselect-action', function () {
            if (mini.hasClass(this, 'disabled')) return;

            // 自动排序
            if(mini.hasClass(this, 'sort')) {
                that.toggleAutoSort();
            }

            // 往上移动选中记录
            if (mini.hasClass(this, 'top')) {
                that.selectedListNode.insertBefore(that._selectList.firstChild);
                that.toggleAutoSort(true);

                // 往下移动选中记录
            } else if (mini.hasClass(this, 'bottom')) {
                that.selectedListNode.insertAfter(that._selectList.lastChild);
                that.toggleAutoSort(true);

                // 清楚所有记录
            } else if (mini.hasClass(this, 'removeall')) {
                that.clearAll();

                // 返回到初始状态
            } else if (mini.hasClass(this, 'recover')) {
                that.setValue(that.value);
                that.setText(that.text);
            }

            that._updateButtons();
        });

    },

    getDrag: function () {
        if (!this.drag) {
            this.drag = new mini.Drag({
                capture: false,
                onStart: mini.createDelegate(this._OnDragStart, this),
                onMove: mini.createDelegate(this._OnDragMove, this),
                onStop: mini.createDelegate(this._OnDragStop, this)
            });
        }
        return this.drag;
    },
    _OnDragStart: function (drag) {

        this._dragProxy = mini.append(document.body, '<div class="mini-tabstreeselect-proxy"></div>');
        this._dragProxy.innerHTML = '<div class="mini-tabstreeselect-proxy-inner">' + this.dragItem.outerHTML + '</div>';
        mini.setXY(this._dragProxy, drag.now[0] + 15, drag.now[1] + 18);
        
        mini.setWidth(this._dragProxy, mini.getBox(this.dragItem).width);

        this.feedbackLine = mini.append(document.body, "<div class='mini-feedback-line'></div>");

        mini.addClass(this.dragItem, 'dragging');
    },
    _OnDragMove: function (drag) {
        var x = drag.now[0];
        var y = drag.now[1];

        mini.setXY(this._dragProxy, x + 15, y + 18);

        this.targetItem = this.insertAction = null;
        var t = mini.findParent(drag.event.target, 'mini-tabstreeselect-item');

        if (t) {
           
            this.targetItem = t;
            this.insertAction = "before";
            var box = mini.getBox(this.targetItem);

            if (y > box.y + box.height / 2) {

                this.insertAction = "after";
            }

            this.feedbackLine.style.display = "block";

               
            if (this.insertAction == "after") {
                mini.setXY(this.feedbackLine, box.x, box.y + box.height);
            } else {
                mini.setXY(this.feedbackLine, box.x, box.y);
            }
            

            mini.setWidth(this.feedbackLine, box.width);

        } else {
            this.feedbackLine.style.display = "none";
        }

    },
    _removeDrag: function () {
        mini.removeNode(this._dragProxy);
        mini.removeNode(this.feedbackLine);
        this._dragProxy = this.feedbackLine = this.dragItem = this.targetItem = null;
    },
    _OnDragStop: function (drag) {
        if(this.targetItem) {
            if(this.insertAction == 'before') {
                this._selectList.insertBefore(this.dragItem, this.targetItem);
            } else {
                if(this._selectList.lastChild == this.targetItem) {
                    this._selectList.appendChild(this.dragItem);
                } else {
                    this._selectList.insertBefore(this.dragItem, this.targetItem.nextSibling);
                }
                
            }

            this.toggleAutoSort(true);
        }

        mini.removeClass(this.dragItem, 'dragging');

        this._removeDrag();
    },

    _curAutoSortDirection: 'none',
    toggleAutoSort: function(clearSort) {
        if(!this.showSort) {
            return;
        }
        var direction = clearSort ? 'none' : this._getNextAutoSortDirection();

        mini.removeClass(this.sortBtn, 'asc desc none');
        mini.addClass(this.sortBtn, direction);
        this.sortBtn.setAttribute('title', this.sortTitles[direction]);

        this._curAutoSortDirection = direction;

        if(direction != 'none') {
            this._serverSort(direction);
        }
    },

    _getNextAutoSortDirection: function() {
        switch(this._curAutoSortDirection) {
            case 'asc':
                return 'desc';
            case 'desc':
            default:
                return 'asc';
        }
    },

    // autoSort: function(direction) {
    //     var treeValue = this.tree.getValue();
    //     var needServerSort = treeValue.split(',').length != this.getValue().split(',').length;

    //     if(needServerSort) {
    //         this._serverSort(direction);
    //     } else {
    //         if(direction === 'asc') {
    //             this.setValue(treeValue);
    //         } else {
    //             this.setValue(treeValue.split(',').reverse().join(','));
    //         }
    //     }
    // },

    _serverSort: function(direction) {
        var value = this.getValue();
        var data = {
            value: value,
            direction: direction,
            eventType: 'sortChanged'
        };

        var e = {
            url: this.treeUrl,
            data: data,
            sender: this
        };

        this.fire("beforesortchanged", e);

        if(value && value.split(',').length > 1) {
            this._loadValue(e);
        }
        
    },

    _loadValue: function(config){
        var me = this;

        var maskTimer = setTimeout(function () {
            me.mask();
            me.isMask = true;
        }, 100);

        jQuery.ajax({
            url: config.url,
            data: config.data,
            type: 'post',
            dataType: 'json',
            success: function (data) {
                data = mini.getSecondRequestData(data);
                if (data) {
                    var value = me.getValue();
                    // var defaultValue = me.value;
                    // var defaultText = me.text;

                    var valueArr,
                        textArr,
                        i = 0,
                        len = 0,
                        node,
                        html = [];

                    // 优化 by liub @2017-12-14
                    // 当value值有上千个时，ie浏览器会假死
                    // 原因是setValue方法中对每一个值都会进行dom的append
                    // console.time('insertHtml');
                    // me.setValue(data.value, true);
                    // me.setText(data.text);
                    // console.timeEnd('insertHtml');

                    me._selectList.innerHTML = '';
                    // me.selectedCount = 0;
                    me.selectNodes = {};

                    if (data.value) {
                        valueArr = data.value.split(',');
                        textArr = data.text.split(',');


                        for (len = valueArr.length; i < len; i++) {
                            node = {};
                            node[me.idField] = valueArr[i];
                            node[me.textField] = textArr[i];

                            me.selectNodes[valueArr[i]] = node;

                            html.push(me._getItemHtml(node));

                        }

                        // mini.append方法有性能问题
                        // mini.append(me._selectList, html.join(''));

                        me._selectList.insertAdjacentHTML('afterbegin', html.join(''));

                        // me.selectedCount = len;

                    }

                    me._updateButtons();
                    me._setSelectedCount(len);

                    // me.value = defaultValue;
                    // me.text = defaultText;

                    if (value != me.getValue()) {
                        me._OnValueChanged();
                    }

                }
                
            },
            complete: function() {
                
                if (maskTimer) {
                    clearTimeout(maskTimer);
                }
                if (me.isMask) {
                    me.unmask();
                    me.isMask = false;
                }
            }
        });
    },

    _updateButtons: function () {
        var enable = function (el) {
            mini.removeClass(el, 'disabled');
        };
        var disable = function (el) {
            mini.addClass(el, 'disabled');
        };

        // 如果没有选中的条目 或 选中条目无兄弟节点，则 上移、下移 失效
        if (!this.selectedListNode || !this.selectedListNode.siblings().length) {
            disable(this.topBtn);
            disable(this.bottomBtn);

        } else if (!this.selectedListNode.prev().length) {
            disable(this.topBtn);
            enable(this.bottomBtn);

        } else if (!this.selectedListNode.next().length) {
            enable(this.topBtn);
            disable(this.bottomBtn);

        } else {
            enable(this.topBtn);
            enable(this.bottomBtn);
        }

    },

    getSelectedNodes: function () {
        // var nodes = [],
        //     selectNodes = this.selectNodes,
        //     textField = this.textField;
        // for (var v in this.selectNodes) {
        //     nodes.push({
        //         value: v,
        //         text: this.selectNodes[v][this.textField]
        //     });
        // }

        // 将方法改为获取的节点为排序后的顺序
        // 修改原因：张剑峰反馈框架中都是用过这个方法来获取选中节点的，
        // 但获取出来是未排序的，如果页面上改成getValue的方法，改动量比较大
        var nodes = [];
        jQuery(this._selectList).children('li').each(function (index, item) {
            var $item = jQuery(item);
            
            nodes.push({
                value: $item.attr('guid'),
                text: $item.text()
            });
        });
        return nodes;
    },

    setSelectedNodes: function (nodes) {

        for (var i = 0, len = nodes.length; i < len; i++) {
            var node = this.tree.getNode(nodes[i].value);

            if (node) {
                this.tree.selectNode(node);
            } else {
                node = {};
                node[this.textField] = nodes[i].text;
                node[this.idField] = nodes[i].value;

                this.selectNodes[nodes[i].value] = node;

                mini.append(this._selectList, this._getItemHtml(node));
            }
        }
    },

    clearAll: function () {
        // 已选列表中无内容，do nothing
        if (!this._selectList.innerHTML) return;

        this._selectList.innerHTML = '';
        this.selectNodes = {};

        this.selectedListNode = null;

        this.tree.uncheckAllNodes();

        // 清空已选计数
        this._setSelectedCount(0);

        // this._updateButtons();
    },

    setValue: function (value) {
        this.value = value;
        var valueArr = value.split(','),
            html = [];
        this.clearAll();
        if (!value) {
            return;
        }
        for (var i = 0, len = valueArr.length; i < len; i++) {
            var node = this.tree.getNode(valueArr[i]);

            if (node) {
                this.tree.checkNode(node);
            } else {
                node = {};
                node[this.textField] = node[this.idField] = valueArr[i];

            }
            this.selectNodes[valueArr[i]] = node;

            html.push(this._getItemHtml(node));

            // this.selectedCount++;
        }
        mini.append(this._selectList, html.join(''));

        this._updateButtons();
        this._setSelectedCount();
    },
    getValue: function () {
        var value = [];
        jQuery(this._selectList).children('li').each(function (index, item) {
            value.push(jQuery(item).attr('guid'));
        });
        // for (var v in this.selectNodes) {
        //     value.push(v);
        // }
        return value.join(',');
    },
    setText: function (text) {
        this.text = text;
        if (!text) return;
        var textArr = text.split(','),
            valueArr = this.value.split(','),
            i = 0,
            len = valueArr.length,
            node,
            v;

        for (; i < len; i++) {
            v = valueArr[i];
            node = this.selectNodes[v];
            if (node) {
                node[this.textField] = textArr[i];
                jQuery(this._selectList).find('li[guid="' + v + '"]').find('.item-name').attr('title', textArr[i]).html(textArr[i]);
            }

        }
    },
    getText: function () {
        var text = [];

        jQuery(this._selectList).children('li').each(function (index, item) {
            text.push(jQuery(item).find('.item-name').text());
        });
        // for (var v in this.selectNodes) {
        //     text.push(this.selectNodes[v][this.textField]);
        // }
        return text.join(',');
    },

    setSelectedPanelTitle: function (title) {
        this.selectedPanelTitle = title;
        // this._rightHeader.innerHTML = title;

        // revise by chendongshun at 2017.05.09
        // cause : 设置右侧头部标题后样式错误
        // _rightHeader.innerHTML 为 '<span class="mini-tabstreeselect-header-title">已选人员</span>' 应只设置其内部
        // 准确地来说应该使用firstElementChild。
        // 但考虑需要兼容ie8，同时控件内部的html是代码直接书写的，不存在空文本节点，直接使用firstChild。
        // this._rightHeader.firstChild.innerHTML = title;
        this._rightTitle.innerHTML = title;
    },

    _setSelectedCount: function (count) {
        // if (count !== undefined) {
        //     this.selectedCount = count;
        // }
        // if (this.showSelectedCount) {
        //     if (this.selectedCount !== 0) {
        //         mini.removeClass(this._rightCount, 'hidden');
        //     } else {
        //         mini.addClass(this._rightCount, 'hidden');
        //     }
        //     // 直接赋值数字 括号用css实现
        //     this._rightCount.innerHTML = this.selectedCount;
        // }

        // 直接获取右侧列表的个数
        if (this.showSelectedCount) {
            count = count >= 0 ? count : jQuery(this._selectList).children('li').length;

            if (count !== 0) {
                mini.removeClass(this._rightCount, 'hidden');
            } else {
                mini.addClass(this._rightCount, 'hidden');
            }
            // 直接赋值数字 括号用css实现
            this._rightCount.innerHTML = count;
        }
    },

    setShowSelectedCount: function (show) {
        this.showSelectedCount = show === true ? true : false;

        if (this.showSelectedCount) {
            mini.removeClass(this._rightCount, 'hidden');
        } else {
            mini.addClass(this._rightCount, 'hidden');
        }
    },
    getShowSelectedCount: function () {
        return this.showSelectedCount;
    },

    doLayout: function () {
        var h = jQuery(this.el).height();
        this._leftPanel.style.height = h + 'px';
        this._rightPanel.style.height = h + 'px';

        var s_h = jQuery(this._rightContent).height() - jQuery(this._buttons).outerHeight(true);
        this._selectList.style.height = (s_h >= 0 ? s_h : 0) + 'px';

        this.tree.doLayout();
    },

    setTabs: function (tabs, updateTree) {
        var i, len,
            tabArr = [],
            hasParam = this.url.indexOf('?') > 0;

        this.tabsConfig = [];
        this.tabKeys = [];
        for (i = 0, len = tabs.length; i < len; i++) {

            tabArr.push('<li>' + tabs[i].tabText + '</li>');
            var key = (hasParam ? '&' : '?') + 'tabKey=' + tabs[i].tabKey;
            this.tabsConfig.push({
                url: this.url + key,
                filterMode: tabs[i].filterMode,
                filterUrl: this.filterUrl ? (this.filterUrl + key) : undefined
            });
            this.tabKeys.push(tabs[i].tabKey);
        }
        this._tabs.innerHTML = tabArr.join('');

        this.doLayout();

        this.activeTab(0, updateTree);
    },

    addTab: function(tab, updateTree){
        var hasParam = this.url.indexOf('?') > 0;

        var key = (hasParam ? '&' : '?') + 'tabKey=' + tab.tabKey;
        this.tabsConfig.push({
            url: this.url + key,
            filterMode: tab.filterMode,
            filterUrl: this.filterUrl ? (this.filterUrl + key) : undefined
        });
        this.tabKeys.push(tab.tabKey);

        jQuery('<li>' + tab.tabText + '</li>').appendTo(this._tabs);

        this.doLayout();

        if(updateTree !== false) {
            this.activeTab(this.tabsConfig.length - 1, true);
        }
    },

    _activeTabIndex: 0,
    activeTab: function (index, updateTree) {
        var config = this.tabsConfig[index],
            $tab = jQuery(this._tabs).children().eq(index);

        if (config) {
            if (!$tab.hasClass('active')) {
                $tab.siblings('.active').removeClass('active');
                $tab.addClass('active');
            }
            
            this._activeTabIndex = index;
            
            // var filterKey = config.filterKey || '';
            // this.tree._filterInput.setValue(filterKey);
            var filterKey = this.tree._filterInput.getValue();
            this.tree._filterKey = filterKey;

            if (config.filterMode) {
                this.tree.setFilterMode(config.filterMode);
            }
            if (config.filterUrl) {
                this.tree.setFilterUrl(config.filterUrl);
            }

            var needFilter = filterKey && this.tree.filterMode === 'server';

            if(needFilter) {
                this.tree.setAutoLoad(false);
                this.tree.setUrl(config.url);
                this.treeUrl = config.url;

                this.tree._doFilter(filterKey);
            } else {
                
                if (updateTree === false) {
                    this.tree.setAutoLoad(false);
                } else {
                    this.tree.setAutoLoad(true);
                }

                this.tree._dataSource.ajaxData = {
                    activeTab: true
                };

                this.tree.setUrl(config.url);

                // 加载后把activeTab标识清空
                this.tree._dataSource.ajaxData = null;

                if (this.tree._dataSource.loadParams) {
                    this.tree._dataSource.loadParams.activeTab = false;
                }

                this.treeUrl = config.url;

                if (needFilter || updateTree === false) {
                    this.tree.setAutoLoad(true);
                }

                if(filterKey) {
                    this.tree._doFilter(filterKey);
                }

            }

        }
    },

    /**
     *
     * function setData(data)
     * @member mini.TabsTreeSelect
     * @param {Array} data
     *
     */
    setData: function (data) {
        if (typeof data == "string") {
            data = eval("(" + data + ")");
        }
        if (!mini.isArray(data)) {
            data = [];
        }
        if (this.resultAsTree) {
            this.tree.setData(data);
        } else {
            this.tree.loadList(data);
        }

        this.data = this.tree.data;
    },

    /**
     *
     * function getData()
     * @member mini.TabsTreeSelect
     * @returns {Array}
     *
     */
    getData: function () {
        return this.data;
    },

    /**
     *
     * function setUrl(url)
     * @member mini.TabsTreeSelect
     * @param {String} url
     *
     */
    setUrl: function (url) {
        this.url = url;
        this._updateTabsUrl();
    },
    /**
     *
     * function getUrl()
     * @member mini.TabsTreeSelect
     * @returns {String}
     *
     */
    getUrl: function () {
        return this.url;
    },

    getAutoLoad: function () {
        return this.autoLoad;
    },
    setAutoLoad: function (autoLoad) {
        this.autoLoad = autoLoad;
    },

    setTabKeys: function (keys) {
        this.tabKeys = keys;
        this._updateTabsUrl();
    },

    _updateTabsUrl: function () {
        var i,
            len = Math.min(this.tabKeys.length, this.tabsConfig.length),
            hasParam = this.url.indexOf('?') > 0;

        if (len > 0) {
            for (i = 0; i < len; i++) {
                var key = (hasParam ? '&' : '?') + 'tabKey=' + this.tabKeys[i];
                this.tabsConfig[i].url = this.url + key;
                this.tabsConfig[i].filterUrl = this.filterUrl ? (this.filterUrl + key) : undefined;
            }

            this.activeTab(0, this.autoLoad);

        }
    },

    load: function () {
        this.tree.load();
    },
    /**
     *
     * function setResultAsTree(resultAsTree)
     * @member mini.TabsTreeSelect
     * @param {Boolean} resultAsTree
     *
     */
    setResultAsTree: function (resultAsTree) {
        this.resultAsTree = resultAsTree;
        if (this.tree) {
            this.tree.setResultAsTree(resultAsTree);
        }
    },
    /**
     *
     * function getResultAsTree()
     * @member mini.TabsTreeSelect
     * @returns {Boolean}
     *
     */
    getResultAsTree: function () {
        return this.resultAsTree;
    },
    /**
     *
     * function setParentField(parentField)
     * @member mini.TabsTreeSelect
     * @param {String} parentField
     *
     */
    setParentField: function (parentField) {
        this.parentField = parentField;
        if (this.tree) {
            this.tree.setParentField(parentField);
        }
    },
    /**
     *
     * function getParentField()
     * @member mini.TabsTreeSelect
     * @returns {String}
     *
     */
    getParentField: function () {
        return this.parentField;
    },
    /**
     *
     * function setIdField(idField)
     * @member mini.TabsTreeSelect
     * @param {String} idField
     *
     */
    setIdField: function (idField) {
        if (this.tree) {
            this.tree.setIdField(idField);
        }
        this.idField = idField;
    },
    /**
     *
     * function getIdField()
     * @member mini.TabsTreeSelect
     * @returns {String}
     *
     */
    getIdField: function () {
        return this.idField;
    },

    getTextField: function () {
        return this.textField;
    },
    setTextField: function (textField) {
        this.textField = textField;
        if (this.tree) {
            this.tree.setTextField(textField);
        }
    },

    getNodesField: function () {
        return this.nodesField;
    },
    setNodesField: function (nodesField) {
        this.nodesField = nodesField;
        if (this.tree) {
            this.tree.setNodeField(nodesField);
        }
    },
    /**
     *
     * function setShowTreeIcon(showTreeIcon)
     * @member mini.TabsTreeSelect
     * @param {Boolean} showTreeIcon
     *
     */
    setShowTreeIcon: function (showTreeIcon) {
        this.showTreeIcon = showTreeIcon;
        if (this.tree) {
            this.tree.setShowTreeIcon(showTreeIcon);
        }
    },
    /**
     *
     * function getShowTreeIcon()
     * @member mini.TabsTreeSelect
     * @returns {Boolean}
     *
     */
    getShowTreeIcon: function () {
        return this.showTreeIcon;
    },
    /**
     *
     * function setShowTreeLines(showTreeLines)
     * @member mini.TabsTreeSelect
     * @param {Boolean} showTreeLines
     *
     */
    setShowTreeLines: function (showTreeLines) {
        this.showTreeLines = showTreeLines;
        if (this.tree) {
            this.tree.setShowTreeLines(showTreeLines);
        }
    },
    /**
     *
     * function getShowTreeLines()
     * @member mini.TabsTreeSelect
     * @returns {Boolean}
     *
     */
    getShowTreeLines: function () {
        return this.showTreeLines;
    },
    setShowFolderCheckBox: function (showFolderCheckBox) {
        this.showFolderCheckBox = showFolderCheckBox;
        if (this.tree) {
            this.tree.setShowFolderCheckBox(showFolderCheckBox);
        }
    },
    getShowFolderCheckBox: function () {
        return this.showFolderCheckBox;
    },
    setFilterUrl: function (url) {
        this.filterUrl = url;
        if (this.tree) {
            this.tree.setFilterUrl(url);
        }
    },
    getFilterUrl: function () {
        return this.filterUrl;
    },
    setFilterMode: function (filterMode) {
        this.filterMode = filterMode;
        if (this.tree) {
            this.tree.setFilterMode(filterMode);
        }
    },
    getFilterMode: function () {
        return this.filterMode;
    },
    setCanCheckParent: function (canCheckParent) {
        this.canCheckParent = canCheckParent;
        if (this.tree) {
            this.tree.setCheckRecursive(!canCheckParent);
        }
    },
    getCanCheckParent: function () {
        return this.canCheckParent;
    },
    setCheckRecursive: function (checkRecursive) {
        this.checkRecursive = checkRecursive;
        if (this.tree) {
            this.tree.setCheckRecursive(checkRecursive);
        }
    },
    getCheckRecursive: function () {
        return this.checkRecursive;
    },
    setAutoCheckParent: function (autoCheckParent) {
        this.autoCheckParent = autoCheckParent;
        if (this.tree) {
            this.tree.setAutoCheckParent(autoCheckParent);
        }
    },
    getAutoCheckParent: function () {
        return this.AutoCheckParent;
    },
    setExpandOnLoad: function (expandOnLoad) {
        this.expandOnLoad = expandOnLoad;
        if (this.tree) {
            this.tree.setExpandOnLoad(expandOnLoad);
        }
    },
    getExpandOnLoad: function () {
        return this.expandOnLoad;
    },

    setCheckOnTextClick: function (checkOnTextClick) {
        this.checkOnTextClick = checkOnTextClick;
        if (this.tree) {
            this.tree.setCheckOnTextClick(checkOnTextClick);
        }
    },

    getAttrs: function (el) {
        var attrs = mini.TabsTreeSelect.superclass.getAttrs.call(this, el);
        mini._ParseString(el, attrs, ["data", "textField", "pinyinField",
            "idField", "nodesField", "parentField", "onbeforenodecheck",
            "onbeforenodeselect", "onnodeclick", "url", "filterUrl", "filterMode",
            "onbeforeload", "onload", "ontreeexpand", "ontreecollapse", "ondrawnode", "selectedPanelTitle"
        ]);
        mini._ParseBool(el, attrs, ["expandOnNodeClick", "expandOnLoad", "resultAsTree", "showTreeIcon",
            "showTreeLines", "showFolderCheckBox", "canCheckParent", "showBorder", "loadChildWhenChecked", "autoLoad",
            "checkRecursive", "autoCheckParent", "showFullPath", "includeRootNode", "checkOnTextClick", "showSelectedCount", "showSort"
        ]);


        var tabs = [],
            nodes = mini.getChildNodes(el),
            tabAttr = null,
            i, len;

        for (i = 0, len = nodes.length; i < len; i++) {
            tabAttr = {};
            mini._ParseString(nodes[i], tabAttr, ["tabText", "tabKey", "filterMode"]);
            tabs.push(tabAttr);
        }

        attrs.tabs = tabs;
        return attrs;
    }
});

mini.regClass(mini.TabsTreeSelect, "tabstreeselect");
/**
 * jQuery MiniUI v3.0
 * 
 * Web Site : http://www.miniui.com
 *
 * Commercial License : http://www.miniui.com/license
 *
 * Copyright(c) 2012 All Rights Reserved. Shanghai PusSoft Co., Ltd (上海普加软件有限公司) [ services@plusoft.com.cn ]. 
 * 
 */

mini.TreeSelect = function() {
    this.data = [];
    mini.TreeSelect.superclass.constructor.apply(this, arguments);
}
mini.extend(mini.TreeSelect, mini.PopupEdit, {
    valueFromSelect: false,

    text: '',
    value: '',

    autoCheckParent: false,
    expandOnLoad: false,

    valueField: "id",
    textField: "text",
    nodesField: "children",
    dataField: "",
    delimiter: ',',

    multiSelect: false,
    data: [],
    url: "",

    allowInput: false,

    showTreeIcon: false,
    showTreeLines: true,

    resultAsTree: false,
    parentField: "pid",
    checkRecursive: false,

    showFolderCheckBox: false,
    showRadioButton: false, //radio

    showFilter: false,

    // 搜索模式，可取值为'client'、'server'
    filterMode: 'client',

    filterUrl: '',

    showFullPath: false,
    includeRootNode: false,

    popupHeight: 200,
    popupWidth: "100%",
    popupMaxHeight: 250,
    popupMinWidth: 100,

    setAjaxData: function (value) {
        this.ajaxData = value;
        this.tree.setAjaxData(value);
    },
    setAjaxType: function (value) {
        this.ajaxType = value;
        this.tree.setAjaxType(value);
    },
    setAjaxOptions: function (value) {
        this.ajaxOptions = value;
        this.tree.setAjaxOptions(value);
    },

    set: function(kv) {
        if (typeof kv == 'string') {
            return this;
        }

        var value = kv.value;
        delete kv.value;
        var text = kv.text;
        delete kv.text;
        var url = kv.url;
        delete kv.url;
        var data = kv.data;
        delete kv.data;
        var showFullPath = kv.showFullPath;
        delete kv.showFullPath;
        var includeRootNode = kv.includeRootNode;
        delete kv.includeRootNode;
        mini.TreeSelect.superclass.set.call(this, kv);

        if (!mini.isNull(data)) {
            this.setData(data);
        }
        if (!mini.isNull(url)) {
            this.setUrl(url);
        }
        if (!mini.isNull(value)) {
            this.setValue(value);
        }
        if (!mini.isNull(text)) {
            this.setText(text);
        }
        if (!mini.isNull(showFullPath)) {
            this.showFullPath = showFullPath;

            this.tree.showFullPath = showFullPath;
        }
        if (!mini.isNull(includeRootNode)) {
            this.includeRootNode = includeRootNode;

            this.tree.includeRootNode = includeRootNode;
        }
        return this;
    },

    uiCls: "mini-treeselect",
    _createPopup: function() {
        mini.TreeSelect.superclass._createPopup.call(this);

        this.tree = new mini.FilterTree();
        this.tree.setShowTreeIcon(true);
        this.tree.setStyle("border:0;width:100%;height:100%;overflow:hidden;");
        this.tree.setResultAsTree(this.resultAsTree);
        this.tree.render(this.popup._contentEl);
        this.tree.setCheckRecursive(this.checkRecursive);
        this.tree.setShowFolderCheckBox(this.showFolderCheckBox);
        this.tree.setShowRadioButton(this.showRadioButton);
        this.tree.setExpandOnNodeClick(this.expandOnNodeClick);
        if (!mini.isNull(this.defaultRowHeight)) this.tree.defaultRowHeight = this.defaultRowHeight;


        // this.tree.on("nodeclick", this.__OnNodeClick, this);
        var me = this;
        this.tree.on("nodeclick", function (e) {
            setTimeout(function () {
                me.__OnNodeClick(e);
            }, 10);
        }, this);

        this.tree.on("nodecheck", this.__OnCheckedChanged, this);
        this.tree.on("expand", this.__OnTreeExpand, this);
        this.tree.on("collapse", this.__OnTreeCollapse, this);
        this.tree.on("beforenodecheck", this.__OnTreeBeforeNodeCheck, this);
        this.tree.on("beforenodeselect", this.__OnTreeBeforeNodeSelect, this);
        this.tree.on("drawnode", this.__OnDrawNode, this);
        this.tree.useAnimation = false;

        this.tree.set({
            showToolbar: this.showFilter,
            filterMode: this.filterMode,
            filterUrl: this.filterUrl
        });

        //
        //this.tree.setVirtualScroll(true);

        var me = this;
        this.tree.on("beforeload", function(e) {
            me.fire("beforeload", e);
        }, this);
        this.tree.on("load", function(e) {
            me.fire("load", e);
        }, this);
        this.tree.on("loaderror", function(e) {
            me.fire("loaderror", e);
        }, this);
    },
    __OnDrawNode: function(e) {
        this.fire("drawnode", e);
    },
    __OnTreeBeforeNodeCheck: function(e) {
        e.tree = e.sender;
        this.fire("beforenodecheck", e);
    },
    __OnTreeBeforeNodeSelect: function(e) {

        e.tree = e.sender;
        this.fire("beforenodeselect", e);
        if (e.cancel) {
            this._nohide = true;
        }
    },
    __OnTreeExpand: function(e) {
        //this.showPopup();
    },
    __OnTreeCollapse: function(e) {
        //this.showPopup();
    },
    findItems: function(value) {
        return this.tree.findNodes(this.tree.getIdField(), value);
    },
    //    getNodesByValue: function (value) {
    //        return this.tree.getNodesByValue(this.value); 
    //    },
    findNodes: function(value) {
        return this.tree.getNodesByValue(value);
    },
    getSelectedNode: function() {
        //return this.tree.getSelectedNode();
        //return this.tree._dataSource.getNodesByValue(this.value)[0];
        return this.getSelectedNodes()[0];
    },

    //null:原始节点;true包含父节点;false不包含父节点
    getCheckedNodes: function(hasParent) {
        //return this.tree.getCheckedNodes(hasParent);
        //return this.tree.getNodesByValue(this.value);


        var nodes = this.tree.getNodesByValue(this.value);

        if (hasParent === false) hasParent = 'leaf';
        nodes = this.tree._dataSource.doGetCheckedNodes(nodes, hasParent);

        return nodes;

    },
    getSelectedNodes: function() {
        //return this.tree.getSelectedNodes()
        return this.tree.getNodesByValue(this.value);
    },
    getParentNode: function(node) {
        return this.tree.getParentNode(node);
    },
    getChildNodes: function(node) {
        return this.tree.getChildNodes(node);
    },
    //    _OnValueChanged: function () {
    //        if (this.validateOnChanged) {
    //            this.validate();
    //        }
    //        var e = { value: this.getValue() };
    //        if (this.multiSelect == false) {
    //            e.node = this.tree.getSelectedNode();
    //            e.isLeaf = this.tree.isLeaf(e.node);
    //        }
    //        this.fire("valuechanged", e);
    //        
    //    },
    showPopup: function() {
        //        var ex = { cancel: false };
        //        this.fire("beforeshowpopup", ex);
        //        if (ex.cancel == true) return;

        //this.tree.setHeight("auto");


        var ex = { cancel: false };
        this.fire("beforeshowpopup", ex);
        this._firebeforeshowpopup = false;
        if (ex.cancel == true) return;


        var h = this.popup.el.style.height;
        //        if (h == "" || h == "auto") {
        //            this.tree.setHeight("auto");
        //        } else {
        //            //this.tree.setHeight("100%");
        //        }

        mini.TreeSelect.superclass.showPopup.call(this);

        this.tree.setValue(this.value, false);

        if (this.expandOnPopup) {
            this.tree.expandPath(this.value);
        }

        this._nohide = false;
    },
    expandOnPopup: false,
    setExpandOnPopup: function(value) {
        this.expandOnPopup = value;
    },
    getExpandOnPopup: function() {
        return this.expandOnPopup;
    },

    //    hidePopup: function () {
    //        this.tree.clearFilter();
    //        mini.TreeSelect.superclass.hidePopup.call(this);
    //    },
    __OnPopupHide: function(e) {
        this.__doFocusCls();
        this.tree.clearFilter();
        this.fire("hidepopup");
    },
    getItem: function(item) {
        return typeof item == "object" ? item : this.data[item];
    },
    indexOf: function(item) {
        return this.data.indexOf(item);
    },
    getAt: function(index) {
        return this.data[index];
    },
    loadList: function(list, idField, parentField) {
        this.tree.loadList(list, idField, parentField);
        this.data = this.tree.getData();
        this._getCheckedValue();
    },
    getList: function() {
        return this.tree.getList();
    },
    load: function(data) {
        this.tree.load(data);
        this.data = this.tree.data;
        this._getCheckedValue();
    },
    _eval: function(_) {
        return eval('(' + _ + ')');
    },
    setData: function(data) {
        if (typeof data == "string") {
            data = this._eval(data);
        }
        if (!mini.isArray(data)) data = [];
        this.tree.setData(data);
        this.data = this.tree.data;
        this._getCheckedValue();
    },
    getData: function() {
        return this.data;
    },
    _getCheckedValue: function() {
        var value = this.tree.getValue();
        this.setValue(value);
    },
    setUrl: function(url) {
        this.getPopup();

        //        this.tree.set({
        //            idField: this.valueField,
        //            parentField: this.
        //    });

        this.tree.setUrl(url);
        this.url = this.tree.url;
        this.data = this.tree.data;
        this._getCheckedValue();
    },

    getUrl: function() {
        return this.url;
    },
    virtualScroll: false,
    setVirtualScroll: function(value) {
        if (this.tree) this.tree.setVirtualScroll(value);
        this.virtualScroll = value;
    },
    getVirtualScroll: function() {
        return this.virtualScroll;
    },

    defaultRowHeight: 23,
    setDefaultRowHeight: function(value) {
        if (this.tree) this.tree.defaultRowHeight = value;
        this.defaultRowHeight = value;
    },
    getDefaultRowHeight: function() {
        return this.defaultRowHeight;
    },

    pinyinField: "tag",
    setPinyinField: function(value) {
        //if (this._listbox) this._listbox.setPhoneticField(value);
        this.pinyinField = value;
    },
    getPinyinField: function() {
        return this.pinyinField;
    },

    setTextField: function(value) {
        if (this.tree) this.tree.setTextField(value);
        this.textField = value;
    },
    getTextField: function() {
        return this.textField;
    },
    setNodesField: function(value) {
        if (this.tree) this.tree.setNodesField(value);
        this.nodesField = value;
    },
    getNodesField: function() {
        return this.nodesField;
    },
    setDataField: function(value) {
        if (this.tree) this.tree.setDataField(value);
        this.dataField = value;
    },
    getDataField: function() {
        return this.dataField;
    },
    ///////////
    getValue: function() {
        var value = mini.TreeSelect.superclass.getValue.call(this);
        if (this.valueFromSelect && value && this.findItems(value).length == 0) {
            return "";
        }
        return value;
    },
    setValue: function(value) {
        //if (this.value != value) {

        var vts = this.tree.getValueAndText(value);
        if (vts[1] == "" && !this.valueFromSelect) {
            vts[0] = value;
            vts[1] = value;
        }
        this.value = value;

        this._valueEl.value = value;
        //if (vts[1]) {

        // this.text = this._textEl.value = vts[1];
        
        // 安全整改要求，服务端返回数据是对html编码的，但是提交时需要还原成正常的html标签
        this.text = this._textEl.value = mini.htmlDecode(vts[1]);
        //}

        this._doEmpty();
        //}
        //this.tree.setValue(this.value);
    },
    setMultiSelect: function(value) {
        if (this.multiSelect != value) {
            this.multiSelect = value;
            this.tree.setShowCheckBox(value);
            this.tree.setAllowSelect(!value);
            this.tree.setEnableHotTrack(!value);
        }
    },
    getMultiSelect: function() {
        return this.multiSelect;
    },
    __OnNodeClick: function(e) {

        if (this.multiSelect) return;

        var node = this.tree.getSelectedNode();
        var vts = this.tree.getValueAndText(node);
        var v = vts[0];

        var value = this.getValue();
        this.setValue(v);
        if (value != this.getValue()) {
            this._OnValueChanged();
        }

        if (this._nohide !== true) {
            this.hidePopup();
            // this.focus();
            if (!isMobile) {
                this.focus();
            }
        }
        this._nohide = false;
        this.fire("nodeclick", { node: e.node });
    },
    __OnCheckedChanged: function(e) {

        if (!this.multiSelect) return;

        var v = this.tree.getValue();

        var value = this.getValue();
        this.setValue(v);
        if (value != this.getValue()) {
            this._OnValueChanged();
        }
        // this.focus();
        if (!isMobile) {
            this.focus();
        }
    },


    __OnInputKeyDown: function(e) {
        var ex = { htmlEvent: e };
        this.fire("keydown", ex);
        if (e.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) {
            return false;
        }

        if (e.keyCode == 9) { //tab
            if (this.isShowPopup()) {
                this.hidePopup();
            }
            return;
        }

        if (this.isReadOnly()) return;

        switch (e.keyCode) {
            case 27: //esc
                if (this.isShowPopup()) {
                    e.stopPropagation();
                }

                this.hidePopup();
                break;
            case 13: //enter                
                var me = this;
                setTimeout(function() {
                    me.fire("enter", ex);
                }, 10);
                break;
            case 37: //left
                break;
            case 38: //top
                e.preventDefault();
                break;
            case 39: //right
                break;
            case 40: //bottom
                e.preventDefault();
                this.showPopup();
                break;
            default:
                if (this.allowInput == false) {} else {
                    var me = this;
                    setTimeout(function() {
                        me._doQuery();
                    }, 10);
                }
                break;
        }
    },
    _doQuery: function() {
        if (this.multiSelect) return;
        var field = this.textField,
            pinyinField = this.pinyinField;
        var value = this._textEl.value.toLowerCase();
        this.tree.filter(function(node) {
            var text = String(node[field] ? node[field] : "").toLowerCase();
            var pinyin = String(node[pinyinField] ? node[pinyinField] : "").toLowerCase();

            if (text.indexOf(value) != -1 || pinyin.indexOf(value) != -1) {
                return true;
            } else return false;
        });
        this.tree.expandAll();
        this.showPopup();
    },
    ////////////////////////////////////

    setCheckRecursive: function(value) {

        this.checkRecursive = value;
        if (this.tree) this.tree.setCheckRecursive(value);
    },
    getCheckRecursive: function() {
        return this.checkRecursive;
    },
    setResultAsTree: function(value) {
        this.resultAsTree = value;
        if (this.tree) this.tree.setResultAsTree(value);
    },
    getResultAsTree: function() {
        return this.resultAsTree;
    },
    setParentField: function(value) {
        this.parentField = value;
        if (this.tree) this.tree.setParentField(value);
    },
    getParentField: function() {
        return this.parentField;
    },
    setValueField: function(valueField) {

        if (this.tree) this.tree.setIdField(valueField);
        this.valueField = valueField;
    },
    getValueField: function() {
        return this.valueField;
    },
    setShowTreeIcon: function(value) {
        this.showTreeIcon = value;
        if (this.tree) this.tree.setShowTreeIcon(value);
    },
    getShowTreeIcon: function() {
        return this.showTreeIcon;
    },
    setShowTreeLines: function(value) {
        this.showTreeLines = value;
        if (this.tree) this.tree.setShowTreeLines(value);
    },
    getShowTreeLines: function() {
        return this.showTreeLines;
    },
    setShowFolderCheckBox: function(value) {

        this.showFolderCheckBox = value;
        if (this.tree) this.tree.setShowFolderCheckBox(value);
    },
    getShowFolderCheckBox: function() {
        return this.showFolderCheckBox;
    },
    setShowRadioButton: function(value) {

        this.showRadioButton = value;
        if (this.tree) this.tree.setShowRadioButton(value);
    },
    getShowRadioButton: function() {
        return this.showRadioButton;
    },

    setAutoCheckParent: function(value) {

        this.autoCheckParent = value;
        if (this.tree) this.tree.setAutoCheckParent(value);
    },
    getAutoCheckParent: function() {
        return this.autoCheckParent;
    },
    setExpandOnLoad: function(value) {

        this.expandOnLoad = value;
        if (this.tree) this.tree.setExpandOnLoad(value);
    },
    getExpandOnLoad: function() {
        return this.expandOnLoad;
    },
    setValueFromSelect: function(value) {
        this.valueFromSelect = value;
    },
    getValueFromSelect: function() {
        return this.valueFromSelect;
    },
    setAjaxData: function(value) {
        this.ajaxData = value;
        this.tree.setAjaxData(value);
    },
    setAjaxType: function(value) {
        this.ajaxType = value;
        this.tree.setAjaxType(value);
    },

    expandOnNodeClick: false,
    setExpandOnNodeClick: function(value) {
        this.expandOnNodeClick = value;
        if (this.tree) this.tree.setExpandOnNodeClick(value);
    },
    getExpandOnNodeClick: function() {
        return this.expandOnNodeClick;
    },

    getFilterUrl: function() {
        return this.filterUrl || this.url;
    },

    getShowFilter: function() {
        return this.showFilter;
    },

    setShowFilter: function(showFilter) {
        this.showFilter = showFilter;
        this.tree.set({
            showToolbar: showFilter
        });
    },

    setFilterUrl: function(filterUrl) {
        this.filterUrl = filterUrl;
        this.tree.setFilterUrl(filterUrl);
    },

    getFilterMode: function() {
        return this.filterMode;
    },

    setFilterMode: function(filterMode) {
        this.filterMode = filterMode;
        this.tree.setFilterMode(filterMode);
    },
    
    clear: function() {
        this.tree._filterInput.setValue('');
        this.tree._doFilter('');
    },

    getAttrs: function(el) {
        var attrs = mini.TreeSelect.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs, ["url", "data", "textField", "pinyinField", "valueField", "nodesField", "parentField", "onbeforenodecheck", "onbeforenodeselect",
            "expandOnLoad", "onnodeclick", "onbeforeload", "onload", "onloaderror", "ondrawnode", "filterMode", "filterUrl"
        ]);
        mini._ParseBool(el, attrs, ["expandOnNodeClick", "multiSelect", "resultAsTree", "checkRecursive", "showTreeIcon", "showTreeLines",
            "showFolderCheckBox", "showRadioButton",
            "autoCheckParent", "valueFromSelect", "virtualScroll", "expandOnPopup", "showFilter", "showFullPath", "includeRootNode"
        ]);
        mini._ParseInt(el, attrs, ["defaultRowHeight"]);

        if (attrs.expandOnLoad) {
            var level = parseInt(attrs.expandOnLoad);
            if (mini.isNumber(level)) {
                attrs.expandOnLoad = level;
            } else {
                attrs.expandOnLoad = attrs.expandOnLoad == "true" ? true : false;
            }
        }

        return attrs;
    }
});
mini.regClass(mini.TreeSelect, 'TreeSelect');

jQuery(function () {
    setTimeout(function () {
        try {
            var activeElement = mini.getActiveElement();
            if (activeElement) {
                var jq = jQuery(activeElement).closest('.mini-buttonedit, .mini-textbox');
                if (jq.length) {
                    var o = mini.get(jq[0]);
                    if (o) {
                        o.blur();
                        o.focus();
                    }
                }
            }
        } catch (ex) {
            
        }
    }, 100);
});


mini.VerifyCode = function () {
    mini.VerifyCode.superclass.constructor.apply(this, arguments);
};

mini.extend(mini.VerifyCode, mini.Control, {
    url: '',

    autoLoad: true,

    width: 78,
    height: 26,
    charLength: 4,

    uiCls: 'mini-verifycode',

    set: function (kv) {
        if (typeof kv == 'string') {
            return this;
        }

        var url = kv.url;
        delete kv.url;

        mini.VerifyCode.superclass.set.call(this, kv);

        if (url) {
            this.setUrl(url);
        }

        return this;
    },

    _create: function () {
        this.el = document.createElement('div');

        this.el.innerHTML = '<img title="看不清楚，换一个？"></img>';

        this._img = this.el.firstChild;

    },

    _initEvents: function () {
        var me = this;
        mini.on(this._img, 'click', function () {
            me._doLoad({
                width: parseInt(this.width),
                height: parseInt(this.height),
                charLength: me.charLength
            });
        });
    },


    setData: function (data) {
        this.value = data.value;
        this._img.src = data.src;
        this.uuid = data.uuid;
    },

    setUrl: function (url) {
        this.url = url;

        if (this.autoLoad) {
            this._doLoad({
                width: parseInt(this.width),
                height: parseInt(this.height),
                charLength: this.charLength
            });
        }
    },

    getUrl: function () {
        return this.url;
    },

    _doLoad: function (params) {
        params = params || {};
        var e = {
            url: this.url,
            async: false,
            type: this.ajaxType ? this.ajaxType : 'post',
            data: params,
            params: params,
            cache: false,
            cancel: false
        };
        this.fire("beforeload", e);
        if (e.data != e.params && e.params != params) {
            e.data = e.params;
        }
        if (e.cancel == true) return;

        var sf = me = this;
        var url = e.url;
        mini.copyTo(e, {
            success: function (text, textStatus, xhr) {
                delete e.params;
                var obj = {
                    text: text,
                    result: null,
                    sender: me,
                    options: e,
                    xhr: xhr
                };
                var result = null;
                try {
                    mini_doload(obj);
                    result = obj.result;
                    if (!result) {
                        result = mini.decode(text);
                    }
                } catch (ex) {
                    if (mini_debugger == true) {
                        alert(url + "\njson is error.");
                    }
                }
                result = {
                    data: result
                };

                var ex = {
                    data: result.data,
                    cancel: false,
                    result: result
                }
                sf.fire("preload", ex);
                if (ex.cancel == true) return;

                sf.setData(ex.data);

                delete ex.cancel;
                sf.fire("load", ex);

            },
            error: function (xhr, textStatus, errorThrown) {
                var e = {
                    xhr: xhr,
                    text: xhr.responseText,
                    textStatus: textStatus,
                    errorMsg: xhr.responseText,
                    errorCode: xhr.status
                };
                if (mini_debugger == true) {
                    alert(url + "\n" + e.errorCode + "\n" + e.errorMsg);
                }
                sf.fire("loaderror", e);
            }
        });

        this._ajaxer = mini.ajax(e);
    },

    getAttrs: function (el) {
        var attrs = mini.VerifyCode.superclass.getAttrs.call(this, el);
        mini._ParseString(el, attrs,
            ["url", "data", "onbeforeload", "onload", "onloaderror", "onpreload"]
        );
        mini._ParseBool(el, attrs,
            ["autoLoad"]
        );

        mini._ParseInt(el, attrs,
            ["charLength"]
        );
        return attrs;
    }
});

mini.regClass(mini.VerifyCode, "verifycode");
/**
 * 富文本编辑器
 * @class
 * @extends mini.Control
 * @requires mini.TextArea
 * @requires eWebEditor
 * 
 */
mini.WebEditor = function() {
    mini.WebEditor.superclass.constructor.call(this);
};
mini.extend(mini.WebEditor, mini.Control, {
    width: "100%",
    height: '350px',
    readOnly: false,
    // ewebeditor使用的样式名
    editstyle: "coolblue",
    // ewebeditor使用的皮肤名
    editSkin: "flat10",
    value: "",
    uiCls: "mini-webeditor",
    formField: true,
    _editorModel: window.mini_editor_model || 'ewebeditor',
    /**
     * 创建实例
     * @private
     * @member mini.WebEditor
     */
    _create: function() {
        this.el = document.createElement("div");
        this.el.innerHTML = '<textarea style="display:none"></textarea>';
        this._fromEditor = this.el.firstChild;
        this._editor = new mini.TextArea();
        this._editor.setVisible(false);
        this._editor.render(this.el);
        var that = this;

        this.externalSrc = this.externalSrc || mini.externalSrc;

        if (this._editorModel === 'ewebeditor') {
            if (!window.EWEBEDITOR) {
                mini.loadJS(this.externalSrc + 'ewebeditor/ewebeditor.js', function() {
                    that._initEditor();
                });
            } else {
                this._initEditor();
            }
        } else {
            if (!window.UE) {
                mini.loadJS(this.externalSrc + 'ueditor/ueditor.config.js', function() {
                    mini.loadJS(that.externalSrc + 'ueditor/ueditor.all.js', function() {
                        that._initEditor();
                    });
                });
            } else {
                this._initEditor();
            }
        }

    },
    /**
     * @inheritdoc
     * @member mini.WebEditor
     */
    render: function(el) {
        mini.WebEditor.superclass.constructor.call(this, el);
    },
    /**
     * 初始化富文本编辑器
     * @private
     * @member mini.WebEditor
     */
    _initEditor: function() {
        var that = this;
        setTimeout(function() {
            that._doInitEditor();
        }, 1);
    },
    /**
     * 执行真正的初始化操作
     * @private
     * @member mini.WebEditor
     * @fires initeditor
     */
    _doInitEditor: function() {
        if (this.isRender() === false) {
            return;
        }
        if (this.editor) {
            return;
        }
        var that = this;
        this._editor.set({
            name: this.id,
            id: this.id + "_editor"
        });
        this._fromEditor.id = this.id + "_fromEditor";

        if (this._editorModel === 'ewebeditor') {
            this.editor = EWEBEDITOR.Replace(this._fromEditor.id, {
                width: this.width.replace("px", ""),
                height: this.height.replace("px", ""),
                readonly: this.readOnly ? '2' : '',
                style: this.editstyle,
                skin: this.editSkin
            });

            this.fire('init', {
                sender: this,
                type: "init"
            });
        } else {
            this.editor = UE.getEditor(this._fromEditor.id, {
                initialFrameWidth: this.width.replace("px", ""),
                readonly: this.readOnly
            });

            this.editor.ready(function() {

                // 由于textarea是隐藏的，生成出来的编辑器也会自动隐藏，需要让编辑器显示出来
                that.editor.container.parentElement.style.display = '';

                // 由于ready是异步的，就有可能在调用setValue方法前已进行初始化，但在调用setValue方法时还未ready，就会造成value没有设置到编辑器上
                that.value && that.editor.setContent(that.value);

                that._$toolbar = jQuery(that.editor.container).find('.edui-editor-toolbarbox');
                that._$footer = jQuery(that.editor.container).find('.edui-editor-bottomContainer');

                that.setHeight(that.height);

                that.fire('init', {
                    sender: that,
                    type: "init"
                });
            });
        }
    },

    getEditor: function() {

        return this.editor;
    },
        /**
     * 获取内部原生editor
     * @param {Fucntion/undefined} callback 获取成功的触发的回调函数，参数为获取到的editor
     * @return {Promise} jQuery模拟的Promise
     */
    getEditorPromise: function (callback) {
        var that = this,
            dtd = jQuery.Deferred(),
            reGetCount = 0;

        function _getEditor() {
            // 超时直接判定初始化失败 暂定50次 即一秒
            if (reGetCount++ > 50) return dtd.reject(new Error('富文本控件初始化超时！'));
            
            var editor = that.editor;
            // 已经存在则成功 否则20ms后重试
            if (editor) {
                setTimeout(function () {
                    dtd.resolve(editor);
                    if (typeof callback === 'function') {
                        callback(editor);
                    }
                });
            } else {
                setTimeout(_getEditor, 20);
            }
        }

        _getEditor();

        return dtd.promise();
    },
    /**
     * 设置富文本编辑器的值
     * @param {String} value 要设置的值
     * @member mini.WebEditor
     */
    setValue: function(value) {
        this.value = this._fromEditor.value = value;

        if (this._editorModel === 'ewebeditor') {
            // 异步调用setHTML方法
            // 防止ewebeditor未初始化好就调用setValue导致值未赋值上去
            window.EWEBEDITOR && EWEBEDITOR.SetHtmlAsync(this._fromEditor.id, value);
        } else {
            if (this.editor && this.editor.isReady) {
                this.editor.setContent(value);
            }
        }

    },

    /**
     * 获取富文本编辑器的值
     * @return {String} 富文本编辑器的值
     * @member mini.WebEditor
     */
    getValue: function() {
        if (this._editorModel === 'ewebeditor') {
            if (this.editor && this.editor.getHTML) {
                return this.editor.getHTML();
            }
        } else {
            if (this.editor && this.editor.isReady) {
                return this.editor.getContent();
            }
        }
        return this.value;
    },

    /**
     * 设置富文本编辑器实际提交的数据
     * @member mini.Richtext
     */
    setSubmitData: function() {
        if (this._editor) {
            this._editor.setValue(this.getValue());
        }
    },

    /**
     * 获取富文本编辑器实际提交的数据
     * @return {String} 富文本编辑器实际提交的数据
     * @member mini.Richtext
     */
    getSubmitData: function() {
        if (this._editor) {
            return this._editor.getValue();
        }
        return this.getValue();
    },

    /**
     * 设置富文本编辑器的只读属性
     * @param {Boolean} readonly `true` 表示只读， `false` 表示非只读
     * @member mini.WebEditor
     */
    setReadOnly: function(readonly) {
        if (this.editor) {
            if (this._editorModel === 'ewebeditor') {
                this.editor.setReadOnly(readonly ? '2' : '');
            } else {

                if (this.editor.isReady) {
                    if (readonly) {
                        this.editor.setDisabled('fullscreen');
                    } else {
                        this.editor.setEnabled();
                    }
                }
            }
        }
        this.readOnly = readonly;
    },

    /**
     * 获取富文本编辑器的只读属性
     * @return {Boolean} 如果当前为只读状态，则返回 `true`，否则返回 `false`
     * @member mini.WebEditor
     */
    getReadOnly: function() {
        return this.readOnly;
    },

    setHeight: function(height) {
        // ewebeditor没有提供调整高度的方法，所以不提供动态调整
        if (this._editorModel === 'ueditor') {
            if(height == '100%') {
                height = jQuery(this.el.parentElement).height();
            } else {
                height = parseInt(height);

            }
            
            if(height) {
                this.height = height;
                if(this.editor && this.editor.isReady) {

                    this.editor.setHeight(height - this._$toolbar.height() - this._$footer.height());
                }
            }
        }
        
    },

    getAttrs: function(el) {
        var attrs = mini.WebEditor.superclass.getAttrs.call(this, el);
        attrs.text = el.innerHTML;
        mini._ParseString(el, attrs, ["value", "text", "editstyle", "editSkin", "oninit"]);
        mini._ParseBool(el, attrs, ["readOnly"]);

        return attrs;
    }
});
mini.regClass(mini.WebEditor, "webeditor");

mini.WebUploader = function () {
    mini.WebUploader.superclass.constructor.call(this);
};
mini.extend(mini.WebUploader, mini.Control, {
    uiCls: "mini-webuploader",
    uploadUrl: "",
    // 允许的文件后缀，不带点，多个用逗号分割
    limitType: "",
    mimeTypes: "",
    auto: true,
    fileNumLimit: undefined,
    fileSizeLimit: undefined,
    fileSingleSizeLimit: undefined,
    fileNameLengthLimit: 100,
    chunked: false,
    chunkSize: 5120,
    chunkRetry: 2,
    // duplicate {Boolean} [可选] [默认值：undefined] 去重， 根据文件名字、文件大小和最后修改时间来生成hash Key.
    duplicate: undefined,

    needMD5: false,

    // 压缩
    compress: false,

    // 请求超时
    timeout: 120000,

    // 第三方资源的路径，默认为全局配置mini.externalSrc的值
    externalSrc: '',
    // 上传状态
    state: 'pending',

    pickerText: '选择文件',
    startText: '开始上传',
    pauseText: '暂停上传',
    numLimitErrorText: '选择的文件过多！</br>最多可上传{0}个文件',
    sizeLimitErrorText: '选择的文件过大！</br>最多可上传{0}KB文件',
    typeDeniedErrorText: '选择的文件类型错误！</br>可上传的文件类型为：{0}',
    sizeErrorText: '选择的文件过大！</br>可上传的单文件最大为{0}KB',
    emptyFileErrorText: '不能上传空文件！',
    duplicateErrorText: '不能上传重复的文件！',
    fileNameLengthErrorText: '选择的文件名称长度过长！</br>文件名最长为{0}个字符',

    set: function (kv) {
        if (typeof kv == 'string') {
            return this;
        }

        var pickerText = kv.pickerText;
        delete kv.pickerText;

        mini.WebUploader.superclass.set.call(this, kv);

        if (pickerText) {
            this.pickerText = pickerText;
            this._picker.innerHTML = pickerText;
        }

        this._initUploader();

        return this;
    },
    /**
     * 创建实例
     * @private
     * @member mini.WebUploader
     */
    _create: function () {
        this.el = document.createElement("div");

        this.el.innerHTML =
            '<div class="mini-uploader-btns"><label class="mini-btn-pick"><i class="mini-button-icon icon-upload"></i><span class="mini-btn-pick-text">' +
            this.pickerText +
            '</span></label></div>' +
            '<div class="mini-uploader-list"></div>';

        this._buttons = this.el.firstChild;
        this._fileList = this.el.lastChild;
        this._$fileList = jQuery(this._fileList);

        this._picker = this._buttons.firstChild;
        this._pickerText = this._picker.lastChild;

        this._uploadBtn = new mini.Button();
        this._uploadBtn.setText(this.startText);
        // this._editor.setVisible(false);
        this._uploadBtn.render(this._buttons);


        this._errorContent = '';

        // 隐藏控件的显示，防止控件初始化时的页面闪烁
        this._buttons.style.visibility = 'hidden';

        this.on('render', this._initUploader, this);

    },

    _isInit: false,
    _initUploader: function () {
        var that = this;
        if (!this.isInit) {
            this.externalSrc = this.externalSrc || mini.externalSrc;

            if (!window.WebUploader) {
                mini.loadJS(this.externalSrc + 'webuploader/webuploader.min.js', function () {
                    that._createUploader();
                });
            } else {
                this._createUploader();
            }
            this.isInit = true;
        }
    },

    _createUploader: function () {
        var accept = null,
            that = this;
        if (this.limitType) {
            accept = {
                extensions: this.limitType,
                mimeTypes: this.mimeTypes
            };
        }

        this._fileMD5 = {};
        if (this.chunked && !this._isInit) {
            this._hasFinishedList = {};

            // 注册事件是全局的，只需要注册一次
            if (!window.isRegWebUploader) {
                WebUploader.Uploader.register({
                    'before-send-file': 'preupload',
                    'before-send': 'checkchunk',
                    'after-send-file': 'finished'
                }, {
                    preupload: function (file) {
                        var me = this,
                            owner = this.owner,
                            server = me.options.server,
                            deferred = WebUploader.Deferred(),

                            // 通过file获取到触发上传的上传控件
                            $refer = $(file.source._refer),
                            $upload = $refer.closest('.mini-webuploader');

                        that = mini.getAndCreate($upload[0]);

                        if (that.chunked) {
                            owner.md5File(file.source)

                                // 如果读取出错了，则通过reject告诉webuploader文件上传出错。
                                .fail(function () {
                                    deferred.reject();
                                })

                                // md5值计算完成
                                .then(function (md5) {

                                    // 记录下文件的md5，以备上传完成时使用。
                                    that._fileMD5[file.id] = md5;

                                    // 在分片情况下生成一个唯一id，以方便后端管理临时文件
                                    file.uuid = UUID();

                                    var e = {
                                        url: server,
                                        data: {
                                            fileMD5: md5,
                                            fileName: file.name,
                                            fileSize: file.size,
                                            uploadGuid: file.uuid
                                        }

                                    };

                                    that._onBeforeMd5File(e);

                                    // 与服务端验证
                                    $.ajax(e.url, {
                                        dataType: 'json',
                                        data: e.data,
                                        type: 'post',
                                        success: function (response) {

                                            that._onMd5File(response, file);

                                            // 接受此promise, webuploader接着往下走。
                                            deferred.resolve();
                                        },
                                        error: function() {
                                            deferred.reject();
                                            if($.ajaxSettings.error) {
                                                $.ajaxSettings.error.apply(this, arguments);
                                            }
                                        }
                                    });
                                });

                            return deferred.promise();
                        }

                    },

                    checkchunk: function (block) {
                        if (that.chunked) {
                            var chunkIndex = ',' + block.chunk + ',',
                                deferred = $.Deferred();

                            if (that._existFileParts.indexOf(chunkIndex) > -1) {
                                deferred.reject();
                            } else {
                                deferred.resolve();
                            }

                            return deferred.promise();
                        }
                    },

                    finished: function (file) {
                        var deferred = WebUploader.Deferred();

                        if (that.chunked) {
                            // 之前已上传完成的不用再发已完成请求了
                            if (that._hasFinishedList[file.id]) {
                                that._hasFinishedList[file.id] = false;
                                delete that._hasFinishedList[file.id];

                                return;
                            }
                            var e = {
                                url: that.uploadUrl,
                                data: {
                                    fileMD5: that._fileMD5[file.id],
                                    fileName: file.name,
                                    fileSize: file.size,
                                    uploadGuid: file.uuid,
                                    contentType: file.type
                                }

                            };
                            that._onBeforeMd5FileFinished(e);

                            // 告诉服务端验文件已发完
                            $.ajax(e.url, {
                                dataType: 'json',
                                data: e.data,
                                type: 'post',
                                success: function (response) {

                                    that._onMd5FileFinished(response, file);

                                    delete that._fileMD5[file.id];

                                },
                                error: function() {
                                    deferred.reject();
                                    if($.ajaxSettings.error) {
                                        $.ajaxSettings.error.apply(this, arguments);
                                    }
                                }
                            });
                        }
                    }
                });

                window.isRegWebUploader = true;
            }


        } else if (this.needMD5) {
            WebUploader.Uploader.register({
                'before-send-file': 'preupload'
            }, {
                preupload: function (file) {
                    var me = this,
                        owner = this.owner,
                        deferred = WebUploader.Deferred();

                    owner.md5File(file.source)

                        // 如果读取出错了，则通过reject告诉webuploader文件上传出错。
                        .fail(function () {
                            deferred.reject();
                        })

                        // md5值计算完成
                        .then(function (md5) {

                            // 记录下文件的md5，以备上传完成时使用。
                            that._fileMD5[file.id] = md5;

                            // 接受此promise, webuploader接着往下走。
                            deferred.resolve();

                        });

                    return deferred.promise();
                }
            });
        }
        // 对未安装flash的IE9及以下浏览器给出安装flash的提示
        try {
            this._uploader = WebUploader.create({
                // swf文件路径
                swf: this.externalSrc + 'webuploader/Uploader.swf',

                // 文件接收服务端。
                server: this.uploadUrl,

                // 选择文件的按钮。
                // pick: this._picker,
                // fileNumLimit为1时，应该设置其不能多选
                pick: {
                    id: this._picker,
                    multiple: this.fileNumLimit == 1 ? false : true
                },

                // 是否自动上传
                auto: this.auto,

                // 最大文件总数量
                fileNumLimit: this.fileNumLimit,

                // 最大文件总大小
                fileSizeLimit: this.fileSizeLimit * 1024,

                // 单个文件最大大小
                fileSingleSizeLimit: this.fileSingleSizeLimit * 1024,

                // 可接受的文件类型
                accept: accept,

                // 是否要分片处理大文件上传
                chunked: this.chunked,

                // 如果要分片，分多大一片
                chunkSize: this.chunkSize * 1024,

                // 如果某个分片由于网络问题出错，允许自动重传多少次
                chunkRetry: this.chunkRetry,

                // 压缩
                compress: this.compress,

                //  是否不去重，默认为undefined，即不可上传文件名字、文件大小和最后修改时间来生成hash Key相同的文件
                //                              为true时表示可上传相同文件。
                duplicate: this.duplicate,

                timeout: this.timeout
            });
        } catch (e) {
            if (e.message == 'Runtime Error') {
                // IE9以下，且未安装FLASH时，提示用户下载安装
                if (mini.isIE9 || mini.isIE8 || mini.isIE7 || mini.isIE6) {
                    try {
                        new ActiveXObject('ShockwaveFlash.ShockwaveFlash');
                    } catch (e) {
                        that.el.innerHTML = '<a class="noflash" title="要使用上传功能，请下载安装Falsh后，刷新页面" href="http://get.adobe.com/flashplayer/" target="_blank">初始化错误</a>';
                        mini.showPageWarning({
                            html: '检测到您的系统未安装Flash，上传功能不可用。请<a href="http://get.adobe.com/flashplayer/" target="_blank">下载安装Falsh</a>后，刷新页面'
                        });
                    }


                }

            } else {
                throw e;
            }
            return;
        }
        // END

        this._uploader.on('beforeFileQueued', function (file) {
            return that._beforeFileQueued(file);

        }).on('filesQueued', function (files) {
            that._onFilesQueued(files);

        }).on('fileDequeued', function (file) {
            that._onFileDequeued(file);

        }).on('reset', function () {
            that._onReset();

        }).on('startUpload', function () {
            that._onStartUpload();

        }).on('stopUpload', function () {
            that._onStopUpload();

        }).on('uploadFinished', function () {
            that._onUploadFinished();

        }).on('uploadStart', function (file) {
            that._onUploadStart(file);

        }).on('uploadBeforeSend', function (object, data, headers) {
            // 当某个文件的分块在发送前触发，主要用来询问是否要添加附带参数，大文件在开起分片上传的前提下此事件可能会触发多次。
            // object {Object}
            // data {Object}默认的上传参数，可以扩展此对象来控制上传参数。
            // headers {Object}可以扩展此对象来控制上传头部。
            that._onUploadBeforeSend(object, data, headers);

        }).on('uploadAccept', function (object, ret) {
            // 当某个文件上传到服务端响应后，会派送此事件来询问服务端响应是否有效。如果此事件handler返回值为false, 则此文件将派送server类型的uploadError事件。
            // object {Object}
            // ret {Object}服务端的返回数据，json格式，如果服务端不是json格式，从ret._raw中取数据，自行解析。
            return that._onUploadAccept(object, ret);

        }).on('uploadProgress', function (file, percentage) {
            that._onUploadProgress(file, percentage);

        }).on('uploadSuccess', function (file, response) {
            that._onUploadSuccess(file, response);

        }).on('uploadError', function (file, reason) {
            that._onUploadError(file, reason);

        }).on('uploadComplete', function (file) {
            that._onUploadComplete(file);

        }).on('all', function (type) {
            // 控制状态
            if (type === 'startUpload') {
                that.state = 'uploading';
            } else if (type === 'stopUpload') {
                that.state = 'paused';
            } else if (type === 'uploadFinished') {
                that.state = 'done';
            }

            // 非自动上传，根据状态调整上传按钮的显示文字
            if (!that.auto && that.state === 'uploading') {
                that._uploadBtn.setText(that.pauseText);
            } else {
                that._uploadBtn.setText(that.startText);
            }

        }).on('error', function (type) {
            // 构建出错信息
            switch (type) {
                case 'Q_EXCEED_NUM_LIMIT':
                    that._errorContent = String.format(that.numLimitErrorText, that.fileNumLimit);
                    break;
                case 'Q_EXCEED_SIZE_LIMIT':
                    that._errorContent = String.format(that.sizeLimitErrorText, that.fileSizeLimit);
                    break;
                case 'Q_TYPE_DENIED':
                    that._errorContent = String.format(that.typeDeniedErrorText, that.limitType);
                    break;
                case 'F_EXCEED_SIZE':
                    that._errorContent = String.format(that.sizeErrorText, that.fileSingleSizeLimit);
                    break;
                case 'Q_EMPTY_FILE':
                    that._errorContent = that.emptyFileErrorText;
                    break;
                case 'F_DUPLICATE':
                    that._errorContent = that.duplicateErrorText;
                    break;
            }

        }).on('ready', function () {
            if (!that.enabled) {
                that._uploader.disable();
            }

            that.fire('init', {
                sender: that,
                type: "init"
            });
        });

        // 非自动上传，绑定上传按钮的点击事件
        if (!this.auto) {
            this._uploadBtn.on('click', function () {
                if (that.state === 'uploading') {
                    that._uploader.stop(true);
                } else {
                    that._uploader.upload();
                }
            });
        } else {
            // 自动上传，隐藏上传按钮
            this._uploadBtn.hide();
        }


        // 初始化完，显示控件
        this._buttons.style.visibility = 'visible';
        this._isInit = true;
    },

    getFileList: function () {
        return this._fileList;
    },

    getUploader: function () {
        // 由于初始化可能是异步的，this._uploader不确定什么时候初始化完成
        // 这里先暂时用等待1秒
        // Ugly code 待优化
        /**
         * 下面这段代码没有任何实际意义只是跑了1s的死循环而已
         * 因为这段代码执行中一致占据进程，如果调用的时候初始化未完成，则永远是未完成状态
         */
        // if (!this._uploader) {
        //     var start = Date.now(),
        //         diff = 0;
        //     while (!this._uploader && diff < 1) {
        //         diff = new Date(Date.now() - start).getSeconds();
        //     }
        // }
        return this._uploader;
    },
    /**
     * 获取内部原生uploader
     * @param {Fucntion/undefined} callback 获取成功的触发的回调函数，参数为获取到的uploader
     * @return {Promise} jQuery模拟的Promise
     */
    getUploaderPromise: function (callback) {
        var that = this,
            dtd = jQuery.Deferred(),
            reGetCount = 0;

        function _getUploader() {
            // 超时直接判定初始化失败 暂定50次 即一秒
            if (reGetCount++ > 50) return dtd.reject(new Error('上传控件初始化超时！'));
            
            var uploader = that._uploader;
            // 已经存在则成功 否则20ms后重试
            if (uploader) {
                setTimeout(function () {
                    dtd.resolve(uploader);
                    if (typeof callback === 'function') {
                        callback(uploader);
                    }
                });
            } else {
                setTimeout(_getUploader, 20);
            }
        }

        _getUploader();

        return dtd.promise();
    },

    retry: function (file) {
        this._uploader.retry(file);
    },

    removeFile: function (file) {
        this._uploader.removeFile(file, true);
    },

    clearFile: function () {
        var files = this._uploader.getFiles();

        for (var i = files.length - 1; i >= 0; i--) {
            this.removeFile(files[i]);
        }
    },

    refresh: function () {
        this._uploader.refresh();
    },
    // 当文件被加入队列之前触发，此事件的handler返回值为false，则此文件不会被添加进入队列。
    _beforeFileQueued: function (file) {
        if (this._events["beforefilequeued"]) {
            var event = {
                source: this,
                sender: this,
                type: 'beforefilequeued',
                file: file,
                cancel: false
            };

            this.fire("beforefilequeued", event);

            if (event.cancel) {
                return false;
            } else {
                return true;
            }
        }
    },
    // 当有文件添加进来的时候
    _onFilesQueued: function (files) {
        // 如果有出错信息，则显示
        if (this._errorContent) {
            mini.alert(this._errorContent);
        }
        this._errorContent = "";

        this.fire("filesqueued", {
            files: files
        });
    },
    // 当文件被移除队列后触发
    _onFileDequeued: function (file) {
        this.fire("filedequeued", {
            file: file
        });
    },
    // 当 uploader 被重置的时候触发
    _onReset: function () {
        this.fire("reset");
    },

    // 当开始上传流程时触发
    _onStartUpload: function () {
        this.fire("startupload");
    },
    // 当上传流程暂停时触发
    _onStopUpload: function () {
        this.fire("stopupload");
    },
    // 当所有文件上传结束时触发
    _onUploadFinished: function () {
        this.fire("uploadfinished");
    },
    // 某个文件开始上传前触发
    _onUploadStart: function (file) {

        this.fire("uploadstart", {
            file: file
        });
    },
    // 当某个文件的分块在发送前触发，主要用来询问是否要添加附带参数，大文件在开起分片上传的前提下此事件可能会触发多次
    _onUploadBeforeSend: function (object, data, headers) {
        // 非分片并且指定needMD5的，上传参数中需加文件的MD5值
        if (!this.chunked && this.needMD5) {
            data.fileMD5 = this._fileMD5[data.id];
            delete this._fileMD5[data.id];
        }
        this.fire("uploadbeforesend", {
            object: object,
            data: data,
            headers: headers
        });
    },
    // 当某个文件上传到服务端响应后，会派送此事件来询问服务端响应是否有效。如果此事件handler返回值为false, 则此文件将派送server类型的uploadError事件。
    _onUploadAccept: function (object, ret) {
        if (this._events['uploadaccept']) {
            var event = {
                source: this,
                sender: this,
                type: 'uploadaccept',
                object: object,
                ret: ret,
                cancel: false
            };
            this.fire('uploadaccept', event);

            if (event.cancel) {
                return false;
            } else {
                return true;
            }
        }
    },
    // 文件上传过程中触发。
    _onUploadProgress: function (file, percentage) {

        this.fire("uploadprogress", {
            file: file,
            percentage: percentage
        });
    },
    _onUploadSuccess: function (file, ret) {
        this.fire("uploadsuccess", {
            file: file,
            ret: ret
        });
    },
    _onUploadError: function (file, reason) {
        this.fire("uploaderror", {
            file: file,
            reason: reason
        });
    },
    _onUploadComplete: function (file) {
        // jQuery('#' + file.id).find('.mini-uploader-progressbar').fadeOut();

        this.fire("uploadcomplete", {
            file: file
        });
    },

    _onBeforeMd5File: function (e) {
        this.fire('beforemd5file', e);
    },
    _onBeforeMd5FileFinished: function (e) {
        this.fire('beforemd5filefinished', e);
    },
    _existFileParts: '',
    _onMd5File: function (response, file) {
        // 如果验证已经上传过
        if (response.fileFinished) {
            this._uploader.skipFile(file);
            this._hasFinishedList[file.id] = true;

        } else {
            this._existFileParts = response.existFileParts || '';
            this._existFileParts = ',' + this._existFileParts + ',';
        }
    },

    _onMd5FileFinished: function (response, file) {

    },
    /**
     *
     * function setUploadUrl(uploadUrl)
     * @member mini.WebUploader
     * @param {String} uploadUrl
     *
     */
    setUploadUrl: function (uploadUrl) {
        this.uploadUrl = uploadUrl;
        if (this._uploader) {
            this._uploader.option("server", uploadUrl);
        }
    },
    /**
     *
     * function getUploadUrl()
     * @member mini.WebUploader
     * @returns {String}
     *
     */
    getUploadUrl: function () {
        return this.uploadUrl;
    },
    /**
     *
     * function setAuto(auto)
     * @member mini.WebUploader
     * @param {Boolen} auto
     *
     */
    setAuto: function (auto) {
        this.auto = auto;
        if (this._uploader) {
            this._uploader.option("auto", auto);
        }
    },
    /**
     *
     * function getAuto()
     * @member mini.WebUploader
     * @returns {Boolen}
     *
     */
    getAuto: function () {
        return this.auto;
    },
    /**
     * defaultCompres 默认压缩配置
     * @type {Object}
     */
    defaultCompres: {
        width: 1600,
        height: 1600,

        // 图片质量，只有type为`image/jpeg`的时候才有效。
        quality: 90,

        // 是否允许放大，如果想要生成小图的时候不失真，此选项应该设置为false.
        allowMagnify: false,

        // 是否允许裁剪。
        crop: false,

        // 是否保留头部meta信息。
        preserveHeaders: true,

        // 如果发现压缩后文件大小比原来还大，则使用原来图片
        // 此属性可能会影响图片自动纠正功能
        noCompressIfLarger: false,

        // 单位字节，如果图片大小小于此值，不会采用压缩。
        compressSize: 0
    },
    /**
     * function setCompress(compress) 设置是否压缩
     * @param {Boolea]} compress
     */
    setCompress: function (compress) {
        this.compress = compress ? this.defaultCompres : false;

        if (this._uploader) {
            this._uploader.option("compress", this.compress);
        }
    },
    /**
     * function getCompress ()
     * @return {Boolean} [description]
     */
    getCompress: function () {
        return this.compress ? true : false;
    },
    /**
     *
     * function setFileNumLimit(fileNumLimit)
     * @member mini.WebUploader
     * @param {int} fileNumLimit
     *
     */
    setFileNumLimit: function (fileNumLimit) {
        this.fileNumLimit = fileNumLimit;
        if (this._uploader) {
            this._uploader.option("fileNumLimit", fileNumLimit);
        }
    },
    /**
     *
     * function getFileNumLimit()
     * @member mini.WebUploader
     * @returns {int}
     *
     */
    getFileNumLimit: function () {
        return this.fileNumLimit;
    },
    /**
     *
     * function setFileSizeLimit(fileSizeLimit)
     * @member mini.WebUploader
     * @param {int} fileSizeLimit
     *
     */
    setFileSizeLimit: function (fileSizeLimit) {
        this.fileSizeLimit = fileSizeLimit;
        if (this._uploader) {
            this._uploader.option("fileSizeLimit", fileSizeLimit * 1024);
        }
    },
    /**
     *
     * function getFileSizeLimit()
     * @member mini.WebUploader
     * @returns {int}
     *
     */
    getFileSizeLimit: function () {
        return this.fileSizeLimit;
    },
    /**
     *
     * function setFileSingleSizeLimit(fileSingleSizeLimit)
     * @member mini.WebUploader
     * @param {int} fileSingleSizeLimit
     *
     */
    setFileSingleSizeLimit: function (fileSingleSizeLimit) {
        this.fileSingleSizeLimit = fileSingleSizeLimit;
        if (this._uploader) {
            this._uploader.option("fileSingleSizeLimit", fileSingleSizeLimit * 1024);
        }
    },
    /**
     *
     * function getFileSingleSizeLimit()
     * @member mini.WebUploader
     * @returns {int}
     *
     */
    getFileSingleSizeLimit: function () {
        return this.fileSingleSizeLimit;
    },
    // /**
    //  *
    //  * function setLimitType(limitType)
    //  * @member mini.WebUploader
    //  * @param {String} limitType
    //  *
    //  */
    // setLimitType: function(limitType) {
    //     this.limitType = limitType;
    //     if (this._uploader) {
    //         this._uploader.option("accept", {
    //             extensions: this.limitType
    //         });
    //     }
    // },
    /**
     *
     * function getLimitType()
     * @member mini.WebUploader
     * @returns {String}
     *
     */
    getLimitType: function () {
        return this.limitType;
    },

    setLimitType: function (limitType) {
        if (this.limitType != limitType) {
            this.limitType = limitType;

            if (this._uploader) {
                if (!this._uploader.options.accept) {
                    this._uploader.options.accept = [{}];
                }
                this._uploader.options.accept[0].extensions = this.limitType;

                 // webuploader的设置accept属性存在bug，必须要执行下面这句
                 this._uploader._init({
                    accept: this._uploader.options.accept
                });

                // // flash版本下设置limitType是无效的，必须要重新生成一遍
                // if (this._uploader.predictRuntimeType() == "flash") {
                //     var options = this._uploader.options;
                //     this._uploader.destroy();
                //     this._picker.innerHTML = this.pickerText;
                //     this._createUploader();
                // } else {

                //     // webuploader的设置accept属性存在bug，必须要执行下面这句
                //     this._uploader._init({
                //         accept: this._uploader.options.accept
                //     });
                // }

            }
        }
    },
    /**
     *
     * function getMimeTypes()
     * @member mini.WebUploader
     * @returns {String}
     *
     */
    getMimeTypes: function () {
        return this.mimeTypes;
    },
    setMimeTypes: function (mimeTypes) {
        if (this.mimeTypes != mimeTypes) {
            this.mimeTypes = mimeTypes;

            if (this._uploader) {
                if (!this._uploader.options.accept) {
                    this._uploader.options.accept = [{}];
                }
                this._uploader.options.accept[0].mimeTypes = this.mimeTypes;
                // 非flash模式下，需要额外设置input的accept属性才能生效
                if (this._uploader.predictRuntimeType() != "flash") {
                	var _uploader = this._uploader;
                	function setAccept(accept) {
                		var $input = jQuery(_uploader.options.pick.id).find('input[type="file"]');
                		
                		if($input.length) {
                    		$input.attr('accept', accept);
                    	} else {
                    		setTimeout(function(){
                    			setAccept(accept);
                    		}, 100);
                    	}
                	}
                	setAccept(this.mimeTypes);
                	
                }
            }
        }
    },
    setVisible: function (value) {
        this.visible = value;
        // ie8/9下直接隐藏会导致上传报错
        if (this.el) {
            if (value) {
                mini.removeClass(this.el, 'invisible');
                mini.removeClass(this._buttons, 'webuploader-element-invisible');
            } else {
                mini.addClass(this.el, 'invisible');
                mini.addClass(this._buttons, 'webuploader-element-invisible');
            }
        }
    },
    setEnabled: function (value) {
        this.enabled = value;
        if (this.enabled) {
            this.removeCls(this._disabledCls);
            if (this._uploader) {
                this._uploader.enable();
            }
        } else {
            this.addCls(this._disabledCls);
            if (this._uploader) {
                this._uploader.disable();
            }
        }
        this._doReadOnly();
    },
    /**
     * [getDuplicate 获取是否不去重]
     * @return {[type]} [是否不去重]
     */
    getDuplicate: function () {
        return this.duplicate;
    },
    /**
     * [setDuplicate 设置是否不去重]
     * @param {[Boolean]} duplicate [是否不去重，]
     * 此属性只能初始化时一次指定，设置无效，因此暂时注释掉
     */
    // setDuplicate: function(duplicate) {
    //     this.duplicate = duplicate;
    //     if (this._uploader) {
    //         this._uploader.option('duplicate', this.duplicate);
    //     }
    // },
    setPickerText: function (text) {
        this.pickerText = text;
        var child = this._picker.children[0];
        if(child) {
            child.innerHTML = text;
        } else {
            this._picker.innerHTML = text;
        }
        
    },
    getPickerText: function () {
        return this.pickerText;
    },
    getAttrs: function (el) {
        var attrs = mini.WebUploader.superclass.getAttrs.call(this, el);
        attrs.text = el.innerHTML;
        mini._ParseString(el, attrs, ["uploadUrl", "limitType", "mimeTypes", "onbeforefilequeued",
            "onfilesqueued", "onfiledequeued", "onreset", "onstartupload", "onstopupload",
            "onuploadfinished", "onuploadstart", "onuploadbeforesend", "onuploadaccept", "onuploadprogress",
            "onuploadsuccess", "onuploaderror", "onuploadcomplete", "pickerText", "onbeforemd5file", "onbeforemd5filefinished", "oninit"
        ]);
        mini._ParseBool(el, attrs, ["auto", "chunked", "compress", "needMD5", 'duplicate']);
        mini._ParseInt(el, attrs, ["fileNumLimit", "fileSizeLimit", "fileSingleSizeLimit", "chunkSize", "chunkRetry", "timeout"]);

        return attrs;
    }
});
mini.regClass(mini.WebUploader, "webuploader");