[
  {
    "label": "miGet",
    "insertText": "mini.get(\"id\");",
    "documentation": "根据id获取控件对象"
  },
  {
    "label": "miGetByName",
    "insertText": "mini.getByName(\"name\", parentDom);",
    "documentation": "根据name获取单个控件，parent:可选,限定获取控件的范围。"
  },
  {
    "label": "miGetsByName",
    "insertText": "mini.getsbyName(\"name\", parentDom);",
    "documentation": "根据name获取多个控件，parent:可选,限定获取控件的范围。"
  },
  {
    "label": "miParse",
    "insertText": "mini.parse(el);",
    "documentation": "将html标签解析为miniui控件, el：可选，限定解析范围"
  },
  {
    "label": "miAddCls",
    "insertText": "mini.get(\"id\").addCls(\"classname\");",
    "documentation": "增加样式类"
  },
  {
    "label": "miRemoveCls",
    "insertText": "mini.get(\"id\").removeCls(\"classname\");",
    "documentation": "去除样式类"
  },
  {
    "label": "miShow",
    "insertText": "mini.get(\"id\").show();",
    "documentation": "显示控件"
  },
  {
    "label": "miHide",
    "insertText": "mini.get(\"id\").hide();",
    "documentation": "隐藏控件"
  },
  {
    "label": "miEnable",
    "insertText": "mini.get(\"id\").enable();",
    "documentation": "启用控件"
  },
  {
    "label": "miDisable",
    "insertText": "mini.get(\"id\").disable();",
    "documentation": "禁用控件"
  },
  {
    "label": "miOn",
    "insertText": "mini.get(\"id\").on(\"event\", function (e) {\n\t// to do something\n});",
    "documentation": "监听事件, event: 事件类型 "
  },
  {
    "label": "miUn",
    "insertText": "mini.get(\"id\").un(\"event\", function (e) {\n\t// to do something\n});",
    "documentation": "取消监听事件, event: 事件类型"
  },
  {
    "label": "miFocus",
    "insertText": "mini.get(\"id\").focus();",
    "documentation": "获取焦点"
  },
  {
    "label": "miBlur",
    "insertText": "mini.get(\"id\").blur();",
    "documentation": "失去焦点"
  },
  {
    "label": "miSetData",
    "insertText": "mini.get(\"id\").setData (data );",
    "documentation": "控件设值"
  },
  {
    "label": "miGetData",
    "insertText": "mini.get(\"id\").getData( data );",
    "documentation": "控件取值"
  },
  {
    "label": "miSetValue",
    "insertText": "mini.get(\"id\").setValue( value );",
    "documentation": "控件设值"
  },
  {
    "label": "miGetValue",
    "insertText": "mini.get(\"id\").getValue( value );",
    "documentation": "控件取值"
  },
  {
    "label": "miLoad",
    "insertText": "mini.get(\"id\").load(params, successFn, failFn, completeFn);",
    "documentation": "加载数据，successFn：成功回调函数，failFn：失败回调函数"
  },
  {
    "label": "miReload",
    "insertText": "mini.get(\"id\").reload(successFn, failFn, completeFn);",
    "documentation": "重新加载数据，successFn：成功回调函数，failFn：失败回调函数"
  },
  {
    "label": "miFrozenColumns",
    "insertText": "mini.get(\"id\").frozenColumns(${1: 0}, finishColumnIndex);",
    "documentation": "锁定列，startColumnIndex：开始列，一般固定为0，finishColumnIndex：结束列"
  },
  {
    "label": "miUnFrozenColumns",
    "insertText": "mini.get(\"id\").unFrozenColumns();",
    "documentation": "取消锁定列"
  },
  {
    "label": "miMergeCells",
    "insertText": "mini.get(\"id\").mergeCells([{rowIndex: 0, columnIndex: 0, rowSpan: 1, colSpan: 2}]);",
    "documentation": "合并单元格"
  },
  {
    "label": "miMergeColumns",
    "insertText": "mini.get(\"id\").mergeColumns(${0:[\"columnName\"]});",
    "documentation": "自动合并相同值单元格"
  },
  {
    "label": "miGetChanges",
    "insertText": "mini.get(\"id\").getChanges(\"added|modified|removed\", onlyField);",
    "documentation": "获取增加、删除、修改后的数据集合, onlyField: 为true，modified的行数据将只返回修改的字段"
  },
  {
    "label": "miBeginEditCell",
    "insertText": "mini.get(\"id\").beginEditCell(row,column);",
    "documentation": "对当前选中单元格启动编辑，row为单元格所在的行对象。\n column为单元格所在列对象，可以是一个完整的列对象，也可以是列的name值，也可以是列的索引。"
  },
  {
    "label": "miCancelEdit",
    "insertText": "mini.get(\"id\").cancelEdit();",
    "documentation": "取消所有行编辑。"
  },
  {
    "label": "miCommitEditRow",
    "insertText": "mini.get(\"id\").commitEditRow(row);",
    "documentation": "提交指定行编辑,row为行对象，可以是一个完整的行对象，也可以是行的索引。"
  },
  {
    "label": "miCommitEdit",
    "insertText": "mini.get(\"id\").commitEdit();",
    "documentation": "提交所有行编辑。"
  },
  {
    "label": "miBeginEditRow",
    "insertText": "mini.get(\"id\").beginEditRow(row);",
    "documentation": "启动行编辑,row为行对象，可以是一个完整的行对象，也可以是行的索引。"
  },
  {
    "label": "miCancelEditRow",
    "insertText": "mini.get(\"id\").cancelEditRow(row);",
    "documentation": "取消指定行编辑,row为行对象，可以是一个完整的行对象，也可以是行的索引。"
  },
  {
    "label": "miIsEditing",
    "insertText": "mini.get(\"id\").isEditing();",
    "documentation": "是否有行编辑。"
  },
  {
    "label": "miIsEditingRow",
    "insertText": "mini.get(\"id\").isEditingRow(row);",
    "documentation": "指定行是否处于编辑状态,row为行对象，可以是一个完整的行对象，也可以是行的索引。"
  },
  {
    "label": "miGetCellEditor",
    "insertText": "mini.get(\"id\").getCellEditor( column, row );",
    "documentation": "获取指定列和行的编辑器控件对象，row为单元格所在的行对象。\n column为单元格所在列对象，可以是一个完整的列对象，也可以是列的name值，也可以是列的索引。"
  },
  {
    "label": "miGetEditorOwnerRow",
    "insertText": "mini.get(\"id\").getEditorOwnerRow( editor );",
    "documentation": "获取编辑器属于哪一行对象。"
  },
  {
    "label": "miUpdateRow",
    "insertText": "mini.get(\"id\").updateRow( row, key, value );",
    "documentation": "更新行，row：要更新的行对象。\n key：当key为一个对象时，可实现一次更新多个字段，不需要第三个参数。当key为字符串时，表示要更新的字段名。\n value：新的值。"
  },
  {
    "label": "miRemoveRow",
    "insertText": "mini.get(\"id\").removeRow( row, autoSelect );",
    "documentation": "删除行，autoSelect为true，则删除记录后，自动选择下一条记录。"
  },
  {
    "label": "miRemoveRows",
    "insertText": "mini.get(\"id\").removeRows( rows, autoSelect );",
    "documentation": "删除多行，autoSelect为true，则删除记录后，自动选择下一条记录。"
  },
  {
    "label": "miAddRows",
    "insertText": "mini.get(\"id\").addRows( rows, index );",
    "documentation": "增加多行。"
  },
  {
    "label": "miAddRow",
    "insertText": "mini.get(\"id\").addRow( row, index );",
    "documentation": "增加行。"
  },
  {
    "label": "miIsSelected",
    "insertText": "mini.get(\"id\").isSelected( row );",
    "documentation": "是否选中行。"
  },
  {
    "label": "miGetSelecteds",
    "insertText": "mini.get(\"id\").getSelecteds();",
    "documentation": "获取所有选中的行。"
  },
  {
    "label": "miGetSelected",
    "insertText": "mini.get(\"id\").getSelected();",
    "documentation": "获取当前选中行。"
  },
  {
    "label": "miSetSelected",
    "insertText": "mini.get(\"id\").setSelected( row );",
    "documentation": "设置当前选中行。"
  },
  {
    "label": "miSelect",
    "insertText": "mini.get(\"id\").select( row, fireEvent );",
    "documentation": "选中行，fireEvent: Boolean。是否激发选择事件。"
  },
  {
    "label": "miDeselect",
    "insertText": "mini.get(\"id\").deselect( row, fireEvent );",
    "documentation": "取消选中行，fireEvent: Boolean。是否激发选择事件。"
  },
  {
    "label": "miSelectAll",
    "insertText": "mini.get(\"id\").selectAll( fireEvent );",
    "documentation": "选中所有行，fireEvent: Boolean。是否激发选择事件。"
  },
  {
    "label": "miDeselectAll",
    "insertText": "mini.get(\"id\").deselectAll( fireEvent );",
    "documentation": "取消选中所有行，fireEvent: Boolean。是否激发选择事件。"
  },
  {
    "label": "miClearSelect ",
    "insertText": "mini.get(\"id\").clearSelect( fireEvent );",
    "documentation": "取消选中所有行，fireEvent: Boolean。是否激发选择事件。"
  },
  {
    "label": "miSelects",
    "insertText": "mini.get(\"id\").selects( rows, fireEvent );",
    "documentation": "选中多行，fireEvent: Boolean。是否激发选择事件。"
  },
  {
    "label": "miDeselects",
    "insertText": "mini.get(\"id\").deselects( rows, fireEvent );",
    "documentation": "取消选中多行，fireEvent: Boolean。是否激发选择事件。"
  },
  {
    "label": "miGetRow",
    "insertText": "mini.get(\"id\").getRow( index );",
    "documentation": "获取行对象。"
  },
  {
    "label": "miGetColumn",
    "insertText": "mini.get(\"id\").getColumn( indexOrcolumnName );",
    "documentation": "获取列对象，indexOrcolumnName：列索引或列名。"
  },
  {
    "label": "miFindRow",
    "insertText": "mini.get(\"id\").findRow( function(row) {\n\tif (row.name == \"张三\") return true; \n});",
    "documentation": "通过查询函数获取行对象。"
  },
  {
    "label": "miFindRows",
    "insertText": "mini.get(\"id\").findRows( function(row) {\n\tif(row.age > 20) return true; \n});",
    "documentation": "通过查询函数获取行对象数组。"
  },
  {
    "label": "miGetRowEl",
    "insertText": "mini.get(\"id\").getRowEl( row, viewIndex );",
    "documentation": "获取行DOM对象。row: 行对象或者行索引，viewIndex=1获取锁定行，viewIndex=2获取内容行。"
  },
  {
    "label": "miGetCellEl",
    "insertText": "mini.get(\"id\").getCellEl( row, column );",
    "documentation": "获取单元格DOM对象，row: 行对象或者行索引。"
  },
  {
    "label": "miAddRowCls",
    "insertText": "mini.get(\"id\").addRowCls( row, \"clsname\" );",
    "documentation": "增加行样式, row: 行对象或者行索引, clsname：样式名"
  },
  {
    "label": "miRemoveRowCls",
    "insertText": "mini.get(\"id\").removeRowCls( row, \"clsname\" );",
    "documentation": "删除行样式, row: 行对象或者行索引, clsname：样式名"
  },
  {
    "label": "miGetNode",
    "insertText": "mini.get(\"id\").getNode( ${value });",
    "documentation": "根据值获取节点对象。"
  },
  {
    "label": "miSetNodeText",
    "insertText": "mini.get(\"id\").setNodeText( node, String );",
    "documentation": "设置节点文本。"
  },
  {
    "label": "miFindNodes",
    "insertText": "mini.get(\"id\").findNodes( function(node) {\n\tif(node.name.indexOf(\"abc\") != -1) return tru;e; \n});",
    "documentation": "查找节点数据。"
  },
  {
    "label": "miDisableNode",
    "insertText": "mini.get(\"id\").disableNode( node );",
    "documentation": "禁用节点。"
  },
  {
    "label": "miEnableNode",
    "insertText": "mini.get(\"id\").enableNode( node );",
    "documentation": "启用节点。"
  },
  {
    "label": "miSelectNode",
    "insertText": "mini.get(\"id\").selectNode( node );",
    "documentation": "选中节点。"
  },
  {
    "label": "miGetSelectedNode",
    "insertText": "mini.get(\"id\").getSelectedNode();",
    "documentation": "获取选中的节点。"
  },
  {
    "label": "miCheckNode",
    "insertText": "mini.get(\"id\").checkNode( node );",
    "documentation": "Check多选节点。"
  },
  {
    "label": "miUncheckNode",
    "insertText": "mini.get(\"id\").uncheckNode( node );",
    "documentation": "取消Check多选节点。"
  },
  {
    "label": "miCheckNodes",
    "insertText": "mini.get(\"id\").checkNodes( nodes );",
    "documentation": "Check多选多个节点。"
  },
  {
    "label": "miUncheckNodes",
    "insertText": "mini.get(\"id\").uncheckNodes( nodes );",
    "documentation": "取消Check多选多个节点。"
  },
  {
    "label": "miCheckAllNodes",
    "insertText": "mini.get(\"id\").checkAllNodes();",
    "documentation": "Check多选所有节点。"
  },
  {
    "label": "miUncheckAllNodes",
    "insertText": "mini.get(\"id\").uncheckAllNodes();",
    "documentation": "取消Check多选所有节点。"
  },
  {
    "label": "miGetCheckedNodes",
    "insertText": "mini.get(\"id\").getCheckedNodes( haveParent );",
    "documentation": "获取Check选中的多个节点，haveParent: Boolean。是否包含父节点。"
  },
  {
    "label": "miExpandNode",
    "insertText": "mini.get(\"id\").expandNode( node );",
    "documentation": "展开节点。node:节点对象，或者节点的值"
  },
  {
    "label": "miCollapseNode",
    "insertText": "mini.get(\"id\").collapseNode( node );",
    "documentation": "收缩节点。node:节点对象，或者节点的值"
  },
  {
    "label": "miExpandAll",
    "insertText": "mini.get(\"id\").expandAll();",
    "documentation": "展开所有节点。"
  },
  {
    "label": "miCollapseAll",
    "insertText": "mini.get(\"id\").collapseAll();",
    "documentation": "收缩所有节点。"
  },
  {
    "label": "miIsVisibleNode",
    "insertText": "mini.get(\"id\").isVisibleNode( node );",
    "documentation": "是否显示节点。node:节点对象，或者节点的值"
  },
  {
    "label": "miIsCheckedNode",
    "insertText": "mini.get(\"id\").isCheckedNode( node );",
    "documentation": "是否Check选中的节点。node:节点对象，或者节点的值"
  },
  {
    "label": "miIsExpandedNode",
    "insertText": "mini.get(\"id\").isExpandedNode( node );",
    "documentation": "是否展开节点。node:节点对象，或者节点的值"
  },
  {
    "label": "miIsLeaf",
    "insertText": "mini.get(\"id\").isLeaf( node );",
    "documentation": "是否叶子节点。node:节点对象，或者节点的值"
  },
  {
    "label": "miIsEnabledNode",
    "insertText": "mini.get(\"id\").isEnabledNode( node );",
    "documentation": "是否启用节点。node:节点对象，或者节点的值"
  },
  {
    "label": "miRemoveNodes",
    "insertText": "mini.get(\"id\").removeNodes( nodes );",
    "documentation": "删除多个节点。nodes:节点对象数组"
  },
  {
    "label": "miRemoveNode",
    "insertText": "mini.get(\"id\").removeNodes( node );",
    "documentation": "删除节点。node:节点对象"
  },
  {
    "label": "miAddNodes",
    "insertText": "mini.get(\"id\").addNodes( nodes, parentNode );",
    "documentation": "增加多个节点。nodes:添加节点对象数组，parentNode:父节点对象"
  },
  {
    "label": "miAddNode",
    "insertText": "mini.get(\"id\").addNode( node, index, parentNode );",
    "documentation": "增加节点。node:添加节点对象，index:位置， parentNode:父节点对象"
  }
]
